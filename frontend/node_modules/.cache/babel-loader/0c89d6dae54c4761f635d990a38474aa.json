{"ast":null,"code":"import { withDirectives as _withDirectives, resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VBtn.css\"; // Components\n\nimport { VBtnToggleSymbol } from \"../VBtnToggle/VBtnToggle.mjs\";\nimport { VIcon } from \"../VIcon/index.mjs\"; // Composables\n\nimport { makeBorderProps, useBorder } from \"../../composables/border.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { makeElevationProps, useElevation } from \"../../composables/elevation.mjs\";\nimport { makeGroupItemProps, useGroupItem } from \"../../composables/group.mjs\";\nimport { makePositionProps, usePosition } from \"../../composables/position.mjs\";\nimport { makeRoundedProps, useRounded } from \"../../composables/rounded.mjs\";\nimport { makeRouterProps, useLink } from \"../../composables/router.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { genOverlays, makeVariantProps, useVariant } from \"../../composables/variant.mjs\"; // Directives\n\nimport { Ripple } from \"../../directives/ripple/index.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { defineComponent } from \"../../util/index.mjs\";\nexport const VBtn = defineComponent({\n  name: 'VBtn',\n  directives: {\n    Ripple\n  },\n  props: {\n    flat: Boolean,\n    icon: [Boolean, String],\n    prependIcon: String,\n    appendIcon: String,\n    block: Boolean,\n    stacked: Boolean,\n    ripple: {\n      type: Boolean,\n      default: true\n    },\n    ...makeBorderProps(),\n    ...makeRoundedProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makePositionProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({\n      tag: 'button'\n    }),\n    ...makeThemeProps(),\n    ...makeVariantProps({\n      variant: 'contained'\n    })\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      borderClasses\n    } = useBorder(props);\n    const {\n      colorClasses,\n      colorStyles,\n      variantClasses\n    } = useVariant(props);\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      elevationClasses\n    } = useElevation(props);\n    const {\n      positionClasses,\n      positionStyles\n    } = usePosition(props);\n    const {\n      roundedClasses\n    } = useRounded(props);\n    const {\n      sizeClasses\n    } = useSize(props);\n    const group = useGroupItem(props, VBtnToggleSymbol, false);\n    const link = useLink(props, attrs);\n    const isDisabled = computed(() => (group == null ? void 0 : group.disabled.value) || props.disabled);\n    const isElevated = computed(() => {\n      return props.variant === 'contained' && !(props.disabled || props.flat || props.border);\n    });\n    return () => {\n      var _link$isExactActive, _slots$default;\n\n      const Tag = link.isLink.value ? 'a' : props.tag;\n      const hasColor = !group || group.isSelected.value;\n      return _withDirectives(_createVNode(Tag, {\n        \"type\": Tag === 'a' ? undefined : 'button',\n        \"class\": ['v-btn', group == null ? void 0 : group.selectedClass.value, {\n          'v-btn--active': (_link$isExactActive = link.isExactActive) == null ? void 0 : _link$isExactActive.value,\n          'v-btn--block': props.block,\n          'v-btn--disabled': isDisabled.value,\n          'v-btn--elevated': isElevated.value,\n          'v-btn--flat': props.flat,\n          'v-btn--icon': !!props.icon,\n          'v-btn--stacked': props.stacked\n        }, themeClasses.value, borderClasses.value, hasColor ? colorClasses.value : undefined, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, sizeClasses.value, variantClasses.value],\n        \"style\": [hasColor ? colorStyles.value : undefined, dimensionStyles.value, positionStyles.value],\n        \"disabled\": isDisabled.value || undefined,\n        \"href\": link.href.value,\n        \"onClick\": isDisabled.value || link.navigate || (group == null ? void 0 : group.toggle)\n      }, {\n        default: () => [genOverlays(true, 'v-btn'), !props.icon && props.prependIcon && _createVNode(VIcon, {\n          \"class\": \"v-btn__icon\",\n          \"icon\": props.prependIcon,\n          \"start\": true\n        }, null), typeof props.icon === 'boolean' ? (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots) : _createVNode(VIcon, {\n          \"class\": \"v-btn__icon\",\n          \"icon\": props.icon,\n          \"size\": props.size\n        }, null), !props.icon && props.appendIcon && _createVNode(VIcon, {\n          \"class\": \"v-btn__icon\",\n          \"icon\": props.appendIcon,\n          \"end\": true\n        }, null)]\n      }), [[_resolveDirective(\"ripple\"), !isDisabled.value && props.ripple, null]]);\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VBtnToggleSymbol","VIcon","makeBorderProps","useBorder","makeDensityProps","useDensity","makeDimensionProps","useDimension","makeElevationProps","useElevation","makeGroupItemProps","useGroupItem","makePositionProps","usePosition","makeRoundedProps","useRounded","makeRouterProps","useLink","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","genOverlays","makeVariantProps","useVariant","Ripple","computed","defineComponent","VBtn","name","directives","props","flat","Boolean","icon","String","prependIcon","appendIcon","block","stacked","ripple","type","default","tag","variant","setup","attrs","slots","_ref","themeClasses","borderClasses","colorClasses","colorStyles","variantClasses","densityClasses","dimensionStyles","elevationClasses","positionClasses","positionStyles","roundedClasses","sizeClasses","group","link","isDisabled","disabled","value","isElevated","border","Tag","isLink","hasColor","isSelected","undefined","selectedClass","isExactActive","_link$isExactActive","href","navigate","toggle","_slots$default","size"],"sources":["../../../src/components/VBtn/VBtn.tsx"],"sourcesContent":["// Styles\nimport './VBtn.sass'\n\n// Components\nimport { VBtnToggleSymbol } from '@/components/VBtnToggle/VBtnToggle'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeRouterProps, useLink } from '@/composables/router'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed } from 'vue'\nimport { defineComponent } from '@/util'\n\nexport const VBtn = defineComponent({\n  name: 'VBtn',\n\n  directives: { Ripple },\n\n  props: {\n    flat: Boolean,\n    icon: [Boolean, String],\n    prependIcon: String,\n    appendIcon: String,\n\n    block: Boolean,\n    stacked: Boolean,\n\n    ripple: {\n      type: Boolean,\n      default: true,\n    },\n\n    ...makeBorderProps(),\n    ...makeRoundedProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeGroupItemProps(),\n    ...makePositionProps(),\n    ...makeRouterProps(),\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'button' }),\n    ...makeThemeProps(),\n    ...makeVariantProps({ variant: 'contained' } as const),\n  },\n\n  setup (props, { attrs, slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { colorClasses, colorStyles, variantClasses } = useVariant(props)\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { positionClasses, positionStyles } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n    const { sizeClasses } = useSize(props)\n    const group = useGroupItem(props, VBtnToggleSymbol, false)\n    const link = useLink(props, attrs)\n    const isDisabled = computed(() => group?.disabled.value || props.disabled)\n    const isElevated = computed(() => {\n      return props.variant === 'contained' && !(props.disabled || props.flat || props.border)\n    })\n\n    return () => {\n      const Tag = (link.isLink.value) ? 'a' : props.tag\n      const hasColor = !group || group.isSelected.value\n\n      return (\n        <Tag\n          type={ Tag === 'a' ? undefined : 'button' }\n          class={[\n            'v-btn',\n            group?.selectedClass.value,\n            {\n              'v-btn--active': link.isExactActive?.value,\n              'v-btn--block': props.block,\n              'v-btn--disabled': isDisabled.value,\n              'v-btn--elevated': isElevated.value,\n              'v-btn--flat': props.flat,\n              'v-btn--icon': !!props.icon,\n              'v-btn--stacked': props.stacked,\n            },\n            themeClasses.value,\n            borderClasses.value,\n            hasColor ? colorClasses.value : undefined,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            sizeClasses.value,\n            variantClasses.value,\n          ]}\n          style={[\n            hasColor ? colorStyles.value : undefined,\n            dimensionStyles.value,\n            positionStyles.value,\n          ]}\n          disabled={ isDisabled.value || undefined }\n          href={ link.href.value }\n          v-ripple={[\n            !isDisabled.value && props.ripple,\n            null,\n            props.icon ? ['center'] : null,\n          ]}\n          onClick={ isDisabled.value || link.navigate || group?.toggle }\n        >\n          { genOverlays(true, 'v-btn') }\n\n          { !props.icon && props.prependIcon && (\n            <VIcon\n              class=\"v-btn__icon\"\n              icon={ props.prependIcon }\n              start\n            />\n          ) }\n\n          { typeof props.icon === 'boolean'\n            ? slots.default?.()\n            : (\n              <VIcon\n                class=\"v-btn__icon\"\n                icon={ props.icon }\n                size={ props.size }\n              />\n            )\n          }\n\n          { !props.icon && props.appendIcon && (\n            <VIcon\n              class=\"v-btn__icon\"\n              icon={ props.appendIcon }\n              end\n            />\n          ) }\n        </Tag>\n      )\n    }\n  },\n})\n\nexport type VBtn = InstanceType<typeof VBtn>\n"]},"metadata":{},"sourceType":"module"}