{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nvar _templateObject, _templateObject2;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n/**\n * @private\n * @class ConditionCollection\n */\n\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, ConditionCollection);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.filteringStates = new IndexToValueMap();\n\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n\n      return true;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n\n      var conditionsForColumn = this.getConditions(column);\n\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn;\n      });\n    }\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[0],\n            _ref4$ = _ref4[1],\n            operation = _ref4$.operation,\n            conditions = _ref4$.conditions;\n\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n                args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n\n      return conditions.length > 0;\n    }\n    /**\n     * Destroy object.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n\n  return ConditionCollection;\n}();\n\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/plugins/filters/conditionCollection.mjs"],"names":["_templateObject","_templateObject2","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_taggedTemplateLiteral","strings","raw","freeze","defineProperties","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","arrayEach","arrayMap","arrayReduce","mixin","toSingleLine","localHooks","getCondition","OPERATION_ID","OPERATION_AND","operations","getOperationFunc","isUndefined","LinkedPhysicalIndexToValueMap","IndexToValueMap","MAP_NAME","ConditionCollection","hot","isMapRegistrable","arguments","undefined","filteringStates","columnIndexMapper","registerMap","init","getNumberOfIndexes","isEmpty","getFilteredColumns","isMatch","column","_stateForColumn$condi","stateForColumn","getValueAtIndex","conditions","operation","isMatchInConditions","operationType","addCondition","conditionDefinition","position","localeForColumn","getCellMeta","locale","args","v","toLocaleLowerCase","command","runLocalHooks","columnType","getOperation","Error","conditionsForColumn","getConditions","setValueAtIndex","func","_this$filteringStates","_this$filteringStates2","_this$filteringStates3","getEntries","map","_ref","_ref2","physicalColumn","getColumnStackPosition","indexOf","exportAllConditions","allConditions","_ref3","_ref4","_ref4$","_ref5","importAllConditions","_this","clean","stack","condition","removeConditions","clearValue","clear","hasConditions","some","destroy","unregisterMap","clearLocalHooks"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nvar _templateObject, _templateObject2;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n/**\n * @private\n * @class ConditionCollection\n */\n\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, ConditionCollection);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.filteringStates = new IndexToValueMap();\n\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n\n      return true;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n\n      var conditionsForColumn = this.getConditions(column);\n\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn;\n      });\n    }\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[0],\n            _ref4$ = _ref4[1],\n            operation = _ref4$.operation,\n            conditions = _ref4$.conditions;\n\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n                args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n\n      return conditions.length > 0;\n    }\n    /**\n     * Destroy object.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n\n  return ConditionCollection;\n}();\n\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;"]},"metadata":{},"sourceType":"module"}