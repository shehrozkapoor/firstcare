{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n\n  privateMap.set(obj, value);\n}\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n\n  _classApplyDescriptorSet(receiver, descriptor, value);\n\n  return value;\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar _rootNodes = /*#__PURE__*/new WeakMap();\n\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\n\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n\n\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n\n      return node;\n    }\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n\n      if (!rootNode) {\n        return;\n      } // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n\n\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n\n      var columnCursor = 0;\n      var treeNode; // Collect all parent nodes that depend on the collapsed node.\n\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n            origColspan = _node$data.origColspan,\n            nodeHeaderLevel = _node$data.headerLevel;\n\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n\n      var columnIndex = 0;\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            colspan = _ref2[1].data.colspan; // Map tree range (colspan range/width) into visual column index of the root node.\n\n\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n\n        columnIndex += colspan;\n      });\n    }\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n\n      var columnIndex = 0;\n\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n\n        var rootNode = new TreeNode();\n\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n\n      this.rebuildTreeIndex();\n    }\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n\n        var node;\n\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n    /**\n     * Clears the tree to the initial state.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n\n  return HeadersTree;\n}();\n\nexport { HeadersTree as default };","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/plugins/nestedHeaders/stateManager/headersTree.mjs"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldGet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","arrayEach","TreeNode","_rootNodes","WeakMap","_rootsIndex","_sourceSettings","HeadersTree","sourceSettings","Map","getRoots","values","getRootByColumn","columnIndex","node","getNode","headerLevel","rootNode","normColumnIndex","columnCursor","treeNode","walkDown","_node$data","data","origColspan","nodeHeaderLevel","rebuildTreeIndex","_this","clear","_ref","_ref2","colspan","buildTree","columnsCount","getColumnsCount","columnSettings","getHeaderSettings","buildLeaves","parentNode","_this2","extractionLength","undefined","columnsSettings","getHeadersSettings","nodeData","addChild","getLayersCount","default"],"mappings":"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","sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar _rootNodes = /*#__PURE__*/new WeakMap();\n\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\n\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n\n\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n\n      return node;\n    }\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n\n      if (!rootNode) {\n        return;\n      } // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n\n\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n\n      var columnCursor = 0;\n      var treeNode; // Collect all parent nodes that depend on the collapsed node.\n\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n            origColspan = _node$data.origColspan,\n            nodeHeaderLevel = _node$data.headerLevel;\n\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n\n      var columnIndex = 0;\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            colspan = _ref2[1].data.colspan;\n\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n\n        columnIndex += colspan;\n      });\n    }\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n\n      var columnIndex = 0;\n\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n\n        var rootNode = new TreeNode();\n\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n\n      this.rebuildTreeIndex();\n    }\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n\n        var node;\n\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n    /**\n     * Clears the tree to the initial state.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n\n  return HeadersTree;\n}();\n\nexport { HeadersTree as default };"]},"metadata":{},"sourceType":"module"}