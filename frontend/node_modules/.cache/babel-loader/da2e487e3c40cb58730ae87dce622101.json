{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInput.css\"; // Components\n\nimport { VIcon } from \"../VIcon/index.mjs\";\nimport { VMessages } from \"../VMessages/index.mjs\"; // Composables\n\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, getUid, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: String,\n  prependIcon: String,\n  hideDetails: [Boolean, String],\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['horizontal', 'vertical'].includes(v)\n  },\n  ...makeDensityProps(),\n  ...makeValidationProps()\n});\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: { ...makeVInputProps()\n  },\n  emits: {\n    'click:prepend': e => true,\n    'click:append': e => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const slotProps = computed(() => ({\n      id,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    useRender(() => {\n      var _props$messages, _slots$prepend, _slots$default, _slots$append, _slots$details;\n\n      const hasPrepend = !!(slots.prepend || props.prependIcon);\n      const hasAppend = !!(slots.append || props.appendIcon);\n      const hasMessages = !!((_props$messages = props.messages) != null && _props$messages.length || errorMessages.value.length);\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && hasMessages;\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', `v-input--${props.direction}`, densityClasses.value, validationClasses.value]\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"class\": \"v-input__prepend\"\n      }, [slots == null ? void 0 : (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value), props.prependIcon && _createVNode(VIcon, {\n        \"onClick\": e => emit('click:prepend', e),\n        \"icon\": props.prependIcon\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-input__control\"\n      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value)]), hasAppend && _createVNode(\"div\", {\n        \"class\": \"v-input__append\"\n      }, [slots == null ? void 0 : (_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendIcon && _createVNode(VIcon, {\n        \"onClick\": e => emit('click:append', e),\n        \"icon\": props.appendIcon\n      }, null)]), hasDetails && _createVNode(\"div\", {\n        \"class\": \"v-input__details\"\n      }, [_createVNode(VMessages, {\n        \"active\": hasMessages,\n        \"messages\": errorMessages.value.length > 0 ? errorMessages.value : props.messages\n      }, {\n        message: slots.message\n      }), (_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps.value)])]);\n    });\n    return {\n      reset,\n      resetValidation,\n      validate\n    };\n  }\n\n});\nexport function filterInputProps(props) {\n  return pick(props, Object.keys(VInput.props));\n}","map":{"version":3,"mappings":"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","names":["VIcon","VMessages","makeDensityProps","useDensity","makeValidationProps","useValidation","computed","genericComponent","getUid","pick","propsFactory","useRender","makeVInputProps","id","String","appendIcon","prependIcon","hideDetails","Boolean","messages","type","Array","default","direction","validator","v","includes","VInput","name","props","emits","e","val","setup","slots","emit","_ref","densityClasses","errorMessages","isDirty","isDisabled","isReadonly","isPristine","isValid","isValidating","reset","resetValidation","validate","validationClasses","uid","slotProps","hasPrepend","prepend","hasAppend","append","hasMessages","length","value","hasDetails","_slots$prepend","_slots$default","_slots$append","message","details","_slots$details","filterInputProps","Object","keys"],"sources":["../../../src/components/VInput/VInput.tsx"],"sourcesContent":["// Styles\nimport './VInput.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VMessages } from '@/components/VMessages'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeValidationProps, useValidation } from '@/composables/validation'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, getUid, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, ExtractPropTypes, PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\n\nexport interface VInputSlot {\n  id: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: String,\n  prependIcon: String,\n  hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n  messages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['horizontal', 'vertical'].includes(v),\n  },\n\n  ...makeDensityProps(),\n  ...makeValidationProps(),\n})\n\nexport type VInputSlots = MakeSlots<{\n  default: [VInputSlot]\n  prepend: [VInputSlot]\n  append: [VInputSlot]\n  details: [VInputSlot]\n}>\n\nexport const VInput = genericComponent<new <T>() => {\n  $slots: VInputSlots\n}>()({\n  name: 'VInput',\n\n  props: {\n    ...makeVInputProps(),\n  },\n\n  emits: {\n    'click:prepend': (e: MouseEvent) => true,\n    'click:append': (e: MouseEvent) => true,\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    const { densityClasses } = useDensity(props)\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses,\n    } = useValidation(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n\n    const slotProps = computed<VInputSlot>(() => ({\n      id,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n    }))\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon)\n      const hasAppend = !!(slots.append || props.appendIcon)\n      const hasMessages = !!(\n        props.messages?.length ||\n        errorMessages.value.length\n      )\n      const hasDetails = !props.hideDetails || (\n        props.hideDetails === 'auto' &&\n        hasMessages\n      )\n\n      return (\n        <div class={[\n          'v-input',\n          `v-input--${props.direction}`,\n          densityClasses.value,\n          validationClasses.value,\n        ]}\n        >\n          { hasPrepend && (\n            <div\n              class=\"v-input__prepend\"\n            >\n              { slots?.prepend?.(slotProps.value) }\n\n              { props.prependIcon && (\n                <VIcon\n                  onClick={ (e: MouseEvent) => emit('click:prepend', e) }\n                  icon={ props.prependIcon }\n                />\n              ) }\n            </div>\n          ) }\n\n          { slots.default && (\n            <div class=\"v-input__control\">\n              { slots.default?.(slotProps.value) }\n            </div>\n          ) }\n\n          { hasAppend && (\n            <div\n              class=\"v-input__append\"\n            >\n              { slots?.append?.(slotProps.value) }\n\n              { props.appendIcon && (\n                <VIcon\n                  onClick={ (e: MouseEvent) => emit('click:append', e) }\n                  icon={ props.appendIcon }\n                />\n              ) }\n            </div>\n          ) }\n\n          { hasDetails && (\n            <div class=\"v-input__details\">\n              <VMessages\n                active={ hasMessages }\n                messages={ errorMessages.value.length > 0\n                  ? errorMessages.value\n                  : props.messages\n                }\n                v-slots={{ message: slots.message }}\n              />\n\n              { slots.details?.(slotProps.value) }\n            </div>\n          ) }\n        </div>\n      )\n    })\n\n    return {\n      reset,\n      resetValidation,\n      validate,\n    }\n  },\n})\n\nexport type VInput = InstanceType<typeof VInput>\n\nexport function filterInputProps (props: ExtractPropTypes<ReturnType<typeof makeVInputProps>>) {\n  return pick(props, Object.keys(VInput.props) as any)\n}\n"]},"metadata":{},"sourceType":"module"}