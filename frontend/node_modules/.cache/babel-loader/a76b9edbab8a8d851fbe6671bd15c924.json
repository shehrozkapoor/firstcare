{"ast":null,"code":"// moment-hijri.js\n// author: Suhail Alkowaileet\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya\n// license: MIT\n'use strict';\n/************************************\r\n    Expose Moment Hijri\r\n************************************/\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\n(function (root, factory) {\n  /* global define */\n  if (typeof define === 'function' && define.amd) {\n    define(['moment'], function (moment) {\n      root.moment = factory(moment);\n      return root.moment;\n    });\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('moment'));\n  } else {\n    root.moment = factory(root.moment);\n  }\n})(this, function (moment) {\n  // jshint ignore:line\n  if (moment == null) {\n    throw new Error('Cannot find moment');\n  }\n  /************************************\r\n       Constants\r\n   ************************************/\n\n\n  var ummalqura = {\n    ummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990]\n  };\n  var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\n      localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g,\n      parseTokenOneOrTwoDigits = /\\d\\d?/,\n      parseTokenOneToThreeDigits = /\\d{1,3}/,\n      parseTokenThreeDigits = /\\d{3}/,\n      parseTokenFourDigits = /\\d{1,4}/,\n      parseTokenSixDigits = /[+\\-]?\\d{1,6}/,\n      parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i,\n      parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i,\n      parseTokenT = /T/i,\n      parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/,\n      unitAliases = {\n    hd: 'idate',\n    hm: 'imonth',\n    hy: 'iyear'\n  },\n      formatFunctions = {},\n      ordinalizeTokens = 'DDD w M D'.split(' '),\n      paddedTokens = 'M D w'.split(' '),\n      formatTokenFunctions = {\n    iM: function () {\n      return this.iMonth() + 1;\n    },\n    iMMM: function (format) {\n      return this.localeData().iMonthsShort(this, format);\n    },\n    iMMMM: function (format) {\n      return this.localeData().iMonths(this, format);\n    },\n    iD: function () {\n      return this.iDate();\n    },\n    iDDD: function () {\n      return this.iDayOfYear();\n    },\n    iw: function () {\n      return this.iWeek();\n    },\n    iYY: function () {\n      return leftZeroFill(this.iYear() % 100, 2);\n    },\n    iYYYY: function () {\n      return leftZeroFill(this.iYear(), 4);\n    },\n    iYYYYY: function () {\n      return leftZeroFill(this.iYear(), 5);\n    },\n    igg: function () {\n      return leftZeroFill(this.iWeekYear() % 100, 2);\n    },\n    igggg: function () {\n      return this.iWeekYear();\n    },\n    iggggg: function () {\n      return leftZeroFill(this.iWeekYear(), 5);\n    }\n  },\n      i;\n\n  function padToken(func, count) {\n    return function (a) {\n      return leftZeroFill(func.call(this, a), count);\n    };\n  }\n\n  function ordinalizeToken(func, period) {\n    return function (a) {\n      return this.localeData().ordinal(func.call(this, a), period);\n    };\n  }\n\n  while (ordinalizeTokens.length) {\n    i = ordinalizeTokens.pop();\n    formatTokenFunctions['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions['i' + i], i);\n  }\n\n  while (paddedTokens.length) {\n    i = paddedTokens.pop();\n    formatTokenFunctions['i' + i + i] = padToken(formatTokenFunctions['i' + i], 2);\n  }\n\n  formatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3);\n  /************************************\r\n       Helpers\r\n   ************************************/\n\n  function extend(a, b) {\n    var key;\n\n    for (key in b) if (b.hasOwnProperty(key)) a[key] = b[key];\n\n    return a;\n  }\n\n  function leftZeroFill(number, targetLength) {\n    var output = number + '';\n\n    while (output.length < targetLength) output = '0' + output;\n\n    return output;\n  }\n\n  function isArray(input) {\n    return Object.prototype.toString.call(input) === '[object Array]';\n  }\n\n  function normalizeUnits(units) {\n    return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units;\n  }\n\n  function setDate(moment, year, month, date) {\n    var utc = moment._isUTC ? 'UTC' : '';\n\n    moment._d['set' + utc + 'FullYear'](year);\n\n    moment._d['set' + utc + 'Month'](month);\n\n    moment._d['set' + utc + 'Date'](date);\n  }\n\n  function objectCreate(parent) {\n    function F() {}\n\n    F.prototype = parent;\n    return new F();\n  }\n\n  function getPrototypeOf(object) {\n    if (Object.getPrototypeOf) return Object.getPrototypeOf(object);else if (''.__proto__) // jshint ignore:line\n      return object.__proto__; // jshint ignore:line\n    else return object.constructor.prototype;\n  }\n  /************************************\r\n       Languages\r\n   ************************************/\n\n\n  extend(getPrototypeOf(moment.localeData()), {\n    _iMonths: ['Muharram', 'Safar', 'Rabi\\' al-Awwal', 'Rabi\\' al-Thani', 'Jumada al-Ula', 'Jumada al-Alkhirah', 'Rajab', 'Sha’ban', 'Ramadhan', 'Shawwal', 'Thul-Qi’dah', 'Thul-Hijjah'],\n    iMonths: function (m) {\n      return this._iMonths[m.iMonth()];\n    },\n    _iMonthsShort: ['Muh', 'Saf', 'Rab-I', 'Rab-II', 'Jum-I', 'Jum-II', 'Raj', 'Sha', 'Ram', 'Shw', 'Dhu-Q', 'Dhu-H'],\n    iMonthsShort: function (m) {\n      return this._iMonthsShort[m.iMonth()];\n    },\n    iMonthsParse: function (monthName) {\n      var i, mom, regex;\n      if (!this._iMonthsParse) this._iMonthsParse = [];\n\n      for (i = 0; i < 12; i += 1) {\n        // Make the regex if we don't have it already.\n        if (!this._iMonthsParse[i]) {\n          mom = hMoment([2000, (2 + i) % 12, 25]);\n          regex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$';\n          this._iMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n        } // Test the regex.\n\n\n        if (this._iMonthsParse[i].test(monthName)) return i;\n      }\n    }\n  });\n  var iMonthNames = {\n    iMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),\n    iMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')\n  }; // Default to the momentjs 2.12+ API\n\n  if (typeof moment.updateLocale === 'function') {\n    moment.updateLocale('ar-sa', iMonthNames);\n  } else {\n    var oldLocale = moment.locale();\n    moment.defineLocale('ar-sa', iMonthNames);\n    moment.locale(oldLocale);\n  }\n  /************************************\r\n       Formatting\r\n   ************************************/\n\n\n  function makeFormatFunction(format) {\n    var array = format.match(formattingTokens),\n        length = array.length,\n        i;\n\n    for (i = 0; i < length; i += 1) if (formatTokenFunctions[array[i]]) array[i] = formatTokenFunctions[array[i]];\n\n    return function (mom) {\n      var output = '';\n\n      for (i = 0; i < length; i += 1) output += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i];\n\n      return output;\n    };\n  }\n  /************************************\r\n       Parsing\r\n   ************************************/\n\n\n  function getParseRegexForToken(token, config) {\n    switch (token) {\n      case 'iDDDD':\n        return parseTokenThreeDigits;\n\n      case 'iYYYY':\n        return parseTokenFourDigits;\n\n      case 'iYYYYY':\n        return parseTokenSixDigits;\n\n      case 'iDDD':\n        return parseTokenOneToThreeDigits;\n\n      case 'iMMM':\n      case 'iMMMM':\n        return parseTokenWord;\n\n      case 'iMM':\n      case 'iDD':\n      case 'iYY':\n      case 'iM':\n      case 'iD':\n        return parseTokenOneOrTwoDigits;\n\n      case 'DDDD':\n        return parseTokenThreeDigits;\n\n      case 'YYYY':\n        return parseTokenFourDigits;\n\n      case 'YYYYY':\n        return parseTokenSixDigits;\n\n      case 'S':\n      case 'SS':\n      case 'SSS':\n      case 'DDD':\n        return parseTokenOneToThreeDigits;\n\n      case 'MMM':\n      case 'MMMM':\n      case 'dd':\n      case 'ddd':\n      case 'dddd':\n        return parseTokenWord;\n\n      case 'a':\n      case 'A':\n        return moment.localeData(config._l)._meridiemParse;\n\n      case 'X':\n        return parseTokenTimestampMs;\n\n      case 'Z':\n      case 'ZZ':\n        return parseTokenTimezone;\n\n      case 'T':\n        return parseTokenT;\n\n      case 'MM':\n      case 'DD':\n      case 'YY':\n      case 'HH':\n      case 'hh':\n      case 'mm':\n      case 'ss':\n      case 'M':\n      case 'D':\n      case 'd':\n      case 'H':\n      case 'h':\n      case 'm':\n      case 's':\n        return parseTokenOneOrTwoDigits;\n\n      default:\n        return new RegExp(token.replace('\\\\', ''));\n    }\n  }\n\n  function addTimeToArrayFromToken(token, input, config) {\n    var a,\n        datePartArray = config._a;\n\n    switch (token) {\n      case 'iM':\n      case 'iMM':\n        datePartArray[1] = input == null ? 0 : ~~input - 1;\n        break;\n\n      case 'iMMM':\n      case 'iMMMM':\n        a = moment.localeData(config._l).iMonthsParse(input);\n        if (a != null) datePartArray[1] = a;else config._isValid = false;\n        break;\n\n      case 'iD':\n      case 'iDD':\n      case 'iDDD':\n      case 'iDDDD':\n        if (input != null) datePartArray[2] = ~~input;\n        break;\n\n      case 'iYY':\n        datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);\n        break;\n\n      case 'iYYYY':\n      case 'iYYYYY':\n        datePartArray[0] = ~~input;\n    }\n\n    if (input == null) config._isValid = false;\n  }\n\n  function dateFromArray(config) {\n    var g,\n        h,\n        hy = config._a[0],\n        hm = config._a[1],\n        hd = config._a[2];\n    if (hy == null && hm == null && hd == null) return [0, 0, 1];\n    hy = hy || 0;\n    hm = hm || 0;\n    hd = hd || 1;\n    if (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm)) config._isValid = false;\n    g = toGregorian(hy, hm, hd);\n    h = toHijri(g.gy, g.gm, g.gd);\n    config._hDiff = 0;\n    if (~~h.hy !== hy) config._hDiff += 1;\n    if (~~h.hm !== hm) config._hDiff += 1;\n    if (~~h.hd !== hd) config._hDiff += 1;\n    return [g.gy, g.gm, g.gd];\n  }\n\n  function makeDateFromStringAndFormat(config) {\n    var tokens = config._f.match(formattingTokens),\n        string = config._i,\n        len = tokens.length,\n        i,\n        token,\n        parsedInput;\n\n    config._a = [];\n\n    for (i = 0; i < len; i += 1) {\n      token = tokens[i];\n      parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\n      if (parsedInput) string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n      if (formatTokenFunctions[token]) addTimeToArrayFromToken(token, parsedInput, config);\n    }\n\n    if (string) config._il = string;\n    return dateFromArray(config);\n  }\n\n  function makeDateFromStringAndArray(config, utc) {\n    var len = config._f.length,\n        i,\n        format,\n        tempMoment,\n        bestMoment,\n        currentScore,\n        scoreToBeat;\n\n    if (len === 0) {\n      return makeMoment(new Date(NaN));\n    }\n\n    for (i = 0; i < len; i += 1) {\n      format = config._f[i];\n      currentScore = 0;\n      tempMoment = makeMoment(config._i, format, config._l, utc);\n      if (!tempMoment.isValid()) continue;\n      currentScore += tempMoment._hDiff;\n      if (tempMoment._il) currentScore += tempMoment._il.length;\n\n      if (scoreToBeat == null || currentScore < scoreToBeat) {\n        scoreToBeat = currentScore;\n        bestMoment = tempMoment;\n      }\n    }\n\n    return bestMoment;\n  }\n\n  function removeParsedTokens(config) {\n    var string = config._i,\n        input = '',\n        format = '',\n        array = config._f.match(formattingTokens),\n        len = array.length,\n        i,\n        match,\n        parsed;\n\n    for (i = 0; i < len; i += 1) {\n      match = array[i];\n      parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];\n      if (parsed) string = string.slice(string.indexOf(parsed) + parsed.length);\n\n      if (!(formatTokenFunctions[match] instanceof Function)) {\n        format += match;\n        if (parsed) input += parsed;\n      }\n    }\n\n    config._i = input;\n    config._f = format;\n  }\n  /************************************\r\n       Week of Year\r\n   ************************************/\n\n\n  function iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n    var end = firstDayOfWeekOfYear - firstDayOfWeek,\n        daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\n        adjustedMoment;\n\n    if (daysToDayOfWeek > end) {\n      daysToDayOfWeek -= 7;\n    }\n\n    if (daysToDayOfWeek < end - 7) {\n      daysToDayOfWeek += 7;\n    }\n\n    adjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd');\n    return {\n      week: Math.ceil(adjustedMoment.iDayOfYear() / 7),\n      year: adjustedMoment.iYear()\n    };\n  }\n  /************************************\r\n       Top Level Functions\r\n   ************************************/\n\n\n  function makeMoment(input, format, lang, utc) {\n    var config = {\n      _i: input,\n      _f: format,\n      _l: lang\n    },\n        date,\n        m,\n        hm;\n\n    if (format) {\n      if (isArray(format)) {\n        return makeDateFromStringAndArray(config, utc);\n      } else {\n        date = makeDateFromStringAndFormat(config);\n        removeParsedTokens(config);\n        format = 'YYYY-MM-DD-' + config._f;\n        input = leftZeroFill(date[0], 4) + '-' + leftZeroFill(date[1] + 1, 2) + '-' + leftZeroFill(date[2], 2) + '-' + config._i;\n      }\n    }\n\n    if (utc) m = moment.utc(input, format, lang);else m = moment(input, format, lang);\n    if (config._isValid === false) m._isValid = false;\n    m._hDiff = config._hDiff || 0;\n    hm = objectCreate(hMoment.fn);\n    extend(hm, m);\n    return hm;\n  }\n\n  function hMoment(input, format, lang) {\n    return makeMoment(input, format, lang, false);\n  }\n\n  extend(hMoment, moment);\n  hMoment.fn = objectCreate(moment.fn);\n\n  hMoment.utc = function (input, format, lang) {\n    return makeMoment(input, format, lang, true);\n  };\n  /************************************\r\n       hMoment Prototype\r\n   ************************************/\n\n\n  hMoment.fn.format = function (format) {\n    var i,\n        replace,\n        me = this;\n\n    if (format) {\n      i = 5;\n\n      replace = function (input) {\n        return me.localeData().longDateFormat(input) || input;\n      };\n\n      while (i > 0 && localFormattingTokens.test(format)) {\n        i -= 1;\n        format = format.replace(localFormattingTokens, replace);\n      }\n\n      if (!formatFunctions[format]) {\n        formatFunctions[format] = makeFormatFunction(format);\n      }\n\n      format = formatFunctions[format](this);\n    }\n\n    return moment.fn.format.call(this, format);\n  };\n\n  hMoment.fn.iYear = function (input) {\n    var lastDay, h, g;\n\n    if (typeof input === 'number') {\n      h = toHijri(this.year(), this.month(), this.date());\n      lastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm));\n      g = toGregorian(input, h.hm, lastDay);\n      setDate(this, g.gy, g.gm, g.gd); //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hy;\n    }\n  };\n\n  hMoment.fn.iMonth = function (input) {\n    var lastDay, h, g;\n\n    if (input != null) {\n      if (typeof input === 'string') {\n        input = this.localeData().iMonthsParse(input);\n\n        if (input >= 0) {\n          input -= 1;\n        } else {\n          return this;\n        }\n      }\n\n      h = toHijri(this.year(), this.month(), this.date());\n      lastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input));\n      this.iYear(h.hy + div(input, 12));\n      input = mod(input, 12);\n\n      if (input < 0) {\n        input += 12;\n        this.iYear(this.iYear() - 1);\n      }\n\n      g = toGregorian(this.iYear(), input, lastDay);\n      setDate(this, g.gy, g.gm, g.gd); //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hm;\n    }\n  };\n\n  hMoment.fn.iDate = function (input) {\n    var h, g;\n\n    if (typeof input === 'number') {\n      h = toHijri(this.year(), this.month(), this.date());\n      g = toGregorian(h.hy, h.hm, input);\n      setDate(this, g.gy, g.gm, g.gd); //Workaround: sometimes moment wont set the date correctly if current day is the last in the month\n\n      if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\n        setDate(this, g.gy, g.gm, g.gd);\n      }\n\n      moment.updateOffset(this);\n      return this;\n    } else {\n      return toHijri(this.year(), this.month(), this.date()).hd;\n    }\n  };\n\n  hMoment.fn.iDayOfYear = function (input) {\n    var dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1;\n    return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n  };\n\n  hMoment.fn.iDaysInMonth = function () {\n    return parseInt(hMoment(this).endOf('iMonth').format('iDD'));\n  };\n\n  hMoment.fn.iWeek = function (input) {\n    var week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;\n    return input == null ? week : this.add((input - week) * 7, 'd');\n  };\n\n  hMoment.fn.iWeekYear = function (input) {\n    var year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;\n    return input == null ? year : this.add(input - year, 'y');\n  };\n\n  hMoment.fn.add = function (val, units) {\n    var temp;\n\n    if (units !== null && !isNaN(+units)) {\n      temp = val;\n      val = units;\n      units = temp;\n    }\n\n    units = normalizeUnits(units);\n\n    if (units === 'iyear') {\n      this.iYear(this.iYear() + val);\n    } else if (units === 'imonth') {\n      this.iMonth(this.iMonth() + val);\n    } else if (units === 'idate') {\n      this.iDate(this.iDate() + val);\n    } else {\n      moment.fn.add.call(this, val, units);\n    }\n\n    return this;\n  };\n\n  hMoment.fn.subtract = function (val, units) {\n    var temp;\n\n    if (units !== null && !isNaN(+units)) {\n      temp = val;\n      val = units;\n      units = temp;\n    }\n\n    units = normalizeUnits(units);\n\n    if (units === 'iyear') {\n      this.iYear(this.iYear() - val);\n    } else if (units === 'imonth') {\n      this.iMonth(this.iMonth() - val);\n    } else if (units === 'idate') {\n      this.iDate(this.iDate() - val);\n    } else {\n      moment.fn.subtract.call(this, val, units);\n    }\n\n    return this;\n  };\n\n  hMoment.fn.startOf = function (units) {\n    units = normalizeUnits(units);\n\n    if (units === 'iyear' || units === 'imonth') {\n      if (units === 'iyear') {\n        this.iMonth(0);\n      }\n\n      this.iDate(1);\n      this.hours(0);\n      this.minutes(0);\n      this.seconds(0);\n      this.milliseconds(0);\n      return this;\n    } else {\n      return moment.fn.startOf.call(this, units);\n    }\n  };\n\n  hMoment.fn.endOf = function (units) {\n    units = normalizeUnits(units);\n\n    if (units === undefined || units === 'milisecond') {\n      return this;\n    }\n\n    return this.startOf(units).add(1, units === 'isoweek' ? 'week' : units).subtract(1, 'milliseconds');\n  };\n\n  hMoment.fn.clone = function () {\n    return hMoment(this);\n  };\n\n  hMoment.fn.iYears = hMoment.fn.iYear;\n  hMoment.fn.iMonths = hMoment.fn.iMonth;\n  hMoment.fn.iDates = hMoment.fn.iDate;\n  hMoment.fn.iWeeks = hMoment.fn.iWeek;\n  /************************************\r\n       hMoment Statics\r\n   ************************************/\n\n  hMoment.iDaysInMonth = function (year, month) {\n    var i = getNewMoonMJDNIndex(year, month + 1),\n        daysInMonth = ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1];\n    return daysInMonth;\n  };\n\n  function toHijri(gy, gm, gd) {\n    var h = d2h(g2d(gy, gm + 1, gd));\n    h.hm -= 1;\n    return h;\n  }\n\n  function toGregorian(hy, hm, hd) {\n    var g = d2g(h2d(hy, hm + 1, hd));\n    g.gm -= 1;\n    return g;\n  }\n\n  hMoment.iConvert = {\n    toHijri: toHijri,\n    toGregorian: toGregorian\n  };\n  return hMoment;\n  /************************************\r\n       Hijri Conversion\r\n   ************************************/\n\n  /*\r\n     Utility helper functions.\r\n   */\n\n  function div(a, b) {\n    return ~~(a / b);\n  }\n\n  function mod(a, b) {\n    return a - ~~(a / b) * b;\n  }\n  /*\r\n     Converts a date of the Hijri calendar to the Julian Day number.\r\n  \n     @param hy Hijri year (1356 to 1500)\r\n     @param hm Hijri month (1 to 12)\r\n     @param hd Hijri day (1 to 29/30)\r\n     @return Julian Day number\r\n   */\n\n\n  function h2d(hy, hm, hd) {\n    var i = getNewMoonMJDNIndex(hy, hm),\n        mjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\n        jdn = mjdn + 2400000;\n    return jdn;\n  }\n  /*\r\n     Converts the Julian Day number to a date in the Hijri calendar.\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       hy: Hijri year (1356 to 1500)\r\n       hm: Hijri month (1 to 12)\r\n       hd: Hijri day (1 to 29/30)\r\n   */\n\n\n  function d2h(jdn) {\n    var mjdn = jdn - 2400000,\n        i = getNewMoonMJDNIndexByJDN(mjdn),\n        totalMonths = i + 16260,\n        cYears = Math.floor((totalMonths - 1) / 12),\n        hy = cYears + 1,\n        hm = totalMonths - 12 * cYears,\n        hd = mjdn - ummalqura.ummalquraData[i - 1] + 1;\n    return {\n      hy: hy,\n      hm: hm,\n      hd: hd\n    };\n  }\n  /*\r\n     Calculates the Julian Day number from Gregorian or Julian\r\n     calendar dates. This integer number corresponds to the noon of\r\n     the date (i.e. 12 hours of Universal Time).\r\n     The procedure was tested to be good since 1 March, -100100 (of both\r\n     calendars) up to a few million years into the future.\r\n  \n     @param gy Calendar year (years BC numbered 0, -1, -2, ...)\r\n     @param gm Calendar month (1 to 12)\r\n     @param gd Calendar day of the month (1 to 28/29/30/31)\r\n     @return Julian Day number\r\n   */\n\n\n  function g2d(gy, gm, gd) {\n    var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;\n    d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n    return d;\n  }\n  /*\r\n     Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n     (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n     calendars) to some millions years ahead of the present.\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       gy: Calendar year (years BC numbered 0, -1, -2, ...)\r\n       gm: Calendar month (1 to 12)\r\n       gd: Calendar day of the month M (1 to 28/29/30/31)\r\n   */\n\n\n  function d2g(jdn) {\n    var j, i, gd, gm, gy;\n    j = 4 * jdn + 139361631;\n    j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;\n    i = div(mod(j, 1461), 4) * 5 + 308;\n    gd = div(mod(i, 153), 5) + 1;\n    gm = mod(div(i, 153), 12) + 1;\n    gy = div(j, 1461) - 100100 + div(8 - gm, 6);\n    return {\n      gy: gy,\n      gm: gm,\n      gd: gd\n    };\n  }\n  /*\r\n     Returns the index of the modified Julian day number of the new moon\r\n     by the given year and month\r\n  \n     @param hy: Hijri year (1356 to 1500)\r\n     @param hm: Hijri month (1 to 12)\r\n     @return\r\n         i: the index of the new moon in modified Julian day number.\r\n   */\n\n\n  function getNewMoonMJDNIndex(hy, hm) {\n    var cYears = hy - 1,\n        totalMonths = cYears * 12 + 1 + (hm - 1),\n        i = totalMonths - 16260;\n    return i;\n  }\n  /*\r\n     Returns the nearest new moon\r\n  \n     @param jdn Julian Day number\r\n     @return\r\n       i: the index of a modified Julian day number.\r\n   */\n\n\n  function getNewMoonMJDNIndexByJDN(mjdn) {\n    for (var i = 0; i < ummalqura.ummalquraData.length; i = i + 1) {\n      if (ummalqura.ummalquraData[i] > mjdn) return i;\n    }\n  }\n});","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/moment-hijri/moment-hijri.js"],"names":["root","factory","define","amd","moment","exports","module","require","Error","ummalqura","ummalquraData","formattingTokens","localFormattingTokens","parseTokenOneOrTwoDigits","parseTokenOneToThreeDigits","parseTokenThreeDigits","parseTokenFourDigits","parseTokenSixDigits","parseTokenWord","parseTokenTimezone","parseTokenT","parseTokenTimestampMs","unitAliases","hd","hm","hy","formatFunctions","ordinalizeTokens","split","paddedTokens","formatTokenFunctions","iM","iMonth","iMMM","format","localeData","iMonthsShort","iMMMM","iMonths","iD","iDate","iDDD","iDayOfYear","iw","iWeek","iYY","leftZeroFill","iYear","iYYYY","iYYYYY","igg","iWeekYear","igggg","iggggg","i","padToken","func","count","a","call","ordinalizeToken","period","ordinal","length","pop","iDDDD","extend","b","key","hasOwnProperty","number","targetLength","output","isArray","input","Object","prototype","toString","normalizeUnits","units","toLowerCase","replace","setDate","year","month","date","utc","_isUTC","_d","objectCreate","parent","F","getPrototypeOf","object","__proto__","constructor","_iMonths","m","_iMonthsShort","iMonthsParse","monthName","mom","regex","_iMonthsParse","hMoment","RegExp","test","iMonthNames","updateLocale","oldLocale","locale","defineLocale","makeFormatFunction","array","match","Function","getParseRegexForToken","token","config","_l","_meridiemParse","addTimeToArrayFromToken","datePartArray","_a","_isValid","dateFromArray","g","h","iDaysInMonth","toGregorian","toHijri","gy","gm","gd","_hDiff","makeDateFromStringAndFormat","tokens","_f","string","_i","len","parsedInput","exec","slice","indexOf","_il","makeDateFromStringAndArray","tempMoment","bestMoment","currentScore","scoreToBeat","makeMoment","Date","NaN","isValid","removeParsedTokens","parsed","iWeekOfYear","firstDayOfWeek","firstDayOfWeekOfYear","end","daysToDayOfWeek","day","adjustedMoment","add","week","Math","ceil","lang","fn","me","longDateFormat","lastDay","min","updateOffset","div","mod","dayOfYear","round","startOf","parseInt","endOf","_week","dow","doy","val","temp","isNaN","subtract","hours","minutes","seconds","milliseconds","undefined","clone","iYears","iDates","iWeeks","getNewMoonMJDNIndex","daysInMonth","d2h","g2d","d2g","h2d","iConvert","mjdn","jdn","getNewMoonMJDNIndexByJDN","totalMonths","cYears","floor","d","j"],"mappings":"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","sourcesContent":["// moment-hijri.js\r\n// author: Suhail Alkowaileet\r\n// This is a modified version of moment-jalaali by Behrang Noruzi Niya\r\n// license: MIT\r\n\r\n'use strict';\r\n\r\n/************************************\r\n    Expose Moment Hijri\r\n************************************/\r\n(function (root, factory) {\r\n\t/* global define */\r\n\tif (typeof define === 'function' && define.amd) {\r\n\t\tdefine(['moment'], function (moment) {\r\n\t\t\troot.moment = factory(moment)\r\n\t\t\treturn root.moment\r\n\t\t})\r\n\t} else if (typeof exports === 'object') {\r\n\t\tmodule.exports = factory(require('moment'))\r\n\t} else {\r\n\t\troot.moment = factory(root.moment)\r\n\t}\r\n})(this, function (moment) { // jshint ignore:line\r\n\r\n\tif (moment == null) {\r\n\t\tthrow new Error('Cannot find moment')\r\n\t}\r\n\r\n\t/************************************\r\n      Constants\r\n  ************************************/\r\n\r\n\tvar ummalqura = {\r\n\t\tummalquraData: [28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,\r\n                      29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,\r\n                      29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,\r\n                      30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,\r\n                      30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,\r\n                      31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,\r\n                      32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,\r\n                      32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,\r\n                      33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,\r\n                      33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,\r\n                      34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,\r\n                      35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,\r\n                      35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,\r\n                      36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,\r\n                      36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,\r\n                      37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,\r\n                      38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,\r\n                      38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,\r\n                      39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,\r\n                      39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,\r\n                      40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,\r\n                      41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,\r\n                      41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,\r\n                      42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,\r\n                      42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,\r\n                      43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,\r\n                      43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,\r\n                      44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,\r\n                      45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,\r\n                      45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,\r\n                      46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,\r\n                      46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,\r\n                      47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,\r\n                      48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,\r\n                      48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,\r\n                      49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,\r\n                      49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,\r\n                      50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,\r\n                      51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,\r\n                      51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,\r\n                      52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,\r\n                      52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,\r\n                      53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,\r\n                      54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,\r\n                      54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,\r\n                      55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,\r\n                      55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,\r\n                      56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,\r\n                      56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,\r\n                      57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,\r\n                      58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,\r\n                      58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,\r\n                      59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,\r\n                      59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,\r\n                      60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,\r\n                      61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,\r\n                      61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,\r\n                      62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,\r\n                      62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,\r\n                      63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,\r\n                      64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,\r\n                      64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,\r\n                      65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,\r\n                      65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,\r\n                      66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,\r\n                      66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,\r\n                      67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,\r\n                      68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,\r\n                      68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,\r\n                      69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,\r\n                      69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,\r\n                      70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,\r\n                      71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,\r\n                      71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,\r\n                      72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,\r\n                      72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,\r\n                      73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,\r\n                      74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,\r\n                      74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,\r\n                      75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,\r\n                      75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,\r\n                      76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,\r\n                      77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,\r\n                      77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,\r\n                      78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,\r\n                      78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,\r\n                      79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,\r\n                      79990]\r\n\t}\r\n\r\n\tvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g,\r\n\t\tlocalFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g\r\n\r\n\t, parseTokenOneOrTwoDigits = /\\d\\d?/, parseTokenOneToThreeDigits = /\\d{1,3}/, parseTokenThreeDigits = /\\d{3}/, parseTokenFourDigits = /\\d{1,4}/, parseTokenSixDigits = /[+\\-]?\\d{1,6}/, parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+(\\.?)|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i, parseTokenT = /T/i, parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/\r\n\r\n\t, unitAliases = {\r\n\t\thd: 'idate',\r\n\t\thm: 'imonth',\r\n\t\thy: 'iyear'\r\n\t}\r\n\r\n\t, formatFunctions = {}\r\n\r\n\t, ordinalizeTokens = 'DDD w M D'.split(' '), paddedTokens = 'M D w'.split(' ')\r\n\r\n\t, formatTokenFunctions = {\r\n\t\tiM: function () {\r\n\t\t\treturn this.iMonth() + 1\r\n\t\t},\r\n\t\tiMMM: function (format) {\r\n\t\t\treturn this.localeData().iMonthsShort(this, format)\r\n\t\t},\r\n\t\tiMMMM: function (format) {\r\n\t\t\treturn this.localeData().iMonths(this, format)\r\n\t\t},\r\n\t\tiD: function () {\r\n\t\t\treturn this.iDate()\r\n\t\t},\r\n\t\tiDDD: function () {\r\n\t\t\treturn this.iDayOfYear()\r\n\t\t},\r\n\t\tiw: function () {\r\n\t\t\treturn this.iWeek()\r\n\t\t},\r\n\t\tiYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear() % 100, 2)\r\n\t\t},\r\n\t\tiYYYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear(), 4)\r\n\t\t},\r\n\t\tiYYYYY: function () {\r\n\t\t\treturn leftZeroFill(this.iYear(), 5)\r\n\t\t},\r\n\t\tigg: function () {\r\n\t\t\treturn leftZeroFill(this.iWeekYear() % 100, 2)\r\n\t\t},\r\n\t\tigggg: function () {\r\n\t\t\treturn this.iWeekYear()\r\n\t\t},\r\n\t\tiggggg: function () {\r\n\t\t\treturn leftZeroFill(this.iWeekYear(), 5)\r\n\t\t}\r\n\t}, i\r\n\r\n\tfunction padToken(func, count) {\r\n\t\treturn function (a) {\r\n\t\t\treturn leftZeroFill(func.call(this, a), count)\r\n\t\t}\r\n\t}\r\n\r\n\tfunction ordinalizeToken(func, period) {\r\n\t\treturn function (a) {\r\n\t\t\treturn this.localeData().ordinal(func.call(this, a), period)\r\n\t\t}\r\n\t}\r\n\r\n\twhile (ordinalizeTokens.length) {\r\n\t\ti = ordinalizeTokens.pop()\r\n\t\tformatTokenFunctions['i' + i + 'o'] = ordinalizeToken(formatTokenFunctions['i' + i], i)\r\n\t}\r\n\twhile (paddedTokens.length) {\r\n\t\ti = paddedTokens.pop()\r\n\t\tformatTokenFunctions['i' + i + i] = padToken(formatTokenFunctions['i' + i], 2)\r\n\t}\r\n\tformatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3)\r\n\r\n\t/************************************\r\n      Helpers\r\n  ************************************/\r\n\r\n\tfunction extend(a, b) {\r\n\t\tvar key\r\n\t\tfor (key in b)\r\n\t\t\tif (b.hasOwnProperty(key))\r\n\t\t\t\ta[key] = b[key]\r\n\t\treturn a\r\n\t}\r\n\r\n\tfunction leftZeroFill(number, targetLength) {\r\n\t\tvar output = number + ''\r\n\t\twhile (output.length < targetLength)\r\n\t\t\toutput = '0' + output\r\n\t\treturn output\r\n\t}\r\n\r\n\tfunction isArray(input) {\r\n\t\treturn Object.prototype.toString.call(input) === '[object Array]'\r\n\t}\r\n\r\n\tfunction normalizeUnits(units) {\r\n\t\treturn units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, '$1') : units\r\n\t}\r\n\r\n\tfunction setDate(moment, year, month, date) {\r\n\t\tvar utc = moment._isUTC ? 'UTC' : ''\r\n\t\tmoment._d['set' + utc + 'FullYear'](year)\r\n\t\tmoment._d['set' + utc + 'Month'](month)\r\n\t\tmoment._d['set' + utc + 'Date'](date)\r\n\t}\r\n\r\n\tfunction objectCreate(parent) {\r\n\t\tfunction F() {}\r\n\t\tF.prototype = parent\r\n\t\treturn new F()\r\n\t}\r\n\r\n\tfunction getPrototypeOf(object) {\r\n\t\tif (Object.getPrototypeOf)\r\n\t\t\treturn Object.getPrototypeOf(object)\r\n\t\telse if (''.__proto__) // jshint ignore:line\r\n\t\t\treturn object.__proto__ // jshint ignore:line\r\n\t\telse\r\n\t\t\treturn object.constructor.prototype\r\n\t}\r\n\r\n\t/************************************\r\n      Languages\r\n  ************************************/\r\n\textend(getPrototypeOf(moment.localeData()), {\r\n\t\t_iMonths: ['Muharram'\r\n                , 'Safar'\r\n                , 'Rabi\\' al-Awwal'\r\n                , 'Rabi\\' al-Thani'\r\n                , 'Jumada al-Ula'\r\n                , 'Jumada al-Alkhirah'\r\n                , 'Rajab'\r\n                , 'Sha’ban'\r\n                , 'Ramadhan'\r\n                , 'Shawwal'\r\n                , 'Thul-Qi’dah'\r\n                , 'Thul-Hijjah'\r\n                ],\r\n\t\tiMonths: function (m) {\r\n\t\t\treturn this._iMonths[m.iMonth()]\r\n\t\t}\r\n\r\n\t\t,\r\n\t\t_iMonthsShort: ['Muh'\r\n                      , 'Saf'\r\n                      , 'Rab-I'\r\n                      , 'Rab-II'\r\n                      , 'Jum-I'\r\n                      , 'Jum-II'\r\n                      , 'Raj'\r\n                      , 'Sha'\r\n                      , 'Ram'\r\n                      , 'Shw'\r\n                      , 'Dhu-Q'\r\n                      , 'Dhu-H'\r\n                      ],\r\n\t\tiMonthsShort: function (m) {\r\n\t\t\treturn this._iMonthsShort[m.iMonth()]\r\n\t\t}\r\n\r\n\t\t,\r\n\t\tiMonthsParse: function (monthName) {\r\n\t\t\tvar i, mom, regex\r\n\t\t\tif (!this._iMonthsParse)\r\n\t\t\t\tthis._iMonthsParse = []\r\n\t\t\tfor (i = 0; i < 12; i += 1) {\r\n\t\t\t\t// Make the regex if we don't have it already.\r\n\t\t\t\tif (!this._iMonthsParse[i]) {\r\n\t\t\t\t\tmom = hMoment([2000, (2 + i) % 12, 25])\r\n\t\t\t\t\tregex = '^' + this.iMonths(mom, '') + '$|^' + this.iMonthsShort(mom, '') + '$'\r\n\t\t\t\t\tthis._iMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i')\r\n\t\t\t\t}\r\n\t\t\t\t// Test the regex.\r\n\t\t\t\tif (this._iMonthsParse[i].test(monthName))\r\n\t\t\t\t\treturn i\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\tvar iMonthNames = {\r\n\t\tiMonths: 'محرم_صفر_ربيع الأول_ربيع الثاني_جمادى الأولى_جمادى الآخرة_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_'),\r\n\t\tiMonthsShort: 'محرم_صفر_ربيع ١_ربيع ٢_جمادى ١_جمادى ٢_رجب_شعبان_رمضان_شوال_ذو القعدة_ذو الحجة'.split('_')\r\n\t};\r\n\r\n\t// Default to the momentjs 2.12+ API\r\n\tif (typeof moment.updateLocale === 'function') {\r\n\t\tmoment.updateLocale('ar-sa', iMonthNames);\r\n\t} else {\r\n\t\tvar oldLocale = moment.locale();\r\n\t\tmoment.defineLocale('ar-sa', iMonthNames);\r\n\t\tmoment.locale(oldLocale);\r\n\t}\r\n\r\n\t/************************************\r\n      Formatting\r\n  ************************************/\r\n\r\n\tfunction makeFormatFunction(format) {\r\n\t\tvar array = format.match(formattingTokens),\r\n\t\t\tlength = array.length,\r\n\t\t\ti\r\n\r\n\t\tfor (i = 0; i < length; i += 1)\r\n\t\t\tif (formatTokenFunctions[array[i]])\r\n\t\t\t\tarray[i] = formatTokenFunctions[array[i]]\r\n\r\n\t\treturn function (mom) {\r\n\t\t\tvar output = ''\r\n\t\t\tfor (i = 0; i < length; i += 1)\r\n\t\t\t\toutput += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i]\r\n\t\t\treturn output\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n      Parsing\r\n  ************************************/\r\n\r\n\tfunction getParseRegexForToken(token, config) {\r\n\t\tswitch (token) {\r\n\t\tcase 'iDDDD':\r\n\t\t\treturn parseTokenThreeDigits\r\n\t\tcase 'iYYYY':\r\n\t\t\treturn parseTokenFourDigits\r\n\t\tcase 'iYYYYY':\r\n\t\t\treturn parseTokenSixDigits\r\n\t\tcase 'iDDD':\r\n\t\t\treturn parseTokenOneToThreeDigits\r\n\t\tcase 'iMMM':\r\n\t\tcase 'iMMMM':\r\n\t\t\treturn parseTokenWord\r\n\t\tcase 'iMM':\r\n\t\tcase 'iDD':\r\n\t\tcase 'iYY':\r\n\t\tcase 'iM':\r\n\t\tcase 'iD':\r\n\t\t\treturn parseTokenOneOrTwoDigits\r\n\t\tcase 'DDDD':\r\n\t\t\treturn parseTokenThreeDigits\r\n\t\tcase 'YYYY':\r\n\t\t\treturn parseTokenFourDigits\r\n\t\tcase 'YYYYY':\r\n\t\t\treturn parseTokenSixDigits\r\n\t\tcase 'S':\r\n\t\tcase 'SS':\r\n\t\tcase 'SSS':\r\n\t\tcase 'DDD':\r\n\t\t\treturn parseTokenOneToThreeDigits\r\n\t\tcase 'MMM':\r\n\t\tcase 'MMMM':\r\n\t\tcase 'dd':\r\n\t\tcase 'ddd':\r\n\t\tcase 'dddd':\r\n\t\t\treturn parseTokenWord\r\n\t\tcase 'a':\r\n\t\tcase 'A':\r\n\t\t\treturn moment.localeData(config._l)._meridiemParse\r\n\t\tcase 'X':\r\n\t\t\treturn parseTokenTimestampMs\r\n\t\tcase 'Z':\r\n\t\tcase 'ZZ':\r\n\t\t\treturn parseTokenTimezone\r\n\t\tcase 'T':\r\n\t\t\treturn parseTokenT\r\n\t\tcase 'MM':\r\n\t\tcase 'DD':\r\n\t\tcase 'YY':\r\n\t\tcase 'HH':\r\n\t\tcase 'hh':\r\n\t\tcase 'mm':\r\n\t\tcase 'ss':\r\n\t\tcase 'M':\r\n\t\tcase 'D':\r\n\t\tcase 'd':\r\n\t\tcase 'H':\r\n\t\tcase 'h':\r\n\t\tcase 'm':\r\n\t\tcase 's':\r\n\t\t\treturn parseTokenOneOrTwoDigits\r\n\t\tdefault:\r\n\t\t\treturn new RegExp(token.replace('\\\\', ''))\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addTimeToArrayFromToken(token, input, config) {\r\n\t\tvar a, datePartArray = config._a\r\n\r\n\t\tswitch (token) {\r\n\t\tcase 'iM':\r\n\t\tcase 'iMM':\r\n\t\t\tdatePartArray[1] = input == null ? 0 : ~~input - 1\r\n\t\t\tbreak\r\n\t\tcase 'iMMM':\r\n\t\tcase 'iMMMM':\r\n\t\t\ta = moment.localeData(config._l).iMonthsParse(input)\r\n\t\t\tif (a != null)\r\n\t\t\t\tdatePartArray[1] = a\r\n\t\t\telse\r\n\t\t\t\tconfig._isValid = false\r\n\t\t\tbreak\r\n\t\tcase 'iD':\r\n\t\tcase 'iDD':\r\n\t\tcase 'iDDD':\r\n\t\tcase 'iDDDD':\r\n\t\t\tif (input != null)\r\n\t\t\t\tdatePartArray[2] = ~~input\r\n\t\t\tbreak\r\n\t\tcase 'iYY':\r\n\t\t\tdatePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400)\r\n\t\t\tbreak\r\n\t\tcase 'iYYYY':\r\n\t\tcase 'iYYYYY':\r\n\t\t\tdatePartArray[0] = ~~input\r\n\t\t}\r\n\t\tif (input == null)\r\n\t\t\tconfig._isValid = false\r\n\t}\r\n\r\n\tfunction dateFromArray(config) {\r\n\t\tvar g, h, hy = config._a[0],\r\n\t\t\thm = config._a[1],\r\n\t\t\thd = config._a[2]\r\n\r\n\t\tif ((hy == null) && (hm == null) && (hd == null))\r\n\t\t\treturn [0, 0, 1]\r\n\t\thy = hy || 0\r\n\t\thm = hm || 0\r\n\t\thd = hd || 1\r\n\t\tif (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm))\r\n\t\t\tconfig._isValid = false\r\n\t\tg = toGregorian(hy, hm, hd)\r\n\t\th = toHijri(g.gy, g.gm, g.gd)\r\n\t\tconfig._hDiff = 0\r\n\t\tif (~~h.hy !== hy)\r\n\t\t\tconfig._hDiff += 1\r\n\t\tif (~~h.hm !== hm)\r\n\t\t\tconfig._hDiff += 1\r\n\t\tif (~~h.hd !== hd)\r\n\t\t\tconfig._hDiff += 1\r\n\t\treturn [g.gy, g.gm, g.gd]\r\n\t}\r\n\r\n\tfunction makeDateFromStringAndFormat(config) {\r\n\t\tvar tokens = config._f.match(formattingTokens),\r\n\t\t\tstring = config._i,\r\n\t\t\tlen = tokens.length,\r\n\t\t\ti, token, parsedInput\r\n\r\n\t\tconfig._a = []\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\ttoken = tokens[i]\r\n\t\t\tparsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];\r\n\t\t\tif (parsedInput)\r\n\t\t\t\tstring = string.slice(string.indexOf(parsedInput) + parsedInput.length)\r\n\t\t\tif (formatTokenFunctions[token])\r\n\t\t\t\taddTimeToArrayFromToken(token, parsedInput, config)\r\n\t\t}\r\n\t\tif (string)\r\n\t\t\tconfig._il = string\r\n\r\n\t\treturn dateFromArray(config)\r\n\t}\r\n\r\n\tfunction makeDateFromStringAndArray(config, utc) {\r\n\t\tvar len = config._f.length\r\n\t\t, i\r\n\t\t, format\r\n\t\t, tempMoment\r\n\t\t, bestMoment\r\n\t\t, currentScore\r\n\t\t, scoreToBeat\r\n\r\n\t\tif (len === 0) {\r\n\t\t\treturn makeMoment(new Date(NaN))\r\n\t\t}\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\tformat = config._f[i]\r\n\t\t\tcurrentScore = 0\r\n\t\t\ttempMoment = makeMoment(config._i, format, config._l, utc)\r\n\r\n\t\t\tif (!tempMoment.isValid()) continue\r\n\r\n\t\t\tcurrentScore += tempMoment._hDiff\r\n\t\t\tif (tempMoment._il)\r\n\t\t\t\tcurrentScore += tempMoment._il.length\r\n\t\t\tif (scoreToBeat == null || currentScore < scoreToBeat) {\r\n\t\t\t\tscoreToBeat = currentScore\r\n\t\t\t\tbestMoment = tempMoment\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn bestMoment\r\n\t}\r\n\r\n\tfunction removeParsedTokens(config) {\r\n\t\tvar string = config._i,\r\n\t\t\tinput = '',\r\n\t\t\tformat = '',\r\n\t\t\tarray = config._f.match(formattingTokens),\r\n\t\t\tlen = array.length,\r\n\t\t\ti, match, parsed\r\n\r\n\t\tfor (i = 0; i < len; i += 1) {\r\n\t\t\tmatch = array[i]\r\n\t\t\tparsed = (getParseRegexForToken(match, config).exec(string) || [])[0]\r\n\t\t\tif (parsed)\r\n\t\t\t\tstring = string.slice(string.indexOf(parsed) + parsed.length)\r\n\t\t\tif (!(formatTokenFunctions[match] instanceof Function)) {\r\n\t\t\t\tformat += match\r\n\t\t\t\tif (parsed)\r\n\t\t\t\t\tinput += parsed\r\n\t\t\t}\r\n\t\t}\r\n\t\tconfig._i = input\r\n\t\tconfig._f = format\r\n\t}\r\n\r\n\t/************************************\r\n      Week of Year\r\n  ************************************/\r\n\r\n\tfunction iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\r\n\t\tvar end = firstDayOfWeekOfYear - firstDayOfWeek,\r\n\t\t\tdaysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),\r\n\t\t\tadjustedMoment\r\n\r\n\t\tif (daysToDayOfWeek > end) {\r\n\t\t\tdaysToDayOfWeek -= 7\r\n\t\t}\r\n\t\tif (daysToDayOfWeek < end - 7) {\r\n\t\t\tdaysToDayOfWeek += 7\r\n\t\t}\r\n\t\tadjustedMoment = hMoment(mom).add(daysToDayOfWeek, 'd')\r\n\t\treturn {\r\n\t\t\tweek: Math.ceil(adjustedMoment.iDayOfYear() / 7),\r\n\t\t\tyear: adjustedMoment.iYear()\r\n\t\t}\r\n\t}\r\n\r\n\t/************************************\r\n      Top Level Functions\r\n  ************************************/\r\n\r\n\tfunction makeMoment(input, format, lang, utc) {\r\n\t\tvar config =\r\n\t\t\t{ _i: input\r\n\t\t\t, _f: format\r\n\t\t\t, _l: lang\r\n\t\t\t}\r\n\t\t\t, date\r\n\t\t\t, m\r\n\t\t\t, hm\r\n\t\tif (format) {\r\n\t\t\tif (isArray(format)) {\r\n\t\t\t\treturn makeDateFromStringAndArray(config, utc)\r\n\t\t\t} else {\r\n\t\t\t\tdate = makeDateFromStringAndFormat(config)\r\n\t\t\t\tremoveParsedTokens(config)\r\n\t\t\t\tformat = 'YYYY-MM-DD-' + config._f\r\n\t\t\t\tinput = leftZeroFill(date[0], 4) + '-'\r\n\t\t\t\t\t+ leftZeroFill(date[1] + 1, 2) + '-'\r\n\t\t\t\t\t+ leftZeroFill(date[2], 2) + '-'\r\n\t\t\t\t\t+ config._i\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (utc)\r\n\t\t\tm = moment.utc(input, format, lang)\r\n\t\telse\r\n\t\t\tm = moment(input, format, lang)\r\n\t\tif (config._isValid === false)\r\n\t\t\tm._isValid = false\r\n\t\tm._hDiff = config._hDiff || 0\r\n\t\thm = objectCreate(hMoment.fn)\r\n\t\textend(hm, m)\r\n\t\treturn hm\r\n\t}\r\n\r\n\tfunction hMoment(input, format, lang) {\r\n\t\treturn makeMoment(input, format, lang, false)\r\n\t}\r\n\r\n\textend(hMoment, moment)\r\n\thMoment.fn = objectCreate(moment.fn)\r\n\r\n\thMoment.utc = function (input, format, lang) {\r\n\t\treturn makeMoment(input, format, lang, true)\r\n\t}\r\n\r\n\t/************************************\r\n      hMoment Prototype\r\n  ************************************/\r\n\r\n\thMoment.fn.format = function (format) {\r\n\t\tvar i, replace, me = this\r\n\r\n\t\tif (format) {\r\n\t\t\ti = 5\r\n\t\t\treplace = function (input) {\r\n\t\t\t\treturn me.localeData().longDateFormat(input) || input\r\n\t\t\t}\r\n\t\t\twhile (i > 0 && localFormattingTokens.test(format)) {\r\n\t\t\t\ti -= 1\r\n\t\t\t\tformat = format.replace(localFormattingTokens, replace)\r\n\t\t\t}\r\n\t\t\tif (!formatFunctions[format]) {\r\n\t\t\t\tformatFunctions[format] = makeFormatFunction(format)\r\n\t\t\t}\r\n\t\t\tformat = formatFunctions[format](this)\r\n\t\t}\r\n\t\treturn moment.fn.format.call(this, format)\r\n\t}\r\n\r\n\thMoment.fn.iYear = function (input) {\r\n\t\tvar lastDay, h, g\r\n\t\tif (typeof input === 'number') {\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm))\r\n\t\t\tg = toGregorian(input, h.hm, lastDay)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hy\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iMonth = function (input) {\r\n\t\tvar lastDay, h, g\r\n\t\tif (input != null) {\r\n\t\t\tif (typeof input === 'string') {\r\n\t\t\t\tinput = this.localeData().iMonthsParse(input)\r\n\t\t\t\tif(input >= 0) {\r\n\t\t\t\t\tinput -= 1\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn this\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tlastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input))\r\n\t\t\tthis.iYear(h.hy + div(input, 12))\r\n\t\t\tinput = mod(input, 12)\r\n\t\t\tif (input < 0) {\r\n\t\t\t\tinput += 12\r\n\t\t\t\tthis.iYear(this.iYear() - 1)\r\n\t\t\t}\r\n\t\t\tg = toGregorian(this.iYear(), input, lastDay)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hm\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iDate = function (input) {\r\n\t\tvar h, g\r\n\t\tif (typeof input === 'number') {\r\n\t\t\th = toHijri(this.year(), this.month(), this.date())\r\n\t\t\tg = toGregorian(h.hy, h.hm, input)\r\n\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t//Workaround: sometimes moment wont set the date correctly if current day is the last in the month\r\n\t\t\tif (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {\r\n\t\t\t\tsetDate(this, g.gy, g.gm, g.gd)\r\n\t\t\t}\r\n\t\t\tmoment.updateOffset(this)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn toHijri(this.year(), this.month(), this.date()).hd\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.iDayOfYear = function (input) {\r\n\t\tvar dayOfYear = Math.round((hMoment(this).startOf('day') - hMoment(this).startOf('iYear')) / 864e5) + 1\r\n\t\treturn input == null ? dayOfYear : this.add(input - dayOfYear, 'd')\r\n\t}\r\n\r\n\thMoment.fn.iDaysInMonth = function () {\r\n\t\treturn parseInt(hMoment(this).endOf('iMonth').format('iDD'));\r\n\t}\r\n\r\n\thMoment.fn.iWeek = function (input) {\r\n\t\tvar week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week\r\n\t\treturn input == null ? week : this.add( (input - week) * 7, 'd')\r\n\t}\r\n\r\n\thMoment.fn.iWeekYear = function (input) {\r\n\t\tvar year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year\r\n\t\treturn input == null ? year : this.add(input - year, 'y')\r\n\t}\r\n\r\n\thMoment.fn.add = function (val, units) {\r\n\t\tvar temp\r\n\t\tif (units !== null && !isNaN(+units)) {\r\n\t\t\ttemp = val\r\n\t\t\tval = units\r\n\t\t\tunits = temp\r\n\t\t}\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear') {\r\n\t\t\tthis.iYear(this.iYear() + val)\r\n\t\t} else if (units === 'imonth') {\r\n\t\t\tthis.iMonth(this.iMonth() + val)\r\n\t\t} else if (units === 'idate') {\r\n\t\t\tthis.iDate(this.iDate() + val)\r\n\t\t}\r\n\t\t else {\r\n\t\t\tmoment.fn.add.call(this, val, units)\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\thMoment.fn.subtract = function (val, units) {\r\n\t\tvar temp\r\n\t\tif (units !== null && !isNaN(+units)) {\r\n\t\t\ttemp = val\r\n\t\t\tval = units\r\n\t\t\tunits = temp\r\n\t\t}\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear') {\r\n\t\t\tthis.iYear(this.iYear() - val)\r\n\t\t} else if (units === 'imonth') {\r\n\t\t\tthis.iMonth(this.iMonth() - val)\r\n\t\t} else if (units === 'idate') {\r\n\t\t\tthis.iDate(this.iDate() - val)\r\n\t\t} else {\r\n\t\t\tmoment.fn.subtract.call(this, val, units)\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\thMoment.fn.startOf = function (units) {\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === 'iyear' || units === 'imonth') {\r\n\t\t\tif (units === 'iyear') {\r\n\t\t\t\tthis.iMonth(0)\r\n\t\t\t}\r\n\t\t\tthis.iDate(1)\r\n\t\t\tthis.hours(0)\r\n\t\t\tthis.minutes(0)\r\n\t\t\tthis.seconds(0)\r\n\t\t\tthis.milliseconds(0)\r\n\t\t\treturn this\r\n\t\t} else {\r\n\t\t\treturn moment.fn.startOf.call(this, units)\r\n\t\t}\r\n\t}\r\n\r\n\thMoment.fn.endOf = function (units) {\r\n\t\tunits = normalizeUnits(units)\r\n\t\tif (units === undefined || units === 'milisecond') {\r\n\t\t\treturn this\r\n\t\t}\r\n\t\treturn this.startOf(units).add(1, (units === 'isoweek' ? 'week' : units)).subtract(1, 'milliseconds')\r\n\t}\r\n\r\n\thMoment.fn.clone = function () {\r\n\t\treturn hMoment(this)\r\n\t}\r\n\r\n\thMoment.fn.iYears = hMoment.fn.iYear\r\n\thMoment.fn.iMonths = hMoment.fn.iMonth\r\n\thMoment.fn.iDates = hMoment.fn.iDate\r\n\thMoment.fn.iWeeks = hMoment.fn.iWeek\r\n\r\n\t/************************************\r\n      hMoment Statics\r\n  ************************************/\r\n\r\n\thMoment.iDaysInMonth = function (year, month) {\r\n\t\tvar i = getNewMoonMJDNIndex(year, month + 1),\r\n\t\t\tdaysInMonth = ummalqura.ummalquraData[i] - ummalqura.ummalquraData[i - 1]\r\n\t\treturn daysInMonth\r\n\t}\r\n\r\n\tfunction toHijri(gy, gm, gd) {\r\n\t\tvar h = d2h(g2d(gy, gm + 1, gd))\r\n\t\th.hm -= 1\r\n\t\treturn h\r\n\t}\r\n\r\n\tfunction toGregorian(hy, hm, hd) {\r\n\t\tvar g = d2g(h2d(hy, hm + 1, hd))\r\n\t\tg.gm -= 1\r\n\t\treturn g\r\n\t}\r\n\r\n\thMoment.iConvert = {\r\n\t\ttoHijri: toHijri,\r\n\t\ttoGregorian: toGregorian\r\n\t}\r\n\r\n\treturn hMoment\r\n\r\n\t/************************************\r\n      Hijri Conversion\r\n  ************************************/\r\n\r\n\t/*\r\n    Utility helper functions.\r\n  */\r\n\r\n\tfunction div(a, b) {\r\n\t\treturn~~ (a / b)\r\n\t}\r\n\r\n\tfunction mod(a, b) {\r\n\t\treturn a - ~~(a / b) * b\r\n\t}\r\n\r\n\t/*\r\n    Converts a date of the Hijri calendar to the Julian Day number.\r\n\r\n    @param hy Hijri year (1356 to 1500)\r\n    @param hm Hijri month (1 to 12)\r\n    @param hd Hijri day (1 to 29/30)\r\n    @return Julian Day number\r\n  */\r\n\r\n\tfunction h2d(hy, hm, hd) {\r\n\t\tvar i = getNewMoonMJDNIndex(hy, hm),\r\n\t\t\tmjdn = hd + ummalqura.ummalquraData[i - 1] - 1,\r\n\t\t\tjdn = mjdn + 2400000;\r\n\t\treturn jdn\r\n\t}\r\n\r\n\t/*\r\n    Converts the Julian Day number to a date in the Hijri calendar.\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      hy: Hijri year (1356 to 1500)\r\n      hm: Hijri month (1 to 12)\r\n      hd: Hijri day (1 to 29/30)\r\n  */\r\n\r\n\tfunction d2h(jdn) {\r\n\t\tvar mjdn = jdn - 2400000,\r\n\t\t\ti = getNewMoonMJDNIndexByJDN(mjdn),\r\n\t\t\ttotalMonths = i + 16260,\r\n\t\t\tcYears = Math.floor((totalMonths - 1) / 12),\r\n\t\t\thy = cYears + 1,\r\n\t\t\thm = totalMonths - 12 * cYears,\r\n\t\t\thd = mjdn - ummalqura.ummalquraData[i - 1] + 1\r\n\r\n\t\treturn {\r\n\t\t\thy: hy,\r\n\t\t\thm: hm,\r\n\t\t\thd: hd\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    Calculates the Julian Day number from Gregorian or Julian\r\n    calendar dates. This integer number corresponds to the noon of\r\n    the date (i.e. 12 hours of Universal Time).\r\n    The procedure was tested to be good since 1 March, -100100 (of both\r\n    calendars) up to a few million years into the future.\r\n\r\n    @param gy Calendar year (years BC numbered 0, -1, -2, ...)\r\n    @param gm Calendar month (1 to 12)\r\n    @param gd Calendar day of the month (1 to 28/29/30/31)\r\n    @return Julian Day number\r\n  */\r\n\r\n\tfunction g2d(gy, gm, gd) {\r\n\t\tvar d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408\r\n\t\td = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\r\n\t\treturn d\r\n\t}\r\n\r\n\t/*\r\n    Calculates Gregorian and Julian calendar dates from the Julian Day number\r\n    (hdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\r\n    calendars) to some millions years ahead of the present.\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      gy: Calendar year (years BC numbered 0, -1, -2, ...)\r\n      gm: Calendar month (1 to 12)\r\n      gd: Calendar day of the month M (1 to 28/29/30/31)\r\n  */\r\n\r\n\tfunction d2g(jdn) {\r\n\t\tvar j, i, gd, gm, gy\r\n\t\tj = 4 * jdn + 139361631\r\n\t\tj = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\r\n\t\ti = div(mod(j, 1461), 4) * 5 + 308\r\n\t\tgd = div(mod(i, 153), 5) + 1\r\n\t\tgm = mod(div(i, 153), 12) + 1\r\n\t\tgy = div(j, 1461) - 100100 + div(8 - gm, 6)\r\n\t\treturn {\r\n\t\t\tgy: gy,\r\n\t\t\tgm: gm,\r\n\t\t\tgd: gd\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n    Returns the index of the modified Julian day number of the new moon\r\n    by the given year and month\r\n\r\n    @param hy: Hijri year (1356 to 1500)\r\n    @param hm: Hijri month (1 to 12)\r\n    @return\r\n        i: the index of the new moon in modified Julian day number.\r\n  */\r\n\tfunction getNewMoonMJDNIndex(hy, hm) {\r\n\t\tvar cYears = hy - 1,\r\n\t\t\ttotalMonths = (cYears * 12) + 1 + (hm - 1),\r\n\t\t\ti = totalMonths - 16260\r\n\t\treturn i\r\n\t}\r\n\r\n\t/*\r\n    Returns the nearest new moon\r\n\r\n    @param jdn Julian Day number\r\n    @return\r\n      i: the index of a modified Julian day number.\r\n  */\r\n\tfunction getNewMoonMJDNIndexByJDN(mjdn) {\r\n\t\tfor (var i = 0; i < ummalqura.ummalquraData.length; i=i+1) {\r\n\t\t\tif (ummalqura.ummalquraData[i] > mjdn)\r\n\t\t\t\treturn i\r\n\t\t}\r\n\t}\r\n\r\n});\r\n"]},"metadata":{},"sourceType":"script"}