{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Composables\nimport { useProxiedModel } from \"./proxiedModel.mjs\"; // Utilities\n\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue';\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from \"../util/index.mjs\"; // Types\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String],\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean\n}, 'group');\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String\n}, 'group-item');\nexport function useGroupItem(props, injectKey) {\n  let required = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const vm = getCurrentInstance('useGroupItem');\n\n  if (!vm) {\n    throw new Error('[Vuetify] useGroupItem composable must be used inside a component setup function');\n  }\n\n  const id = getUid();\n  provide(Symbol.for(`${injectKey.description}:id`), id);\n  const group = inject(injectKey, null);\n\n  if (!group) {\n    if (!required) return group;\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`);\n  }\n\n  const value = toRef(props, 'value');\n  const disabled = computed(() => group.disabled.value || props.disabled);\n  group.register({\n    id,\n    value,\n    disabled\n  }, vm);\n  onBeforeUnmount(() => {\n    group.unregister(id);\n  });\n  const isSelected = computed(() => {\n    return group.isSelected(id);\n  });\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass]);\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: value => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group\n  };\n}\nexport function useGroup(props, injectKey) {\n  let isUnmounted = false;\n  const items = reactive([]);\n  const selected = useProxiedModel(props, 'modelValue', [], v => {\n    if (v == null) return [];\n    return getIds(items, wrapInArray(v));\n  }, v => {\n    const arr = getValues(items, v);\n    return props.multiple ? arr : arr[0];\n  });\n  const groupVm = getCurrentInstance('useGroup');\n\n  function register(item, vm) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item;\n    const key = Symbol.for(`${injectKey.description}:id`);\n    const children = findChildrenWithProvide(key, groupVm == null ? void 0 : groupVm.vnode);\n    const index = children.indexOf(vm);\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped);\n    } else {\n      items.push(unwrapped);\n    }\n  }\n\n  function unregister(id) {\n    if (isUnmounted) return; // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue();\n    const index = items.findIndex(item => item.id === id);\n    items.splice(index, 1);\n  } // If mandatory and nothing is selected, then select first non-disabled item\n\n\n  function forceMandatoryValue() {\n    const item = items.find(item => !item.disabled);\n\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id];\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue();\n  });\n  onBeforeUnmount(() => {\n    isUnmounted = true;\n  });\n\n  function select(id, value) {\n    const item = items.find(item => item.id === id);\n    if (value && item != null && item.disabled) return;\n\n    if (props.multiple) {\n      var _value;\n\n      const internalValue = selected.value.slice();\n      const index = internalValue.findIndex(v => v === id);\n      const isSelected = ~index;\n      value = (_value = value) != null ? _value : !isSelected; // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n\n      if (isSelected && props.mandatory && internalValue.length <= 1) return; // We can't add value if it would\n      // cause max limit to be exceeded\n\n      if (!isSelected && props.max != null && internalValue.length + 1 > props.max) return;\n      if (index < 0 && value) internalValue.push(id);else if (index >= 0 && !value) internalValue.splice(index, 1);\n      selected.value = internalValue;\n    } else {\n      var _value2;\n\n      const isSelected = selected.value.includes(id);\n      if (props.mandatory && isSelected) return;\n      selected.value = ((_value2 = value) != null ? _value2 : !isSelected) ? [id] : [];\n    }\n  }\n\n  function step(offset) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop');\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled);\n      item && (selected.value = [item.id]);\n    } else {\n      const currentId = selected.value[0];\n      const currentIndex = items.findIndex(i => i.id === currentId);\n      let newIndex = (currentIndex + offset) % items.length;\n      let newItem = items[newIndex];\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length;\n        newItem = items[newIndex];\n      }\n\n      if (newItem.disabled) return;\n      selected.value = [items[newIndex].id];\n    }\n  }\n\n  const state = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: id => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: value => getItemIndex(items, value)\n  };\n  provide(injectKey, state);\n  return state;\n}\n\nfunction getItemIndex(items, value) {\n  const ids = getIds(items, [value]);\n  if (!ids.length) return -1;\n  return items.findIndex(item => item.id === ids[0]);\n}\n\nfunction getIds(items, modelValue) {\n  const ids = [];\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value)) != null) {\n        ids.push(item.id);\n      }\n    } else if (modelValue.includes(i)) {\n      ids.push(item.id);\n    }\n  }\n\n  return ids;\n}\n\nfunction getValues(items, ids) {\n  const values = [];\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i];\n\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : i);\n    }\n  }\n\n  return values;\n}","map":{"version":3,"mappings":"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","names":["useProxiedModel","computed","inject","onBeforeUnmount","onMounted","provide","reactive","toRef","consoleWarn","deepEqual","findChildrenWithProvide","getCurrentInstance","getUid","propsFactory","wrapInArray","makeGroupProps","modelValue","type","default","undefined","multiple","Boolean","mandatory","String","max","Number","selectedClass","disabled","makeGroupItemProps","value","useGroupItem","props","injectKey","required","vm","Error","id","Symbol","for","description","group","register","unregister","isSelected","toggle","select","useGroup","isUnmounted","items","selected","v","getIds","arr","getValues","groupVm","item","unwrapped","key","children","vnode","index","indexOf","splice","push","forceMandatoryValue","findIndex","find","length","internalValue","slice","includes","step","offset","currentId","currentIndex","i","newIndex","newItem","state","prev","next","getItemIndex","ids","values"],"sources":["../../src/composables/group.ts"],"sourcesContent":["// Composables\nimport { useProxiedModel } from './proxiedModel'\n\n// Utilities\nimport { computed, inject, onBeforeUnmount, onMounted, provide, reactive, toRef } from 'vue'\nimport { consoleWarn, deepEqual, findChildrenWithProvide, getCurrentInstance, getUid, propsFactory, wrapInArray } from '@/util'\n\n// Types\nimport type { ComponentInternalInstance, ComputedRef, ExtractPropTypes, InjectionKey, PropType, Ref, UnwrapRef } from 'vue'\n\nexport interface GroupItem {\n  id: number\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n}\n\nexport interface GroupProps {\n  disabled: boolean\n  modelValue: unknown\n  multiple?: boolean\n  mandatory?: boolean | 'force' | undefined\n  max?: number | undefined\n  selectedClass: string | undefined\n  'onUpdate:modelValue': ((val: unknown) => void) | undefined\n}\n\nexport interface GroupProvide {\n  register: (item: GroupItem, cmp: ComponentInternalInstance) => void\n  unregister: (id: number) => void\n  select: (id: number, value: boolean) => void\n  selected: Ref<any[]>\n  isSelected: (id: number) => boolean\n  prev: () => void\n  next: () => void\n  selectedClass: Ref<string | undefined>\n  items: ComputedRef<{\n    id: number\n    value: unknown\n    disabled: boolean | undefined\n  }[]>\n  disabled: Ref<boolean | undefined>\n  getItemIndex: (value: unknown) => number\n}\n\nexport interface GroupItemProvide {\n  id: number\n  isSelected: Ref<boolean>\n  toggle: () => void\n  select: (value: boolean) => void\n  selectedClass: Ref<(string | undefined)[] | false>\n  value: Ref<unknown>\n  disabled: Ref<boolean | undefined>\n  group: GroupProvide\n}\n\nexport const makeGroupProps = propsFactory({\n  modelValue: {\n    type: null,\n    default: undefined,\n  },\n  multiple: Boolean,\n  mandatory: [Boolean, String] as PropType<boolean | 'force'>,\n  max: Number,\n  selectedClass: String,\n  disabled: Boolean,\n}, 'group')\n\nexport const makeGroupItemProps = propsFactory({\n  value: null,\n  disabled: Boolean,\n  selectedClass: String,\n}, 'group-item')\n\nexport type GroupItemProps = ExtractPropTypes<ReturnType<typeof makeGroupItemProps>>\n\n// Composables\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required?: true,\n): GroupItemProvide\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required: false,\n): GroupItemProvide | null\nexport function useGroupItem (\n  props: GroupItemProps,\n  injectKey: InjectionKey<GroupProvide>,\n  required = true,\n): GroupItemProvide | null {\n  const vm = getCurrentInstance('useGroupItem')\n\n  if (!vm) {\n    throw new Error(\n      '[Vuetify] useGroupItem composable must be used inside a component setup function'\n    )\n  }\n\n  const id = getUid()\n\n  provide(Symbol.for(`${injectKey.description}:id`), id)\n\n  const group = inject(injectKey, null)\n\n  if (!group) {\n    if (!required) return group\n\n    throw new Error(`[Vuetify] Could not find useGroup injection with symbol ${injectKey.description}`)\n  }\n\n  const value = toRef(props, 'value')\n  const disabled = computed(() => group.disabled.value || props.disabled)\n\n  group.register({\n    id,\n    value,\n    disabled,\n  }, vm)\n\n  onBeforeUnmount(() => {\n    group.unregister(id)\n  })\n\n  const isSelected = computed(() => {\n    return group.isSelected(id)\n  })\n\n  const selectedClass = computed(() => isSelected.value && [group.selectedClass.value, props.selectedClass])\n\n  return {\n    id,\n    isSelected,\n    toggle: () => group.select(id, !isSelected.value),\n    select: (value: boolean) => group.select(id, value),\n    selectedClass,\n    value,\n    disabled,\n    group,\n  }\n}\n\nexport function useGroup (\n  props: GroupProps,\n  injectKey: InjectionKey<GroupProvide>\n) {\n  let isUnmounted = false\n  const items = reactive<GroupItem[]>([])\n  const selected = useProxiedModel(\n    props,\n    'modelValue',\n    [],\n    v => {\n      if (v == null) return []\n\n      return getIds(items, wrapInArray(v))\n    },\n    v => {\n      const arr = getValues(items, v)\n\n      return props.multiple ? arr : arr[0]\n    }\n  )\n\n  const groupVm = getCurrentInstance('useGroup')\n\n  function register (item: GroupItem, vm: ComponentInternalInstance) {\n    // Is there a better way to fix this typing?\n    const unwrapped = item as unknown as UnwrapRef<GroupItem>\n\n    const key = Symbol.for(`${injectKey.description}:id`)\n    const children = findChildrenWithProvide(key, groupVm?.vnode)\n    const index = children.indexOf(vm)\n\n    if (index > -1) {\n      items.splice(index, 0, unwrapped)\n    } else {\n      items.push(unwrapped)\n    }\n  }\n\n  function unregister (id: number) {\n    if (isUnmounted) return\n\n    // TODO: re-evaluate this line's importance in the future\n    // should we only modify the model if mandatory is set.\n    // selected.value = selected.value.filter(v => v !== id)\n\n    forceMandatoryValue()\n\n    const index = items.findIndex(item => item.id === id)\n    items.splice(index, 1)\n  }\n\n  // If mandatory and nothing is selected, then select first non-disabled item\n  function forceMandatoryValue () {\n    const item = items.find(item => !item.disabled)\n    if (item && props.mandatory === 'force' && !selected.value.length) {\n      selected.value = [item.id]\n    }\n  }\n\n  onMounted(() => {\n    forceMandatoryValue()\n  })\n\n  onBeforeUnmount(() => {\n    isUnmounted = true\n  })\n\n  function select (id: number, value?: boolean) {\n    const item = items.find(item => item.id === id)\n    if (value && item?.disabled) return\n\n    if (props.multiple) {\n      const internalValue = selected.value.slice()\n      const index = internalValue.findIndex(v => v === id)\n      const isSelected = ~index\n      value = value ?? !isSelected\n\n      // We can't remove value if group is\n      // mandatory, value already exists,\n      // and it is the only value\n      if (\n        isSelected &&\n        props.mandatory &&\n        internalValue.length <= 1\n      ) return\n\n      // We can't add value if it would\n      // cause max limit to be exceeded\n      if (\n        !isSelected &&\n        props.max != null &&\n        internalValue.length + 1 > props.max\n      ) return\n\n      if (index < 0 && value) internalValue.push(id)\n      else if (index >= 0 && !value) internalValue.splice(index, 1)\n\n      selected.value = internalValue\n    } else {\n      const isSelected = selected.value.includes(id)\n      if (props.mandatory && isSelected) return\n\n      selected.value = (value ?? !isSelected) ? [id] : []\n    }\n  }\n\n  function step (offset: number) {\n    // getting an offset from selected value obviously won't work with multiple values\n    if (props.multiple) consoleWarn('This method is not supported when using \"multiple\" prop')\n\n    if (!selected.value.length) {\n      const item = items.find(item => !item.disabled)\n      item && (selected.value = [item.id])\n    } else {\n      const currentId = selected.value[0]\n      const currentIndex = items.findIndex(i => i.id === currentId)\n\n      let newIndex = (currentIndex + offset) % items.length\n      let newItem = items[newIndex]\n\n      while (newItem.disabled && newIndex !== currentIndex) {\n        newIndex = (newIndex + offset) % items.length\n        newItem = items[newIndex]\n      }\n\n      if (newItem.disabled) return\n\n      selected.value = [items[newIndex].id]\n    }\n  }\n\n  const state: GroupProvide = {\n    register,\n    unregister,\n    selected,\n    select,\n    disabled: toRef(props, 'disabled'),\n    prev: () => step(items.length - 1),\n    next: () => step(1),\n    isSelected: (id: number) => selected.value.includes(id),\n    selectedClass: computed(() => props.selectedClass),\n    items: computed(() => items),\n    getItemIndex: (value: unknown) => getItemIndex(items, value),\n  }\n\n  provide(injectKey, state)\n\n  return state\n}\n\nfunction getItemIndex (items: UnwrapRef<GroupItem[]>, value: unknown) {\n  const ids = getIds(items, [value])\n\n  if (!ids.length) return -1\n\n  return items.findIndex(item => item.id === ids[0])\n}\n\nfunction getIds (items: UnwrapRef<GroupItem[]>, modelValue: any[]) {\n  const ids = []\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (item.value != null) {\n      if (modelValue.find(value => deepEqual(value, item.value)) != null) {\n        ids.push(item.id)\n      }\n    } else if (modelValue.includes(i)) {\n      ids.push(item.id)\n    }\n  }\n\n  return ids\n}\n\nfunction getValues (items: UnwrapRef<GroupItem[]>, ids: any[]) {\n  const values = []\n\n  for (let i = 0; i < items.length; i++) {\n    const item = items[i]\n\n    if (ids.includes(item.id)) {\n      values.push(item.value != null ? item.value : i)\n    }\n  }\n\n  return values\n}\n"]},"metadata":{},"sourceType":"module"}