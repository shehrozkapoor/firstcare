{"ast":null,"code":"import { withModifiers as _withModifiers, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", {\n    class: \"ui attached segment\",\n    ref: \"quill\",\n    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => $options.focusEditor && $options.focusEditor(...args), [\"prevent\"]))\n  }, null, 512\n  /* NEED_PATCH */\n  )]);\n}","map":{"version":3,"mappings":";;uBACIA,oBAEM,KAFN,EAEM,IAFN,EAEM,CADFC,oBAAgF,KAAhF,EAAgF;AAA3EC,SAAK,EAAC,qBAAqE;AAA/CC,OAAG,EAAC,OAA2C;AAAlCC,WAAK,wDAAUC,qDAAV,EAAqB,WAArB;AAA6B,GAAhF;;AAAA,GACE,CAFN","names":["_createElementBlock","_createElementVNode","class","ref","onClick","$options"],"sourceRoot":"","sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/vue-quill/src/Quill.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"ui attached segment\" ref=\"quill\" @click.prevent=\"focusEditor\"></div>\n    </div>\n</template>\n\n<script>\n    import defaultsDeep from 'lodash.defaultsdeep'\n    import Quill from 'quill'\n    import GrammarlyInline from './formats/GrammarlyInline'\n\n    export default {\n        model: {\n            prop: 'content',\n        },\n\n        props: {\n            content: {},\n\n            formats: {\n                type: Array,\n                default() {\n                    return []\n                },\n            },\n\n            keyBindings: {\n                type: Array,\n                default() {\n                    return []\n                },\n            },\n\n            output: {\n                default : 'delta'\n            },\n\n            bus: {\n                default: false,\n            },\n\n            config: {\n                default() {\n                    return {}\n                },\n            },\n        },\n\n        data() {\n            return {\n                editor: {},\n                defaultConfig: {\n                    modules: {\n                        toolbar: [\n                            ['bold', 'italic', 'underline'],\n                            [\n                               { 'list': 'ordered' }, { 'list': 'bullet' }\n                            ],\n                            [{ 'align': [] }],\n                        ],\n                    },\n                    theme: 'snow',\n                },\n            }\n        },\n\n        mounted() {\n            if (this.keyBindings.length) {\n                this.defaultConfig.modules.keyboard = {\n                    bindings: this.keyBindings.map((binding) => {\n                        if (binding.remove) return false\n                        return {\n                            key: binding.key,\n                            metaKey: true,\n                            handler: binding.method.bind(this),\n                        }\n                    })\n                }\n            }\n\n            if (this.config.modules && this.config.modules.toolbar) {\n                this.defaultConfig.modules.toolbar = []\n            }\n\n            Quill.register(GrammarlyInline)\n\n            this.editor = new Quill(this.$refs.quill, defaultsDeep(this.config, this.defaultConfig))\n\n            if (this.content && this.content !== '') {\n\t            if (this.output != 'delta') {\n\t                this.editor.pasteHTML(this.content)\n\t            } else {\n\t                this.editor.setContents(this.content)\n\t            }\n            }\n\n            this.editor.on('text-change', (delta, source) => {\n                this.$emit('text-change', this.editor, delta, source)\n                if (this.editor.getText().length <= 1) {\n                  this.$emit('input', '')\n                } else {\n                  this.$emit('input', this.output != 'delta' ? this.editor.root.innerHTML : this.editor.getContents())\n                }\n            })\n\n            this.editor.on('selection-change', (range) => {\n                this.$emit('selection-change', this.editor, range)\n            })\n\n            if (this.bus) {\n                this.bus.$on('focus-editor', () => this.focusEditor())\n                this.bus.$on('set-content', (content) => this.editor.setContents(content))\n                this.bus.$on('set-html', (html) => {\n                    if (!html || html === '') return\n\n                    this.editor.root.innerHTML = html\n                })\n            }\n\n            this.$on('focus-editor', () => this.focusEditor())\n            this.$on('set-content', (content) => this.editor.setContents(content))\n            this.$on('set-html', (html) => {\n                if (!html || html === '') return\n\n                this.editor.root.innerHTML = html\n            })\n\n            this.$nextTick(() => {\n                const selectors = ['button', '.ql-picker-label', '.ql-picker-item']\n                const toolbar = this.$el.querySelector('.ql-toolbar')\n                selectors.forEach((selector) => {\n                    toolbar.querySelectorAll(selector).forEach((element) => {\n                        element.tabIndex = -1\n                    })\n                })\n            })\n        },\n\n        methods: {\n            focusEditor(e) {\n                if (e && e.srcElement) {\n                    let classList = e.srcElement.classList,\n                        isSegment = false\n\n                    classList.forEach((className) => {\n                        if (className === 'segment') {\n                            isSegment = true\n                            return\n                        }\n                    })\n\n                    if (!isSegment) return\n                }\n\n                this.editor.focus()\n                this.editor.setSelection(this.editor.getLength()-1, this.editor.getLength())\n            }\n        },\n\n        beforeDestroy() {\n            if (this.bus) {\n                this.bus.$off('focus-editor')\n                this.bus.$off('set-content')\n                this.bus.$off('set-html')\n            }\n        },\n    }\n</script>\n"]},"metadata":{},"sourceType":"module"}