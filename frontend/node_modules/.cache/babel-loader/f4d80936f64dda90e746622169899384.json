{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { addClass, outerHeight } from \"./../helpers/dom/element.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\n/**\n * @class GhostTable\n */\n\nvar GhostTable = /*#__PURE__*/function () {\n  function GhostTable(hotInstance) {\n    _classCallCheck(this, GhostTable);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n\n\n    this.hot = hotInstance;\n    /**\n     * Container element where every table will be injected.\n     *\n     * @type {HTMLElement|null}\n     */\n\n    this.container = null;\n    /**\n     * Flag which determine is table was injected to DOM.\n     *\n     * @type {boolean}\n     */\n\n    this.injected = false;\n    /**\n     * Added rows collection.\n     *\n     * @type {Array}\n     */\n\n    this.rows = [];\n    /**\n     * Added columns collection.\n     *\n     * @type {Array}\n     */\n\n    this.columns = [];\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n\n    this.samples = null;\n    /**\n     * Ghost table settings.\n     *\n     * @type {object}\n     * @default {Object}\n     */\n\n    this.settings = {\n      useHeaders: true\n    };\n  }\n  /**\n   * Add row.\n   *\n   * @param {number} row Row index.\n   * @param {Map} samples Samples Map object.\n   */\n\n\n  _createClass(GhostTable, [{\n    key: \"addRow\",\n    value: function addRow(row, samples) {\n      if (this.columns.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.rows.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var rowObject = {\n        row: row\n      };\n      this.rows.push(rowObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n      this.table.colGroup.appendChild(this.createColGroupsCol());\n      this.table.tr.appendChild(this.createRow(row));\n      this.container.container.appendChild(this.table.fragment);\n      rowObject.table = this.table.table;\n    }\n    /**\n     * Add a row consisting of the column headers.\n     *\n     * @param {Map} samples A map with sampled table values.\n     */\n\n  }, {\n    key: \"addColumnHeadersRow\",\n    value: function addColumnHeadersRow(samples) {\n      var colHeader = this.hot.getColHeader(0);\n\n      if (colHeader !== null && colHeader !== void 0) {\n        var rowObject = {\n          row: -1\n        };\n        this.rows.push(rowObject);\n        this.container = this.createContainer(this.hot.rootElement.className);\n        this.samples = samples;\n        this.table = this.createTable(this.hot.table.className);\n        this.table.colGroup.appendChild(this.createColGroupsCol());\n        this.appendColumnHeadersRow();\n        this.container.container.appendChild(this.table.fragment);\n        rowObject.table = this.table.table;\n      }\n    }\n    /**\n     * Add column.\n     *\n     * @param {number} column Column index.\n     * @param {Map} samples A map with sampled table values.\n     */\n\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(column, samples) {\n      if (this.rows.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.columns.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var columnObject = {\n        col: column\n      };\n      this.columns.push(columnObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n\n      if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {\n        // Please keep in mind that the renderable column index equal to the visual columns index for the GhostTable.\n        // We render all columns.\n        this.hot.view.appendColHeader(column, this.table.th);\n      }\n\n      this.table.tBody.appendChild(this.createCol(column));\n      this.container.container.appendChild(this.table.fragment);\n      columnObject.table = this.table.table;\n    }\n    /**\n     * Get calculated heights.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated row.\n     */\n\n  }, {\n    key: \"getHeights\",\n    value: function getHeights(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.rows, function (row) {\n        // -1 <- reduce border-top from table\n        callback(row.row, outerHeight(row.table) - 1);\n      });\n    }\n    /**\n     * Get calculated widths.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated column.\n     */\n\n  }, {\n    key: \"getWidths\",\n    value: function getWidths(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.columns, function (column) {\n        // The GhostTable class is responsible for calculating the columns' width based on the\n        // contents rendered in the cells. In some cases, when the column's width calculated by\n        // the browser is a decimal point with a fractional component. For example, 35.32px.\n        // The usage of the `.offsetWidth` (or our helper `outerWidth`) is incorrect.\n        // The `outerWidth` in the mentioned example (35.32px) would return 35 pixels that\n        // would cause the text to not fit in the cell, thus increasing the row height.\n        // That's why the `getBoundingClientRect` method is used. The method returns the number\n        // that is rounded up to make sure that there will be a space for the cell's content.\n        var _column$table$getBoun = column.table.getBoundingClientRect(),\n            width = _column$table$getBoun.width;\n\n        callback(column.col, Math.ceil(width));\n      });\n    }\n    /**\n     * Set the Ghost Table settings to the provided object.\n     *\n     * @param {object} settings New Ghost Table Settings.\n     */\n\n  }, {\n    key: \"setSettings\",\n    value: function setSettings(settings) {\n      this.settings = settings;\n    }\n    /**\n     * Set a single setting of the Ghost Table.\n     *\n     * @param {string} name Setting name.\n     * @param {*} value Setting value.\n     */\n\n  }, {\n    key: \"setSetting\",\n    value: function setSetting(name, value) {\n      if (!this.settings) {\n        this.settings = {};\n      }\n\n      this.settings[name] = value;\n    }\n    /**\n     * Get the Ghost Table settings.\n     *\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return this.settings;\n    }\n    /**\n     * Get a single Ghost Table setting.\n     *\n     * @param {string} name The setting name to get.\n     * @returns {boolean|null}\n     */\n\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(name) {\n      if (this.settings) {\n        return this.settings[name];\n      }\n\n      return null;\n    }\n    /**\n     * Create colgroup col elements.\n     *\n     * @returns {DocumentFragment}\n     */\n\n  }, {\n    key: \"createColGroupsCol\",\n    value: function createColGroupsCol() {\n      var _this = this;\n\n      var fragment = this.hot.rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        fragment.appendChild(this.createColElement(-1));\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          fragment.appendChild(_this.createColElement(string.col));\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table row element.\n     *\n     * @param {number} row Row index.\n     * @returns {DocumentFragment} Returns created table row elements.\n     */\n\n  }, {\n    key: \"createRow\",\n    value: function createRow(row) {\n      var _this2 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var th = rootDocument.createElement('th');\n\n      if (this.hot.hasRowHeaders()) {\n        this.hot.view.appendRowHeader(row, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n\n          var cellProperties = _this2.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this2.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);\n          fragment.appendChild(td);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Creates DOM elements for headers and appends them to the THEAD element of the table.\n     */\n\n  }, {\n    key: \"appendColumnHeadersRow\",\n    value: function appendColumnHeadersRow() {\n      var _this3 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var domFragment = rootDocument.createDocumentFragment();\n      var columnHeaders = [];\n\n      if (this.hot.hasRowHeaders()) {\n        var th = rootDocument.createElement('th');\n        columnHeaders.push([-1, th]);\n        domFragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n          var th = rootDocument.createElement('th');\n          columnHeaders.push([column, th]);\n          domFragment.appendChild(th);\n        });\n      }); // Appending DOM elements for headers\n\n      this.table.tHead.appendChild(domFragment);\n      arrayEach(columnHeaders, function (columnHeader) {\n        var _columnHeader = _slicedToArray(columnHeader, 2),\n            column = _columnHeader[0],\n            th = _columnHeader[1]; // Using source method for filling a header with value.\n\n\n        _this3.hot.view.appendColHeader(column, th);\n      });\n    }\n    /**\n     * Create table column elements.\n     *\n     * @param {number} column Column index.\n     * @returns {DocumentFragment} Returns created column table column elements.\n     */\n\n  }, {\n    key: \"createCol\",\n    value: function createCol(column) {\n      var _this4 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var row = string.row;\n\n          var cellProperties = _this4.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this4.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td');\n          var tr = rootDocument.createElement('tr'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);\n          tr.appendChild(td);\n          fragment.appendChild(tr);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Remove table from document and reset internal state.\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.rows.length = 0;\n      this.rows[-1] = void 0;\n      this.columns.length = 0;\n\n      if (this.samples) {\n        this.samples.clear();\n      }\n\n      this.samples = null;\n      this.removeTable();\n    }\n    /**\n     * Inject generated table into document.\n     *\n     * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.\n     */\n\n  }, {\n    key: \"injectTable\",\n    value: function injectTable() {\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!this.injected) {\n        (parent || this.hot.rootElement).appendChild(this.container.fragment);\n        this.injected = true;\n      }\n    }\n    /**\n     * Remove table from document.\n     */\n\n  }, {\n    key: \"removeTable\",\n    value: function removeTable() {\n      if (this.injected && this.container.container.parentNode) {\n        this.container.container.parentNode.removeChild(this.container.container);\n        this.container = null;\n        this.injected = false;\n      }\n    }\n    /**\n     * Create col element.\n     *\n     * @param {number} column Column index.\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createColElement\",\n    value: function createColElement(column) {\n      var col = this.hot.rootDocument.createElement('col');\n      col.style.width = \"\".concat(this.hot.view.wt.wtTable.getStretchedColumnWidth(column), \"px\");\n      return col;\n    }\n    /**\n     * Create table element.\n     *\n     * @param {string} className The CSS classes to add.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"createTable\",\n    value: function createTable() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var table = rootDocument.createElement('table');\n      var tHead = rootDocument.createElement('thead');\n      var tBody = rootDocument.createElement('tbody');\n      var colGroup = rootDocument.createElement('colgroup');\n      var tr = rootDocument.createElement('tr');\n      var th = rootDocument.createElement('th');\n\n      if (this.isVertical()) {\n        table.appendChild(colGroup);\n      }\n\n      if (this.isHorizontal()) {\n        tr.appendChild(th);\n        tHead.appendChild(tr);\n        table.style.tableLayout = 'auto';\n        table.style.width = 'auto';\n      }\n\n      table.appendChild(tHead);\n\n      if (this.isVertical()) {\n        tBody.appendChild(tr);\n      }\n\n      table.appendChild(tBody);\n      addClass(table, className);\n      fragment.appendChild(table);\n      return {\n        fragment: fragment,\n        table: table,\n        tHead: tHead,\n        tBody: tBody,\n        colGroup: colGroup,\n        tr: tr,\n        th: th\n      };\n    }\n    /**\n     * Create container for tables.\n     *\n     * @param {string} className The CSS classes to add.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var container = rootDocument.createElement('div');\n      var containerClassName = \"htGhostTable htAutoSize \".concat(className.trim());\n      addClass(container, containerClassName);\n      fragment.appendChild(container);\n      return {\n        fragment: fragment,\n        container: container\n      };\n    }\n    /**\n     * Checks if table is raised vertically (checking rows).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return !!(this.rows.length && !this.columns.length);\n    }\n    /**\n     * Checks if table is raised horizontally (checking columns).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return !!(this.columns.length && !this.rows.length);\n    }\n  }]);\n\n  return GhostTable;\n}();\n\nexport default GhostTable;","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/utils/ghostTable.mjs"],"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","addClass","outerHeight","arrayEach","GhostTable","hotInstance","hot","container","injected","rows","columns","samples","settings","useHeaders","addRow","row","Error","createContainer","rootElement","className","rowObject","table","createTable","colGroup","appendChild","createColGroupsCol","tr","createRow","fragment","addColumnHeadersRow","colHeader","getColHeader","appendColumnHeadersRow","addColumn","column","columnObject","col","getSetting","view","appendColHeader","th","tBody","createCol","getHeights","callback","injectTable","getWidths","_column$table$getBoun","getBoundingClientRect","width","Math","ceil","setSettings","setSetting","getSettings","_this","rootDocument","createDocumentFragment","hasRowHeaders","createColElement","forEach","sample","strings","string","_this2","createElement","appendRowHeader","cellProperties","getCellMeta","renderer","getCellRenderer","td","setAttribute","colToProp","_this3","domFragment","columnHeaders","tHead","columnHeader","_columnHeader","_this4","clean","clear","removeTable","parent","arguments","undefined","parentNode","removeChild","style","concat","wt","wtTable","getStretchedColumnWidth","isVertical","isHorizontal","tableLayout","containerClassName","trim"],"mappings":"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","sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { addClass, outerHeight } from \"./../helpers/dom/element.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\n/**\n * @class GhostTable\n */\n\nvar GhostTable = /*#__PURE__*/function () {\n  function GhostTable(hotInstance) {\n    _classCallCheck(this, GhostTable);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * Container element where every table will be injected.\n     *\n     * @type {HTMLElement|null}\n     */\n\n    this.container = null;\n    /**\n     * Flag which determine is table was injected to DOM.\n     *\n     * @type {boolean}\n     */\n\n    this.injected = false;\n    /**\n     * Added rows collection.\n     *\n     * @type {Array}\n     */\n\n    this.rows = [];\n    /**\n     * Added columns collection.\n     *\n     * @type {Array}\n     */\n\n    this.columns = [];\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n\n    this.samples = null;\n    /**\n     * Ghost table settings.\n     *\n     * @type {object}\n     * @default {Object}\n     */\n\n    this.settings = {\n      useHeaders: true\n    };\n  }\n  /**\n   * Add row.\n   *\n   * @param {number} row Row index.\n   * @param {Map} samples Samples Map object.\n   */\n\n\n  _createClass(GhostTable, [{\n    key: \"addRow\",\n    value: function addRow(row, samples) {\n      if (this.columns.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.rows.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var rowObject = {\n        row: row\n      };\n      this.rows.push(rowObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n      this.table.colGroup.appendChild(this.createColGroupsCol());\n      this.table.tr.appendChild(this.createRow(row));\n      this.container.container.appendChild(this.table.fragment);\n      rowObject.table = this.table.table;\n    }\n    /**\n     * Add a row consisting of the column headers.\n     *\n     * @param {Map} samples A map with sampled table values.\n     */\n\n  }, {\n    key: \"addColumnHeadersRow\",\n    value: function addColumnHeadersRow(samples) {\n      var colHeader = this.hot.getColHeader(0);\n\n      if (colHeader !== null && colHeader !== void 0) {\n        var rowObject = {\n          row: -1\n        };\n        this.rows.push(rowObject);\n        this.container = this.createContainer(this.hot.rootElement.className);\n        this.samples = samples;\n        this.table = this.createTable(this.hot.table.className);\n        this.table.colGroup.appendChild(this.createColGroupsCol());\n        this.appendColumnHeadersRow();\n        this.container.container.appendChild(this.table.fragment);\n        rowObject.table = this.table.table;\n      }\n    }\n    /**\n     * Add column.\n     *\n     * @param {number} column Column index.\n     * @param {Map} samples A map with sampled table values.\n     */\n\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(column, samples) {\n      if (this.rows.length) {\n        throw new Error('Doesn\\'t support multi-dimensional table');\n      }\n\n      if (!this.columns.length) {\n        this.container = this.createContainer(this.hot.rootElement.className);\n      }\n\n      var columnObject = {\n        col: column\n      };\n      this.columns.push(columnObject);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n\n      if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {\n        // Please keep in mind that the renderable column index equal to the visual columns index for the GhostTable.\n        // We render all columns.\n        this.hot.view.appendColHeader(column, this.table.th);\n      }\n\n      this.table.tBody.appendChild(this.createCol(column));\n      this.container.container.appendChild(this.table.fragment);\n      columnObject.table = this.table.table;\n    }\n    /**\n     * Get calculated heights.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated row.\n     */\n\n  }, {\n    key: \"getHeights\",\n    value: function getHeights(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.rows, function (row) {\n        // -1 <- reduce border-top from table\n        callback(row.row, outerHeight(row.table) - 1);\n      });\n    }\n    /**\n     * Get calculated widths.\n     *\n     * @param {Function} callback Callback which will be fired for each calculated column.\n     */\n\n  }, {\n    key: \"getWidths\",\n    value: function getWidths(callback) {\n      if (!this.injected) {\n        this.injectTable();\n      }\n\n      arrayEach(this.columns, function (column) {\n        // The GhostTable class is responsible for calculating the columns' width based on the\n        // contents rendered in the cells. In some cases, when the column's width calculated by\n        // the browser is a decimal point with a fractional component. For example, 35.32px.\n        // The usage of the `.offsetWidth` (or our helper `outerWidth`) is incorrect.\n        // The `outerWidth` in the mentioned example (35.32px) would return 35 pixels that\n        // would cause the text to not fit in the cell, thus increasing the row height.\n        // That's why the `getBoundingClientRect` method is used. The method returns the number\n        // that is rounded up to make sure that there will be a space for the cell's content.\n        var _column$table$getBoun = column.table.getBoundingClientRect(),\n            width = _column$table$getBoun.width;\n\n        callback(column.col, Math.ceil(width));\n      });\n    }\n    /**\n     * Set the Ghost Table settings to the provided object.\n     *\n     * @param {object} settings New Ghost Table Settings.\n     */\n\n  }, {\n    key: \"setSettings\",\n    value: function setSettings(settings) {\n      this.settings = settings;\n    }\n    /**\n     * Set a single setting of the Ghost Table.\n     *\n     * @param {string} name Setting name.\n     * @param {*} value Setting value.\n     */\n\n  }, {\n    key: \"setSetting\",\n    value: function setSetting(name, value) {\n      if (!this.settings) {\n        this.settings = {};\n      }\n\n      this.settings[name] = value;\n    }\n    /**\n     * Get the Ghost Table settings.\n     *\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getSettings\",\n    value: function getSettings() {\n      return this.settings;\n    }\n    /**\n     * Get a single Ghost Table setting.\n     *\n     * @param {string} name The setting name to get.\n     * @returns {boolean|null}\n     */\n\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(name) {\n      if (this.settings) {\n        return this.settings[name];\n      }\n\n      return null;\n    }\n    /**\n     * Create colgroup col elements.\n     *\n     * @returns {DocumentFragment}\n     */\n\n  }, {\n    key: \"createColGroupsCol\",\n    value: function createColGroupsCol() {\n      var _this = this;\n\n      var fragment = this.hot.rootDocument.createDocumentFragment();\n\n      if (this.hot.hasRowHeaders()) {\n        fragment.appendChild(this.createColElement(-1));\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          fragment.appendChild(_this.createColElement(string.col));\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Create table row element.\n     *\n     * @param {number} row Row index.\n     * @returns {DocumentFragment} Returns created table row elements.\n     */\n\n  }, {\n    key: \"createRow\",\n    value: function createRow(row) {\n      var _this2 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var th = rootDocument.createElement('th');\n\n      if (this.hot.hasRowHeaders()) {\n        this.hot.view.appendRowHeader(row, th);\n        fragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n\n          var cellProperties = _this2.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this2.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this2.hot, td, row, column, _this2.hot.colToProp(column), string.value, cellProperties);\n          fragment.appendChild(td);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Creates DOM elements for headers and appends them to the THEAD element of the table.\n     */\n\n  }, {\n    key: \"appendColumnHeadersRow\",\n    value: function appendColumnHeadersRow() {\n      var _this3 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var domFragment = rootDocument.createDocumentFragment();\n      var columnHeaders = [];\n\n      if (this.hot.hasRowHeaders()) {\n        var th = rootDocument.createElement('th');\n        columnHeaders.push([-1, th]);\n        domFragment.appendChild(th);\n      }\n\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var column = string.col;\n          var th = rootDocument.createElement('th');\n          columnHeaders.push([column, th]);\n          domFragment.appendChild(th);\n        });\n      }); // Appending DOM elements for headers\n\n      this.table.tHead.appendChild(domFragment);\n      arrayEach(columnHeaders, function (columnHeader) {\n        var _columnHeader = _slicedToArray(columnHeader, 2),\n            column = _columnHeader[0],\n            th = _columnHeader[1]; // Using source method for filling a header with value.\n\n\n        _this3.hot.view.appendColHeader(column, th);\n      });\n    }\n    /**\n     * Create table column elements.\n     *\n     * @param {number} column Column index.\n     * @returns {DocumentFragment} Returns created column table column elements.\n     */\n\n  }, {\n    key: \"createCol\",\n    value: function createCol(column) {\n      var _this4 = this;\n\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      this.samples.forEach(function (sample) {\n        arrayEach(sample.strings, function (string) {\n          var row = string.row;\n\n          var cellProperties = _this4.hot.getCellMeta(row, column);\n\n          cellProperties.col = column;\n          cellProperties.row = row;\n\n          var renderer = _this4.hot.getCellRenderer(cellProperties);\n\n          var td = rootDocument.createElement('td');\n          var tr = rootDocument.createElement('tr'); // Indicate that this element is created and supported by GhostTable. It can be useful to\n          // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n\n          td.setAttribute('ghost-table', 1);\n          renderer(_this4.hot, td, row, column, _this4.hot.colToProp(column), string.value, cellProperties);\n          tr.appendChild(td);\n          fragment.appendChild(tr);\n        });\n      });\n      return fragment;\n    }\n    /**\n     * Remove table from document and reset internal state.\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.rows.length = 0;\n      this.rows[-1] = void 0;\n      this.columns.length = 0;\n\n      if (this.samples) {\n        this.samples.clear();\n      }\n\n      this.samples = null;\n      this.removeTable();\n    }\n    /**\n     * Inject generated table into document.\n     *\n     * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.\n     */\n\n  }, {\n    key: \"injectTable\",\n    value: function injectTable() {\n      var parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (!this.injected) {\n        (parent || this.hot.rootElement).appendChild(this.container.fragment);\n        this.injected = true;\n      }\n    }\n    /**\n     * Remove table from document.\n     */\n\n  }, {\n    key: \"removeTable\",\n    value: function removeTable() {\n      if (this.injected && this.container.container.parentNode) {\n        this.container.container.parentNode.removeChild(this.container.container);\n        this.container = null;\n        this.injected = false;\n      }\n    }\n    /**\n     * Create col element.\n     *\n     * @param {number} column Column index.\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"createColElement\",\n    value: function createColElement(column) {\n      var col = this.hot.rootDocument.createElement('col');\n      col.style.width = \"\".concat(this.hot.view.wt.wtTable.getStretchedColumnWidth(column), \"px\");\n      return col;\n    }\n    /**\n     * Create table element.\n     *\n     * @param {string} className The CSS classes to add.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"createTable\",\n    value: function createTable() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var table = rootDocument.createElement('table');\n      var tHead = rootDocument.createElement('thead');\n      var tBody = rootDocument.createElement('tbody');\n      var colGroup = rootDocument.createElement('colgroup');\n      var tr = rootDocument.createElement('tr');\n      var th = rootDocument.createElement('th');\n\n      if (this.isVertical()) {\n        table.appendChild(colGroup);\n      }\n\n      if (this.isHorizontal()) {\n        tr.appendChild(th);\n        tHead.appendChild(tr);\n        table.style.tableLayout = 'auto';\n        table.style.width = 'auto';\n      }\n\n      table.appendChild(tHead);\n\n      if (this.isVertical()) {\n        tBody.appendChild(tr);\n      }\n\n      table.appendChild(tBody);\n      addClass(table, className);\n      fragment.appendChild(table);\n      return {\n        fragment: fragment,\n        table: table,\n        tHead: tHead,\n        tBody: tBody,\n        colGroup: colGroup,\n        tr: tr,\n        th: th\n      };\n    }\n    /**\n     * Create container for tables.\n     *\n     * @param {string} className The CSS classes to add.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"createContainer\",\n    value: function createContainer() {\n      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var rootDocument = this.hot.rootDocument;\n      var fragment = rootDocument.createDocumentFragment();\n      var container = rootDocument.createElement('div');\n      var containerClassName = \"htGhostTable htAutoSize \".concat(className.trim());\n      addClass(container, containerClassName);\n      fragment.appendChild(container);\n      return {\n        fragment: fragment,\n        container: container\n      };\n    }\n    /**\n     * Checks if table is raised vertically (checking rows).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isVertical\",\n    value: function isVertical() {\n      return !!(this.rows.length && !this.columns.length);\n    }\n    /**\n     * Checks if table is raised horizontally (checking columns).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return !!(this.columns.length && !this.rows.length);\n    }\n  }]);\n\n  return GhostTable;\n}();\n\nexport default GhostTable;"]},"metadata":{},"sourceType":"module"}