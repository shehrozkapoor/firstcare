{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VDivider.css\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { convertToUnit, defineComponent } from \"../../util/index.mjs\"; // Composables\n\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { useBackgroundColor } from \"../../composables/color.mjs\"; // Types\n\nexport const VDivider = defineComponent({\n  name: 'VDivider',\n  props: {\n    color: String,\n    inset: Boolean,\n    length: [Number, String],\n    thickness: [Number, String],\n    vertical: Boolean,\n    ...makeThemeProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs\n    } = _ref;\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      backgroundColorClasses,\n      backgroundColorStyles\n    } = useBackgroundColor(toRef(props, 'color'));\n    const dividerStyles = computed(() => {\n      const styles = {};\n\n      if (props.length) {\n        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = convertToUnit(props.length);\n      }\n\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness);\n      }\n\n      return styles;\n    });\n    return () => {\n      return _createVNode(\"hr\", {\n        \"class\": [{\n          'v-divider': true,\n          'v-divider--inset': props.inset,\n          'v-divider--vertical': props.vertical\n        }, themeClasses.value, backgroundColorClasses.value],\n        \"style\": [dividerStyles.value, backgroundColorStyles.value],\n        \"aria-orientation\": !attrs.role || attrs.role === 'separator' ? props.vertical ? 'vertical' : 'horizontal' : undefined,\n        \"role\": `${attrs.role || 'separator'}`\n      }, null);\n    };\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,wB,CAEA;;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,eAAeC,uB,wBAExB;;SACSC,gBAAgBC,oB;SAChBC,0B,+BAET;;AAIA,OAAO,MAAMC,QAAQ,GAAGJ,eAAe,CAAC;AACtCK,MAAI,EAAE,UADgC;AAGtCC,OAAK,EAAE;AACLC,SAAK,EAAEC,MADF;AAELC,SAAK,EAAEC,OAFF;AAGLC,UAAM,EAAE,CAACC,MAAD,EAASJ,MAAT,CAHH;AAILK,aAAS,EAAE,CAACD,MAAD,EAASJ,MAAT,CAJN;AAKLM,YAAQ,EAAEJ,OALL;AAML,OAAGT,cAAc;AANZ,GAH+B;;AAYtCc,OAAK,CAAET,KAAF,QAAoB;AAAA,QAAX;AAAEU;AAAF,QAAWC;AACvB,UAAM;AAAEC;AAAF,QAAmBhB,YAAY,CAACI,KAAD,CAArC;AACA,UAAM;AAAEa,4BAAF;AAA0BC;AAA1B,QAAoDjB,kBAAkB,CAACL,KAAK,CAACQ,KAAD,EAAQ,OAAR,CAAN,CAA5E;AACA,UAAMe,aAAa,GAAGxB,QAAQ,CAAC,MAAM;AACnC,YAAMyB,MAAqB,GAAG,EAA9B;;AAEA,UAAIhB,KAAK,CAACK,MAAV,EAAkB;AAChBW,cAAM,CAAChB,KAAK,CAACQ,QAANR,GAAiB,WAAjBA,GAA+B,UAAhC,CAANgB,GAAoDvB,aAAa,CAACO,KAAK,CAACK,MAAP,CAAjEW;AACD;;AAED,UAAIhB,KAAK,CAACO,SAAV,EAAqB;AACnBS,cAAM,CAAChB,KAAK,CAACQ,QAANR,GAAiB,kBAAjBA,GAAsC,gBAAvC,CAANgB,GAAiEvB,aAAa,CAACO,KAAK,CAACO,SAAP,CAA9ES;AACD;;AAED,aAAOA,MAAP;AAX4B,MAA9B;AAcA,WAAO,MAAM;AACX;AAAA,iBAEW,CACL;AACE,uBAAa,IADf;AAEE,8BAAoBhB,KAAK,CAACG,KAF5B;AAGE,iCAAuBH,KAAK,CAACQ;AAH/B,SADK,EAMLI,YAAY,CAACK,KANR,EAOLJ,sBAAsB,CAACI,KAPlB,CAFX;AAAA,iBAWW,CACLF,aAAa,CAACE,KADT,EAELH,qBAAqB,CAACG,KAFjB,CAXX;AAAA,4BAgBM,CAACP,KAAK,CAACQ,IAAP,IAAeR,KAAK,CAACQ,IAANR,KAAe,WAA9B,GACIV,KAAK,CAACQ,QAANR,GAAiB,UAAjBA,GAA8B,YADlC,GAEImB,SAlBV;AAAA,gBAoBW,GAAET,KAAK,CAACQ,IAANR,IAAc,WAAY;AApBvC;AADF;AAyBD;;AAtDqC,CAAD,CAAhC","names":["computed","toRef","convertToUnit","defineComponent","makeThemeProps","provideTheme","useBackgroundColor","VDivider","name","props","color","String","inset","Boolean","length","Number","thickness","vertical","setup","attrs","_ref","themeClasses","backgroundColorClasses","backgroundColorStyles","dividerStyles","styles","value","role","undefined"],"sources":["../../../src/components/VDivider/VDivider.tsx"],"sourcesContent":["// Styles\nimport './VDivider.sass'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent } from '@/util'\n\n// Composables\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Types\ntype DividerKey = 'borderRightWidth' | 'borderTopWidth' | 'maxHeight' | 'maxWidth'\ntype DividerStyles = Partial<Record<DividerKey, string>>\n\nexport const VDivider = defineComponent({\n  name: 'VDivider',\n\n  props: {\n    color: String,\n    inset: Boolean,\n    length: [Number, String],\n    thickness: [Number, String],\n    vertical: Boolean,\n    ...makeThemeProps(),\n  },\n\n  setup (props, { attrs }) {\n    const { themeClasses } = provideTheme(props)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(toRef(props, 'color'))\n    const dividerStyles = computed(() => {\n      const styles: DividerStyles = {}\n\n      if (props.length) {\n        styles[props.vertical ? 'maxHeight' : 'maxWidth'] = convertToUnit(props.length)\n      }\n\n      if (props.thickness) {\n        styles[props.vertical ? 'borderRightWidth' : 'borderTopWidth'] = convertToUnit(props.thickness)\n      }\n\n      return styles\n    })\n\n    return () => {\n      return (\n        <hr\n          class={[\n            {\n              'v-divider': true,\n              'v-divider--inset': props.inset,\n              'v-divider--vertical': props.vertical,\n            },\n            themeClasses.value,\n            backgroundColorClasses.value,\n          ]}\n          style={[\n            dividerStyles.value,\n            backgroundColorStyles.value,\n          ]}\n          aria-orientation={\n            !attrs.role || attrs.role === 'separator'\n              ? props.vertical ? 'vertical' : 'horizontal'\n              : undefined\n          }\n          role={`${attrs.role || 'separator'}`}\n        />\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}