{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AutoComplete = _resolveComponent(\"AutoComplete\");\n\n  return _openBlock(), _createBlock(_component_AutoComplete, {\n    modelValue: $data.selectedItem,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedItem = $event),\n    suggestions: $data.filteredItems,\n    onComplete: _cache[1] || (_cache[1] = $event => $options.searchItems($event)),\n    placeholder: $props.placeholder,\n    class: \"w-full\",\n    onItemSelect: _cache[2] || (_cache[2] = $event => _ctx.getAllPatientAppointment($data.selectedItem)),\n    dropdown: true\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\", \"suggestions\", \"placeholder\"]);\n}","map":{"version":3,"mappings":";;;;uBACIA,aAAoNC,uBAApN,EAAoN;gBAA7LC,kBAA6L;+DAA7LA,qBAAYC,OAAiL;AAA9KC,eAAW,EAAEF,mBAAiK;AAAjJG,cAAQ,sCAAEC,qBAAYH,MAAZ,CAAF,CAAyI;AAAjHI,eAAW,EAAEC,kBAAoG;AAAvFC,SAAK,EAAC,QAAiF;AAAvEC,gBAAW,sCAAEC,8BAAyBT,kBAAzB,CAAF,CAA4D;AAAjBU,YAAQ,EAAE;AAAO,GAApN;;AAAA","names":["_createBlock","_component_AutoComplete","$data","$event","suggestions","onComplete","$options","placeholder","$props","class","onItemSelect","_ctx","dropdown"],"sourceRoot":"","sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/src/components/Custom/CustomAutoComplete.vue"],"sourcesContent":["<template>\n    <AutoComplete v-model=\"selectedItem\" :suggestions=\"filteredItems\" @complete=\"searchItems($event)\" :placeholder=\"placeholder\" class=\"w-full\" @item-select=\"getAllPatientAppointment(selectedItem)\" :dropdown=\"true\"/>\n</template>\n\n<script>\nimport {mapState,mapActions,mapMutations} from 'vuex'\n\nexport default {\n    name:\"CustomAutoComplete\",\n    props:['placeholder'],\n\tmethods: {\n        ...mapActions(['getSpecificPatient','getAllPatientAppointment']),\n        ...mapMutations(['changeAppointmentDropdownStatus']),\n\t\tsearchItems(event) {\n            let query = event.query;\n            let filteredItems = [];\n            this.getSpecificPatient(query);\n            setTimeout(()=>{\n                for(let i = 0; i < this.patients.length; i++) {\n                let item = this.patients[i];\n                if (item.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    filteredItems.push(item);\n                }\n            }\n            this.filteredItems = filteredItems;\n            },2000)\n        },\n\t},\n    computed:{\n        ...mapState(['patients'])\n    },\n    data() {\n        return {\n            filteredItems: null,\n            selectedItem: null,\n        }\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}