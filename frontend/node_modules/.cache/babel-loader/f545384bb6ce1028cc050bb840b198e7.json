{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { arrayFilter } from \"../../helpers/array.mjs\";\nimport { assert, isUnsignedNumber, isNullish } from \"./utils.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @class LazyFactoryMap\n *\n * The LazyFactoryMap object holds key-value pairs in the structure similar to the\n * regular Map. Once created, items can be moved around a grid depending on the operations\n * performed on that grid - adding or removing rows. The collection requires \"key\"\n * to be a zero-based index.\n *\n * It's essential to notice that the \"key\" index under which the item was created\n * is volatile. After altering the grid, the \"key\" index can change.\n *\n * Having created N items with corresponding example data where the data has 10\n * holes (`undefined` values) within (that's why internal storage index counts from 10).\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys (volatile zero-based index / internal storage index)\n * +------+------+------+------+------+.\n *    │      │      │      │      │\n * +------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  |  Data\n * +------+------+------+------+------+.\n *\n * Map.obtain(0) // returns \"AAA\"\n * map.obtain(2) // returns \"CCC\".\n *\n * After inserting 2 new rows, keys that hold the data positioned after the place\n * where the new rows are added are upshifted by 2.\n *               │\n *               │ Insert 2 rows\n *              \\│/\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys before\n * +------+------+------+------+------+.\n *\n *                / 2 new rows \\\n * +------+------+------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+.\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * Now at index 2 and 3 we have access to new items.\n *\n * map.obtain(2) // returns new value \"FFF\" for newly created row.\n * map.obtain(4) // index shifted by 2 has access to the old \"CCC\" value, as before inserting.\n *\n * after removing 4 rows, keys that hold the data positioned after the place where the\n * rows are removed are downshifted by 4.\n *        │\n *        │ Remove 4 rows\n *        ├───────────────────────────┐\n *       \\│/                          │\n * +------+------+------+------+------+------+------+\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * +------+------+------+\n * | 0/10 | 1/13 | 2/14 |  Keys after\n * +------+------+------+\n *    │       │      │\n *    │       │      └─────────────┐\n *    │       └────────────┐       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *           /│\\   /│\\                   /│\\   /│\\\n *            └──┬──┘                     └──┬──┘\n *           This data is marked as \"hole\" which\n *           means that can be replaced by new item\n *           when that will be created.\n *\n * map.obtain(2) // returns the value (\"EEE\") as it should. Access to the value is\n *               // changed (the key was downshifted). However, the internal index has not changed,\n *               // which means that the data does not need to be changed (spliced) too.\n *\n * After previous remove operation which creates some \"holes\" obtaining new\n * items replaces that \"holes\" as follows:\n *\n * // Obtains new item\n * map.obtain(90) // Returns \"NEW\" value\n *\n * +------+------+------+...+------+\n * | 0/10 | 1/13 | 2/14 |   | 90/0 |  Keys after\n * +------+------+------+...+------+\n *    │       │      │          │\n *    │       │      └──────────┼────────────┐\n *    │       └─────────────────┼─────┐      │\n *    └──────────┐              │     │      │\n *               │              │     │      │\n *    ┌──────────┼──────────────┘     │      │\n *    │          │                    │      │\n * +------+...+------+------+------+------+------+-----+\n * | NEW  |   | AAA  | BBB  | CCC  | DDD  | EEE  | FFF |  Data\n * +------+...+------+------+------+------+------+-----+\n *   /│\\\n *    │\n * The first \"hole\" (at index 0) item is permanently removed and replaced by a new item.\n * The hole index is taken from the hole collection which act as FIFO (First In First Out).\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar LazyFactoryMap = /*#__PURE__*/function (_Symbol$iterator) {\n  function LazyFactoryMap(valueFactory) {\n    _classCallCheck(this, LazyFactoryMap);\n\n    this.valueFactory = valueFactory;\n    /**\n     * An array which contains data.\n     *\n     * @type {Array}\n     */\n\n    this.data = [];\n    /**\n     * An array of indexes where the key of the array is mapped to the value which points to the\n     * specific position of the data array.\n     *\n     * @type {number[]}\n     */\n\n    this.index = [];\n    /**\n     * The collection of indexes that points to the data items which can be replaced by obtaining new\n     * ones. The \"holes\" are an intended effect of deleting entries.\n     *\n     * The idea of \"holes\" generally allows us to not modify the \"data\" structure while removing\n     * items from the collection.\n     *\n     * @type {Set<number>}\n     */\n\n    this.holes = new Set();\n  }\n  /**\n   * Gets or if data not exist creates and returns new data.\n   *\n   * @param {number} key The item key as zero-based index.\n   * @returns {*}\n   */\n\n\n  _createClass(LazyFactoryMap, [{\n    key: \"obtain\",\n    value: function obtain(key) {\n      assert(function () {\n        return isUnsignedNumber(key);\n      }, 'Expecting an unsigned number.');\n\n      var dataIndex = this._getStorageIndexByKey(key);\n\n      var result;\n\n      if (dataIndex >= 0) {\n        result = this.data[dataIndex];\n\n        if (result === void 0) {\n          result = this.valueFactory(key);\n          this.data[dataIndex] = result;\n        }\n      } else {\n        result = this.valueFactory(key);\n\n        if (this.holes.size > 0) {\n          var reuseIndex = this.holes.values().next().value; // Gets first item from the collection\n\n          this.holes.delete(reuseIndex);\n          this.data[reuseIndex] = result;\n          this.index[key] = reuseIndex;\n        } else {\n          this.data.push(result);\n          this.index[key] = this.data.length - 1;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Inserts an empty data to the map. This method creates an empty space for obtaining\n     * new data.\n     *\n     * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.\n     * @param {number} [amount=1] Ammount of data to insert.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key) {\n      var _this$index;\n\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(function () {\n        return isUnsignedNumber(key) || isNullish(key);\n      }, 'Expecting an unsigned number or null/undefined argument.');\n      var newIndexes = [];\n      var dataLength = this.data.length;\n\n      for (var i = 0; i < amount; i++) {\n        newIndexes.push(dataLength + i);\n        this.data.push(void 0);\n      }\n\n      (_this$index = this.index).splice.apply(_this$index, [isNullish(key) ? this.index.length : key, 0].concat(newIndexes));\n    }\n    /**\n     * Removes (soft remove) data from \"index\" and according to the amount of data.\n     *\n     * @param {number} key The key as volatile zero-based index at which to begin removing the data.\n     * @param {number} [amount=1] Ammount data to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(function () {\n        return isUnsignedNumber(key) || isNullish(key);\n      }, 'Expecting an unsigned number or null/undefined argument.');\n      var removed = this.index.splice(isNullish(key) ? this.index.length - amount : key, amount);\n\n      for (var i = 0; i < removed.length; i++) {\n        var removedIndex = removed[i];\n\n        if (typeof removedIndex === 'number') {\n          this.holes.add(removedIndex);\n        }\n      }\n    }\n    /**\n     * Returns the size of the data which this map holds.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.data.length - this.holes.size;\n    }\n    /**\n     * Returns a new Iterator object that contains the values for each item in the LazyMap object.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      var _this = this;\n\n      return arrayFilter(this.data, function (_, index) {\n        return !_this.holes.has(index);\n      })[Symbol.iterator]();\n    }\n    /**\n     * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      var validEntries = [];\n\n      for (var i = 0; i < this.data.length; i++) {\n        var keyIndex = this._getKeyByStorageIndex(i);\n\n        if (keyIndex !== -1) {\n          validEntries.push([keyIndex, this.data[i]]);\n        }\n      }\n\n      var dataIndex = 0;\n      return {\n        next: function next() {\n          if (dataIndex < validEntries.length) {\n            var value = validEntries[dataIndex];\n            dataIndex += 1;\n            return {\n              value: value,\n              done: false\n            };\n          }\n\n          return {\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     * Clears the map.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.data = [];\n      this.index = [];\n      this.holes.clear();\n    }\n    /**\n     * Gets storage index calculated from the key associated with the specified value.\n     *\n     * @param {number} key Volatile zero-based index.\n     * @returns {number} Returns index 0-N or -1 if no storage index found.\n     */\n\n  }, {\n    key: \"_getStorageIndexByKey\",\n    value: function _getStorageIndexByKey(key) {\n      return this.index.length > key ? this.index[key] : -1;\n    }\n    /**\n     * Gets the key associated with the specified value calculated from storage index.\n     *\n     * @param {number} dataIndex Zero-based storage index.\n     * @returns {number} Returns index 0-N or -1 if no key found.\n     */\n\n  }, {\n    key: \"_getKeyByStorageIndex\",\n    value: function _getKeyByStorageIndex(dataIndex) {\n      return this.index.indexOf(dataIndex);\n    }\n    /**\n     * Makes this object iterable.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.entries();\n    }\n  }]);\n\n  return LazyFactoryMap;\n}(Symbol.iterator);\n\nexport { LazyFactoryMap as default };","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/dataMap/metaManager/lazyFactoryMap.mjs"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","arrayFilter","assert","isUnsignedNumber","isNullish","LazyFactoryMap","_Symbol$iterator","valueFactory","data","index","holes","Set","value","obtain","dataIndex","_getStorageIndexByKey","result","size","reuseIndex","values","next","delete","push","insert","_this$index","amount","arguments","undefined","newIndexes","dataLength","splice","apply","concat","remove","removed","removedIndex","add","_this","_","has","Symbol","iterator","entries","validEntries","keyIndex","_getKeyByStorageIndex","done","clear","indexOf","default"],"mappings":"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","sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.index-of.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { arrayFilter } from \"../../helpers/array.mjs\";\nimport { assert, isUnsignedNumber, isNullish } from \"./utils.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @class LazyFactoryMap\n *\n * The LazyFactoryMap object holds key-value pairs in the structure similar to the\n * regular Map. Once created, items can be moved around a grid depending on the operations\n * performed on that grid - adding or removing rows. The collection requires \"key\"\n * to be a zero-based index.\n *\n * It's essential to notice that the \"key\" index under which the item was created\n * is volatile. After altering the grid, the \"key\" index can change.\n *\n * Having created N items with corresponding example data where the data has 10\n * holes (`undefined` values) within (that's why internal storage index counts from 10).\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys (volatile zero-based index / internal storage index)\n * +------+------+------+------+------+.\n *    │      │      │      │      │\n * +------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  |  Data\n * +------+------+------+------+------+.\n *\n * Map.obtain(0) // returns \"AAA\"\n * map.obtain(2) // returns \"CCC\".\n *\n * After inserting 2 new rows, keys that hold the data positioned after the place\n * where the new rows are added are upshifted by 2.\n *               │\n *               │ Insert 2 rows\n *              \\│/\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys before\n * +------+------+------+------+------+.\n *\n *                / 2 new rows \\\n * +------+------+------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+.\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * Now at index 2 and 3 we have access to new items.\n *\n * map.obtain(2) // returns new value \"FFF\" for newly created row.\n * map.obtain(4) // index shifted by 2 has access to the old \"CCC\" value, as before inserting.\n *\n * after removing 4 rows, keys that hold the data positioned after the place where the\n * rows are removed are downshifted by 4.\n *        │\n *        │ Remove 4 rows\n *        ├───────────────────────────┐\n *       \\│/                          │\n * +------+------+------+------+------+------+------+\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * +------+------+------+\n * | 0/10 | 1/13 | 2/14 |  Keys after\n * +------+------+------+\n *    │       │      │\n *    │       │      └─────────────┐\n *    │       └────────────┐       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *           /│\\   /│\\                   /│\\   /│\\\n *            └──┬──┘                     └──┬──┘\n *           This data is marked as \"hole\" which\n *           means that can be replaced by new item\n *           when that will be created.\n *\n * map.obtain(2) // returns the value (\"EEE\") as it should. Access to the value is\n *               // changed (the key was downshifted). However, the internal index has not changed,\n *               // which means that the data does not need to be changed (spliced) too.\n *\n * After previous remove operation which creates some \"holes\" obtaining new\n * items replaces that \"holes\" as follows:\n *\n * // Obtains new item\n * map.obtain(90) // Returns \"NEW\" value\n *\n * +------+------+------+...+------+\n * | 0/10 | 1/13 | 2/14 |   | 90/0 |  Keys after\n * +------+------+------+...+------+\n *    │       │      │          │\n *    │       │      └──────────┼────────────┐\n *    │       └─────────────────┼─────┐      │\n *    └──────────┐              │     │      │\n *               │              │     │      │\n *    ┌──────────┼──────────────┘     │      │\n *    │          │                    │      │\n * +------+...+------+------+------+------+------+-----+\n * | NEW  |   | AAA  | BBB  | CCC  | DDD  | EEE  | FFF |  Data\n * +------+...+------+------+------+------+------+-----+\n *   /│\\\n *    │\n * The first \"hole\" (at index 0) item is permanently removed and replaced by a new item.\n * The hole index is taken from the hole collection which act as FIFO (First In First Out).\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar LazyFactoryMap = /*#__PURE__*/function (_Symbol$iterator) {\n  function LazyFactoryMap(valueFactory) {\n    _classCallCheck(this, LazyFactoryMap);\n\n    this.valueFactory = valueFactory;\n    /**\n     * An array which contains data.\n     *\n     * @type {Array}\n     */\n\n    this.data = [];\n    /**\n     * An array of indexes where the key of the array is mapped to the value which points to the\n     * specific position of the data array.\n     *\n     * @type {number[]}\n     */\n\n    this.index = [];\n    /**\n     * The collection of indexes that points to the data items which can be replaced by obtaining new\n     * ones. The \"holes\" are an intended effect of deleting entries.\n     *\n     * The idea of \"holes\" generally allows us to not modify the \"data\" structure while removing\n     * items from the collection.\n     *\n     * @type {Set<number>}\n     */\n\n    this.holes = new Set();\n  }\n  /**\n   * Gets or if data not exist creates and returns new data.\n   *\n   * @param {number} key The item key as zero-based index.\n   * @returns {*}\n   */\n\n\n  _createClass(LazyFactoryMap, [{\n    key: \"obtain\",\n    value: function obtain(key) {\n      assert(function () {\n        return isUnsignedNumber(key);\n      }, 'Expecting an unsigned number.');\n\n      var dataIndex = this._getStorageIndexByKey(key);\n\n      var result;\n\n      if (dataIndex >= 0) {\n        result = this.data[dataIndex];\n\n        if (result === void 0) {\n          result = this.valueFactory(key);\n          this.data[dataIndex] = result;\n        }\n      } else {\n        result = this.valueFactory(key);\n\n        if (this.holes.size > 0) {\n          var reuseIndex = this.holes.values().next().value; // Gets first item from the collection\n\n          this.holes.delete(reuseIndex);\n          this.data[reuseIndex] = result;\n          this.index[key] = reuseIndex;\n        } else {\n          this.data.push(result);\n          this.index[key] = this.data.length - 1;\n        }\n      }\n\n      return result;\n    }\n    /**\n     * Inserts an empty data to the map. This method creates an empty space for obtaining\n     * new data.\n     *\n     * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.\n     * @param {number} [amount=1] Ammount of data to insert.\n     */\n\n  }, {\n    key: \"insert\",\n    value: function insert(key) {\n      var _this$index;\n\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(function () {\n        return isUnsignedNumber(key) || isNullish(key);\n      }, 'Expecting an unsigned number or null/undefined argument.');\n      var newIndexes = [];\n      var dataLength = this.data.length;\n\n      for (var i = 0; i < amount; i++) {\n        newIndexes.push(dataLength + i);\n        this.data.push(void 0);\n      }\n\n      (_this$index = this.index).splice.apply(_this$index, [isNullish(key) ? this.index.length : key, 0].concat(newIndexes));\n    }\n    /**\n     * Removes (soft remove) data from \"index\" and according to the amount of data.\n     *\n     * @param {number} key The key as volatile zero-based index at which to begin removing the data.\n     * @param {number} [amount=1] Ammount data to remove.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      var amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      assert(function () {\n        return isUnsignedNumber(key) || isNullish(key);\n      }, 'Expecting an unsigned number or null/undefined argument.');\n      var removed = this.index.splice(isNullish(key) ? this.index.length - amount : key, amount);\n\n      for (var i = 0; i < removed.length; i++) {\n        var removedIndex = removed[i];\n\n        if (typeof removedIndex === 'number') {\n          this.holes.add(removedIndex);\n        }\n      }\n    }\n    /**\n     * Returns the size of the data which this map holds.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.data.length - this.holes.size;\n    }\n    /**\n     * Returns a new Iterator object that contains the values for each item in the LazyMap object.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: \"values\",\n    value: function values() {\n      var _this = this;\n\n      return arrayFilter(this.data, function (_, index) {\n        return !_this.holes.has(index);\n      })[Symbol.iterator]();\n    }\n    /**\n     * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      var validEntries = [];\n\n      for (var i = 0; i < this.data.length; i++) {\n        var keyIndex = this._getKeyByStorageIndex(i);\n\n        if (keyIndex !== -1) {\n          validEntries.push([keyIndex, this.data[i]]);\n        }\n      }\n\n      var dataIndex = 0;\n      return {\n        next: function next() {\n          if (dataIndex < validEntries.length) {\n            var value = validEntries[dataIndex];\n            dataIndex += 1;\n            return {\n              value: value,\n              done: false\n            };\n          }\n\n          return {\n            done: true\n          };\n        }\n      };\n    }\n    /**\n     * Clears the map.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.data = [];\n      this.index = [];\n      this.holes.clear();\n    }\n    /**\n     * Gets storage index calculated from the key associated with the specified value.\n     *\n     * @param {number} key Volatile zero-based index.\n     * @returns {number} Returns index 0-N or -1 if no storage index found.\n     */\n\n  }, {\n    key: \"_getStorageIndexByKey\",\n    value: function _getStorageIndexByKey(key) {\n      return this.index.length > key ? this.index[key] : -1;\n    }\n    /**\n     * Gets the key associated with the specified value calculated from storage index.\n     *\n     * @param {number} dataIndex Zero-based storage index.\n     * @returns {number} Returns index 0-N or -1 if no key found.\n     */\n\n  }, {\n    key: \"_getKeyByStorageIndex\",\n    value: function _getKeyByStorageIndex(dataIndex) {\n      return this.index.indexOf(dataIndex);\n    }\n    /**\n     * Makes this object iterable.\n     *\n     * @returns {Iterator}\n     */\n\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this.entries();\n    }\n  }]);\n\n  return LazyFactoryMap;\n}(Symbol.iterator);\n\nexport { LazyFactoryMap as default };"]},"metadata":{},"sourceType":"module"}