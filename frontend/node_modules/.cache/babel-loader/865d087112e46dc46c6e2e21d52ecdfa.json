{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AutoComplete = _resolveComponent(\"AutoComplete\");\n\n  return _openBlock(), _createBlock(_component_AutoComplete, {\n    modelValue: $data.selectedItem,\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedItem = $event),\n    suggestions: $data.filteredItems,\n    onComplete: $options.searchItems,\n    virtualScrollerOptions: {\n      itemSize: 31\n    },\n    field: \"label\",\n    dropdown: \"\",\n    placeholder: \"search..\"\n  }, null, 8\n  /* PROPS */\n  , [\"modelValue\", \"suggestions\", \"onComplete\"]);\n}","map":{"version":3,"mappings":";;;;uBACIA,aAAoLC,uBAApL,EAAoL;gBAA7JC,kBAA6J;+DAA7JA,qBAAYC,OAAiJ;AAA9IC,eAAW,EAAEF,mBAAiI;AAAjHG,cAAQ,EAAEC,oBAAuG;AAAzFC,0BAAsB,EAAE;AAAAC;AAAA,KAAiE;AAA/CC,SAAK,EAAC,OAAyC;AAAjCC,YAAQ,EAAR,EAAiC;AAAxBC,eAAW,EAAC;AAAY,GAApL;;AAAA","names":["_createBlock","_component_AutoComplete","$data","$event","suggestions","onComplete","$options","virtualScrollerOptions","itemSize","field","dropdown","placeholder"],"sourceRoot":"","sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/src/components/Custom/CustomAutoComplete.vue"],"sourcesContent":["<template>\n    <AutoComplete v-model=\"selectedItem\" :suggestions=\"filteredItems\" @complete=\"searchItems\" :virtualScrollerOptions=\"{ itemSize: 31 }\" field=\"label\" dropdown placeholder=\"search..\"/>\n</template>\n\n<script>\nexport default {\n    name:\"CustomAutoComplete\",\n\tmethods: {\n\t\tsearchItems(event) {\n            console.log(\"key up\")\n            //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n            let query = event.query;\n            let filteredItems = [];\n\n            for(let i = 0; i < this.items.length; i++) {\n                let item = this.items[i];\n                if (item.label.toLowerCase().indexOf(query.toLowerCase()) === 0) {\n                    filteredItems.push(item);\n                }\n            }\n\n            this.filteredItems = filteredItems;\n        }\n\t},\n    data() {\n        return {\n            filteredItems: null,\n            selectedItem: null,\n            items: Array.from({ length: 1000 }, (_, i) => ({ label: `Item #${i}`, value: i }))\n        }\n    }\n}\n</script>"]},"metadata":{},"sourceType":"module"}