{"ast":null,"code":"/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n\n    if (editdiff) {\n      return editdiff;\n    }\n  } // Trim off common prefix (speedup).\n\n\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n  var diffs = diff_compute_(text1, text2); // Restore the prefix and suffix.\n\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n}\n\n;\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]]; // Swap insertions for deletions if diff is reversed.\n\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  } // Check to see if the problem can be split in two.\n\n\n  var hm = diff_halfMatch_(text1, text2);\n\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4]; // Send both pairs off for separate processing.\n\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b); // Merge the results.\n\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n}\n\n;\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\n\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n\n  var front = delta % 2 !== 0; // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n\n      if (k1 === -d || k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n\n      var y1 = x1 - k1;\n\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) === text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n\n      v1[k1_offset] = x1;\n\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    } // Walk the reverse path one step.\n\n\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n\n      if (k2 === -d || k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n\n      var y2 = x2 - k2;\n\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n\n      v2[k2_offset] = x2;\n\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.\n\n          x2 = text1_length - x2;\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  } // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n\n\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n}\n\n;\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\n\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y); // Compute both diffs serially.\n\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n  return diffs.concat(diffsb);\n}\n\n;\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\n\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n}\n\n;\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\n\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n}\n\n;\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\n\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n\n\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  } // First check if the second quarter is the seed for a half-match.\n\n\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  } // A half-match was found, sort out the return data.\n\n\n  var text1_a, text1_b, text2_a, text2_b;\n\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n}\n\n;\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\n\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']); // Add a dummy entry at the end.\n\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n\n              previous_equality = k;\n            }\n          }\n\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            } // Factor out any common suffixes.\n\n\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          } // Delete the offending records and add the merged ones.\n\n\n          var n = count_insert + count_delete;\n\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  } // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n  var changes = false;\n  pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n}\n\n;\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n\n  return remove_empty_tuples([[DIFF_EQUAL, before], [DIFF_DELETE, oldMiddle], [DIFF_INSERT, newMiddle], [DIFF_EQUAL, after]]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ? {\n    index: cursor_pos,\n    length: 0\n  } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ? null : cursor_pos.newRange; // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\nmodule.exports = diff;","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/@vueup/vue-quill/node_modules/fast-diff/diff.js"],"names":["DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","diff_main","text1","text2","cursor_pos","_fix_unicode","editdiff","find_cursor_edit_diff","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","is_surrogate_pair_start","charCodeAt","slice","pointerend","is_surrogate_pair_end","diff_halfMatchI_","seed","j","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","fix_unicode","pointer","count_delete","count_insert","text_delete","text_insert","splice","previous_equality","ends_with_pair_start","stray","k","starts_with_pair_end","n","pop","changes","charCode","str","remove_empty_tuples","tuples","ret","make_edit_splice","before","oldMiddle","newMiddle","after","oldText","newText","oldRange","index","newRange","oldLength","newLength","oldCursor","oldBefore","oldAfter","maybeNewCursor","editBefore","newCursor","newBefore","newAfter","oldPrefix","newPrefix","editAfter","cursor","oldSuffix","newSuffix","replaceRange","diff","INSERT","DELETE","EQUAL","module","exports"],"mappings":"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","sourcesContent":["/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int|Object} [cursor_pos] Edit position in text1 or object with more info\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos, _fix_unicode) {\n  // Check for equality\n  if (text1 === text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  if (cursor_pos != null) {\n    var editdiff = find_cursor_edit_diff(text1, text2, cursor_pos);\n    if (editdiff) {\n      return editdiff;\n    }\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs, _fix_unicode);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i !== -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      [DIFF_INSERT, longtext.substring(0, i)],\n      [DIFF_EQUAL, shorttext],\n      [DIFF_INSERT, longtext.substring(i + shorttext.length)]\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length === 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 !== 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 === -d || (k1 !== d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length && y1 < text2_length &&\n        text1.charAt(x1) === text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] !== -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 === -d || (k2 !== d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length && y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) === text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] !== -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_start(text1.charCodeAt(pointermid - 1))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.slice(-1) !== text2.slice(-1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  if (is_surrogate_pair_end(text1.charCodeAt(text1.length - pointermid))) {\n    pointermid--;\n  }\n\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) !== -1) {\n      var prefixLength = diff_commonPrefix(\n        longtext.substring(i), shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(\n        longtext.substring(0, i), shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(\n          j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a, best_longtext_b,\n        best_shorttext_a, best_shorttext_b, best_common\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n * @param {boolean} fix_unicode Whether to normalize to a unicode-correct diff\n */\nfunction diff_cleanupMerge(diffs, fix_unicode) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n      diffs.splice(pointer, 1);\n      continue;\n    }\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        var previous_equality = pointer - count_insert - count_delete - 1;\n        if (fix_unicode) {\n          // prevent splitting of unicode surrogate pairs.  when fix_unicode is true,\n          // we assume that the old and new text in the diff are complete and correct\n          // unicode-encoded JS strings, but the tuple boundaries may fall between\n          // surrogate pairs.  we fix this by shaving off stray surrogates from the end\n          // of the previous equality and the beginning of this equality.  this may create\n          // empty equalities or a common prefix or suffix.  for example, if AB and AC are\n          // emojis, `[[0, 'A'], [-1, 'BA'], [0, 'C']]` would turn into deleting 'ABAC' and\n          // inserting 'AC', and then the common suffix 'AC' will be eliminated.  in this\n          // particular case, both equalities go away, we absorb any previous inequalities,\n          // and we keep scanning for the next equality before rewriting the tuples.\n          if (previous_equality >= 0 && ends_with_pair_start(diffs[previous_equality][1])) {\n            var stray = diffs[previous_equality][1].slice(-1);\n            diffs[previous_equality][1] = diffs[previous_equality][1].slice(0, -1);\n            text_delete = stray + text_delete;\n            text_insert = stray + text_insert;\n            if (!diffs[previous_equality][1]) {\n              // emptied out previous equality, so delete it and include previous delete/insert\n              diffs.splice(previous_equality, 1);\n              pointer--;\n              var k = previous_equality - 1;\n              if (diffs[k] && diffs[k][0] === DIFF_INSERT) {\n                count_insert++;\n                text_insert = diffs[k][1] + text_insert;\n                k--;\n              }\n              if (diffs[k] && diffs[k][0] === DIFF_DELETE) {\n                count_delete++;\n                text_delete = diffs[k][1] + text_delete;\n                k--;\n              }\n              previous_equality = k;\n            }\n          }\n          if (starts_with_pair_end(diffs[pointer][1])) {\n            var stray = diffs[pointer][1].charAt(0);\n            diffs[pointer][1] = diffs[pointer][1].slice(1);\n            text_delete += stray;\n            text_insert += stray;\n          }\n        }\n        if (pointer < diffs.length - 1 && !diffs[pointer][1]) {\n          // for empty equality not at end, wait for next equality\n          diffs.splice(pointer, 1);\n          break;\n        }\n        if (text_delete.length > 0 || text_insert.length > 0) {\n          // note that diff_commonPrefix and diff_commonSuffix are unicode-aware\n          if (text_delete.length > 0 && text_insert.length > 0) {\n            // Factor out any common prefixes.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (previous_equality >= 0) {\n                diffs[previous_equality][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL, text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixes.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          var n = count_insert + count_delete;\n          if (text_delete.length === 0 && text_insert.length === 0) {\n            diffs.splice(pointer - n, n);\n            pointer = pointer - n;\n          } else if (text_delete.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 1;\n          } else if (text_insert.length === 0) {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete]);\n            pointer = pointer - n + 1;\n          } else {\n            diffs.splice(pointer - n, n, [DIFF_DELETE, text_delete], [DIFF_INSERT, text_insert]);\n            pointer = pointer - n + 2;\n          }\n        }\n        if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] === DIFF_EQUAL &&\n      diffs[pointer + 1][0] === DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n        diffs[pointer - 1][1].length) === diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(0, diffs[pointer][1].length -\n            diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs, fix_unicode);\n  }\n};\n\nfunction is_surrogate_pair_start(charCode) {\n  return charCode >= 0xD800 && charCode <= 0xDBFF;\n}\n\nfunction is_surrogate_pair_end(charCode) {\n  return charCode >= 0xDC00 && charCode <= 0xDFFF;\n}\n\nfunction starts_with_pair_end(str) {\n  return is_surrogate_pair_end(str.charCodeAt(0));\n}\n\nfunction ends_with_pair_start(str) {\n  return is_surrogate_pair_start(str.charCodeAt(str.length - 1));\n}\n\nfunction remove_empty_tuples(tuples) {\n  var ret = [];\n  for (var i = 0; i < tuples.length; i++) {\n    if (tuples[i][1].length > 0) {\n      ret.push(tuples[i]);\n    }\n  }\n  return ret;\n}\n\nfunction make_edit_splice(before, oldMiddle, newMiddle, after) {\n  if (ends_with_pair_start(before) || starts_with_pair_end(after)) {\n    return null;\n  }\n  return remove_empty_tuples([\n    [DIFF_EQUAL, before],\n    [DIFF_DELETE, oldMiddle],\n    [DIFF_INSERT, newMiddle],\n    [DIFF_EQUAL, after]\n  ]);\n}\n\nfunction find_cursor_edit_diff(oldText, newText, cursor_pos) {\n  // note: this runs after equality check has ruled out exact equality\n  var oldRange = typeof cursor_pos === 'number' ?\n    { index: cursor_pos, length: 0 } : cursor_pos.oldRange;\n  var newRange = typeof cursor_pos === 'number' ?\n    null : cursor_pos.newRange;\n  // take into account the old and new selection to generate the best diff\n  // possible for a text edit.  for example, a text change from \"xxx\" to \"xx\"\n  // could be a delete or forwards-delete of any one of the x's, or the\n  // result of selecting two of the x's and typing \"x\".\n  var oldLength = oldText.length;\n  var newLength = newText.length;\n  if (oldRange.length === 0 && (newRange === null || newRange.length === 0)) {\n    // see if we have an insert or delete before or after cursor\n    var oldCursor = oldRange.index;\n    var oldBefore = oldText.slice(0, oldCursor);\n    var oldAfter = oldText.slice(oldCursor);\n    var maybeNewCursor = newRange ? newRange.index : null;\n    editBefore: {\n      // is this an insert or delete right before oldCursor?\n      var newCursor = oldCursor + newLength - oldLength;\n      if (maybeNewCursor !== null && maybeNewCursor !== newCursor) {\n        break editBefore;\n      }\n      if (newCursor < 0 || newCursor > newLength) {\n        break editBefore;\n      }\n      var newBefore = newText.slice(0, newCursor);\n      var newAfter = newText.slice(newCursor);\n      if (newAfter !== oldAfter) {\n        break editBefore;\n      }\n      var prefixLength = Math.min(oldCursor, newCursor);\n      var oldPrefix = oldBefore.slice(0, prefixLength);\n      var newPrefix = newBefore.slice(0, prefixLength);\n      if (oldPrefix !== newPrefix) {\n        break editBefore;\n      }\n      var oldMiddle = oldBefore.slice(prefixLength);\n      var newMiddle = newBefore.slice(prefixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldAfter);\n    }\n    editAfter: {\n      // is this an insert or delete right after oldCursor?\n      if (maybeNewCursor !== null && maybeNewCursor !== oldCursor) {\n        break editAfter;\n      }\n      var cursor = oldCursor;\n      var newBefore = newText.slice(0, cursor);\n      var newAfter = newText.slice(cursor);\n      if (newBefore !== oldBefore) {\n        break editAfter;\n      }\n      var suffixLength = Math.min(oldLength - cursor, newLength - cursor);\n      var oldSuffix = oldAfter.slice(oldAfter.length - suffixLength);\n      var newSuffix = newAfter.slice(newAfter.length - suffixLength);\n      if (oldSuffix !== newSuffix) {\n        break editAfter;\n      }\n      var oldMiddle = oldAfter.slice(0, oldAfter.length - suffixLength);\n      var newMiddle = newAfter.slice(0, newAfter.length - suffixLength);\n      return make_edit_splice(oldBefore, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n  if (oldRange.length > 0 && newRange && newRange.length === 0) {\n    replaceRange: {\n      // see if diff could be a splice of the old selection range\n      var oldPrefix = oldText.slice(0, oldRange.index);\n      var oldSuffix = oldText.slice(oldRange.index + oldRange.length);\n      var prefixLength = oldPrefix.length;\n      var suffixLength = oldSuffix.length;\n      if (newLength < prefixLength + suffixLength) {\n        break replaceRange;\n      }\n      var newPrefix = newText.slice(0, prefixLength);\n      var newSuffix = newText.slice(newLength - suffixLength);\n      if (oldPrefix !== newPrefix || oldSuffix !== newSuffix) {\n        break replaceRange;\n      }\n      var oldMiddle = oldText.slice(prefixLength, oldLength - suffixLength);\n      var newMiddle = newText.slice(prefixLength, newLength - suffixLength);\n      return make_edit_splice(oldPrefix, oldMiddle, newMiddle, oldSuffix);\n    }\n  }\n\n  return null;\n}\n\nfunction diff(text1, text2, cursor_pos) {\n  // only pass fix_unicode=true at the top level, not when diff_main is\n  // recursively invoked\n  return diff_main(text1, text2, cursor_pos, true);\n}\n\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n"]},"metadata":{},"sourceType":"script"}