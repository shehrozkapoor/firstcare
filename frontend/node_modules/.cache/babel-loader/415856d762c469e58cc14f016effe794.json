{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Composables\n\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { genericComponent, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VToolbarTitle = genericComponent()({\n  name: 'VToolbarTitle',\n  props: {\n    text: String,\n    ...makeTagProps()\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    useRender(() => {\n      var _slots$default;\n\n      const hasText = !!(slots.default || slots.text || props.text);\n      return _createVNode(props.tag, {\n        \"class\": \"v-toolbar-title\"\n      }, {\n        default: () => [hasText && _createVNode(\"div\", {\n          \"class\": \"v-toolbar-title__placeholder\"\n        }, [slots.text ? slots.text() : props.text, (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)])]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;SACSA,oB,6BAET;;SACSC,kBAAkBC,iB,wBAE3B;;AAGA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,GAKxC;AACHG,MAAI,EAAE,eADH;AAGHC,OAAK,EAAE;AACLC,QAAI,EAAEC,MADD;AAGL,OAAGP,YAAY;AAHV,GAHJ;;AASHQ,OAAK,CAAEH,KAAF,QAAoB;AAAA,QAAX;AAAEI;AAAF,QAAWC;AACvBR,aAAS,CAAC,MAAM;AAAA;;AACd,YAAMS,OAAO,GAAG,CAAC,EAAEF,KAAK,CAACG,OAANH,IAAiBA,KAAK,CAACH,IAAvBG,IAA+BJ,KAAK,CAACC,IAAvC,CAAjB;AAEA;AAAA,iBACmB;AADnB;AAAAM,wBAEMD,OAAO;AAAA,mBACI;AADJ,YAEHF,KAAK,CAACH,IAANG,GAAaA,KAAK,CAACH,IAANG,EAAbA,GAA4BJ,KAAK,CAACC,IAF/B,oBAIHG,KAAK,CAACG,OAJH,qBAIHC,0BAJG,EAFb;AAAA;AAHO,MAATX;AAgBA,WAAO,EAAP;AACD;;AA3BE,CALwC,CAAtC","names":["makeTagProps","genericComponent","useRender","VToolbarTitle","name","props","text","String","setup","slots","_ref","hasText","default","_slots$default"],"sources":["../../../src/components/VToolbar/VToolbarTitle.tsx"],"sourcesContent":["// Composables\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\n\n// Types\nimport type { MakeSlots } from '@/util'\n\nexport const VToolbarTitle = genericComponent<new () => {\n  $slots: MakeSlots<{\n    default: []\n    text: []\n  }>\n}>()({\n  name: 'VToolbarTitle',\n\n  props: {\n    text: String,\n\n    ...makeTagProps(),\n  },\n\n  setup (props, { slots }) {\n    useRender(() => {\n      const hasText = !!(slots.default || slots.text || props.text)\n\n      return (\n        <props.tag class=\"v-toolbar-title\">\n          { hasText && (\n            <div class=\"v-toolbar-title__placeholder\">\n              { slots.text ? slots.text() : props.text }\n\n              { slots.default?.() }\n            </div>\n          ) }\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VToolbarTitle = InstanceType<typeof VToolbarTitle>\n"]},"metadata":{},"sourceType":"module"}