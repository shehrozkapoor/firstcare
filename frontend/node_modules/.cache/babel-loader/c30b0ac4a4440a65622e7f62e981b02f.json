{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\nimport { isEmpty } from \"../../helpers/mixed.mjs\";\nimport { isObjectEqual } from \"../../helpers/object.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @alias Options\n * @class Options\n * @description\n *\n * [Configuration options](@/guides/getting-started/setting-options.md) let you heavily customize your Handsontable instance. For example, you can:\n *\n * - Enable and disable built-in features\n * - Enable and configure additional [plugins](@/guides/building-and-testing/plugins.md)\n * - Personalize Handsontable's look\n * - Adjust Handsontable's behavior\n * - Implement your own custom features\n *\n * To apply [configuration options](@/guides/getting-started/setting-options.md), pass them as\n * a second argument of the [Handsontable constructor](@/guides/getting-started/installation.md#initialize-the-grid),\n * using the [object literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer):\n *\n * ```js\n * const container = document.getElementById('example');\n *\n * const hot = new Handsontable(container, {\n *   // configuration options, in the object literal notation\n *   licenseKey: 'non-commercial-and-evaluation',\n *   data: Handsontable.helper.createSpreadsheetData(5, 10),\n *   width: 400,\n *   height: 300,\n *   colHeaders: true,\n *   rowHeaders: true,\n *   customBorders: true,\n *   dropdownMenu: true,\n *   multiColumnSorting: true,\n *   filters: true,\n *   manualRowMove: true,\n * });\n * ```\n *\n * Depending on your needs, you can apply [configuration options](@/api/options.md) to different elements of your grid:\n * - [The entire grid](@/guides/getting-started/setting-options.md#setting-grid-options)\n * - [Individual columns](@/guides/getting-started/setting-options.md#setting-column-options)\n * - [Individual rows](@/guides/getting-started/setting-options.md#setting-row-options)\n * - [Individual cells](@/guides/getting-started/setting-options.md#setting-cell-options)\n * - [Individual grid elements, based on any logic you implement](@/guides/getting-started/setting-options.md#implementing-custom-logic)\n *\n * Read more:\n * - [Configuration options &#8594;](@/guides/getting-started/setting-options.md)\n */\n\nexport default (function () {\n  return {\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * The `activeHeaderClassName` option lets you add a CSS class name\n     * to every currently-active, currently-selected header (when a whole column or row is selected).\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @since 0.38.2\n     * @default 'ht__active_highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__active_highlight` CSS class name\n     * // to every currently-active, currently-selected header\n     * activeHeaderClassName: 'ht__active_highlight',\n     * ```\n     */\n    activeHeaderClassName: 'ht__active_highlight',\n\n    /**\n     * The `allowEmpty` option determines whether Handsontable accepts the following values:\n     * - `null`\n     * - `undefined`\n     * - `''`\n     *\n     * You can set the `allowEmpty` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                           |\n     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` and `''` values as `valid`              |\n     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` and `''` values with as `invalid` |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // allow empty values in every cell of the entire grid\n     * allowEmpty: true,\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // allow empty values in every cell of the 'date' column\n     *     allowEmpty: true\n     *   }\n     * ],\n     * ```\n     */\n    allowEmpty: true,\n\n    /**\n     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data\n     * is treated as HTML.\n     *\n     * You can set the `allowHtml` option to one of the following:\n     *\n     * | Setting           | Description                                         |\n     * | ----------------- | --------------------------------------------------- |\n     * | `false` (default) | The [`source`](#source) data is not treated as HTML |\n     * | `true`            | The [`source`](#source) data is treated as HTML     |\n     *\n     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']\n     *   // use HTML in the `source` list\n     *   allowHtml: true,\n     *   },\n     * ],\n     * ```\n     */\n    allowHtml: false,\n\n    /**\n     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert column left**\n     * - **Insert column right**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu\n     * allowInsertColumn: false,\n     * ```\n     */\n    allowInsertColumn: true,\n\n    /**\n     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert row above**\n     * - **Insert row below**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu\n     * allowInsertRow: false,\n     * ```\n     */\n    allowInsertRow: true,\n\n    /**\n     * The `allowInvalid` option determines whether Handsontable accepts values\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * You can set the `allowInvalid` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                        |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |\n     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |\n     *\n     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Autocomplete strict mode &#8594;](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't accept `invalid` values\n     * // don't allow the user to close the cell editor\n     * // don't save `invalid` values into the data source\n     * allowInvalid: false,\n     * ```\n     */\n    allowInvalid: true,\n\n    /**\n     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove column**\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove column' menu item from the context menu\n     * allowRemoveColumn: false,\n     * ```\n     */\n    allowRemoveColumn: true,\n\n    /**\n     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove row**\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove row' menu item from the context menu\n     * allowRemoveRow: false,\n     * ```\n     */\n    allowRemoveRow: true,\n\n    /**\n     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * You can set the `autoColumnSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |\n     *\n     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:\n     *\n     * | Property                | Possible values                 | Description                                                                                                    |\n     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n     * | `syncLimit`             | A number \\| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |\n     * | `useHeaders`            | `true` \\| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |\n     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |\n     * | `allowSampleDuplicates` | `true` \\| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |\n     *\n     * By default, the `autoColumnSize` option is set to `undefined`,\n     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.\n     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,\n     * set the `autoColumnSize` option to `false`.\n     *\n     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoColumnSize` &#8594;](@/api/autoColumnSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoColumnSize\n     *\n     * @example\n     * ```js\n     * autoColumnSize: {\n     *   // keep 40% of columns in sync (the rest of columns: async)\n     *   syncLimit: '40%',\n     *   // when calculating column widths, use column headers\n     *   useHeaders: true,\n     *   // when calculating column widths, use 10 samples of the same length\n     *   samplingRatio: 10,\n     *   // when calculating column widths, allow duplicate samples\n     *   allowSampleDuplicates: true\n     * },\n     * ```\n     */\n    autoColumnSize: void 0,\n\n    /**\n     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * You can set the `autoRowSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |\n     *\n     * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)\n     * a proper size, set the `autoRowSize` option to `true`.\n     *\n     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:\n     *\n     * | Property    | Possible values                 | Description                                                       |\n     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |\n     * | `syncLimit` | A number \\| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |\n     *\n     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoRowSize` &#8594;](@/api/autoRowSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoRowSize\n     *\n     * @example\n     * ```js\n     * autoRowSize: {\n     *   // keep 40% of rows in sync (the rest of rows: async)\n     *   syncLimit: '40%'\n     * },\n     * ```\n     */\n    autoRowSize: void 0,\n\n    /**\n     * The `autoWrapCol` option determines what happens to current cell selection when you navigate to the grid's top or bottom edge.\n     *\n     * You can set the `autoWrapCol` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                             |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | On reaching the grid's top or bottom edge<br>- Jump to the opposite edge<br>- Select a cell in the previous/next column |\n     * | `false` (default) | On reaching the grid's top or bottom edge, stop                                                                         |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on reaching the grid's top or bottom edge, jump to the opposite edge\n     * autoWrapCol: true,\n     * ```\n     */\n    autoWrapCol: false,\n\n    /**\n     * The `autoWrapRow` option determines what happens to current cell selection when you navigate to the grid's left or right edge.\n     *\n     * You can set the `autoWrapRow` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                  |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | On reaching the grid's left or right edge:<br>- Jump to the grid's opposite edge<br>- Select a cell in the previous/next row |\n     * | `false` (default) | On reaching the grid's left or right edge, stop                                                                              |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on reaching the grid's left or right edge, jump to the opposite edge\n     * autoWrapRow: true,\n     * ```\n     */\n    autoWrapRow: false,\n\n    /**\n     * @description\n     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.\n     *\n     * You can set the `bindRowsWithHeaders` option to one of the following:\n     *\n     * | Setting | Description                                                                  |\n     * | ------- | ---------------------------------------------------------------------------- |\n     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |\n     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `BindRowsWithHeaders` &#8594;](@/api/bindRowsWithHeaders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default undefined\n     * @category BindRowsWithHeaders\n     *\n     * @example\n     * ```js\n     * // enable the `BindRowsWithHeaders` plugin\n     * bindRowsWithHeaders: true\n     * ```\n     */\n    bindRowsWithHeaders: void 0,\n\n    /**\n     * The `cell` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to individual cells.\n     *\n     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/setting-options.md#setting-grid-options),\n     * and the [`columns`](#columns) options.\n     *\n     * Read more:\n     * - [Configuration options: Setting cell options &#8594;](@/guides/getting-started/setting-options.md#setting-cell-options)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default []\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cell` option to an array of objects\n     * cell: [\n     *   // make the cell with coordinates (0, 0) read-only\n     *   {\n     *     row: 0,\n     *     col: 0,\n     *     readOnly: true\n     *   }\n     * ],\n     * ```\n     */\n    cell: [],\n\n    /**\n     * @description\n     * The `cells` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to\n     * individual grid elements (columns, rows, cells), based on any logic you implement.\n     *\n     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).\n     * It takes the following parameters:\n     *\n     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |\n     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |\n     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |\n     * | `prop`    | No       | String \\| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |\n     *\n     * Read more:\n     * - [Configuration options: Implementing custom logic &#8594;](@/guides/getting-started/setting-options.md#implementing-custom-logic)\n     * - [Configuration options: Setting row options &#8594;](@/guides/getting-started/setting-options.md#setting-row-options)\n     * - [`columns`](#columns)\n     * - [`cell`](#cell)\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cells` option to your custom function\n     * cells(row, column, prop) {\n     *   const cellProperties = { readOnly: false };\n     *   const visualRowIndex = this.instance.toVisualRow(row);\n     *   const visualColIndex = this.instance.toVisualColumn(column);\n     *\n     *   if (visualRowIndex === 0 && visualColIndex === 0) {\n     *     cellProperties.readOnly = true;\n     *   }\n     *\n     *   return cellProperties;\n     * },\n     * ```\n     */\n    cells: void 0,\n\n    /**\n     * The `checkedTemplate` option lets you configure what value\n     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `checkedTemplate` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                              |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |\n     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()` &#8594;](@/api/core.md#getDataAtCell)\n     * - [`uncheckedTemplate`](#uncheckedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when checked, the cell's value is `true`\n     *     // when unchecked, the cell's value is `false`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     type: 'checkbox',\n     *     // when checked, the cell's value is `'Yes'`\n     *     checkedTemplate: 'Yes',\n     *     // when unchecked, the cell's value is `'No'`\n     *     uncheckedTemplate: 'No'\n     *  }\n     * ],\n     * ```\n     */\n    checkedTemplate: void 0,\n\n    /**\n     * The `className` option lets you add CSS class names to every currently-selected element.\n     *\n     * You can set the `className` option to one of the following:\n     *\n     * | Setting             | Description                                                      |\n     * | ------------------- | ---------------------------------------------------------------- |\n     * | A string            | Add a single CSS class name to every currently-selected element  |\n     * | An array of strings | Add multiple CSS class names to every currently-selected element |\n     *\n     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/setting-options.md#cascading-configuration).\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every currently-selected element\n     * className: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every currently-selected element\n     * className: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    className: void 0,\n\n    /**\n     * The `colHeaders` option configures your grid's column headers.\n     *\n     * You can set the `colHeaders` option to one of the following:\n     *\n     * | Setting  | Description                                                          |\n     * | -------- | -------------------------------------------------------------------- |\n     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |\n     * | `false`  | Disable column headers                                               |\n     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own column headers, using a function                     |\n     *\n     * Read more:\n     * - [Column header &#8594;](@/guides/columns/column-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default null\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default column headers\n     * colHeaders: true,\n     *\n     * // set your own column headers\n     * colHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own column headers, using a function\n     * colHeaders: function(visualColumnIndex) {\n     *   return `${visualColumnIndex} + : AB`;\n     * },\n     * ```\n     */\n    colHeaders: null,\n\n    /**\n     * @description\n     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.\n     *\n     * You can set the `collapsibleColumns` option to one of the following:\n     *\n     * | Setting              | Description                                                                                       |\n     * | -------------------- | ------------------------------------------------------------------------------------------------- |\n     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |\n     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |\n     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |\n     *\n     * Read more:\n     * - [Plugins: `CollapsibleColumns` &#8594;](@/api/collapsibleColumns.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default undefined\n     * @category CollapsibleColumns\n     *\n     * @example\n     * ```js\n     * // enable column collapsing for all headers\n     * collapsibleColumns: true,\n     *\n     * // enable column collapsing for selected headers\n     * collapsibleColumns: [\n     *   {row: -4, col: 1, collapsible: true},\n     *   {row: -3, col: 5, collapsible: true}\n     * ],\n     * ```\n     */\n    collapsibleColumns: void 0,\n\n    /**\n     * @description\n     * The `columnHeaderHeight` option configures the height of column headers.\n     *\n     * You can set the `columnHeaderHeight` option to one of the following:\n     *\n     * | Setting  | Description                                         |\n     * | -------- | --------------------------------------------------- |\n     * | A number | Set the same height for every column header         |\n     * | An array | Set different heights for individual column headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same height for every column header\n     * columnHeaderHeight: 25,\n     *\n     * // set different heights for individual column headers\n     * columnHeaderHeight: [25, 30, 55],\n     * ```\n     */\n    columnHeaderHeight: void 0,\n\n    /**\n     * @description\n     * The `columns` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to individual columns (or ranges of columns).\n     *\n     * You can set the `columns` option to one of the following:\n     * - An array of objects (each object represents one column)\n     * - A function that returns an array of objects\n     *\n     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/setting-options.md#setting-grid-options).\n     *\n     * When you use the `columns` option, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) are ignored.\n     *\n     * Read more:\n     * - [Configuration options: Setting column options &#8594;](@/guides/getting-started/setting-options.md#setting-column-options)\n     * - [`startCols`](#startCols)\n     * - [`minCols`](#minCols)\n     * - [`maxCols`](#maxCols)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `columns` option to an array of objects\n     * // each object represents one column\n     * columns: [\n     *   {\n     *     // column options for the first (by physical index) column\n     *     type: 'numeric',\n     *     numericFormat: {\n     *       pattern: '0,0.00 $'\n     *     }\n     *   },\n     *   {\n     *     // column options for the second (by physical index) column\n     *     type: 'text',\n     *     readOnly: true\n     *   }\n     * ],\n     *\n     * // or set the `columns` option to a function, based on physical indexes\n     * columns(index) {\n     *   return {\n     *     type: index > 0 ? 'numeric' : 'text',\n     *     readOnly: index < 1\n     *   }\n     * }\n     * ```\n     */\n    columns: void 0,\n\n    /**\n     * @description\n     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `columnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                            |\n     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |\n     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |\n     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display an arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/row-sorting.md#custom-compare-functions)                                                                |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `columnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Row sorting &#8594;](@/guides/rows/row-sorting.md)\n     * - [Row sorting: Custom compare functions &#8594;](@/guides/rows/row-sorting.md#custom-compare-functions)\n     * - [`multiColumnSorting`](#multiColumnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category ColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: true\n     *\n     * // enable the `ColumnSorting` plugin with custom configuration\n     * columnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display an arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    columnSorting: void 0,\n\n    /**\n     * @description\n     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.\n     *\n     * You can set the `columnSummary` option to an array of objects.\n     * Each object configures a single column summary, using the following properties:\n     *\n     * | Property                 | Possible values                                                         | Description                                                                                                                  |\n     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |\n     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |\n     * | `type`                   | `'sum'` \\| `'min'` \\| `'max'` \\| `'count'` \\| `'average'` \\| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |\n     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |\n     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n     * | `forceNumeric`           | `true`  \\| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#forcing-numeric-values)                                  |\n     * | `reversedRowCoords`      | `true`  \\| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |\n     * | `suppressDataTypeErrors` | `true`  \\| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throwing-data-type-errors)                                    |\n     * | `readOnly`               | `true`  \\| `false`                                                      | Make summary cell read-only                                                                                                  |\n     * | `roundFloat`             | `true`  \\| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#rounding-a-column-summary-result)                                  |\n     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implementing-a-custom-summary-function)                         |\n     *\n     * Read more:\n     * - [Column summary &#8594;](@/guides/columns/column-summary.md)\n     * - [Plugins: `ColumnSummary` &#8594;](@/api/columnSummary.md)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category ColumnSummary\n     *\n     * @example\n     * ```js\n     * columnSummary: [\n     *   {\n     *     sourceColumn: 0,\n     *     ranges: [\n     *       [0, 2], [4], [6, 8]\n     *     ],\n     *     type: 'custom',\n     *     destinationRow: 4,\n     *     destinationColumn: 1,\n     *     forceNumeric: true,\n     *     reversedRowCoords: true,\n     *     suppressDataTypeErrors: false,\n     *     readOnly: true,\n     *     roundFloat: false,\n     *     customFunction(endpoint) {\n     *        return 100;\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    columnSummary: void 0,\n\n    /**\n     * The `colWidths` option sets columns' widths, in pixels.\n     *\n     * In the rendering process, the default column width is 50px. To change it,\n     * set the `colWidths` option to one of the following:\n     *\n     * | Setting     | Description                                                                                          | Example                                                           |\n     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |\n     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |\n     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |\n     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |\n     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |\n     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |\n     *\n     * Setting the `colWidths` option disables the {@link AutoColumnSize} plugin.\n     *\n     * Read more:\n     * - [Column width &#8594;](@/guides/columns/column-width.md)\n     * - [Hooks: `modifyColWidth` &#8594;](@/api/hooks.md#modifyColWidth)\n     * - [`autoColumnSize`](#autoColumnSize)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every column's width to 100px\n     * colWidths: 100,\n     *\n     * // set every column's width to 100px\n     * colWidths: '100px',\n     *\n     * // set the first (by visual index) column's width to 100\n     * // set the second (by visual index) column's width to 120\n     * // set the third (by visual index) column's width to `undefined`\n     * // set any other column's width to the default 50px\n     * colWidths: [100, 120, undefined],\n     *\n     * // set each column's width individually, using a function\n     * colWidths(visualColumnIndex) {\n     *   return visualColumnIndex * 10;\n     * },\n     * ```\n     */\n    colWidths: void 0,\n\n    /**\n     * The `commentedCellClassName` option lets you add a CSS class name to cells\n     * that have comments.\n     *\n     * Read more:\n     * - [Comments &#8594;](@/guides/cell-features/comments.md)\n     * - [`comments`](#comments)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htCommentCell'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-comment` CSS class name\n     * // to every cell that has a comment\n     * commentedCellClassName: 'has-comment',\n     * ```\n     */\n    commentedCellClassName: 'htCommentCell',\n\n    /**\n     * @description\n     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.\n     *\n     * You can set the `comments` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                           |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |\n     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |\n     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |\n     *\n     * If you set the `comments` option to an object, you can configure the following comment options:\n     *\n     * | Option         | Possible settings           | Description                                         |\n     * | -------------- | --------------------------- | --------------------------------------------------- |\n     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |\n     * | `readOnly`     | `true` \\| `false` (default) | `true`: Make comments read-only                     |\n     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |\n     *\n     * Read more:\n     * - [Comments &#8594;](@/guides/cell-features/comments.md)\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [`width`](#width)\n     * - [`height`](#height)\n     * - [`readOnly`](#readOnly)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category Comments\n     *\n     * @example\n     * ```js\n     * // enable the `Comments` plugin\n     * comments: true,\n     *\n     * // enable the `Comments` plugin\n     * // and configure its settings\n     * comments: {\n     *   // display all comments with a 1-second delay\n     *   displayDelay: 1000,\n     *   // make all comments read-only\n     *   readOnly: true,\n     *   // set the default size of all comment boxes\n     *   style: {\n     *     width: 300,\n     *     height: 100\n     *   }\n     * }\n     * ```\n     */\n    comments: false,\n\n    /**\n     * @description\n     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.\n     *\n     * You can set the `contextMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                             |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |\n     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |\n     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |\n     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-fully-custom-configuration) |\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Context menu: Context menu with default options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)\n     * - [Context menu: Context menu with specific options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)\n     * - [Context menu: Context menu with fully custom configuration options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-fully-custom-configuration)\n     * - [Plugins: `ContextMenu` &#8594;](@/api/contextMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|object}\n     * @default undefined\n     * @category ContextMenu\n     *\n     * @example\n     * ```js\n     * // enable the `ContextMenu` plugin\n     * // use the default context menu options\n     * contextMenu: true,\n     *\n     * // enable the `ContextMenu` plugin\n     * // and modify individual context menu options\n     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `ContextMenu` plugin\n     * // and apply a custom context menu configuration\n     * contextMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'option1'\n     *     },\n     *     'option2': {\n     *       name: 'option2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'option2:suboption1',\n     *             callback: function(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    contextMenu: void 0,\n\n    /**\n     * @description\n     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.\n     *\n     * You can set the `copyable` option to one of the following:\n     *\n     * | Setting                                                                                                        | Description                                                                                                                        |\n     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)                                                                                               | - Enable copying for this cell<br>- On pressing <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>+<kbd>C</kbd>, add the cell's value to the clipboard |\n     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - Disable copying for this cell                                                                                                    |\n     *\n     * Read more:\n     * - [Clipboard &#8594;](@/guides/cell-features/clipboard.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [Password cell type &#8594;](@/guides/cell-types/password-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable copying for every cell of the entire grid\n     * copyable: true,\n     *\n     * // enable copying for individual columns\n     * columns: [\n     *   {\n     *     // enable copying for every cell of this column\n     *     copyable: true\n     *   },\n     *   {\n     *     // disable copying for every cell of this column\n     *     copyable: false\n     *   }\n     * ]\n     *\n     * // enable copying for specific cells\n     * cells: [\n     *   {\n     *     cell: 0,\n     *     row: 0,\n     *     // disable copying for cell (0, 0)\n     *     copyable: false,\n     *   }\n     * ],\n     * ```\n     */\n    copyable: true,\n\n    /**\n     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.\n     *\n     * You can set the `copyPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                            |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |\n     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |\n     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |\n     *\n     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:\n     *\n     * | Option         | Possible settings                                  | Description                                                                                                                                                                             |\n     * | -------------- | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columnsLimit` | A number (default: `Infinity`)                       | A maximum number of columns that can be copied                                                                                                                                        |\n     * | `rowsLimit`    | A number (default: `Infinity`)                       | A maximum number of columns that can be copied                                                                                                                                        |\n     * | `pasteMode`    | `'overwrite'` \\| `'shift_down'` \\| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite currently-selected cells<br>`'shift_down'`: move currently-selected cells down<br>`'shift_right'`: move currently-selected cells to the right |\n     * | `uiContainer`  | An HTML element                                    | A UI container for the secondary focusable element                                                                                                                                      |\n     *\n     * Read more:\n     * - [Plugins: `CopyPaste` &#8594;](@/api/copyPaste.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default true\n     * @category CopyPaste\n     *\n     * @example\n     * ```js\n     * // disable the `CopyPaste` plugin\n     * copyPaste: false,\n     *\n     * // enable the `CopyPaste` plugin\n     * // and modify the `CopyPaste` plugin options\n     * copyPaste: {\n     *   // set the maximum number of columns that can be copied\n     *   columnsLimit: 25,\n     *   // set the maximum number of rows that can be copied\n     *   rowsLimit: 50,\n     *   // set the paste behavior\n     *   pasteMode: 'shift_down',\n     *   // set the UI container\n     *   uiContainer: document.body,\n     * },\n     * ```\n     */\n    copyPaste: true,\n\n    /**\n     * The `correctFormat` option configures [`date`](@/guides/cell-types/date-cell-type.md) cells' date format correction.\n     *\n     * You can set the `correctFormat` option to one of the following\n     *\n     * | Setting           | Description                                                           |\n     * | ----------------- | --------------------------------------------------------------------- |\n     * | `false` (default) | Don't correct dates                                                   |\n     * | `true`            | Enforce the date format set by the [`dateFormat`](#dateFormat) option |\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   // enforce the `YYYY-MM-DD` date format\n     *   correctFormat: true\n     *   },\n     * ],\n     * ```\n     */\n    correctFormat: false,\n\n    /**\n     * The `currentColClassName` option lets you add a CSS class name\n     * to every cell of the currently-visible, currently-selected columns.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every cell of the currently-visible, currently-selected columns\n     * currentColClassName: 'your-class-name',\n     * ```\n     */\n    currentColClassName: void 0,\n\n    /**\n     * The `currentHeaderClassName` option lets you add a CSS class name\n     * to every currently-visible, currently-selected header.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'ht__highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__highlight` CSS class name\n     * // to every currently-visible, currently-selected header\n     * currentHeaderClassName: 'ht__highlight',\n     * ```\n     */\n    currentHeaderClassName: 'ht__highlight',\n\n    /**\n     * The `currentRowClassName` option lets you add a CSS class name\n     * to every cell of the currently-visible, currently-selected rows.\n     *\n     * Read more:\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every cell of the currently-visible, currently-selected rows\n     * currentRowClassName: 'your-class-name',\n     * ```\n     */\n    currentRowClassName: void 0,\n\n    /**\n     * @description\n     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),\n     * set the `customBorders` option to `true`.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a particular cell,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for one cell, and has the following properties:\n     *\n     * | Property | Sub-properties     | Types                              | Description                                                       |\n     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |\n     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |\n     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |\n     * | `left`   | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the left border's width (`width`)<br> and color (`color`).   |\n     * | `right`  | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the right border's width (`width`)<br> and color (`color`).  |\n     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the top border's width (`width`)<br> and color (`color`).    |\n     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the bottom border's width (`width`)<br> and color (`color`). |\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a range of cells,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for a single range of cells, and has the following properties:\n     *\n     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |\n     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | `from` selects the range's top-left corner.<br>`to` selects the range's bottom-right corner. |\n     * | `left`   | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the left border's `width` and `color`.                                                  |\n     * | `right`  | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the right border's `width` and `color`.                                                 |\n     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the top border's `width` and `color`.                                                   |\n     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the bottom border's `width` and `color`.                                                |\n     *\n     * Read more:\n     * - [Formatting cells: Custom cell borders &#8594;](@/guides/cell-features/formatting-cells.md#custom-cell-borders)\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `CustomBorders` &#8594;](@/api/customBorders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category CustomBorders\n     *\n     * @example\n     * ```js\n     * // enable the `CustomBorders` plugin\n     * customBorders: true,\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a particular cell\n     * customBorders: [\n     *   // add an object with a border configuration for one cell\n     *   {\n     *     // set the cell's row coordinate\n     *     row: 2,\n     *     // set the cell's column coordinate\n     *     col: 2,\n     *     // set the left border's width and color\n     *     left: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right border's width and color\n     *     right: {\n     *       width: 1,\n     *       color: 'green'\n     *     },\n     *     // set the top border's width and color\n     *     top: '',\n     *     // set the bottom border's width and color\n     *     bottom: ''\n     *   }\n     * ],\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a range of cells\n     * customBorders: [\n     *   // add an object with a border configuration for one range of cells\n     *   {\n     *     // select a range of cells\n     *     range: {\n     *       // set the range's top-left corner\n     *       from: {\n     *         row: 1,\n     *         col: 1\n     *       },\n     *       // set the range's bottom-right corner\n     *       to: {\n     *         row: 3,\n     *         col: 4\n     *       }\n     *     },\n     *     // set the left border's width and color\n     *     left: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right border's width and color\n     *     right: {},\n     *     // set the top border's width and color\n     *     top: {},\n     *     // set the bottom border's width and color\n     *     bottom: {}\n     *   }\n     * ],\n     * ```\n     */\n    customBorders: false,\n\n    /**\n     * @description\n     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.\n     *\n     * Handsontable's data is bound to your source data __by reference__ (i.e. when you edit Handsontable's data, your source data alters as well).\n     *\n     * You can set the `data` option:\n     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).\n     *\n     * Read more:\n     * - [Binding to data &#8594;](@/guides/getting-started/binding-to-data.md)\n     * - [`dataSchema`](#dataSchema)\n     *\n     * @memberof Options#\n     * @type {Array[]|object[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // as an array of arrays\n     * data: [\n     *   ['A', 'B', 'C'],\n     *   ['D', 'E', 'F'],\n     *   ['G', 'H', 'J']\n     * ]\n     *\n     * // as an array of objects\n     * data: [\n     *   {id: 1, name: 'Ted Right'},\n     *   {id: 2, name: 'Frank Honest'},\n     *   {id: 3, name: 'Joan Well'},\n     *   {id: 4, name: 'Gail Polite'},\n     *   {id: 5, name: 'Michael Fair'},\n     * ]\n     * ```\n     */\n    data: void 0,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)\n     * (or is empty), the `dataSchema` option defines the structure of new rows.\n     *\n     * Read more:\n     * - [Binding to data: Array of objects with custom data schema &#8594;](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // with `dataSchema`, you can start with an empty grid\n     * data: null,\n     * dataSchema: {id: null, name: {first: null, last: null}, address: null},\n     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n     * columns: [\n     *   {data: 'id'},\n     *   {data: 'name.first'},\n     *   {data: 'name.last'},\n     *   {data: 'address'}\n     * ],\n     * startRows: 5,\n     * minSpareRows: 1\n     * ```\n     */\n    dataSchema: void 0,\n\n    /**\n     * The `dateFormat` option configures [`date`](@/guides/cell-types/date-cell-type.md) cells' date format.\n     *\n     * You can set the `dateFormat` option to a date format string. The default value is: `'DD/MM/YYYY'`.\n     *\n     * To enforce the date format set by the `dateFormat` option,\n     * use the [`correctFormat`](#correctFormat) option.\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`correctFormat`](#correctFormat)\n     * - [`defaultDate`](#defaultDate)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'DD/MM/YYYY'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   },\n     * ],\n     * ```\n     */\n    dateFormat: 'DD/MM/YYYY',\n\n    /**\n     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.0).\n     *\n     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration),\n     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):\n     * - `bound`\n     * - `container`\n     * - `field`\n     * - `trigger`\n     *\n     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration) as well:\n     *\n     * | Pikaday option       | Handsontable's setting |\n     * | -------------------- | ---------------------- |\n     * | `format`             | `'DD/MM/YYYY'`         |\n     * | `reposition`         | `false`                |\n     *\n     * Read more:\n     * - [`editor`](#editor)\n     * - [`dateFormat`](#dateFormat)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     */\n    datePickerConfig: void 0,\n\n    /**\n     * The `defaultDate` option configures the date displayed\n     * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `defaultDate` option to a string.\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `date`\n     *     type: 'date',\n     *     // in every empty `date` cell of this column, display `2015-02-02`\n     *     defaultDate: '2015-02-02'\n     *   }\n     * ],\n     * ```\n     */\n    defaultDate: void 0,\n\n    /**\n     * @description\n     * The `disableVisualSelection` option configures how\n     * [selection](@/guides/cell-features/selection.md) is shown.\n     *\n     * You can set the `disableVisualSelection` option to one of the following:\n     *\n     * | Setting           | Description                                                                                         |\n     * | ----------------- | --------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |\n     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |\n     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |\n     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |\n     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |\n     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |\n     *\n     * Read more:\n     * - [Selection &#8594;](@/guides/cell-features/selection.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|string[]}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // don't show header selection\n     * disableVisualSelection: true,\n     *\n     * // don't show single-cell selection\n     * // show range selection\n     * // show header selection\n     * disableVisualSelection: 'current',\n     *\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // show header selection\n     * disableVisualSelection: ['current', 'area'],\n     * ```\n     */\n    disableVisualSelection: false,\n\n    /**\n     * @description\n     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.\n     *\n     * You can set the `dragToScroll` option to one of the following:\n     *\n     * | Setting          | Description                                                                 |\n     * | ---------------- | --------------------------------------------------------------------------- |\n     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |\n     * | `false`          | Don't scroll the viewport                                                   |\n     *\n     * Read more:\n     * - [Plugins: `DragToScroll` &#8594;](@/api/dragToScroll.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category DragToScroll\n     *\n     * @example\n     * ```js\n     * // when selection reaches the edge of the grid's viewport, scroll the viewport\n     * dragToScroll: true,\n     * ```\n     */\n    dragToScroll: true,\n\n    /**\n     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.\n     *\n     * You can set the `dropdownMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |\n     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |\n     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |\n     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `DropdownMenu` &#8594;](@/api/dropdownMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object|string[]}\n     * @default undefined\n     * @category DropdownMenu\n     *\n     * @example\n     * ```js\n     * // enable the `DropdownMenu` plugin\n     * // use the default context menu options\n     * dropdownMenu: true,\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and modify individual context menu options\n     * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and apply a custom dropdown menu configuration\n     * dropdownMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'option1'\n     *     },\n     *     'option2': {\n     *       name: 'option2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'option2:suboption1',\n     *             callback(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    dropdownMenu: void 0,\n\n    /**\n     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.\n     *\n     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):\n     *\n     * | Alias               | Cell editor function                                                       |\n     * | ------------------- | -------------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |\n     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |\n     * | `'base'`            | `BaseEditor`                                                               |\n     * | `'checkbox'`        | `CheckboxEditor`                                                           |\n     * | `'date'`            | `DateEditor`                                                               |\n     * | `'dropdown'`        | `DropdownEditor`                                                           |\n     * | `'handsontable'`    | `HandsontableEditor`                                                       |\n     * | `'numeric'`         | `NumericEditor`                                                            |\n     * | `'password'`        | `PasswordEditor`                                                           |\n     * | `'select'`          | `SelectEditor`                                                             |\n     * | `'text'`            | `TextEditor`                                                               |\n     * | `'time'`            | `TimeEditor`                                                               |\n     *\n     * To disable editing cells through cell editors,\n     * set the `editor` option to `false`.\n     * You'll still be able to change cells' content through Handsontable's API\n     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function|boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` editor for every cell of the entire grid\n     * editor: 'numeric',\n     *\n     * // apply the `editor` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` editor for every cell of this column\n     *     editor: 'autocomplete'\n     *   },\n     *   {\n     *     // disable editing cells through cell editors for every cell of this column\n     *     editor: false\n     *   }\n     * ]\n     * ```\n     */\n    editor: void 0,\n\n    /**\n     * The `enterBeginsEditing` option configures the action of the <kbd>Enter</kbd> key.\n     *\n     * You can set the `enterBeginsEditing` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                                               |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - On pressing <kbd>Enter</kbd> once, start editing the currently-selected cell<br>- On pressing <kbd>Enter</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |\n     * | `false`          | - On pressing <kbd>Enter</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |\n     *\n     * Read more:\n     * - [`enterMoves`](#enterMoves)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // press Enter once to start editing\n     * // press Enter twice to move to another cell\n     * enterBeginsEditing: true,\n     *\n     * // press Enter once to move to another cell\n     * enterBeginsEditing: false,\n     * ```\n     */\n    enterBeginsEditing: true,\n\n    /**\n     * The `enterMoves` option configures the action of the <kbd>Enter</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,\n     * the `enterMoves` setting applies to the **second** pressing of the <kbd>Enter</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,\n     * the `enterMoves` setting applies to the **first** pressing of the <kbd>Enter</kbd> key.\n     *\n     * You can set the `enterMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `col`    | Number | - On pressing <kbd>Enter</kbd>, move selection `col` columns right<br>- On pressing <kbd>Shift</kbd>+<kbd>Enter</kbd>, move selection `col` columns left |\n     * | `row`    | Number | - On pressing <kbd>Enter</kbd>, move selection `row` rows down<br>- On pressing <kbd>Shift</kbd>+<kbd>Enter</kbd>, move selection `row` rows up          |\n     *\n     * Read more:\n     * - [`enterBeginsEditing`](#enterBeginsEditing)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {col: 0, row: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Enter, move selection 1 column right and 1 row down\n     * // on pressing Shift+Enter, move selection 1 column left and 1 row up\n     * enterMoves: {col: 1, row: 1},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Enter\n     * // you can use it to check whether the user pressed Enter or Shift+Enter\n     * enterMoves(event) {\n     *   return {col: 1, row: 1};\n     * },\n     * ```\n     */\n    enterMoves: {\n      col: 0,\n      row: 1\n    },\n\n    /**\n     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.\n     *\n     * You can set the `fillHandle` option to one the following:\n     *\n     * | Setting        | Description                                                                |\n     * | -------------- | -------------------------------------------------------------------------- |\n     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |\n     * | `false`        | Disable autofill                                                           |\n     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |\n     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |\n     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |\n     *\n     * If you set the `fillHandle` option to an object, you can configure the following autofill options:\n     *\n     * | Option          | Possible settings              | Description                                                                                               |\n     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |\n     * | `autoInsertRow` | `true` (default) \\| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |\n     * | `direction`     | `'vertical'` \\| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |\n     *\n     * Read more:\n     * - [AutoFill values &#8594;](@/guides/cell-features/autofill-values.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|object}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable autofill in all directions\n     * // with `autoInsertRow` enabled\n     * fillHandle: true,\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'vertical',\n     *\n     * // enable horizontal autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'horizontal',\n     *\n     * // enable autofill in all directions\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     * },\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     *   direction: 'vertical'\n     * },\n     * ```\n     */\n    fillHandle: {\n      autoInsertRow: false\n    },\n\n    /**\n     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are updated by the end user's input.\n     *\n     * You can set the `filter` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                           |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |\n     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filteringCaseSensitive`](#filteringCaseSensitive)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // when the end user types in `A`, display only the A option\n     *   // when the end user types in `B`, display only the B option\n     *   // when the end user types in `C`, display only the C option\n     *   filter: true\n     * }],\n     * ```\n     */\n    filter: true,\n\n    /**\n     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * input is case-sensitive.\n     *\n     * You can set the `filteringCaseSensitive` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |\n     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filter`](#filter)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     source: [ ... ],\n     *     // match case while searching autocomplete options\n     *     filteringCaseSensitive: true\n     *   }\n     * ],\n     * ```\n     */\n    filteringCaseSensitive: false,\n\n    /**\n     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.\n     *\n     * You can set the `filters` option to one of the following:\n     *\n     * | Setting | Description                                      |\n     * | ------- | ------------------------------------------------ |\n     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |\n     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |\n     *\n     * Read more:\n     * - [Column filter &#8594;](@/guides/columns/column-filter.md)\n     * - [Plugins: `Filters` &#8594;](@/api/filters.md)\n     * - [`dropdownMenu`](#dropdownMenu)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Filters\n     *\n     * @example\n     * ```js\n     * // enable the `Filters` plugin\n     * filters: true,\n     * ```\n     */\n    filters: void 0,\n\n    /**\n     * The `fixedColumnsLeft` option sets the number of [frozen columns](@/guides/columns/column-freezing.md)\n     * at the left-hand side of the grid.\n     *\n     * Read more:\n     * - [Column freezing &#8594;](@/guides/columns/column-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the first 3 columns from the left\n     * fixedColumnsLeft: 3,\n     * ```\n     */\n    fixedColumnsLeft: 0,\n\n    /**\n     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)\n     * at the bottom of the grid.\n     *\n     * Read more:\n     * - [Row freezing &#8594;](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the bottom 3 rows\n     * fixedRowsBottom: 3,\n     * ```\n     */\n    fixedRowsBottom: 0,\n\n    /**\n     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.\n     *\n     * Read more:\n     * - [Row freezing &#8594;](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the top 3 rows\n     * fixedRowsTop: 3,\n     * ```\n     */\n    fixedRowsTop: 0,\n\n    /**\n     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.\n     *\n     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.\n     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:\n     * - [Formula calculation: Initialization methods &#8594;](@/guides/formulas/formula-calculation.md#initialization-methods)\n     *\n     * You can set the `formulas` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                                                                                                                                                                        |\n     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `engine`    | `HyperFormula` \\|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \\|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |\n     * | `sheetId`   | A number                                                                                                                                                                                                               |\n     * | `sheetName` | A string                                                                                                                                                                                                               |\n     *\n     * Read more:\n     * - [Plugins: `Formulas` &#8594;](@/api/formulas.md)\n     * - [Formula calculation &#8594;](@/guides/formulas/formula-calculation.md)\n     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)\n     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Formulas\n     *\n     * @example\n     * ```js\n     * // either add the `HyperFormula` class\n     * formulas: {\n     *   // set `engine` to `HyperFormula`\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula instance\n     * // initialized with the `'internal-use-in-handsontable'` license key\n     * const hyperformulaInstance = HyperFormula.buildEmpty({\n     *   licenseKey: 'internal-use-in-handsontable',\n     * });\n     *\n     * formulas: {\n     *   // set `engine` to a HyperFormula instance\n     *   engine: hyperFormulaInstance,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula configuration object\n     * formulas: {\n     *   // set `engine` to a HyperFormula configuration object\n     *   engine: {\n     *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`\n     *     leapYear1900: false,       // this option comes from HyperFormula\n     *     // add more HyperFormula configuration options\n     *   },\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // use the same HyperFormula instance in multiple Handsontable instances\n     *\n     * // a Handsontable instance `hot1`\n     * formulas: {\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // a Handsontable instance `hot2`\n     * formulas: {\n     *   engine: hot1.getPlugin('formulas').engine,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     * ```\n     */\n    formulas: void 0,\n\n    /**\n     * The `fragmentSelection` option configures text selection settings.\n     *\n     * You can set the `fragmentSelection` option to one of the following:\n     *\n     * | Setting           | Decription                                        |\n     * | ----------------- | ------------------------------------------------- |\n     * | `false` (default) | Disable text selection                            |\n     * | `true`            | Enable text selection in multiple cells at a time |\n     * | `'cell'`          | Enable text selection in one cell at a time       |\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable text selection in multiple cells at a time\n     * fragmentSelection: true,\n     *\n     * // enable text selection in one cell a time\n     * fragmentSelection: 'cell',\n     * ```\n     */\n    fragmentSelection: false,\n\n    /**\n     * The `height` option configures the height of your grid.\n     *\n     * You can set `height` option to one of the following:\n     *\n     * | Setting                                                                    | Example                    |\n     * | -------------------------------------------------------------------------- | -------------------------- |\n     * | A number of pixels                                                         | `height: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |\n     * | A function that returns a valid number or string                           | `height() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size &#8594;](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's height to 500px\n     * height: 500,\n     *\n     * // set the grid's height to 75vh\n     * height: '75vh',\n     *\n     * // set the grid's height to 500px, using a function\n     * height() {\n     *   return 500;\n     * },\n     * ```\n     */\n    height: void 0,\n\n    /**\n     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.\n     *\n     * You can set the `hiddenColumns` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                             |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |\n     *\n     * Read more:\n     * - [Plugins: `HiddenColumns` &#8594;](@/api/hiddenColumns.md)\n     * - [Column hiding &#8594;](@/guides/columns/column-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenColumns\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenColumns` plugin\n     * hiddenColumns: true,\n     *\n     * // enable `HiddenColumns` plugin, and modify the plugin options\n     * hiddenColumns: {\n     *   // set columns that are hidden by default\n     *   columns: [5, 10, 15],\n     *   // when copying or pasting data, take hidden columns into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden columns are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenColumns: void 0,\n\n    /**\n     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.\n     *\n     * You can set the `hiddenRows` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                       |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |\n     *\n     * Read more:\n     * - [Plugins: `HiddenRows` &#8594;](@/api/hiddenRows.md)\n     * - [Row hiding &#8594;](@/guides/rows/row-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenRows\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenRows` plugin\n     * hiddenRows: true,\n     *\n     * // enable `HiddenRows` plugin, and modify the plugin options\n     * hiddenRows: {\n     *   // set rows that are hidden by default\n     *   rows: [5, 10, 15],\n     *   // when copying or pasting data, take hidden rows into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden rows are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenRows: void 0,\n\n    /**\n     * The `invalidCellClassName` option lets you add a CSS class name to cells\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htInvalid'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `highlight-error` CSS class name\n     * // to every `invalid` cell`\n     * invalidCellClassName: 'highlight-error',\n     * ```\n     */\n    invalidCellClassName: 'htInvalid',\n\n    /**\n     * The `isEmptyCol` option lets you define your own custom method\n     * for checking if a column at a given visual index is empty.\n     *\n     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} col Visual column index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyCol` method\n     * isEmptyCol(visualColumnIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyCol: function isEmptyCol(col) {\n      var row;\n      var rowLen;\n      var value;\n\n      for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {\n        value = this.getDataAtCell(row, col);\n\n        if (isEmpty(value) === false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * The `isEmptyRow` option lets you define your own custom method\n     * for checking if a row at a given visual index is empty.\n     *\n     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} row Visual row index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyRow` method\n     * isEmptyRow(visualRowIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyRow: function isEmptyRow(row) {\n      var col;\n      var colLen;\n      var value;\n      var meta;\n\n      for (col = 0, colLen = this.countCols(); col < colLen; col++) {\n        value = this.getDataAtCell(row, col);\n\n        if (isEmpty(value) === false) {\n          if (_typeof(value) === 'object') {\n            meta = this.getCellMeta(row, col);\n            return isObjectEqual(this.getSchema()[meta.prop], value);\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * @description\n     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.\n     *\n     * You can set the `label` option to an object with the following properties:\n     *\n     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |\n     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `position`  | `'after'` (default) \\| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |\n     * | `value`     | A string \\| A function            | The label's text                                                                                                                                                                                                        |\n     * | `separated` | `false` (default) \\| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |\n     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox labels &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   type: 'checkbox',\n     *   // add 'My label:' after the checkbox\n     *   label: { position: 'after', value: 'My label: ', separated: true }\n     * }],\n     * ```\n     */\n    label: void 0,\n\n    /**\n     * The `language` option configures Handsontable's language.\n     *\n     * You can set the `language` option to one of the following:\n     *\n     * | Setting             | Description                 |\n     * | ------------------- | --------------------------- |\n     * | `'en-US'` (default) | English - United States     |\n     * | `'de-DE'`           | German - Germany            |\n     * | `'es-MX'`           | Spanish - Mexico            |\n     * | `'fr-FR'`           | French - France             |\n     * | `'it-IT'`           | Italian - Italy             |\n     * | `'ja-JP'`           | Japanese - Japan            |\n     * | `'ko-KR'`           | Korean - Korea              |\n     * | `'lv-LV'`           | Latvian - Latvia            |\n     * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |\n     * | `'nl-NL'`           | Dutch - Netherlands         |\n     * | `'pl-PL'`           | Polish - Poland             |\n     * | `'pt-BR'`           | Portuguese - Brazil         |\n     * | `'ru-RU'`           | Russian - Russia            |\n     * | `'zh-CN'`           | Chinese - China             |\n     * | `'zh-TW'`           | Chinese - Taiwan            |\n     *\n     * Read more:\n     * - [Internationalization (i18n) &#8594;](@/guides/internationalization/internationalization-i18n.md)\n     * - [`locale`](#locale)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set Handsontable's language to Polish\n     * language: 'pl-PL',\n     * ```\n     */\n    language: 'en-US',\n\n    /**\n     * The `licenseKey` option sets your Handsontable license key.\n     *\n     * You can set the `licenseKey` option to one of the following:\n     *\n     * | Setting                                                                                                 | Description                                                                                       |\n     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n     * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |\n     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |\n     *\n     * Read more:\n     * - [License key &#8594;](@/guides/getting-started/license-key.md)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // for commercial use\n     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key\n     *\n     * // for non-commercial use\n     * licenseKey: 'non-commercial-and-evaluation',\n     * ```\n     */\n    licenseKey: void 0,\n\n    /**\n     * The `locale` option configures Handsontable's locale.\n     *\n     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,\n     * both for the entire grid, and for individual columns.\n     *\n     * Read more:\n     * - [Internationalization (i18n) &#8594;](@/guides/internationalization/internationalization-i18n.md)\n     * - [`language`](#language)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the entire grid's locale to Polish\n     * locale: 'pl-PL',\n     *\n     * // set individual columns' locales\n     * columns: [\n     *   {\n     *     // set the first column's locale to Polish\n     *     locale: 'pl-PL',\n     *   },\n     *   {\n     *     // set the second column's locale to German\n     *     locale: 'de-DE',\n     *   },\n     * ],\n     * ```\n     */\n    locale: 'en-US',\n\n    /**\n     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.\n     *\n     * You can set the `manualColumnFreeze` option to one of the following:\n     *\n     * | Setting  | Description                                                            |\n     * | -------- | ---------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |\n     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |\n     *\n     * Read more:\n     * - [Column freezing &#8594;](@/guides/columns/column-freezing.md#user-triggered-freeze)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category ManualColumnFreeze\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnFreeze` plugin\n     * manualColumnFreeze: true,\n     * ```\n     */\n    manualColumnFreeze: void 0,\n\n    /**\n     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.\n     *\n     * You can set the `manualColumnMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                        |\n     * | -------- | ------------------------------------------------------------------------------------------------------------------ |\n     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |\n     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |\n     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |\n     *\n     * Read more:\n     * - [Column moving &#8594;](@/guides/columns/column-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnMove` plugin\n     * manualColumnMove: true,\n     *\n     * // enable the `ManualColumnMove` plugin\n     * // at initialization, move column 0 to 1\n     * // at initialization, move column 1 to 4\n     * // at initialization, move column 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualColumnMove: void 0,\n\n    /**\n     * @description\n     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.\n     *\n     * You can set the `manualColumnResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                           |\n     * | -------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |\n     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |\n     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |\n     *\n     * Read more:\n     * - [Column width: Column stretching &#8594;](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnResize\n     *\n     * @example\n     * ```js\n     * // enable the `manualColumnResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `manualColumnResize` plugin\n     * // set the initial width of column 0 to 40 pixels\n     * // set the initial width of column 1 to 50 pixels\n     * // set the initial width of column 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualColumnResize: void 0,\n\n    /**\n     * @description\n     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.\n     *\n     * You can set the `manualRowMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                               |\n     * | -------- | --------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |\n     *\n     * Read more:\n     * - [Row moving &#8594;](@/guides/rows/row-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowMove` plugin\n     * manualRowMove: true,\n     *\n     * // enable the `ManualRowMove` plugin\n     * // at initialization, move row 0 to 1\n     * // at initialization, move row 1 to 4\n     * // at initialization, move row 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualRowMove: void 0,\n\n    /**\n     * @description\n     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.\n     *\n     * You can set the `manualRowResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                   |\n     * | -------- | ------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |\n     *\n     * Read more:\n     * - [Row height: Adjust the row height manually &#8594;](@/guides/rows/row-height.md#adjust-the-row-height-manually)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowResize\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `ManualRowResize` plugin\n     * // set the initial height of row 0 to 40 pixels\n     * // set the initial height of row 1 to 50 pixels\n     * // set the initial height of row 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualRowResize: void 0,\n\n    /**\n     * The `maxCols` option sets a maximum number of columns.\n     *\n     * The `maxCols` option is used:\n     * - At initialization: if the `maxCols` value is lower than the initial number of columns,\n     * Handsontable trims columns from the right.\n     * - At runtime: for example, when inserting columns.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of columns to 300\n     * maxCols: 300,\n     * ```\n     */\n    maxCols: Infinity,\n\n    /**\n     * The `maxRows` option sets a maximum number of rows.\n     *\n     * The `maxRows` option is used:\n     * - At initialization: if the `maxRows` value is lower than the initial number of columns,\n     * Handsontable trims rows from the bottom.\n     * - At runtime: for example, when inserting rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of rows to 300\n     * maxRows: 300,\n     * ```\n     */\n    maxRows: Infinity,\n\n    /**\n     * @description\n     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.\n     *\n     * You can set the `mergeCells` option to one of the following:\n     *\n     * | Setting             | Description                                                                                         |\n     * | ------------------- | --------------------------------------------------------------------------------------------------- |\n     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |\n     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |\n     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |\n     *\n     * To merge specific cells at Handsontable's initialization,\n     * set the `mergeCells` option to an array of objects, with the following properties:\n     *\n     * | Property  | Description                                                |\n     * | --------- | ---------------------------------------------------------- |\n     * | `row`     | The row index of the merged section's beginning            |\n     * | `col`     | The column index of the merged section's beginning         |\n     * | `rowspan` | The width (as a number of rows) of the merged section      |\n     * | `colspan` | The height (as a number of columns ) of the merged section |\n     *\n     * Read more:\n     * - [Merge cells &#8594;](@/guides/cell-features/merge-cells.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category MergeCells\n     *\n     * @example\n     * ```js\n     * // enable the `MergeCells` plugin\n     * margeCells: true,\n     *\n     * // enable the `MergeCells` plugin\n     * // and merge specific cells at initialization\n     * mergeCells: [\n     *   // merge cells from cell (1,1) to cell (3,3)\n     *   {row: 1, col: 1, rowspan: 3, colspan: 3},\n     *   // merge cells from cell (3,4) to cell (2,2)\n     *   {row: 3, col: 4, rowspan: 2, colspan: 2},\n     *   // merge cells from cell (5,6) to cell (3,3)\n     *   {row: 5, col: 6, rowspan: 3, colspan: 3}\n     * ],\n     * ```\n     */\n    mergeCells: false,\n\n    /**\n     * The `minCols` option sets a minimum number of columns.\n     *\n     * The `minCols` option is used:\n     * - At initialization: if the `minCols` value is higher than the initial number of columns,\n     * Handsontable adds empty columns to the right.\n     * - At runtime: for example, when removing columns.\n     *\n     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of columns to 10\n     * minCols: 10,\n     * ```\n     */\n    minCols: 0,\n\n    /**\n     * The `minRows` option sets a minimum number of rows.\n     *\n     * The `minRows` option is used:\n     * - At initialization: if the `minRows` value is higher than the initial number of rows,\n     * Handsontable adds empty rows at the bottom.\n     * - At runtime: for example, when removing rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of rows to 10\n     * minRows: 10,\n     * ```\n     */\n    minRows: 0,\n\n    /**\n     * The `minSpareCols` option sets a minimum number of empty columns\n     * at the grid's right-hand end.\n     *\n     * If there already are other empty columns at the grid's right-hand end,\n     * they are counted into the `minSpareCols` value.\n     *\n     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.\n     *\n     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty columns on the right\n     * minSpareCols: 3,\n     * ```\n     */\n    minSpareCols: 0,\n\n    /**\n     * The `minSpareRows` option sets a minimum number of empty rows\n     * at the bottom of the grid.\n     *\n     * If there already are other empty rows at the bottom,\n     * they are counted into the `minSpareRows` value.\n     *\n     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty rows at the bottom\n     * minSpareRows: 3,\n     * ```\n     */\n    minSpareRows: 0,\n\n    /**\n     * @description\n     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `multiColumnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                                                |\n     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |\n     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |\n     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display an arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/row-sorting.md#custom-compare-functions)                                                                |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `multiColumnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Row sorting &#8594;](@/guides/rows/row-sorting.md)\n     * - [`columnSorting`](#columnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category MultiColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: true\n     *\n     * // enable the `MultiColumnSorting` plugin with custom configuration\n     * multiColumnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display an arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    multiColumnSorting: void 0,\n\n    /**\n     * @description\n     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.\n     *\n     * You can set the `nestedHeaders` option to an array of arrays:\n     * - Each array configures one set of nested headers.\n     * - Each array element configures one header, and can be one of the following:\n     *\n     * | Array element | Description                                                                                  |\n     * | ------------- | -------------------------------------------------------------------------------------------- |\n     * | A string      | The header's label                                                                           |\n     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |\n     *\n     * Read more:\n     * - [Plugins: `NestedHeaders` &#8594;](@/api/nestedHeaders.md)\n     * - [Column groups: Nested headers &#8594;](@/guides/columns/column-groups.md#nested-headers)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default undefined\n     * @category NestedHeaders\n     *\n     * @example\n     * ```js\n     * nestedHeaders: [\n     *   ['A', {label: 'B', colspan: 8}, 'C'],\n     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']\n     * ],\n     * ```\n     */\n    nestedHeaders: void 0,\n\n    /**\n     * @description\n     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.\n     *\n     * You can set the `nestedRows` option to one of the following:\n     *\n     * | Setting           | Description                                            |\n     * | ----------------- | ------------------------------------------------------ |\n     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |\n     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `NestedRows` &#8594;](@/api/nestedRows.md)\n     *\n     * @example\n     * ```js\n     * // enable the `NestedRows` plugin\n     * nestedRows: true,\n     * ```\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category NestedRows\n     */\n    nestedRows: void 0,\n\n    /**\n     * The `noWordWrapClassName` option lets you add a CSS class name\n     * to every cell that has the [`wordWrap`](#wordWrap) option set to `false`.\n     *\n     * Read more:\n     * - [`wordWrap`](#wordWrap)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htNoWrap'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `is-noWrapCell` CSS class name\n     * // to every cell that doesn't wrap content\n     * noWordWrapClassName: 'is-noWrapCell',\n     * ```\n     */\n    noWordWrapClassName: 'htNoWrap',\n\n    /**\n     * The `numericFormat` option configures the number format and the currency format\n     * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output.\n     *\n     * You can set the `numericFormat` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                               | Description     |\n     * | ----------- | ----------------------------------------------------------------------------- | --------------- |\n     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |\n     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |\n     *\n     * The `numericFormat` option as no effect on cells' input data.\n     * To enter numeric data into Handsontable, use:\n     * - Either floats (separated by a dot, or a comma)\n     * - Or integers\n     *\n     * In the source data, numeric data is stored as JavaScript numbers.\n     *\n     * Read more:\n     * - [Numeric cell type &#8594;](@/guides/cell-types/numeric-cell-type.md)\n     * - [Third-party licenses &#8594;](@/guides/technical-specification/third-party-licenses.md)\n     *\n     * @memberof Options#\n     * @since 0.35.0\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `numeric`\n     *     type: 'numeric',\n     *     // set the `numericFormat` option for every `numeric` cell of this column\n     *     numericFormat: {\n     *       // set the number format\n     *       pattern: '0,00',\n     *       // set the currency format\n     *       culture: 'en-US'\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    numericFormat: void 0,\n\n    /**\n     * If the `observeDOMVisibility` option is set to `true`,\n     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't rerender the grid on visibility changes\n     * observeDOMVisibility: false,\n     * ```\n     */\n    observeDOMVisibility: true,\n\n    /**\n     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)\n     * when you click outside of the grid.\n     *\n     * You can set the `outsideClickDeselects` option to one of the following:\n     *\n     * | Setting          | Description                                                                                              |\n     * | ---------------- | -------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |\n     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |\n     * | A function       | A function that takes the click event target and returns a boolean                                       |\n     *\n     * @memberof Options#\n     * @type {boolean|Function}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on a mouse click outside of the grid, clear the current selection\n     * outsideClickDeselects: true,\n     *\n     * // on a mouse click outside of the grid, keep the current selection\n     * outsideClickDeselects: false,\n     *\n     * // take the click event target and return `false`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     *\n     * // take the click event target and return `true`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     * ```\n     */\n    outsideClickDeselects: true,\n\n    /**\n     * @description\n     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.\n     *\n     * You can set the `persistentState` to one of the following:\n     *\n     * | Setting           | Description                                                      |\n     * | ----------------- | ---------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |\n     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |\n     *\n     * Read more:\n     * - [Saving data: Saving data locally &#8594;](@/guides/getting-started/saving-data.md#saving-data-locally)\n     * - [Plugins: `PersistentState` &#8594;](@/api/persistentState.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category PersistentState\n     *\n     * @example\n     * ```js\n     * // enable the `PersistentState` plugin\n     * persistentState: true,\n     * ```\n     */\n    persistentState: void 0,\n\n    /**\n     * The `placeholder` option lets you display placeholder text in every empty cell.\n     *\n     * You can set the `placeholder` option to one of the following:\n     *\n     * | Setting            | Example        | Description                                                           |\n     * | ------------------ | -------------- | --------------------------------------------------------------------- |\n     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |\n     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |\n     *\n     * Read more:\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // display 'Empty cell' text\n     * // in every empty cell of the entire grid\n     * placeholder: 'Empty cell',\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // display 'Empty date cell' text\n     *     // in every empty cell of the `date` column\n     *     placeholder: 'Empty date cell'\n     *   }\n     * ],\n     * ```\n     */\n    placeholder: void 0,\n\n    /**\n     * The `placeholderCellClassName` option lets you add a CSS class name to cells\n     * that contain [`placeholder`](#placeholder) text.\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [`placeholder`](#placeholder)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htPlaceholder'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-placeholder` CSS class name\n     * // to every cell that contains `placeholder` text\n     * placeholderCellClassName: 'has-placeholder',\n     * ```\n     */\n    placeholderCellClassName: 'htPlaceholder',\n\n    /**\n     * The `preventOverflow` option configures preventing Handsontable\n     * from overflowing outside of its parent element.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                      |\n     * | ----------------- | -------------------------------- |\n     * | `false` (default) | Don't prevent overflowing        |\n     * | `'horizontal'`      | Prevent horizontal overflowing |\n     * | `'vertical'`        | Prevent vertical overflowing   |\n     *\n     * @memberof Options#\n     * @type {string|boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // prevent horizontal overflowing\n     * preventOverflow: 'horizontal',\n     * ```\n     */\n    preventOverflow: false,\n\n    /**\n     * The `preventWheel` option configures preventing the `wheel` event's default action\n     * on overlays.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                                      |\n     * | ----------------- | ------------------------------------------------ |\n     * | `false` (default) | Don't prevent the `wheel` event's default action |\n     * | `true`            | Prevent the `wheel` event's default action       |\n     *\n     * @memberof Options#\n     * @private\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't prevent the `wheel` event's default action\n     * preventWheel: false,\n     * ```\n     */\n    preventWheel: false,\n\n    /**\n     * @description\n     * The `readOnly` option determines whether a cell, column or comment is editable or not.\n     *\n     * You can set the `readOnly` option to one of the following:\n     *\n     * | Setting           | Decription                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Set as editable                                                                                                           |\n     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set as read-only\n     * readOnly: true,\n     * ```\n     */\n    readOnly: false,\n\n    /**\n     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htDimmed'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `is-readOnly` CSS class name\n     * // to every read-only cell\n     * readOnlyCellClassName: 'is-readOnly',\n     * ```\n     */\n    readOnlyCellClassName: 'htDimmed',\n\n    /**\n     * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).\n     *\n     * You can set the `renderAllRows` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |\n     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |\n     *\n     * Read more:\n     * - [Row virtualization &#8594;](@/guides/rows/row-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // disable row virtualization\n     * renderAllRows: true,\n     * ```\n     */\n    renderAllRows: void 0,\n\n    /**\n     * @description\n     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.\n     *\n     * You can set the `renderer` option to one of the following:\n     * - A custom renderer function\n     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):\n     *\n     * | Alias               | Cell renderer function                                                         |\n     * | ------------------- | ------------------------------------------------------------------------------ |\n     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |\n     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |\n     * | `'base'`            | `BaseRenderer`                                                                 |\n     * | `'checkbox'`        | `CheckboxRenderer`                                                             |\n     * | `'date'`            | `DateRenderer`                                                                 |\n     * | `'dropdown'`        | `DropdownRenderer`                                                             |\n     * | `'html'`            | `HtmlRenderer`                                                                 |\n     * | `'numeric'`         | `NumericRenderer`                                                              |\n     * | `'password'`        | `PasswordRenderer`                                                             |\n     * | `'text'`            | `TextRenderer`                                                                 |\n     * | `'time'`            | `TimeRenderer`                                                                 |\n     *\n     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell renderer &#8594;](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` renderer for every cell of the entire grid\n     * renderer: `'numeric'`,\n     *\n     * // add a custom renderer function\n     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {\n     *   // your custom renderer's logic\n     *   ...\n     * }\n     *\n     * // apply the `renderer` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` renderer for every cell of this column\n     *     renderer: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomRenderer` renderer for every cell of this column\n     *     renderer: 'myCustomRenderer'\n     *   }\n     * ]\n     * ```\n     */\n    renderer: void 0,\n\n    /**\n     * The `rowHeaders` option configures your grid's row headers.\n     *\n     * You can set the `rowHeaders` option to one of the following:\n     *\n     * | Setting    | Description                                                       |\n     * | ---------- | ----------------------------------------------------------------- |\n     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |\n     * | `false`    | Disable row headers                                               |\n     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own row headers, using a function                     |\n     *\n     * Read more:\n     * - [Row header &#8594;](@/guides/rows/row-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default row headers\n     * rowHeaders: true,\n     *\n     * // set your own row headers\n     * rowHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own row headers, using a function\n     * rowHeaders: function(visualRowIndex) {\n     *   return `${visualRowIndex}: AB`;\n     * },\n     * ```\n     */\n    rowHeaders: void 0,\n\n    /**\n     * @description\n     * The `rowHeaderWidth` option configures the width of row headers.\n     *\n     * You can set the `rowHeaderWidth` option to one of the following:\n     *\n     * | Setting  | Description                                     |\n     * | -------- | ----------------------------------------------- |\n     * | A number | Set the same width for every row header         |\n     * | An array | Set different widths for individual row headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same width for every row header\n     * rowHeaderWidth: 25,\n     *\n     * // set different widths for individual row headers\n     * rowHeaderWidth: [25, 30, 55],\n     * ```\n     */\n    rowHeaderWidth: void 0,\n\n    /**\n     * The `rowHeights` option sets rows' heights, in pixels.\n     *\n     * In the rendering process, the default row height is 23px.\n     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:\n     *\n     * | Setting     | Description                                                                                         | Example                                                      |\n     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |\n     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |\n     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |\n     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |\n     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |\n     *\n     * The `rowHeights` option also sets the minimum row height that can be set\n     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).\n     *\n     * Read more:\n     * - [Row height &#8594;](@/guides/rows/row-height.md)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every row's height to 100px\n     * rowHeights: 100,\n     *\n     * // set every row's height to 100px\n     * rowHeights: '100px',\n     *\n     * // set the first (by visual index) row's height to 100\n     * // set the second (by visual index) row's height to 120\n     * // set the third (by visual index) row's height to `undefined`\n     * // set any other row's height to the default 23px\n     * rowHeights: [100, 120, undefined],\n     *\n     * // set each row's height individually, using a function\n     * rowHeights(visualRowIndex) {\n     *   return visualRowIndex * 10;\n     * },\n     * ```\n     */\n    rowHeights: void 0,\n\n    /**\n     * @description\n     * The `search` option configures the [`Search`](@/api/search.md) plugin.\n     *\n     * You can set the `search` option to one of the following:\n     *\n     * | Setting           | Description                                                                          |\n     * | ----------------- | ------------------------------------------------------------------------------------ |\n     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |\n     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |\n     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |\n     *\n     * If you set the `search` option to an object, you can configure the following search options:\n     *\n     * | Option              | Possible settings | Description                                                                                          |\n     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |\n     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |\n     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)  |\n     * | `callback`          | A function        | Add a [custom callback function](@/guides/accessories-and-menus/searching-values.md#custom-callback) |\n     *\n     * Read more:\n     * - [Searching values &#8594;](@/guides/accessories-and-menus/searching-values.md)\n     * - [Searching values: Custom query method &#8594;](@/guides/accessories-and-menus/searching-values.md#custom-query-method)\n     * - [Searching values: Custom callback &#8594;](@/guides/accessories-and-menus/searching-values.md#custom-callback)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default false\n     * @category Search\n     *\n     * @example\n     * ```js\n     * // enable the `Search` plugin with the default configuration\n     * search: true,\n     *\n     * // enable the `Search` plugin with a custom configuration\n     * search: {\n     *   // add a `customClass` CSS class name to search results\n     *   searchResultClass: 'customClass',\n     *   // add a custom query method\n     *   queryMethod(queryStr, value) {\n     *     ...\n     *   },\n     *   // add a custom callback function\n     *   callback(instance, row, column, value, result) {\n     *     ...\n     *   }\n     * }\n     * ```\n     */\n    search: false,\n\n    /**\n     * @description\n     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.\n     *\n     * You can set the `selectionMode` option to one of the following:\n     *\n     * | Setting      | Description                                                  |\n     * | ------------ | ------------------------------------------------------------ |\n     * | `'single'`   | Allow the user to select only one cell at a time.            |\n     * | `'range'`    | Allow the user to select one range of cells at a time.       |\n     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |\n     *\n     * Read more:\n     * - [Selection: Selecting ranges &#8594;](@/guides/cell-features/selection.md#selecting-ranges)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'multiple'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can only select one cell at at a time\n     * selectionMode: 'single',\n     *\n     * // you can select one range of cells at a time\n     * selectionMode: 'range',\n     *\n     * // you can select multiple ranges of cells at a time\n     * selectionMode: 'multiple',\n     * ```\n     */\n    selectionMode: 'multiple',\n\n    /**\n     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.\n     *\n     * You can set the `selectOptions` option to one of the following:\n     *\n     * | Setting                         | Description                                                                   |\n     * | ------------------------------- | ----------------------------------------------------------------------------- |\n     * | An array of strings             | Each string is one option's value and label                                   |\n     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |\n     * | A function                      | A function that returns an object with key-string pairs                       |\n     *\n     * Read more:\n     * - [Select cell type &#8594;](@/guides/cell-types/select-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {string[]|object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     // set the first option's value and label to `A`\n     *     // set the second option's value and label to `B`\n     *     // set the third option's value and label to `C`\n     *     selectOptions: ['A', 'B', 'C'],\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     selectOptions: {\n     *       // set the first option's value to `value1` and label to `Label 1`\n     *       value1: 'Label 1',\n     *       // set the second option's value to `value2` and label to `Label 2`\n     *       value2: 'Label 2',\n     *       // set the third option's value to `value3` and label to `Label 3`\n     *       value3: 'Label 3',\n     *     },\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     // set `selectOption` to a function that returns available options as an object\n     *     selectOptions(visualRow, visualColumn, prop) {\n     *       return {\n     *         value1: 'Label 1',\n     *         value2: 'Label 2',\n     *         value3: 'Label 3',\n     *       };\n     *   },\n     * ],\n     * ```\n     */\n    selectOptions: void 0,\n\n    /**\n     * @description\n     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.\n     *\n     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.\n     *\n     * You can set the `skipColumnOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                           |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this column                                                                  |\n     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |\n     *\n     * Read more:\n     * - [Configuration options: Setting column options &#8594;](@/guides/getting-started/setting-options.md#setting-column-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // disable pasting data into this column\n     *     skipColumnOnPaste: true\n     *   }\n     * ],\n     * ```\n     */\n    skipColumnOnPaste: false,\n\n    /**\n     * @description\n     *\n     * The `skipRowOnPaste` option determines whether you can paste data into a given row.\n     *\n     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.\n     *\n     * You can set the `skipRowOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                         |\n     * | ----------------- | ----------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this row                                                   |\n     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |\n     *\n     * Read more:\n     * - [Configuration options: Setting row options &#8594;](@/guides/getting-started/setting-options.md#setting-row-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * cells(row, column) {\n     *  const cellProperties = {};\n     *\n     *  // disable pasting data into row 1\n     *  if (row === 1) {\n     *    cellProperties.skipRowOnPaste = true;\n     *  }\n     *\n     *  return cellProperties;\n     * }\n     * ```\n     */\n    skipRowOnPaste: false,\n\n    /**\n     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are sorted in the same order as provided in the [`source`](#source) option.\n     *\n     * You can set the `sortByRelevance` option to one of the following:\n     *\n     * | Setting          | Description                                                                  |\n     * | ---------------- | ---------------------------------------------------------------------------- |\n     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |\n     * | `false`          | Sort options alphabetically                                                  |\n     *\n     * Read more:\n     * - [`source`](#source)\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['D', 'C', 'B', 'A'],\n     *   // sort the `autocomplete` option in this order: D, C, B, A\n     *   sortByRelevance: true\n     * }],\n     * ```\n     */\n    sortByRelevance: true,\n\n    /**\n     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.\n     *\n     * You can set the `source` option to one of the following:\n     *\n     * - An array\n     * - A function\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`strict`](#strict)\n     * - [`allowHtml`](#allowHtml)\n     * - [`filter`](#filter)\n     * - [`sortByRelevance`](#sortByRelevance)\n     *\n     * @memberof Options#\n     * @type {Array|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set `source` to an array\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C', 'D']\n     * }],\n     *\n     * // set `source` to a function\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // for every `autocomplete` cell in this column, fetch data from an external source\n     *   source(query, callback) {\n     *     fetch('https://example.com/query?q=' + query, function(response) {\n     *       callback(response.items);\n     *     })\n     *   }\n     * }],\n     * ```\n     */\n    source: void 0,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.\n     *\n     * The `startCols` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty columns\n     * startCols: 15,\n     * ```\n     */\n    startCols: 5,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.\n     *\n     * The `startRows` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty rows\n     * startRows: 15,\n     * ```\n     */\n    startRows: 5,\n\n    /**\n     * @description\n     * The `stretchH` option determines what happens when the declared grid width\n     * is different from the calculated sum of all column widths.\n     *\n     * You can set the `stretchH` option to one of the following:\n     *\n     * | Setting            | Description                                                       |\n     * | ------------------ | ----------------------------------------------------------------- |\n     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |\n     * | `'last'`           | Fit the grid to the container, by stretching only the last column |\n     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |\n     *\n     * Read more:\n     * - [Column width: Column stretching &#8594;](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'none'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // fit the grid to the container\n     * // by stretching all columns evenly\n     * stretchH: 'all',\n     * ```\n     */\n    stretchH: 'none',\n\n    /**\n     * The `strict` option configures [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * cells' strict/lazy mode.\n     *\n     * You can set the `strict` option to one of the following:\n     *\n     * | Setting | Mode                                                                                  | Description                                                                                                                                       |\n     * | ------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode) | The value entered must match an autocomplete option (case-sensitive)                                                                              |\n     * | `false` | [Lazy mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-lazy-mode)     | The value entered doesn't have to match an autocomplete option.<br>The end user can:<br>- Choose from suggested options<br>- Enter a custom value |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // values entered must match `A`, `B`, or `C`\n     *   strict: true\n     *   },\n     * ],\n     * ```\n     */\n    strict: void 0,\n\n    /**\n     * The `tableClassName` option lets you add CSS class names\n     * to every Handsontable instance inside the `container` element.\n     *\n     * You can set the `tableClassName` option to one of the following:\n     *\n     * | Setting             | Description                                                                                |\n     * | ------------------- | ------------------------------------------------------------------------------------------ |\n     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |\n     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    tableClassName: void 0,\n\n    /**\n     * The `tabMoves` option configures the action of the <kbd>Tab</kbd> key.\n     *\n     * You can set the `tabMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`    | Number | - On pressing <kbd>Tab</kbd>, move selection `row` rows down<br>- On pressing <kbd>Shift</kbd>+<kbd>Tab</kbd>, move selection `row` rows up              |\n     * | `col`    | Number | - On pressing <kbd>Tab</kbd>, move selection `col` columns right<br>- On pressing <kbd>Shift</kbd>+<kbd>Tab</kbd>, move selection `col` columns left     |\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {row: 0, col: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Tab, move selection 2 rows down and 2 columns right\n     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left\n     * tabMoves: {row: 2, col: 2},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Tab\n     * // you can use it to check whether the user pressed Tab or Shift+Tab\n     * tabMoves(event) {\n     *   return {row: 2, col: 2};\n     * },\n     * ```\n     */\n    tabMoves: {\n      row: 0,\n      col: 1\n    },\n\n    /**\n     * @description\n     * The `title` option configures [column header](@/guides/columns/column-header.md) names.\n     *\n     * You can set the `title` option to a string.\n     *\n     * Read more:\n     * - [Column header &#8594;](@/guides/columns/column-header.md)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the first column header name to `First name`\n     *     title: 'First name',\n     *     type: 'text',\n     *   },\n     *   {\n     *     // set the second column header name to `Last name`\n     *     title: 'Last name',\n     *     type: 'text',\n     *   }\n     * ],\n     * ```\n     */\n    title: void 0,\n\n    /**\n     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * You can set the `trimDropdown` option to one of the following:\n     *\n     * | Setting          | Description                                                                     |\n     * | ---------------- | ------------------------------------------------------------------------------- |\n     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |\n     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // for every cell of this column\n     *     // make the `autocomplete` list's width the same as the edited cell's width\n     *     trimDropdown: true,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // for every cell of this column\n     *     // scale the `dropdown` list's width to the list's content\n     *     trimDropdown: false,\n     *   }\n     * ],\n     * ```\n     */\n    trimDropdown: true,\n\n    /**\n     * @description\n     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.\n     *\n     * You can set the `trimRows` option to one of the following:\n     *\n     * | Setting  | Description                                                                                   |\n     * | -------- | --------------------------------------------------------------------------------------------- |\n     * | `false`  | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |\n     * | `true`   | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |\n     * | An array | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |\n     *\n     * Read more:\n     * - [Plugins: `TrimRows` &#8594;](@/api/trimRows.md)\n     * - [Row trimming &#8594;](@/guides/rows/row-trimming.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category TrimRows\n     *\n     * @example\n     * ```js\n     * // enable the `TrimRows` plugin\n     * trimRows: true,\n     *\n     * // enable the `TrimRows` plugin\n     * // trim rows 5, 10, and 15 at Handsontable's initialization\n     * trimRows: [5, 10, 15],\n     * ```\n     */\n    trimRows: void 0,\n\n    /**\n     * The `trimWhitespace` option configures automatic whitespace removal.\n     *\n     * You can set the `trimWhitespace` option to one of the following:\n     *\n     * | Setting          | Description                                                     |\n     * | ---------------- | --------------------------------------------------------------- |\n     * | `true` (default) | Remove whitespace at the beginning and at the end of every cell |\n     * | `false`          | Don't remove whitespace                                         |\n     *\n     * @memberof Options#tr\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // don't remove whitespace\n     *     // from any cell of this column\n     *     trimWhitespace: false\n     *   }\n     * ]\n     * ```\n     */\n    trimWhitespace: true,\n\n    /**\n     * @description\n     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).\n     *\n     * You can set the `type` option to one of the following:\n     *\n     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |\n     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |\n     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |\n     * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |\n     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |\n     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |\n     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |\n     * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |\n     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |\n     * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |\n     *\n     * Read more:\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Cell renderer &#8594;](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`renderer`](#renderer)\n     * - [`editor`](#editor)\n     * - [`validator`](#validator)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'text'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` cell type for every cell of the entire grid\n     * type: `'numeric'`,\n     *\n     * // apply the `type` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` cell type for every cell of this column\n     *     type: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomCellType` cell type for every cell of this column\n     *     type: 'myCustomCellType'\n     *   }\n     * ]\n     * ```\n     */\n    type: 'text',\n\n    /**\n     * The `uncheckedTemplate` option lets you configure what value\n     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `uncheckedTemplate` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |\n     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()` &#8594;](@/api/core.md#getDataAtCell)\n     * - [`checkedTemplate`](#checkedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `false`\n     *     // when checked, the cell's value is `true`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `'No'`\n     *     // when checked, the cell's value is `'Yes'`\n     *     type: 'checkbox',\n     *     uncheckedTemplate: 'No'\n     *     checkedTemplate: 'Yes',\n     *  }\n     * ],\n     * ```\n     */\n    uncheckedTemplate: void 0,\n\n    /**\n     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.\n     *\n     * You can set the `undo` option to one of the following:\n     *\n     * | Setting | Description                                        |\n     * | ------- | -------------------------------------------------- |\n     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |\n     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |\n     *\n     * By default, the `undo` option is set to `undefined`,\n     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.\n     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,\n     * set the `undo` option to `false`.\n     *\n     * Read more:\n     * - [Undo and redo &#8594;](@/guides/accessories-and-menus/undo-redo.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category UndoRedo\n     *\n     * @example\n     * ```js\n     * // enable the `UndoRedo` plugin\n     * undo: true,\n     * ```\n     */\n    undo: void 0,\n\n    /**\n     * @description\n     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.\n     *\n     * You can set the `validator` option to one of the following:\n     *\n     * | Setting              | Description                                                                      |\n     * | -------------------- | -------------------------------------------------------------------------------- |\n     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |\n     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |\n     * | A regular expression | A regular expression used for cell validation                                    |\n     *\n     * By setting the `validator` option to a string,\n     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):\n     *\n     * | Alias               | Cell validator function                                                 |\n     * | ------------------- | ----------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |\n     * | `'date'`            | `DateValidator`                                                         |\n     * | `'dropdown'`        | `DropdownValidator`                                                     |\n     * | `'numeric'`         | `NumericValidator`                                                      |\n     * | `'time'`            | `TimeValidator`                                                         |\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {Function|RegExp|string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *    {\n     *      // use a built-in `numeric` cell validator\n     *      validator: 'numeric'\n     *    },\n     *    {\n     *      // validate against a regular expression\n     *      validator: /^[0-9]$/\n     *    },\n     *    {\n     *      // add a custom cell validator function\n     *      validator(value, callback) {\n     *          ...\n     *      }\n     *    },\n     * ],\n     * ```\n     */\n    validator: void 0,\n\n    /**\n     * @description\n     * The `viewportColumnRenderingOffset` option configures the number of columns\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportColumnRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns &#8594;](@/guides/advanced-topics/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 columns outside of the grid's viewport\n     * viewportColumnRenderingOffset: 70,\n     * ```\n     */\n    viewportColumnRenderingOffset: 'auto',\n\n    /**\n     * @description\n     * The `viewportRowRenderingOffset` option configures the number of rows\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportRowRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns &#8594;](@/guides/advanced-topics/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     * - [Column virtualization &#8594;](@/guides/columns/column-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 rows outside of the grid's viewport\n     * viewportRowRenderingOffset: 70,\n     * ```\n     */\n    viewportRowRenderingOffset: 'auto',\n\n    /**\n     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 10\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // set the `autocomplete` list's height to 15 options\n     *     // for every cell of this column\n     *     visibleRows: 15,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // set the `dropdown` list's height to 5 options\n     *     // for every cell of this column\n     *     visibleRows: 5,\n     *   }\n     * ],\n     * ```\n     */\n    visibleRows: 10,\n\n    /**\n     * The `width` option configures the width of your grid.\n     *\n     * You can set the `width` option to one of the following:\n     *\n     * | Setting                                                                    | Example                   |\n     * | -------------------------------------------------------------------------- | ------------------------- |\n     * | A number of pixels                                                         | `width: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |\n     * | A function that returns a valid number or string                           | `width() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size &#8594;](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's width to 500px\n     * width: 500,\n     *\n     * // set the grid's width to 75vw\n     * width: '75vw',\n     *\n     * // set the grid's width to 500px, using a function\n     * width() {\n     *   return 500;\n     * },\n     * ```\n     */\n    width: void 0,\n\n    /**\n     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.\n     *\n     * You can set the `wordWrap` option to one of the following:\n     *\n     * | Setting          | Description                                             |\n     * | ---------------- | ------------------------------------------------------- |\n     * | `true` (default) | If content exceeds the column's width, wrap the content |\n     * | `false`          | Don't wrap content                                      |\n     *\n     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.\n     *\n     * Read more:\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set column width for every column of the entire grid\n     * colWidths: 100,\n     *\n     * columns: [\n     *   {\n     *     // don't wrap content in this column\n     *     wordWrap: false,\n     *   },\n     *   {\n     *     // if content exceeds this column's width, wrap the content\n     *     wordWrap: true,\n     *   }\n     * ],\n     * ```\n     */\n    wordWrap: true\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  };\n});","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/dataMap/metaManager/metaSchema.mjs"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isEmpty","isObjectEqual","activeHeaderClassName","allowEmpty","allowHtml","allowInsertColumn","allowInsertRow","allowInvalid","allowRemoveColumn","allowRemoveRow","autoColumnSize","autoRowSize","autoWrapCol","autoWrapRow","bindRowsWithHeaders","cell","cells","checkedTemplate","className","colHeaders","collapsibleColumns","columnHeaderHeight","columns","columnSorting","columnSummary","colWidths","commentedCellClassName","comments","contextMenu","copyable","copyPaste","correctFormat","currentColClassName","currentHeaderClassName","currentRowClassName","customBorders","data","dataSchema","dateFormat","datePickerConfig","defaultDate","disableVisualSelection","dragToScroll","dropdownMenu","editor","enterBeginsEditing","enterMoves","col","row","fillHandle","autoInsertRow","filter","filteringCaseSensitive","filters","fixedColumnsLeft","fixedRowsBottom","fixedRowsTop","formulas","fragmentSelection","height","hiddenColumns","hiddenRows","invalidCellClassName","isEmptyCol","rowLen","value","countRows","getDataAtCell","isEmptyRow","colLen","meta","countCols","getCellMeta","getSchema","prop","label","language","licenseKey","locale","manualColumnFreeze","manualColumnMove","manualColumnResize","manualRowMove","manualRowResize","maxCols","Infinity","maxRows","mergeCells","minCols","minRows","minSpareCols","minSpareRows","multiColumnSorting","nestedHeaders","nestedRows","noWordWrapClassName","numericFormat","observeDOMVisibility","outsideClickDeselects","persistentState","placeholder","placeholderCellClassName","preventOverflow","preventWheel","readOnly","readOnlyCellClassName","renderAllRows","renderer","rowHeaders","rowHeaderWidth","rowHeights","search","selectionMode","selectOptions","skipColumnOnPaste","skipRowOnPaste","sortByRelevance","source","startCols","startRows","stretchH","strict","tableClassName","tabMoves","title","trimDropdown","trimRows","trimWhitespace","type","uncheckedTemplate","undo","validator","viewportColumnRenderingOffset","viewportRowRenderingOffset","visibleRows","width","wordWrap"],"mappings":"AAAA,OAAO,8BAAP;AACA,OAAO,0CAAP;AACA,OAAO,wCAAP;AACA,OAAO,uCAAP;AACA,OAAO,sCAAP;AACA,OAAO,uCAAP;AACA,OAAO,iDAAP;;AAEA,SAASA,OAAT,CAAiBC,GAAjB,EAAsB;AAAE;;AAA2B,SAAOD,OAAO,GAAG,cAAc,OAAOE,MAArB,IAA+B,YAAY,OAAOA,MAAM,CAACC,QAAzD,GAAoE,UAAUF,GAAV,EAAe;AAAE,WAAO,OAAOA,GAAd;AAAoB,GAAzG,GAA4G,UAAUA,GAAV,EAAe;AAAE,WAAOA,GAAG,IAAI,cAAc,OAAOC,MAA5B,IAAsCD,GAAG,CAACG,WAAJ,KAAoBF,MAA1D,IAAoED,GAAG,KAAKC,MAAM,CAACG,SAAnF,GAA+F,QAA/F,GAA0G,OAAOJ,GAAxH;AAA8H,GAArQ,EAAuQD,OAAO,CAACC,GAAD,CAArR;AAA6R;;AAEhV,SAASK,OAAT,QAAwB,yBAAxB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,YAAY;AAC1B,SAAO;AACL;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,qBAAqB,EAAE,sBA/BlB;;AAiCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,IAnEP;;AAqEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,KA3GN;;AA6GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,IA7Hd;;AA+HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,IA/IX;;AAiJL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,IAhLT;;AAkLL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,IApMd;;AAsML;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,IAxNX;;AA0NL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,KAAK,CA3QhB;;AA6QL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KAAK,CAnTb;;AAqTL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KA1UR;;AA4UL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KAjWR;;AAmWL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,KAAK,CA5XrB;;AA8XL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,IAAI,EAAE,EA1ZD;;AA4ZL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,KAAK,EAAE,KAAK,CArcP;;AAucL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,KAAK,CAhfjB;;AAkfL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,KAAK,CA3hBX;;AA6hBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,IA/jBP;;AAikBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,KAAK,CAjmBpB;;AAmmBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,KAAK,CA5nBpB;;AA8nBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,KAAK,CAjrBT;;AAmrBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAjwBf;;AAmwBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAxzBf;;AA0zBL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,KAAK,CAx2BX;;AA02BL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,sBAAsB,EAAE,eAx4BnB;;AA04BL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,KA/7BL;;AAi8BL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KAAK,CA9/Bb;;AAggCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,IAjjCL;;AAmjCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,IAlmCN;;AAomCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAroCV;;AAuoCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,KAAK,CAnqCrB;;AAqqCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,sBAAsB,EAAE,eAhsCnB;;AAksCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,KAAK,CA9tCrB;;AAguCL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KA70CV;;AA+0CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,IAAI,EAAE,KAAK,CAr3CN;;AAu3CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CAr5CZ;;AAu5CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,YAr7CP;;AAu7CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,gBAAgB,EAAE,KAAK,CAn9ClB;;AAq9CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KAAK,CAh/Cb;;AAk/CL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,sBAAsB,EAAE,KA5hDnB;;AA8hDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,IAvjDT;;AAyjDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,KAAK,CAlnDd;;AAonDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,KAAK,CA7qDR;;AA+qDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,IA3sDf;;AA6sDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAE,CADK;AAEVC,MAAAA,GAAG,EAAE;AAFK,KApvDP;;AAyvDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE;AACVC,MAAAA,aAAa,EAAE;AADL,KAjzDP;;AAqzDL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,IAx1DH;;AA01DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,sBAAsB,EAAE,KA33DnB;;AA63DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,KAAK,CAv5DT;;AAy5DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,gBAAgB,EAAE,CA36Db;;AA66DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,CA/7DZ;;AAi8DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,CAl9DT;;AAo9DL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,KAAK,CAliEV;;AAoiEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,KA7jEd;;AA+jEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,KAAK,CAhmER;;AAkmEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CA9oEf;;AAgpEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CA5rEZ;;AA8rEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,oBAAoB,EAAE,WA1tEjB;;AA4tEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBhB,GAApB,EAAyB;AACnC,UAAIC,GAAJ;AACA,UAAIgB,MAAJ;AACA,UAAIC,KAAJ;;AAEA,WAAKjB,GAAG,GAAG,CAAN,EAASgB,MAAM,GAAG,KAAKE,SAAL,EAAvB,EAAyClB,GAAG,GAAGgB,MAA/C,EAAuDhB,GAAG,EAA1D,EAA8D;AAC5DiB,QAAAA,KAAK,GAAG,KAAKE,aAAL,CAAmBnB,GAAnB,EAAwBD,GAAxB,CAAR;;AAEA,YAAI/C,OAAO,CAACiE,KAAD,CAAP,KAAmB,KAAvB,EAA8B;AAC5B,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD,KA/vEI;;AAiwEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIG,IAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBpB,GAApB,EAAyB;AACnC,UAAID,GAAJ;AACA,UAAIsB,MAAJ;AACA,UAAIJ,KAAJ;AACA,UAAIK,IAAJ;;AAEA,WAAKvB,GAAG,GAAG,CAAN,EAASsB,MAAM,GAAG,KAAKE,SAAL,EAAvB,EAAyCxB,GAAG,GAAGsB,MAA/C,EAAuDtB,GAAG,EAA1D,EAA8D;AAC5DkB,QAAAA,KAAK,GAAG,KAAKE,aAAL,CAAmBnB,GAAnB,EAAwBD,GAAxB,CAAR;;AAEA,YAAI/C,OAAO,CAACiE,KAAD,CAAP,KAAmB,KAAvB,EAA8B;AAC5B,cAAIvE,OAAO,CAACuE,KAAD,CAAP,KAAmB,QAAvB,EAAiC;AAC/BK,YAAAA,IAAI,GAAG,KAAKE,WAAL,CAAiBxB,GAAjB,EAAsBD,GAAtB,CAAP;AACA,mBAAO9C,aAAa,CAAC,KAAKwE,SAAL,GAAiBH,IAAI,CAACI,IAAtB,CAAD,EAA8BT,KAA9B,CAApB;AACD;;AAED,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD,KA1yEI;;AA4yEL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIU,IAAAA,KAAK,EAAE,KAAK,CA10EP;;AA40EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,OAl3EL;;AAo3EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CA/4EZ;;AAi5EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,OAl7EH;;AAo7EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,KAAK,CA58EpB;;AA88EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,gBAAgB,EAAE,KAAK,CA7+ElB;;AA++EL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,KAAK,CA/gFpB;;AAihFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAjjFf;;AAmjFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,KAAK,CAnlFjB;;AAqlFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAEC,QAxmFJ;;AA0mFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAED,QA7nFJ;;AA+nFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIE,IAAAA,UAAU,EAAE,KA9qFP;;AAgrFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,CA1sFJ;;AA4sFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,OAAO,EAAE,CA/tFJ;;AAiuFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,CA5vFT;;AA8vFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,CAlxFT;;AAoxFL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,kBAAkB,EAAE,KAAK,CAj2FpB;;AAm2FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAl4Ff;;AAo4FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CA75FZ;;AA+5FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,mBAAmB,EAAE,UA37FhB;;AA67FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CA1+Ff;;AA4+FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,oBAAoB,EAAE,IA3/FjB;;AA6/FL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,qBAAqB,EAAE,IAjiGlB;;AAmiGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,KAAK,CA7jGjB;;AA+jGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,KAAK,CAnmGb;;AAqmGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,wBAAwB,EAAE,eAloGrB;;AAooGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,KA3pGZ;;AA6pGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,KAprGT;;AAsrGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,KA/sGL;;AAitGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,qBAAqB,EAAE,UA5uGlB;;AA8uGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAtwGf;;AAwwGL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,KAAK,CAp0GV;;AAs0GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CAx2GZ;;AA02GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,KAAK,CAn4GhB;;AAq4GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,UAAU,EAAE,KAAK,CAl7GZ;;AAo7GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,KAt+GH;;AAw+GL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,UAxgHV;;AA0gHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,aAAa,EAAE,KAAK,CAlkHf;;AAokHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,KAnmHd;;AAqmHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,KAzoHX;;AA2oHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,eAAe,EAAE,IA3qHZ;;AA6qHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,KAAK,CA1tHR;;AA4tHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,CA7uHN;;AA+uHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,CAhwHN;;AAkwHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,MA9xHL;;AAgyHL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,MAAM,EAAE,KAAK,CAl0HR;;AAo0HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,KAAK,CA32HhB;;AA62HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE;AACR3E,MAAAA,GAAG,EAAE,CADG;AAERD,MAAAA,GAAG,EAAE;AAFG,KA34HL;;AAg5HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI6E,IAAAA,KAAK,EAAE,KAAK,CA/6HP;;AAi7HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,YAAY,EAAE,IAv9HT;;AAy9HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE,KAAK,CAx/HV;;AA0/HL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,cAAc,EAAE,IAphIX;;AAshIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,IAAI,EAAE,MA3kID;;AA6kIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,iBAAiB,EAAE,KAAK,CAtnInB;;AAwnIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,IAAI,EAAE,KAAK,CArpIN;;AAupIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,SAAS,EAAE,KAAK,CAjtIX;;AAmtIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,6BAA6B,EAAE,MA7uI1B;;AA+uIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,0BAA0B,EAAE,MA1wIvB;;AA4wIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,WAAW,EAAE,EA7yIR;;AA+yIL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,KAAK,EAAE,KAAK,CAh1IP;;AAk1IL;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACIC,IAAAA,QAAQ,EAAE;AACV;;AAx3IK,GAAP;AA23ID,CA53ID","sourcesContent":["import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport { isEmpty } from \"../../helpers/mixed.mjs\";\nimport { isObjectEqual } from \"../../helpers/object.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @alias Options\n * @class Options\n * @description\n *\n * [Configuration options](@/guides/getting-started/setting-options.md) let you heavily customize your Handsontable instance. For example, you can:\n *\n * - Enable and disable built-in features\n * - Enable and configure additional [plugins](@/guides/building-and-testing/plugins.md)\n * - Personalize Handsontable's look\n * - Adjust Handsontable's behavior\n * - Implement your own custom features\n *\n * To apply [configuration options](@/guides/getting-started/setting-options.md), pass them as\n * a second argument of the [Handsontable constructor](@/guides/getting-started/installation.md#initialize-the-grid),\n * using the [object literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer):\n *\n * ```js\n * const container = document.getElementById('example');\n *\n * const hot = new Handsontable(container, {\n *   // configuration options, in the object literal notation\n *   licenseKey: 'non-commercial-and-evaluation',\n *   data: Handsontable.helper.createSpreadsheetData(5, 10),\n *   width: 400,\n *   height: 300,\n *   colHeaders: true,\n *   rowHeaders: true,\n *   customBorders: true,\n *   dropdownMenu: true,\n *   multiColumnSorting: true,\n *   filters: true,\n *   manualRowMove: true,\n * });\n * ```\n *\n * Depending on your needs, you can apply [configuration options](@/api/options.md) to different elements of your grid:\n * - [The entire grid](@/guides/getting-started/setting-options.md#setting-grid-options)\n * - [Individual columns](@/guides/getting-started/setting-options.md#setting-column-options)\n * - [Individual rows](@/guides/getting-started/setting-options.md#setting-row-options)\n * - [Individual cells](@/guides/getting-started/setting-options.md#setting-cell-options)\n * - [Individual grid elements, based on any logic you implement](@/guides/getting-started/setting-options.md#implementing-custom-logic)\n *\n * Read more:\n * - [Configuration options &#8594;](@/guides/getting-started/setting-options.md)\n */\n\nexport default (function () {\n  return {\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * The `activeHeaderClassName` option lets you add a CSS class name\n     * to every currently-active, currently-selected header (when a whole column or row is selected).\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @since 0.38.2\n     * @default 'ht__active_highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__active_highlight` CSS class name\n     * // to every currently-active, currently-selected header\n     * activeHeaderClassName: 'ht__active_highlight',\n     * ```\n     */\n    activeHeaderClassName: 'ht__active_highlight',\n\n    /**\n     * The `allowEmpty` option determines whether Handsontable accepts the following values:\n     * - `null`\n     * - `undefined`\n     * - `''`\n     *\n     * You can set the `allowEmpty` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                           |\n     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` and `''` values as `valid`              |\n     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` and `''` values with as `invalid` |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // allow empty values in every cell of the entire grid\n     * allowEmpty: true,\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // allow empty values in every cell of the 'date' column\n     *     allowEmpty: true\n     *   }\n     * ],\n     * ```\n     */\n    allowEmpty: true,\n\n    /**\n     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data\n     * is treated as HTML.\n     *\n     * You can set the `allowHtml` option to one of the following:\n     *\n     * | Setting           | Description                                         |\n     * | ----------------- | --------------------------------------------------- |\n     * | `false` (default) | The [`source`](#source) data is not treated as HTML |\n     * | `true`            | The [`source`](#source) data is treated as HTML     |\n     *\n     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']\n     *   // use HTML in the `source` list\n     *   allowHtml: true,\n     *   },\n     * ],\n     * ```\n     */\n    allowHtml: false,\n\n    /**\n     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert column left**\n     * - **Insert column right**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu\n     * allowInsertColumn: false,\n     * ```\n     */\n    allowInsertColumn: true,\n\n    /**\n     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert row above**\n     * - **Insert row below**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu\n     * allowInsertRow: false,\n     * ```\n     */\n    allowInsertRow: true,\n\n    /**\n     * The `allowInvalid` option determines whether Handsontable accepts values\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * You can set the `allowInvalid` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                        |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |\n     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |\n     *\n     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Autocomplete strict mode &#8594;](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't accept `invalid` values\n     * // don't allow the user to close the cell editor\n     * // don't save `invalid` values into the data source\n     * allowInvalid: false,\n     * ```\n     */\n    allowInvalid: true,\n\n    /**\n     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove column**\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove column' menu item from the context menu\n     * allowRemoveColumn: false,\n     * ```\n     */\n    allowRemoveColumn: true,\n\n    /**\n     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove row**\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove row' menu item from the context menu\n     * allowRemoveRow: false,\n     * ```\n     */\n    allowRemoveRow: true,\n\n    /**\n     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * You can set the `autoColumnSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |\n     *\n     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:\n     *\n     * | Property                | Possible values                 | Description                                                                                                    |\n     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n     * | `syncLimit`             | A number \\| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |\n     * | `useHeaders`            | `true` \\| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |\n     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |\n     * | `allowSampleDuplicates` | `true` \\| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |\n     *\n     * By default, the `autoColumnSize` option is set to `undefined`,\n     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.\n     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,\n     * set the `autoColumnSize` option to `false`.\n     *\n     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoColumnSize` &#8594;](@/api/autoColumnSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoColumnSize\n     *\n     * @example\n     * ```js\n     * autoColumnSize: {\n     *   // keep 40% of columns in sync (the rest of columns: async)\n     *   syncLimit: '40%',\n     *   // when calculating column widths, use column headers\n     *   useHeaders: true,\n     *   // when calculating column widths, use 10 samples of the same length\n     *   samplingRatio: 10,\n     *   // when calculating column widths, allow duplicate samples\n     *   allowSampleDuplicates: true\n     * },\n     * ```\n     */\n    autoColumnSize: void 0,\n\n    /**\n     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * You can set the `autoRowSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |\n     *\n     * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)\n     * a proper size, set the `autoRowSize` option to `true`.\n     *\n     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:\n     *\n     * | Property    | Possible values                 | Description                                                       |\n     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |\n     * | `syncLimit` | A number \\| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |\n     *\n     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoRowSize` &#8594;](@/api/autoRowSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoRowSize\n     *\n     * @example\n     * ```js\n     * autoRowSize: {\n     *   // keep 40% of rows in sync (the rest of rows: async)\n     *   syncLimit: '40%'\n     * },\n     * ```\n     */\n    autoRowSize: void 0,\n\n    /**\n     * The `autoWrapCol` option determines what happens to current cell selection when you navigate to the grid's top or bottom edge.\n     *\n     * You can set the `autoWrapCol` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                             |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | On reaching the grid's top or bottom edge<br>- Jump to the opposite edge<br>- Select a cell in the previous/next column |\n     * | `false` (default) | On reaching the grid's top or bottom edge, stop                                                                         |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on reaching the grid's top or bottom edge, jump to the opposite edge\n     * autoWrapCol: true,\n     * ```\n     */\n    autoWrapCol: false,\n\n    /**\n     * The `autoWrapRow` option determines what happens to current cell selection when you navigate to the grid's left or right edge.\n     *\n     * You can set the `autoWrapRow` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                  |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | On reaching the grid's left or right edge:<br>- Jump to the grid's opposite edge<br>- Select a cell in the previous/next row |\n     * | `false` (default) | On reaching the grid's left or right edge, stop                                                                              |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on reaching the grid's left or right edge, jump to the opposite edge\n     * autoWrapRow: true,\n     * ```\n     */\n    autoWrapRow: false,\n\n    /**\n     * @description\n     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.\n     *\n     * You can set the `bindRowsWithHeaders` option to one of the following:\n     *\n     * | Setting | Description                                                                  |\n     * | ------- | ---------------------------------------------------------------------------- |\n     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |\n     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `BindRowsWithHeaders` &#8594;](@/api/bindRowsWithHeaders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default undefined\n     * @category BindRowsWithHeaders\n     *\n     * @example\n     * ```js\n     * // enable the `BindRowsWithHeaders` plugin\n     * bindRowsWithHeaders: true\n     * ```\n     */\n    bindRowsWithHeaders: void 0,\n\n    /**\n     * The `cell` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to individual cells.\n     *\n     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/setting-options.md#setting-grid-options),\n     * and the [`columns`](#columns) options.\n     *\n     * Read more:\n     * - [Configuration options: Setting cell options &#8594;](@/guides/getting-started/setting-options.md#setting-cell-options)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default []\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cell` option to an array of objects\n     * cell: [\n     *   // make the cell with coordinates (0, 0) read-only\n     *   {\n     *     row: 0,\n     *     col: 0,\n     *     readOnly: true\n     *   }\n     * ],\n     * ```\n     */\n    cell: [],\n\n    /**\n     * @description\n     * The `cells` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to\n     * individual grid elements (columns, rows, cells), based on any logic you implement.\n     *\n     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).\n     * It takes the following parameters:\n     *\n     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |\n     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |\n     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |\n     * | `prop`    | No       | String \\| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |\n     *\n     * Read more:\n     * - [Configuration options: Implementing custom logic &#8594;](@/guides/getting-started/setting-options.md#implementing-custom-logic)\n     * - [Configuration options: Setting row options &#8594;](@/guides/getting-started/setting-options.md#setting-row-options)\n     * - [`columns`](#columns)\n     * - [`cell`](#cell)\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cells` option to your custom function\n     * cells(row, column, prop) {\n     *   const cellProperties = { readOnly: false };\n     *   const visualRowIndex = this.instance.toVisualRow(row);\n     *   const visualColIndex = this.instance.toVisualColumn(column);\n     *\n     *   if (visualRowIndex === 0 && visualColIndex === 0) {\n     *     cellProperties.readOnly = true;\n     *   }\n     *\n     *   return cellProperties;\n     * },\n     * ```\n     */\n    cells: void 0,\n\n    /**\n     * The `checkedTemplate` option lets you configure what value\n     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `checkedTemplate` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                              |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |\n     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()` &#8594;](@/api/core.md#getDataAtCell)\n     * - [`uncheckedTemplate`](#uncheckedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when checked, the cell's value is `true`\n     *     // when unchecked, the cell's value is `false`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     type: 'checkbox',\n     *     // when checked, the cell's value is `'Yes'`\n     *     checkedTemplate: 'Yes',\n     *     // when unchecked, the cell's value is `'No'`\n     *     uncheckedTemplate: 'No'\n     *  }\n     * ],\n     * ```\n     */\n    checkedTemplate: void 0,\n\n    /**\n     * The `className` option lets you add CSS class names to every currently-selected element.\n     *\n     * You can set the `className` option to one of the following:\n     *\n     * | Setting             | Description                                                      |\n     * | ------------------- | ---------------------------------------------------------------- |\n     * | A string            | Add a single CSS class name to every currently-selected element  |\n     * | An array of strings | Add multiple CSS class names to every currently-selected element |\n     *\n     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/setting-options.md#cascading-configuration).\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every currently-selected element\n     * className: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every currently-selected element\n     * className: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    className: void 0,\n\n    /**\n     * The `colHeaders` option configures your grid's column headers.\n     *\n     * You can set the `colHeaders` option to one of the following:\n     *\n     * | Setting  | Description                                                          |\n     * | -------- | -------------------------------------------------------------------- |\n     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |\n     * | `false`  | Disable column headers                                               |\n     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own column headers, using a function                     |\n     *\n     * Read more:\n     * - [Column header &#8594;](@/guides/columns/column-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default null\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default column headers\n     * colHeaders: true,\n     *\n     * // set your own column headers\n     * colHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own column headers, using a function\n     * colHeaders: function(visualColumnIndex) {\n     *   return `${visualColumnIndex} + : AB`;\n     * },\n     * ```\n     */\n    colHeaders: null,\n\n    /**\n     * @description\n     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.\n     *\n     * You can set the `collapsibleColumns` option to one of the following:\n     *\n     * | Setting              | Description                                                                                       |\n     * | -------------------- | ------------------------------------------------------------------------------------------------- |\n     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |\n     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |\n     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |\n     *\n     * Read more:\n     * - [Plugins: `CollapsibleColumns` &#8594;](@/api/collapsibleColumns.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default undefined\n     * @category CollapsibleColumns\n     *\n     * @example\n     * ```js\n     * // enable column collapsing for all headers\n     * collapsibleColumns: true,\n     *\n     * // enable column collapsing for selected headers\n     * collapsibleColumns: [\n     *   {row: -4, col: 1, collapsible: true},\n     *   {row: -3, col: 5, collapsible: true}\n     * ],\n     * ```\n     */\n    collapsibleColumns: void 0,\n\n    /**\n     * @description\n     * The `columnHeaderHeight` option configures the height of column headers.\n     *\n     * You can set the `columnHeaderHeight` option to one of the following:\n     *\n     * | Setting  | Description                                         |\n     * | -------- | --------------------------------------------------- |\n     * | A number | Set the same height for every column header         |\n     * | An array | Set different heights for individual column headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same height for every column header\n     * columnHeaderHeight: 25,\n     *\n     * // set different heights for individual column headers\n     * columnHeaderHeight: [25, 30, 55],\n     * ```\n     */\n    columnHeaderHeight: void 0,\n\n    /**\n     * @description\n     * The `columns` option lets you apply [configuration options](@/guides/getting-started/setting-options.md) to individual columns (or ranges of columns).\n     *\n     * You can set the `columns` option to one of the following:\n     * - An array of objects (each object represents one column)\n     * - A function that returns an array of objects\n     *\n     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/setting-options.md#setting-grid-options).\n     *\n     * When you use the `columns` option, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) are ignored.\n     *\n     * Read more:\n     * - [Configuration options: Setting column options &#8594;](@/guides/getting-started/setting-options.md#setting-column-options)\n     * - [`startCols`](#startCols)\n     * - [`minCols`](#minCols)\n     * - [`maxCols`](#maxCols)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `columns` option to an array of objects\n     * // each object represents one column\n     * columns: [\n     *   {\n     *     // column options for the first (by physical index) column\n     *     type: 'numeric',\n     *     numericFormat: {\n     *       pattern: '0,0.00 $'\n     *     }\n     *   },\n     *   {\n     *     // column options for the second (by physical index) column\n     *     type: 'text',\n     *     readOnly: true\n     *   }\n     * ],\n     *\n     * // or set the `columns` option to a function, based on physical indexes\n     * columns(index) {\n     *   return {\n     *     type: index > 0 ? 'numeric' : 'text',\n     *     readOnly: index < 1\n     *   }\n     * }\n     * ```\n     */\n    columns: void 0,\n\n    /**\n     * @description\n     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `columnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                            |\n     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |\n     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |\n     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display an arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/row-sorting.md#custom-compare-functions)                                                                |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `columnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Row sorting &#8594;](@/guides/rows/row-sorting.md)\n     * - [Row sorting: Custom compare functions &#8594;](@/guides/rows/row-sorting.md#custom-compare-functions)\n     * - [`multiColumnSorting`](#multiColumnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category ColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: true\n     *\n     * // enable the `ColumnSorting` plugin with custom configuration\n     * columnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display an arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    columnSorting: void 0,\n\n    /**\n     * @description\n     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.\n     *\n     * You can set the `columnSummary` option to an array of objects.\n     * Each object configures a single column summary, using the following properties:\n     *\n     * | Property                 | Possible values                                                         | Description                                                                                                                  |\n     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |\n     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |\n     * | `type`                   | `'sum'` \\| `'min'` \\| `'max'` \\| `'count'` \\| `'average'` \\| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |\n     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |\n     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n     * | `forceNumeric`           | `true`  \\| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#forcing-numeric-values)                                  |\n     * | `reversedRowCoords`      | `true`  \\| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |\n     * | `suppressDataTypeErrors` | `true`  \\| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throwing-data-type-errors)                                    |\n     * | `readOnly`               | `true`  \\| `false`                                                      | Make summary cell read-only                                                                                                  |\n     * | `roundFloat`             | `true`  \\| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#rounding-a-column-summary-result)                                  |\n     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implementing-a-custom-summary-function)                         |\n     *\n     * Read more:\n     * - [Column summary &#8594;](@/guides/columns/column-summary.md)\n     * - [Plugins: `ColumnSummary` &#8594;](@/api/columnSummary.md)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category ColumnSummary\n     *\n     * @example\n     * ```js\n     * columnSummary: [\n     *   {\n     *     sourceColumn: 0,\n     *     ranges: [\n     *       [0, 2], [4], [6, 8]\n     *     ],\n     *     type: 'custom',\n     *     destinationRow: 4,\n     *     destinationColumn: 1,\n     *     forceNumeric: true,\n     *     reversedRowCoords: true,\n     *     suppressDataTypeErrors: false,\n     *     readOnly: true,\n     *     roundFloat: false,\n     *     customFunction(endpoint) {\n     *        return 100;\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    columnSummary: void 0,\n\n    /**\n     * The `colWidths` option sets columns' widths, in pixels.\n     *\n     * In the rendering process, the default column width is 50px. To change it,\n     * set the `colWidths` option to one of the following:\n     *\n     * | Setting     | Description                                                                                          | Example                                                           |\n     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |\n     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |\n     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |\n     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |\n     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |\n     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |\n     *\n     * Setting the `colWidths` option disables the {@link AutoColumnSize} plugin.\n     *\n     * Read more:\n     * - [Column width &#8594;](@/guides/columns/column-width.md)\n     * - [Hooks: `modifyColWidth` &#8594;](@/api/hooks.md#modifyColWidth)\n     * - [`autoColumnSize`](#autoColumnSize)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every column's width to 100px\n     * colWidths: 100,\n     *\n     * // set every column's width to 100px\n     * colWidths: '100px',\n     *\n     * // set the first (by visual index) column's width to 100\n     * // set the second (by visual index) column's width to 120\n     * // set the third (by visual index) column's width to `undefined`\n     * // set any other column's width to the default 50px\n     * colWidths: [100, 120, undefined],\n     *\n     * // set each column's width individually, using a function\n     * colWidths(visualColumnIndex) {\n     *   return visualColumnIndex * 10;\n     * },\n     * ```\n     */\n    colWidths: void 0,\n\n    /**\n     * The `commentedCellClassName` option lets you add a CSS class name to cells\n     * that have comments.\n     *\n     * Read more:\n     * - [Comments &#8594;](@/guides/cell-features/comments.md)\n     * - [`comments`](#comments)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htCommentCell'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-comment` CSS class name\n     * // to every cell that has a comment\n     * commentedCellClassName: 'has-comment',\n     * ```\n     */\n    commentedCellClassName: 'htCommentCell',\n\n    /**\n     * @description\n     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.\n     *\n     * You can set the `comments` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                           |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |\n     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |\n     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |\n     *\n     * If you set the `comments` option to an object, you can configure the following comment options:\n     *\n     * | Option         | Possible settings           | Description                                         |\n     * | -------------- | --------------------------- | --------------------------------------------------- |\n     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |\n     * | `readOnly`     | `true` \\| `false` (default) | `true`: Make comments read-only                     |\n     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |\n     *\n     * Read more:\n     * - [Comments &#8594;](@/guides/cell-features/comments.md)\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [`width`](#width)\n     * - [`height`](#height)\n     * - [`readOnly`](#readOnly)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category Comments\n     *\n     * @example\n     * ```js\n     * // enable the `Comments` plugin\n     * comments: true,\n     *\n     * // enable the `Comments` plugin\n     * // and configure its settings\n     * comments: {\n     *   // display all comments with a 1-second delay\n     *   displayDelay: 1000,\n     *   // make all comments read-only\n     *   readOnly: true,\n     *   // set the default size of all comment boxes\n     *   style: {\n     *     width: 300,\n     *     height: 100\n     *   }\n     * }\n     * ```\n     */\n    comments: false,\n\n    /**\n     * @description\n     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.\n     *\n     * You can set the `contextMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                             |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |\n     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |\n     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |\n     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-fully-custom-configuration) |\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Context menu: Context menu with default options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)\n     * - [Context menu: Context menu with specific options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)\n     * - [Context menu: Context menu with fully custom configuration options &#8594;](@/guides/accessories-and-menus/context-menu.md#context-menu-with-fully-custom-configuration)\n     * - [Plugins: `ContextMenu` &#8594;](@/api/contextMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|object}\n     * @default undefined\n     * @category ContextMenu\n     *\n     * @example\n     * ```js\n     * // enable the `ContextMenu` plugin\n     * // use the default context menu options\n     * contextMenu: true,\n     *\n     * // enable the `ContextMenu` plugin\n     * // and modify individual context menu options\n     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `ContextMenu` plugin\n     * // and apply a custom context menu configuration\n     * contextMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'option1'\n     *     },\n     *     'option2': {\n     *       name: 'option2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'option2:suboption1',\n     *             callback: function(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    contextMenu: void 0,\n\n    /**\n     * @description\n     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.\n     *\n     * You can set the `copyable` option to one of the following:\n     *\n     * | Setting                                                                                                        | Description                                                                                                                        |\n     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)                                                                                               | - Enable copying for this cell<br>- On pressing <kbd>Ctrl</kbd>/<kbd>Cmd</kbd>+<kbd>C</kbd>, add the cell's value to the clipboard |\n     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - Disable copying for this cell                                                                                                    |\n     *\n     * Read more:\n     * - [Clipboard &#8594;](@/guides/cell-features/clipboard.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [Password cell type &#8594;](@/guides/cell-types/password-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable copying for every cell of the entire grid\n     * copyable: true,\n     *\n     * // enable copying for individual columns\n     * columns: [\n     *   {\n     *     // enable copying for every cell of this column\n     *     copyable: true\n     *   },\n     *   {\n     *     // disable copying for every cell of this column\n     *     copyable: false\n     *   }\n     * ]\n     *\n     * // enable copying for specific cells\n     * cells: [\n     *   {\n     *     cell: 0,\n     *     row: 0,\n     *     // disable copying for cell (0, 0)\n     *     copyable: false,\n     *   }\n     * ],\n     * ```\n     */\n    copyable: true,\n\n    /**\n     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.\n     *\n     * You can set the `copyPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                            |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |\n     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |\n     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |\n     *\n     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:\n     *\n     * | Option         | Possible settings                                  | Description                                                                                                                                                                             |\n     * | -------------- | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columnsLimit` | A number (default: `Infinity`)                       | A maximum number of columns that can be copied                                                                                                                                        |\n     * | `rowsLimit`    | A number (default: `Infinity`)                       | A maximum number of columns that can be copied                                                                                                                                        |\n     * | `pasteMode`    | `'overwrite'` \\| `'shift_down'` \\| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite currently-selected cells<br>`'shift_down'`: move currently-selected cells down<br>`'shift_right'`: move currently-selected cells to the right |\n     * | `uiContainer`  | An HTML element                                    | A UI container for the secondary focusable element                                                                                                                                      |\n     *\n     * Read more:\n     * - [Plugins: `CopyPaste` &#8594;](@/api/copyPaste.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default true\n     * @category CopyPaste\n     *\n     * @example\n     * ```js\n     * // disable the `CopyPaste` plugin\n     * copyPaste: false,\n     *\n     * // enable the `CopyPaste` plugin\n     * // and modify the `CopyPaste` plugin options\n     * copyPaste: {\n     *   // set the maximum number of columns that can be copied\n     *   columnsLimit: 25,\n     *   // set the maximum number of rows that can be copied\n     *   rowsLimit: 50,\n     *   // set the paste behavior\n     *   pasteMode: 'shift_down',\n     *   // set the UI container\n     *   uiContainer: document.body,\n     * },\n     * ```\n     */\n    copyPaste: true,\n\n    /**\n     * The `correctFormat` option configures [`date`](@/guides/cell-types/date-cell-type.md) cells' date format correction.\n     *\n     * You can set the `correctFormat` option to one of the following\n     *\n     * | Setting           | Description                                                           |\n     * | ----------------- | --------------------------------------------------------------------- |\n     * | `false` (default) | Don't correct dates                                                   |\n     * | `true`            | Enforce the date format set by the [`dateFormat`](#dateFormat) option |\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   // enforce the `YYYY-MM-DD` date format\n     *   correctFormat: true\n     *   },\n     * ],\n     * ```\n     */\n    correctFormat: false,\n\n    /**\n     * The `currentColClassName` option lets you add a CSS class name\n     * to every cell of the currently-visible, currently-selected columns.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every cell of the currently-visible, currently-selected columns\n     * currentColClassName: 'your-class-name',\n     * ```\n     */\n    currentColClassName: void 0,\n\n    /**\n     * The `currentHeaderClassName` option lets you add a CSS class name\n     * to every currently-visible, currently-selected header.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'ht__highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__highlight` CSS class name\n     * // to every currently-visible, currently-selected header\n     * currentHeaderClassName: 'ht__highlight',\n     * ```\n     */\n    currentHeaderClassName: 'ht__highlight',\n\n    /**\n     * The `currentRowClassName` option lets you add a CSS class name\n     * to every cell of the currently-visible, currently-selected rows.\n     *\n     * Read more:\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every cell of the currently-visible, currently-selected rows\n     * currentRowClassName: 'your-class-name',\n     * ```\n     */\n    currentRowClassName: void 0,\n\n    /**\n     * @description\n     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),\n     * set the `customBorders` option to `true`.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a particular cell,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for one cell, and has the following properties:\n     *\n     * | Property | Sub-properties     | Types                              | Description                                                       |\n     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |\n     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |\n     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |\n     * | `left`   | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the left border's width (`width`)<br> and color (`color`).   |\n     * | `right`  | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the right border's width (`width`)<br> and color (`color`).  |\n     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the top border's width (`width`)<br> and color (`color`).    |\n     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the bottom border's width (`width`)<br> and color (`color`). |\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a range of cells,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for a single range of cells, and has the following properties:\n     *\n     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |\n     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | `from` selects the range's top-left corner.<br>`to` selects the range's bottom-right corner. |\n     * | `left`   | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the left border's `width` and `color`.                                                  |\n     * | `right`  | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the right border's `width` and `color`.                                                 |\n     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the top border's `width` and `color`.                                                   |\n     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the bottom border's `width` and `color`.                                                |\n     *\n     * Read more:\n     * - [Formatting cells: Custom cell borders &#8594;](@/guides/cell-features/formatting-cells.md#custom-cell-borders)\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `CustomBorders` &#8594;](@/api/customBorders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category CustomBorders\n     *\n     * @example\n     * ```js\n     * // enable the `CustomBorders` plugin\n     * customBorders: true,\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a particular cell\n     * customBorders: [\n     *   // add an object with a border configuration for one cell\n     *   {\n     *     // set the cell's row coordinate\n     *     row: 2,\n     *     // set the cell's column coordinate\n     *     col: 2,\n     *     // set the left border's width and color\n     *     left: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right border's width and color\n     *     right: {\n     *       width: 1,\n     *       color: 'green'\n     *     },\n     *     // set the top border's width and color\n     *     top: '',\n     *     // set the bottom border's width and color\n     *     bottom: ''\n     *   }\n     * ],\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a range of cells\n     * customBorders: [\n     *   // add an object with a border configuration for one range of cells\n     *   {\n     *     // select a range of cells\n     *     range: {\n     *       // set the range's top-left corner\n     *       from: {\n     *         row: 1,\n     *         col: 1\n     *       },\n     *       // set the range's bottom-right corner\n     *       to: {\n     *         row: 3,\n     *         col: 4\n     *       }\n     *     },\n     *     // set the left border's width and color\n     *     left: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right border's width and color\n     *     right: {},\n     *     // set the top border's width and color\n     *     top: {},\n     *     // set the bottom border's width and color\n     *     bottom: {}\n     *   }\n     * ],\n     * ```\n     */\n    customBorders: false,\n\n    /**\n     * @description\n     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.\n     *\n     * Handsontable's data is bound to your source data __by reference__ (i.e. when you edit Handsontable's data, your source data alters as well).\n     *\n     * You can set the `data` option:\n     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).\n     *\n     * Read more:\n     * - [Binding to data &#8594;](@/guides/getting-started/binding-to-data.md)\n     * - [`dataSchema`](#dataSchema)\n     *\n     * @memberof Options#\n     * @type {Array[]|object[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // as an array of arrays\n     * data: [\n     *   ['A', 'B', 'C'],\n     *   ['D', 'E', 'F'],\n     *   ['G', 'H', 'J']\n     * ]\n     *\n     * // as an array of objects\n     * data: [\n     *   {id: 1, name: 'Ted Right'},\n     *   {id: 2, name: 'Frank Honest'},\n     *   {id: 3, name: 'Joan Well'},\n     *   {id: 4, name: 'Gail Polite'},\n     *   {id: 5, name: 'Michael Fair'},\n     * ]\n     * ```\n     */\n    data: void 0,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)\n     * (or is empty), the `dataSchema` option defines the structure of new rows.\n     *\n     * Read more:\n     * - [Binding to data: Array of objects with custom data schema &#8594;](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // with `dataSchema`, you can start with an empty grid\n     * data: null,\n     * dataSchema: {id: null, name: {first: null, last: null}, address: null},\n     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n     * columns: [\n     *   {data: 'id'},\n     *   {data: 'name.first'},\n     *   {data: 'name.last'},\n     *   {data: 'address'}\n     * ],\n     * startRows: 5,\n     * minSpareRows: 1\n     * ```\n     */\n    dataSchema: void 0,\n\n    /**\n     * The `dateFormat` option configures [`date`](@/guides/cell-types/date-cell-type.md) cells' date format.\n     *\n     * You can set the `dateFormat` option to a date format string. The default value is: `'DD/MM/YYYY'`.\n     *\n     * To enforce the date format set by the `dateFormat` option,\n     * use the [`correctFormat`](#correctFormat) option.\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`correctFormat`](#correctFormat)\n     * - [`defaultDate`](#defaultDate)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'DD/MM/YYYY'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   },\n     * ],\n     * ```\n     */\n    dateFormat: 'DD/MM/YYYY',\n\n    /**\n     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.0).\n     *\n     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration),\n     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):\n     * - `bound`\n     * - `container`\n     * - `field`\n     * - `trigger`\n     *\n     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration) as well:\n     *\n     * | Pikaday option       | Handsontable's setting |\n     * | -------------------- | ---------------------- |\n     * | `format`             | `'DD/MM/YYYY'`         |\n     * | `reposition`         | `false`                |\n     *\n     * Read more:\n     * - [`editor`](#editor)\n     * - [`dateFormat`](#dateFormat)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.0#configuration)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     */\n    datePickerConfig: void 0,\n\n    /**\n     * The `defaultDate` option configures the date displayed\n     * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `defaultDate` option to a string.\n     *\n     * Read more:\n     * - [Date cell type &#8594;](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `date`\n     *     type: 'date',\n     *     // in every empty `date` cell of this column, display `2015-02-02`\n     *     defaultDate: '2015-02-02'\n     *   }\n     * ],\n     * ```\n     */\n    defaultDate: void 0,\n\n    /**\n     * @description\n     * The `disableVisualSelection` option configures how\n     * [selection](@/guides/cell-features/selection.md) is shown.\n     *\n     * You can set the `disableVisualSelection` option to one of the following:\n     *\n     * | Setting           | Description                                                                                         |\n     * | ----------------- | --------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |\n     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |\n     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |\n     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |\n     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |\n     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |\n     *\n     * Read more:\n     * - [Selection &#8594;](@/guides/cell-features/selection.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|string[]}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // don't show header selection\n     * disableVisualSelection: true,\n     *\n     * // don't show single-cell selection\n     * // show range selection\n     * // show header selection\n     * disableVisualSelection: 'current',\n     *\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // show header selection\n     * disableVisualSelection: ['current', 'area'],\n     * ```\n     */\n    disableVisualSelection: false,\n\n    /**\n     * @description\n     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.\n     *\n     * You can set the `dragToScroll` option to one of the following:\n     *\n     * | Setting          | Description                                                                 |\n     * | ---------------- | --------------------------------------------------------------------------- |\n     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |\n     * | `false`          | Don't scroll the viewport                                                   |\n     *\n     * Read more:\n     * - [Plugins: `DragToScroll` &#8594;](@/api/dragToScroll.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category DragToScroll\n     *\n     * @example\n     * ```js\n     * // when selection reaches the edge of the grid's viewport, scroll the viewport\n     * dragToScroll: true,\n     * ```\n     */\n    dragToScroll: true,\n\n    /**\n     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.\n     *\n     * You can set the `dropdownMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |\n     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |\n     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |\n     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |\n     *\n     * Read more:\n     * - [Context menu &#8594;](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `DropdownMenu` &#8594;](@/api/dropdownMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object|string[]}\n     * @default undefined\n     * @category DropdownMenu\n     *\n     * @example\n     * ```js\n     * // enable the `DropdownMenu` plugin\n     * // use the default context menu options\n     * dropdownMenu: true,\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and modify individual context menu options\n     * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and apply a custom dropdown menu configuration\n     * dropdownMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'option1'\n     *     },\n     *     'option2': {\n     *       name: 'option2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'option2:suboption1',\n     *             callback(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    dropdownMenu: void 0,\n\n    /**\n     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.\n     *\n     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):\n     *\n     * | Alias               | Cell editor function                                                       |\n     * | ------------------- | -------------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |\n     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |\n     * | `'base'`            | `BaseEditor`                                                               |\n     * | `'checkbox'`        | `CheckboxEditor`                                                           |\n     * | `'date'`            | `DateEditor`                                                               |\n     * | `'dropdown'`        | `DropdownEditor`                                                           |\n     * | `'handsontable'`    | `HandsontableEditor`                                                       |\n     * | `'numeric'`         | `NumericEditor`                                                            |\n     * | `'password'`        | `PasswordEditor`                                                           |\n     * | `'select'`          | `SelectEditor`                                                             |\n     * | `'text'`            | `TextEditor`                                                               |\n     * | `'time'`            | `TimeEditor`                                                               |\n     *\n     * To disable editing cells through cell editors,\n     * set the `editor` option to `false`.\n     * You'll still be able to change cells' content through Handsontable's API\n     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function|boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` editor for every cell of the entire grid\n     * editor: 'numeric',\n     *\n     * // apply the `editor` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` editor for every cell of this column\n     *     editor: 'autocomplete'\n     *   },\n     *   {\n     *     // disable editing cells through cell editors for every cell of this column\n     *     editor: false\n     *   }\n     * ]\n     * ```\n     */\n    editor: void 0,\n\n    /**\n     * The `enterBeginsEditing` option configures the action of the <kbd>Enter</kbd> key.\n     *\n     * You can set the `enterBeginsEditing` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                                               |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - On pressing <kbd>Enter</kbd> once, start editing the currently-selected cell<br>- On pressing <kbd>Enter</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |\n     * | `false`          | - On pressing <kbd>Enter</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |\n     *\n     * Read more:\n     * - [`enterMoves`](#enterMoves)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // press Enter once to start editing\n     * // press Enter twice to move to another cell\n     * enterBeginsEditing: true,\n     *\n     * // press Enter once to move to another cell\n     * enterBeginsEditing: false,\n     * ```\n     */\n    enterBeginsEditing: true,\n\n    /**\n     * The `enterMoves` option configures the action of the <kbd>Enter</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,\n     * the `enterMoves` setting applies to the **second** pressing of the <kbd>Enter</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,\n     * the `enterMoves` setting applies to the **first** pressing of the <kbd>Enter</kbd> key.\n     *\n     * You can set the `enterMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `col`    | Number | - On pressing <kbd>Enter</kbd>, move selection `col` columns right<br>- On pressing <kbd>Shift</kbd>+<kbd>Enter</kbd>, move selection `col` columns left |\n     * | `row`    | Number | - On pressing <kbd>Enter</kbd>, move selection `row` rows down<br>- On pressing <kbd>Shift</kbd>+<kbd>Enter</kbd>, move selection `row` rows up          |\n     *\n     * Read more:\n     * - [`enterBeginsEditing`](#enterBeginsEditing)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {col: 0, row: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Enter, move selection 1 column right and 1 row down\n     * // on pressing Shift+Enter, move selection 1 column left and 1 row up\n     * enterMoves: {col: 1, row: 1},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Enter\n     * // you can use it to check whether the user pressed Enter or Shift+Enter\n     * enterMoves(event) {\n     *   return {col: 1, row: 1};\n     * },\n     * ```\n     */\n    enterMoves: {\n      col: 0,\n      row: 1\n    },\n\n    /**\n     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.\n     *\n     * You can set the `fillHandle` option to one the following:\n     *\n     * | Setting        | Description                                                                |\n     * | -------------- | -------------------------------------------------------------------------- |\n     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |\n     * | `false`        | Disable autofill                                                           |\n     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |\n     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |\n     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |\n     *\n     * If you set the `fillHandle` option to an object, you can configure the following autofill options:\n     *\n     * | Option          | Possible settings              | Description                                                                                               |\n     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |\n     * | `autoInsertRow` | `true` (default) \\| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |\n     * | `direction`     | `'vertical'` \\| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |\n     *\n     * Read more:\n     * - [AutoFill values &#8594;](@/guides/cell-features/autofill-values.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|object}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable autofill in all directions\n     * // with `autoInsertRow` enabled\n     * fillHandle: true,\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'vertical',\n     *\n     * // enable horizontal autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'horizontal',\n     *\n     * // enable autofill in all directions\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     * },\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     *   direction: 'vertical'\n     * },\n     * ```\n     */\n    fillHandle: {\n      autoInsertRow: false\n    },\n\n    /**\n     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are updated by the end user's input.\n     *\n     * You can set the `filter` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                           |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |\n     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filteringCaseSensitive`](#filteringCaseSensitive)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // when the end user types in `A`, display only the A option\n     *   // when the end user types in `B`, display only the B option\n     *   // when the end user types in `C`, display only the C option\n     *   filter: true\n     * }],\n     * ```\n     */\n    filter: true,\n\n    /**\n     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * input is case-sensitive.\n     *\n     * You can set the `filteringCaseSensitive` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |\n     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filter`](#filter)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     source: [ ... ],\n     *     // match case while searching autocomplete options\n     *     filteringCaseSensitive: true\n     *   }\n     * ],\n     * ```\n     */\n    filteringCaseSensitive: false,\n\n    /**\n     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.\n     *\n     * You can set the `filters` option to one of the following:\n     *\n     * | Setting | Description                                      |\n     * | ------- | ------------------------------------------------ |\n     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |\n     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |\n     *\n     * Read more:\n     * - [Column filter &#8594;](@/guides/columns/column-filter.md)\n     * - [Plugins: `Filters` &#8594;](@/api/filters.md)\n     * - [`dropdownMenu`](#dropdownMenu)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Filters\n     *\n     * @example\n     * ```js\n     * // enable the `Filters` plugin\n     * filters: true,\n     * ```\n     */\n    filters: void 0,\n\n    /**\n     * The `fixedColumnsLeft` option sets the number of [frozen columns](@/guides/columns/column-freezing.md)\n     * at the left-hand side of the grid.\n     *\n     * Read more:\n     * - [Column freezing &#8594;](@/guides/columns/column-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the first 3 columns from the left\n     * fixedColumnsLeft: 3,\n     * ```\n     */\n    fixedColumnsLeft: 0,\n\n    /**\n     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)\n     * at the bottom of the grid.\n     *\n     * Read more:\n     * - [Row freezing &#8594;](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the bottom 3 rows\n     * fixedRowsBottom: 3,\n     * ```\n     */\n    fixedRowsBottom: 0,\n\n    /**\n     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.\n     *\n     * Read more:\n     * - [Row freezing &#8594;](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the top 3 rows\n     * fixedRowsTop: 3,\n     * ```\n     */\n    fixedRowsTop: 0,\n\n    /**\n     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.\n     *\n     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.\n     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:\n     * - [Formula calculation: Initialization methods &#8594;](@/guides/formulas/formula-calculation.md#initialization-methods)\n     *\n     * You can set the `formulas` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                                                                                                                                                                        |\n     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `engine`    | `HyperFormula` \\|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \\|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |\n     * | `sheetId`   | A number                                                                                                                                                                                                               |\n     * | `sheetName` | A string                                                                                                                                                                                                               |\n     *\n     * Read more:\n     * - [Plugins: `Formulas` &#8594;](@/api/formulas.md)\n     * - [Formula calculation &#8594;](@/guides/formulas/formula-calculation.md)\n     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)\n     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Formulas\n     *\n     * @example\n     * ```js\n     * // either add the `HyperFormula` class\n     * formulas: {\n     *   // set `engine` to `HyperFormula`\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula instance\n     * // initialized with the `'internal-use-in-handsontable'` license key\n     * const hyperformulaInstance = HyperFormula.buildEmpty({\n     *   licenseKey: 'internal-use-in-handsontable',\n     * });\n     *\n     * formulas: {\n     *   // set `engine` to a HyperFormula instance\n     *   engine: hyperFormulaInstance,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula configuration object\n     * formulas: {\n     *   // set `engine` to a HyperFormula configuration object\n     *   engine: {\n     *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`\n     *     leapYear1900: false,       // this option comes from HyperFormula\n     *     // add more HyperFormula configuration options\n     *   },\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // use the same HyperFormula instance in multiple Handsontable instances\n     *\n     * // a Handsontable instance `hot1`\n     * formulas: {\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // a Handsontable instance `hot2`\n     * formulas: {\n     *   engine: hot1.getPlugin('formulas').engine,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     * ```\n     */\n    formulas: void 0,\n\n    /**\n     * The `fragmentSelection` option configures text selection settings.\n     *\n     * You can set the `fragmentSelection` option to one of the following:\n     *\n     * | Setting           | Decription                                        |\n     * | ----------------- | ------------------------------------------------- |\n     * | `false` (default) | Disable text selection                            |\n     * | `true`            | Enable text selection in multiple cells at a time |\n     * | `'cell'`          | Enable text selection in one cell at a time       |\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable text selection in multiple cells at a time\n     * fragmentSelection: true,\n     *\n     * // enable text selection in one cell a time\n     * fragmentSelection: 'cell',\n     * ```\n     */\n    fragmentSelection: false,\n\n    /**\n     * The `height` option configures the height of your grid.\n     *\n     * You can set `height` option to one of the following:\n     *\n     * | Setting                                                                    | Example                    |\n     * | -------------------------------------------------------------------------- | -------------------------- |\n     * | A number of pixels                                                         | `height: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |\n     * | A function that returns a valid number or string                           | `height() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size &#8594;](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's height to 500px\n     * height: 500,\n     *\n     * // set the grid's height to 75vh\n     * height: '75vh',\n     *\n     * // set the grid's height to 500px, using a function\n     * height() {\n     *   return 500;\n     * },\n     * ```\n     */\n    height: void 0,\n\n    /**\n     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.\n     *\n     * You can set the `hiddenColumns` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                             |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |\n     *\n     * Read more:\n     * - [Plugins: `HiddenColumns` &#8594;](@/api/hiddenColumns.md)\n     * - [Column hiding &#8594;](@/guides/columns/column-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenColumns\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenColumns` plugin\n     * hiddenColumns: true,\n     *\n     * // enable `HiddenColumns` plugin, and modify the plugin options\n     * hiddenColumns: {\n     *   // set columns that are hidden by default\n     *   columns: [5, 10, 15],\n     *   // when copying or pasting data, take hidden columns into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden columns are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenColumns: void 0,\n\n    /**\n     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.\n     *\n     * You can set the `hiddenRows` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                       |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |\n     *\n     * Read more:\n     * - [Plugins: `HiddenRows` &#8594;](@/api/hiddenRows.md)\n     * - [Row hiding &#8594;](@/guides/rows/row-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenRows\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenRows` plugin\n     * hiddenRows: true,\n     *\n     * // enable `HiddenRows` plugin, and modify the plugin options\n     * hiddenRows: {\n     *   // set rows that are hidden by default\n     *   rows: [5, 10, 15],\n     *   // when copying or pasting data, take hidden rows into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden rows are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenRows: void 0,\n\n    /**\n     * The `invalidCellClassName` option lets you add a CSS class name to cells\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htInvalid'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `highlight-error` CSS class name\n     * // to every `invalid` cell`\n     * invalidCellClassName: 'highlight-error',\n     * ```\n     */\n    invalidCellClassName: 'htInvalid',\n\n    /**\n     * The `isEmptyCol` option lets you define your own custom method\n     * for checking if a column at a given visual index is empty.\n     *\n     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} col Visual column index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyCol` method\n     * isEmptyCol(visualColumnIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyCol: function isEmptyCol(col) {\n      var row;\n      var rowLen;\n      var value;\n\n      for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {\n        value = this.getDataAtCell(row, col);\n\n        if (isEmpty(value) === false) {\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * The `isEmptyRow` option lets you define your own custom method\n     * for checking if a row at a given visual index is empty.\n     *\n     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} row Visual row index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyRow` method\n     * isEmptyRow(visualRowIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyRow: function isEmptyRow(row) {\n      var col;\n      var colLen;\n      var value;\n      var meta;\n\n      for (col = 0, colLen = this.countCols(); col < colLen; col++) {\n        value = this.getDataAtCell(row, col);\n\n        if (isEmpty(value) === false) {\n          if (_typeof(value) === 'object') {\n            meta = this.getCellMeta(row, col);\n            return isObjectEqual(this.getSchema()[meta.prop], value);\n          }\n\n          return false;\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * @description\n     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.\n     *\n     * You can set the `label` option to an object with the following properties:\n     *\n     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |\n     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `position`  | `'after'` (default) \\| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |\n     * | `value`     | A string \\| A function            | The label's text                                                                                                                                                                                                        |\n     * | `separated` | `false` (default) \\| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |\n     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox labels &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   type: 'checkbox',\n     *   // add 'My label:' after the checkbox\n     *   label: { position: 'after', value: 'My label: ', separated: true }\n     * }],\n     * ```\n     */\n    label: void 0,\n\n    /**\n     * The `language` option configures Handsontable's language.\n     *\n     * You can set the `language` option to one of the following:\n     *\n     * | Setting             | Description                 |\n     * | ------------------- | --------------------------- |\n     * | `'en-US'` (default) | English - United States     |\n     * | `'de-DE'`           | German - Germany            |\n     * | `'es-MX'`           | Spanish - Mexico            |\n     * | `'fr-FR'`           | French - France             |\n     * | `'it-IT'`           | Italian - Italy             |\n     * | `'ja-JP'`           | Japanese - Japan            |\n     * | `'ko-KR'`           | Korean - Korea              |\n     * | `'lv-LV'`           | Latvian - Latvia            |\n     * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |\n     * | `'nl-NL'`           | Dutch - Netherlands         |\n     * | `'pl-PL'`           | Polish - Poland             |\n     * | `'pt-BR'`           | Portuguese - Brazil         |\n     * | `'ru-RU'`           | Russian - Russia            |\n     * | `'zh-CN'`           | Chinese - China             |\n     * | `'zh-TW'`           | Chinese - Taiwan            |\n     *\n     * Read more:\n     * - [Internationalization (i18n) &#8594;](@/guides/internationalization/internationalization-i18n.md)\n     * - [`locale`](#locale)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set Handsontable's language to Polish\n     * language: 'pl-PL',\n     * ```\n     */\n    language: 'en-US',\n\n    /**\n     * The `licenseKey` option sets your Handsontable license key.\n     *\n     * You can set the `licenseKey` option to one of the following:\n     *\n     * | Setting                                                                                                 | Description                                                                                       |\n     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n     * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |\n     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |\n     *\n     * Read more:\n     * - [License key &#8594;](@/guides/getting-started/license-key.md)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // for commercial use\n     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key\n     *\n     * // for non-commercial use\n     * licenseKey: 'non-commercial-and-evaluation',\n     * ```\n     */\n    licenseKey: void 0,\n\n    /**\n     * The `locale` option configures Handsontable's locale.\n     *\n     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,\n     * both for the entire grid, and for individual columns.\n     *\n     * Read more:\n     * - [Internationalization (i18n) &#8594;](@/guides/internationalization/internationalization-i18n.md)\n     * - [`language`](#language)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the entire grid's locale to Polish\n     * locale: 'pl-PL',\n     *\n     * // set individual columns' locales\n     * columns: [\n     *   {\n     *     // set the first column's locale to Polish\n     *     locale: 'pl-PL',\n     *   },\n     *   {\n     *     // set the second column's locale to German\n     *     locale: 'de-DE',\n     *   },\n     * ],\n     * ```\n     */\n    locale: 'en-US',\n\n    /**\n     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.\n     *\n     * You can set the `manualColumnFreeze` option to one of the following:\n     *\n     * | Setting  | Description                                                            |\n     * | -------- | ---------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |\n     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |\n     *\n     * Read more:\n     * - [Column freezing &#8594;](@/guides/columns/column-freezing.md#user-triggered-freeze)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category ManualColumnFreeze\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnFreeze` plugin\n     * manualColumnFreeze: true,\n     * ```\n     */\n    manualColumnFreeze: void 0,\n\n    /**\n     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.\n     *\n     * You can set the `manualColumnMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                        |\n     * | -------- | ------------------------------------------------------------------------------------------------------------------ |\n     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |\n     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |\n     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |\n     *\n     * Read more:\n     * - [Column moving &#8594;](@/guides/columns/column-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnMove` plugin\n     * manualColumnMove: true,\n     *\n     * // enable the `ManualColumnMove` plugin\n     * // at initialization, move column 0 to 1\n     * // at initialization, move column 1 to 4\n     * // at initialization, move column 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualColumnMove: void 0,\n\n    /**\n     * @description\n     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.\n     *\n     * You can set the `manualColumnResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                           |\n     * | -------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |\n     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |\n     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |\n     *\n     * Read more:\n     * - [Column width: Column stretching &#8594;](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnResize\n     *\n     * @example\n     * ```js\n     * // enable the `manualColumnResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `manualColumnResize` plugin\n     * // set the initial width of column 0 to 40 pixels\n     * // set the initial width of column 1 to 50 pixels\n     * // set the initial width of column 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualColumnResize: void 0,\n\n    /**\n     * @description\n     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.\n     *\n     * You can set the `manualRowMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                               |\n     * | -------- | --------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |\n     *\n     * Read more:\n     * - [Row moving &#8594;](@/guides/rows/row-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowMove` plugin\n     * manualRowMove: true,\n     *\n     * // enable the `ManualRowMove` plugin\n     * // at initialization, move row 0 to 1\n     * // at initialization, move row 1 to 4\n     * // at initialization, move row 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualRowMove: void 0,\n\n    /**\n     * @description\n     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.\n     *\n     * You can set the `manualRowResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                   |\n     * | -------- | ------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |\n     *\n     * Read more:\n     * - [Row height: Adjust the row height manually &#8594;](@/guides/rows/row-height.md#adjust-the-row-height-manually)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowResize\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `ManualRowResize` plugin\n     * // set the initial height of row 0 to 40 pixels\n     * // set the initial height of row 1 to 50 pixels\n     * // set the initial height of row 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualRowResize: void 0,\n\n    /**\n     * The `maxCols` option sets a maximum number of columns.\n     *\n     * The `maxCols` option is used:\n     * - At initialization: if the `maxCols` value is lower than the initial number of columns,\n     * Handsontable trims columns from the right.\n     * - At runtime: for example, when inserting columns.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of columns to 300\n     * maxCols: 300,\n     * ```\n     */\n    maxCols: Infinity,\n\n    /**\n     * The `maxRows` option sets a maximum number of rows.\n     *\n     * The `maxRows` option is used:\n     * - At initialization: if the `maxRows` value is lower than the initial number of columns,\n     * Handsontable trims rows from the bottom.\n     * - At runtime: for example, when inserting rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of rows to 300\n     * maxRows: 300,\n     * ```\n     */\n    maxRows: Infinity,\n\n    /**\n     * @description\n     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.\n     *\n     * You can set the `mergeCells` option to one of the following:\n     *\n     * | Setting             | Description                                                                                         |\n     * | ------------------- | --------------------------------------------------------------------------------------------------- |\n     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |\n     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |\n     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |\n     *\n     * To merge specific cells at Handsontable's initialization,\n     * set the `mergeCells` option to an array of objects, with the following properties:\n     *\n     * | Property  | Description                                                |\n     * | --------- | ---------------------------------------------------------- |\n     * | `row`     | The row index of the merged section's beginning            |\n     * | `col`     | The column index of the merged section's beginning         |\n     * | `rowspan` | The width (as a number of rows) of the merged section      |\n     * | `colspan` | The height (as a number of columns ) of the merged section |\n     *\n     * Read more:\n     * - [Merge cells &#8594;](@/guides/cell-features/merge-cells.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category MergeCells\n     *\n     * @example\n     * ```js\n     * // enable the `MergeCells` plugin\n     * margeCells: true,\n     *\n     * // enable the `MergeCells` plugin\n     * // and merge specific cells at initialization\n     * mergeCells: [\n     *   // merge cells from cell (1,1) to cell (3,3)\n     *   {row: 1, col: 1, rowspan: 3, colspan: 3},\n     *   // merge cells from cell (3,4) to cell (2,2)\n     *   {row: 3, col: 4, rowspan: 2, colspan: 2},\n     *   // merge cells from cell (5,6) to cell (3,3)\n     *   {row: 5, col: 6, rowspan: 3, colspan: 3}\n     * ],\n     * ```\n     */\n    mergeCells: false,\n\n    /**\n     * The `minCols` option sets a minimum number of columns.\n     *\n     * The `minCols` option is used:\n     * - At initialization: if the `minCols` value is higher than the initial number of columns,\n     * Handsontable adds empty columns to the right.\n     * - At runtime: for example, when removing columns.\n     *\n     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of columns to 10\n     * minCols: 10,\n     * ```\n     */\n    minCols: 0,\n\n    /**\n     * The `minRows` option sets a minimum number of rows.\n     *\n     * The `minRows` option is used:\n     * - At initialization: if the `minRows` value is higher than the initial number of rows,\n     * Handsontable adds empty rows at the bottom.\n     * - At runtime: for example, when removing rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of rows to 10\n     * minRows: 10,\n     * ```\n     */\n    minRows: 0,\n\n    /**\n     * The `minSpareCols` option sets a minimum number of empty columns\n     * at the grid's right-hand end.\n     *\n     * If there already are other empty columns at the grid's right-hand end,\n     * they are counted into the `minSpareCols` value.\n     *\n     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.\n     *\n     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty columns on the right\n     * minSpareCols: 3,\n     * ```\n     */\n    minSpareCols: 0,\n\n    /**\n     * The `minSpareRows` option sets a minimum number of empty rows\n     * at the bottom of the grid.\n     *\n     * If there already are other empty rows at the bottom,\n     * they are counted into the `minSpareRows` value.\n     *\n     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty rows at the bottom\n     * minSpareRows: 3,\n     * ```\n     */\n    minSpareRows: 0,\n\n    /**\n     * @description\n     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `multiColumnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                                                |\n     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |\n     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |\n     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display an arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/row-sorting.md#custom-compare-functions)                                                                |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `multiColumnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Row sorting &#8594;](@/guides/rows/row-sorting.md)\n     * - [`columnSorting`](#columnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category MultiColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: true\n     *\n     * // enable the `MultiColumnSorting` plugin with custom configuration\n     * multiColumnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display an arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    multiColumnSorting: void 0,\n\n    /**\n     * @description\n     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.\n     *\n     * You can set the `nestedHeaders` option to an array of arrays:\n     * - Each array configures one set of nested headers.\n     * - Each array element configures one header, and can be one of the following:\n     *\n     * | Array element | Description                                                                                  |\n     * | ------------- | -------------------------------------------------------------------------------------------- |\n     * | A string      | The header's label                                                                           |\n     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |\n     *\n     * Read more:\n     * - [Plugins: `NestedHeaders` &#8594;](@/api/nestedHeaders.md)\n     * - [Column groups: Nested headers &#8594;](@/guides/columns/column-groups.md#nested-headers)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default undefined\n     * @category NestedHeaders\n     *\n     * @example\n     * ```js\n     * nestedHeaders: [\n     *   ['A', {label: 'B', colspan: 8}, 'C'],\n     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']\n     * ],\n     * ```\n     */\n    nestedHeaders: void 0,\n\n    /**\n     * @description\n     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.\n     *\n     * You can set the `nestedRows` option to one of the following:\n     *\n     * | Setting           | Description                                            |\n     * | ----------------- | ------------------------------------------------------ |\n     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |\n     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `NestedRows` &#8594;](@/api/nestedRows.md)\n     *\n     * @example\n     * ```js\n     * // enable the `NestedRows` plugin\n     * nestedRows: true,\n     * ```\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category NestedRows\n     */\n    nestedRows: void 0,\n\n    /**\n     * The `noWordWrapClassName` option lets you add a CSS class name\n     * to every cell that has the [`wordWrap`](#wordWrap) option set to `false`.\n     *\n     * Read more:\n     * - [`wordWrap`](#wordWrap)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htNoWrap'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `is-noWrapCell` CSS class name\n     * // to every cell that doesn't wrap content\n     * noWordWrapClassName: 'is-noWrapCell',\n     * ```\n     */\n    noWordWrapClassName: 'htNoWrap',\n\n    /**\n     * The `numericFormat` option configures the number format and the currency format\n     * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output.\n     *\n     * You can set the `numericFormat` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                               | Description     |\n     * | ----------- | ----------------------------------------------------------------------------- | --------------- |\n     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |\n     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |\n     *\n     * The `numericFormat` option as no effect on cells' input data.\n     * To enter numeric data into Handsontable, use:\n     * - Either floats (separated by a dot, or a comma)\n     * - Or integers\n     *\n     * In the source data, numeric data is stored as JavaScript numbers.\n     *\n     * Read more:\n     * - [Numeric cell type &#8594;](@/guides/cell-types/numeric-cell-type.md)\n     * - [Third-party licenses &#8594;](@/guides/technical-specification/third-party-licenses.md)\n     *\n     * @memberof Options#\n     * @since 0.35.0\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `numeric`\n     *     type: 'numeric',\n     *     // set the `numericFormat` option for every `numeric` cell of this column\n     *     numericFormat: {\n     *       // set the number format\n     *       pattern: '0,00',\n     *       // set the currency format\n     *       culture: 'en-US'\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    numericFormat: void 0,\n\n    /**\n     * If the `observeDOMVisibility` option is set to `true`,\n     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't rerender the grid on visibility changes\n     * observeDOMVisibility: false,\n     * ```\n     */\n    observeDOMVisibility: true,\n\n    /**\n     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)\n     * when you click outside of the grid.\n     *\n     * You can set the `outsideClickDeselects` option to one of the following:\n     *\n     * | Setting          | Description                                                                                              |\n     * | ---------------- | -------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |\n     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |\n     * | A function       | A function that takes the click event target and returns a boolean                                       |\n     *\n     * @memberof Options#\n     * @type {boolean|Function}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on a mouse click outside of the grid, clear the current selection\n     * outsideClickDeselects: true,\n     *\n     * // on a mouse click outside of the grid, keep the current selection\n     * outsideClickDeselects: false,\n     *\n     * // take the click event target and return `false`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     *\n     * // take the click event target and return `true`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     * ```\n     */\n    outsideClickDeselects: true,\n\n    /**\n     * @description\n     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.\n     *\n     * You can set the `persistentState` to one of the following:\n     *\n     * | Setting           | Description                                                      |\n     * | ----------------- | ---------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |\n     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |\n     *\n     * Read more:\n     * - [Saving data: Saving data locally &#8594;](@/guides/getting-started/saving-data.md#saving-data-locally)\n     * - [Plugins: `PersistentState` &#8594;](@/api/persistentState.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category PersistentState\n     *\n     * @example\n     * ```js\n     * // enable the `PersistentState` plugin\n     * persistentState: true,\n     * ```\n     */\n    persistentState: void 0,\n\n    /**\n     * The `placeholder` option lets you display placeholder text in every empty cell.\n     *\n     * You can set the `placeholder` option to one of the following:\n     *\n     * | Setting            | Example        | Description                                                           |\n     * | ------------------ | -------------- | --------------------------------------------------------------------- |\n     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |\n     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |\n     *\n     * Read more:\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // display 'Empty cell' text\n     * // in every empty cell of the entire grid\n     * placeholder: 'Empty cell',\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // display 'Empty date cell' text\n     *     // in every empty cell of the `date` column\n     *     placeholder: 'Empty date cell'\n     *   }\n     * ],\n     * ```\n     */\n    placeholder: void 0,\n\n    /**\n     * The `placeholderCellClassName` option lets you add a CSS class name to cells\n     * that contain [`placeholder`](#placeholder) text.\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [`placeholder`](#placeholder)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htPlaceholder'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-placeholder` CSS class name\n     * // to every cell that contains `placeholder` text\n     * placeholderCellClassName: 'has-placeholder',\n     * ```\n     */\n    placeholderCellClassName: 'htPlaceholder',\n\n    /**\n     * The `preventOverflow` option configures preventing Handsontable\n     * from overflowing outside of its parent element.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                      |\n     * | ----------------- | -------------------------------- |\n     * | `false` (default) | Don't prevent overflowing        |\n     * | `'horizontal'`      | Prevent horizontal overflowing |\n     * | `'vertical'`        | Prevent vertical overflowing   |\n     *\n     * @memberof Options#\n     * @type {string|boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // prevent horizontal overflowing\n     * preventOverflow: 'horizontal',\n     * ```\n     */\n    preventOverflow: false,\n\n    /**\n     * The `preventWheel` option configures preventing the `wheel` event's default action\n     * on overlays.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                                      |\n     * | ----------------- | ------------------------------------------------ |\n     * | `false` (default) | Don't prevent the `wheel` event's default action |\n     * | `true`            | Prevent the `wheel` event's default action       |\n     *\n     * @memberof Options#\n     * @private\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't prevent the `wheel` event's default action\n     * preventWheel: false,\n     * ```\n     */\n    preventWheel: false,\n\n    /**\n     * @description\n     * The `readOnly` option determines whether a cell, column or comment is editable or not.\n     *\n     * You can set the `readOnly` option to one of the following:\n     *\n     * | Setting           | Decription                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Set as editable                                                                                                           |\n     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set as read-only\n     * readOnly: true,\n     * ```\n     */\n    readOnly: false,\n\n    /**\n     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htDimmed'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `is-readOnly` CSS class name\n     * // to every read-only cell\n     * readOnlyCellClassName: 'is-readOnly',\n     * ```\n     */\n    readOnlyCellClassName: 'htDimmed',\n\n    /**\n     * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).\n     *\n     * You can set the `renderAllRows` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |\n     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |\n     *\n     * Read more:\n     * - [Row virtualization &#8594;](@/guides/rows/row-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // disable row virtualization\n     * renderAllRows: true,\n     * ```\n     */\n    renderAllRows: void 0,\n\n    /**\n     * @description\n     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.\n     *\n     * You can set the `renderer` option to one of the following:\n     * - A custom renderer function\n     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):\n     *\n     * | Alias               | Cell renderer function                                                         |\n     * | ------------------- | ------------------------------------------------------------------------------ |\n     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |\n     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |\n     * | `'base'`            | `BaseRenderer`                                                                 |\n     * | `'checkbox'`        | `CheckboxRenderer`                                                             |\n     * | `'date'`            | `DateRenderer`                                                                 |\n     * | `'dropdown'`        | `DropdownRenderer`                                                             |\n     * | `'html'`            | `HtmlRenderer`                                                                 |\n     * | `'numeric'`         | `NumericRenderer`                                                              |\n     * | `'password'`        | `PasswordRenderer`                                                             |\n     * | `'text'`            | `TextRenderer`                                                                 |\n     * | `'time'`            | `TimeRenderer`                                                                 |\n     *\n     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell renderer &#8594;](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` renderer for every cell of the entire grid\n     * renderer: `'numeric'`,\n     *\n     * // add a custom renderer function\n     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {\n     *   // your custom renderer's logic\n     *   ...\n     * }\n     *\n     * // apply the `renderer` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` renderer for every cell of this column\n     *     renderer: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomRenderer` renderer for every cell of this column\n     *     renderer: 'myCustomRenderer'\n     *   }\n     * ]\n     * ```\n     */\n    renderer: void 0,\n\n    /**\n     * The `rowHeaders` option configures your grid's row headers.\n     *\n     * You can set the `rowHeaders` option to one of the following:\n     *\n     * | Setting    | Description                                                       |\n     * | ---------- | ----------------------------------------------------------------- |\n     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |\n     * | `false`    | Disable row headers                                               |\n     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own row headers, using a function                     |\n     *\n     * Read more:\n     * - [Row header &#8594;](@/guides/rows/row-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default row headers\n     * rowHeaders: true,\n     *\n     * // set your own row headers\n     * rowHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own row headers, using a function\n     * rowHeaders: function(visualRowIndex) {\n     *   return `${visualRowIndex}: AB`;\n     * },\n     * ```\n     */\n    rowHeaders: void 0,\n\n    /**\n     * @description\n     * The `rowHeaderWidth` option configures the width of row headers.\n     *\n     * You can set the `rowHeaderWidth` option to one of the following:\n     *\n     * | Setting  | Description                                     |\n     * | -------- | ----------------------------------------------- |\n     * | A number | Set the same width for every row header         |\n     * | An array | Set different widths for individual row headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same width for every row header\n     * rowHeaderWidth: 25,\n     *\n     * // set different widths for individual row headers\n     * rowHeaderWidth: [25, 30, 55],\n     * ```\n     */\n    rowHeaderWidth: void 0,\n\n    /**\n     * The `rowHeights` option sets rows' heights, in pixels.\n     *\n     * In the rendering process, the default row height is 23px.\n     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:\n     *\n     * | Setting     | Description                                                                                         | Example                                                      |\n     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |\n     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |\n     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |\n     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |\n     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |\n     *\n     * The `rowHeights` option also sets the minimum row height that can be set\n     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).\n     *\n     * Read more:\n     * - [Row height &#8594;](@/guides/rows/row-height.md)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every row's height to 100px\n     * rowHeights: 100,\n     *\n     * // set every row's height to 100px\n     * rowHeights: '100px',\n     *\n     * // set the first (by visual index) row's height to 100\n     * // set the second (by visual index) row's height to 120\n     * // set the third (by visual index) row's height to `undefined`\n     * // set any other row's height to the default 23px\n     * rowHeights: [100, 120, undefined],\n     *\n     * // set each row's height individually, using a function\n     * rowHeights(visualRowIndex) {\n     *   return visualRowIndex * 10;\n     * },\n     * ```\n     */\n    rowHeights: void 0,\n\n    /**\n     * @description\n     * The `search` option configures the [`Search`](@/api/search.md) plugin.\n     *\n     * You can set the `search` option to one of the following:\n     *\n     * | Setting           | Description                                                                          |\n     * | ----------------- | ------------------------------------------------------------------------------------ |\n     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |\n     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |\n     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |\n     *\n     * If you set the `search` option to an object, you can configure the following search options:\n     *\n     * | Option              | Possible settings | Description                                                                                          |\n     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |\n     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |\n     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)  |\n     * | `callback`          | A function        | Add a [custom callback function](@/guides/accessories-and-menus/searching-values.md#custom-callback) |\n     *\n     * Read more:\n     * - [Searching values &#8594;](@/guides/accessories-and-menus/searching-values.md)\n     * - [Searching values: Custom query method &#8594;](@/guides/accessories-and-menus/searching-values.md#custom-query-method)\n     * - [Searching values: Custom callback &#8594;](@/guides/accessories-and-menus/searching-values.md#custom-callback)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default false\n     * @category Search\n     *\n     * @example\n     * ```js\n     * // enable the `Search` plugin with the default configuration\n     * search: true,\n     *\n     * // enable the `Search` plugin with a custom configuration\n     * search: {\n     *   // add a `customClass` CSS class name to search results\n     *   searchResultClass: 'customClass',\n     *   // add a custom query method\n     *   queryMethod(queryStr, value) {\n     *     ...\n     *   },\n     *   // add a custom callback function\n     *   callback(instance, row, column, value, result) {\n     *     ...\n     *   }\n     * }\n     * ```\n     */\n    search: false,\n\n    /**\n     * @description\n     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.\n     *\n     * You can set the `selectionMode` option to one of the following:\n     *\n     * | Setting      | Description                                                  |\n     * | ------------ | ------------------------------------------------------------ |\n     * | `'single'`   | Allow the user to select only one cell at a time.            |\n     * | `'range'`    | Allow the user to select one range of cells at a time.       |\n     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |\n     *\n     * Read more:\n     * - [Selection: Selecting ranges &#8594;](@/guides/cell-features/selection.md#selecting-ranges)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'multiple'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can only select one cell at at a time\n     * selectionMode: 'single',\n     *\n     * // you can select one range of cells at a time\n     * selectionMode: 'range',\n     *\n     * // you can select multiple ranges of cells at a time\n     * selectionMode: 'multiple',\n     * ```\n     */\n    selectionMode: 'multiple',\n\n    /**\n     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.\n     *\n     * You can set the `selectOptions` option to one of the following:\n     *\n     * | Setting                         | Description                                                                   |\n     * | ------------------------------- | ----------------------------------------------------------------------------- |\n     * | An array of strings             | Each string is one option's value and label                                   |\n     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |\n     * | A function                      | A function that returns an object with key-string pairs                       |\n     *\n     * Read more:\n     * - [Select cell type &#8594;](@/guides/cell-types/select-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {string[]|object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     // set the first option's value and label to `A`\n     *     // set the second option's value and label to `B`\n     *     // set the third option's value and label to `C`\n     *     selectOptions: ['A', 'B', 'C'],\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     selectOptions: {\n     *       // set the first option's value to `value1` and label to `Label 1`\n     *       value1: 'Label 1',\n     *       // set the second option's value to `value2` and label to `Label 2`\n     *       value2: 'Label 2',\n     *       // set the third option's value to `value3` and label to `Label 3`\n     *       value3: 'Label 3',\n     *     },\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `select`\n     *     type: 'select',\n     *     // set `selectOption` to a function that returns available options as an object\n     *     selectOptions(visualRow, visualColumn, prop) {\n     *       return {\n     *         value1: 'Label 1',\n     *         value2: 'Label 2',\n     *         value3: 'Label 3',\n     *       };\n     *   },\n     * ],\n     * ```\n     */\n    selectOptions: void 0,\n\n    /**\n     * @description\n     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.\n     *\n     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.\n     *\n     * You can set the `skipColumnOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                           |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this column                                                                  |\n     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |\n     *\n     * Read more:\n     * - [Configuration options: Setting column options &#8594;](@/guides/getting-started/setting-options.md#setting-column-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // disable pasting data into this column\n     *     skipColumnOnPaste: true\n     *   }\n     * ],\n     * ```\n     */\n    skipColumnOnPaste: false,\n\n    /**\n     * @description\n     *\n     * The `skipRowOnPaste` option determines whether you can paste data into a given row.\n     *\n     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.\n     *\n     * You can set the `skipRowOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                         |\n     * | ----------------- | ----------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this row                                                   |\n     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |\n     *\n     * Read more:\n     * - [Configuration options: Setting row options &#8594;](@/guides/getting-started/setting-options.md#setting-row-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * cells(row, column) {\n     *  const cellProperties = {};\n     *\n     *  // disable pasting data into row 1\n     *  if (row === 1) {\n     *    cellProperties.skipRowOnPaste = true;\n     *  }\n     *\n     *  return cellProperties;\n     * }\n     * ```\n     */\n    skipRowOnPaste: false,\n\n    /**\n     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are sorted in the same order as provided in the [`source`](#source) option.\n     *\n     * You can set the `sortByRelevance` option to one of the following:\n     *\n     * | Setting          | Description                                                                  |\n     * | ---------------- | ---------------------------------------------------------------------------- |\n     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |\n     * | `false`          | Sort options alphabetically                                                  |\n     *\n     * Read more:\n     * - [`source`](#source)\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['D', 'C', 'B', 'A'],\n     *   // sort the `autocomplete` option in this order: D, C, B, A\n     *   sortByRelevance: true\n     * }],\n     * ```\n     */\n    sortByRelevance: true,\n\n    /**\n     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.\n     *\n     * You can set the `source` option to one of the following:\n     *\n     * - An array\n     * - A function\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`strict`](#strict)\n     * - [`allowHtml`](#allowHtml)\n     * - [`filter`](#filter)\n     * - [`sortByRelevance`](#sortByRelevance)\n     *\n     * @memberof Options#\n     * @type {Array|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set `source` to an array\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C', 'D']\n     * }],\n     *\n     * // set `source` to a function\n     * columns: [{\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // for every `autocomplete` cell in this column, fetch data from an external source\n     *   source(query, callback) {\n     *     fetch('https://example.com/query?q=' + query, function(response) {\n     *       callback(response.items);\n     *     })\n     *   }\n     * }],\n     * ```\n     */\n    source: void 0,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.\n     *\n     * The `startCols` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty columns\n     * startCols: 15,\n     * ```\n     */\n    startCols: 5,\n\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.\n     *\n     * The `startRows` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty rows\n     * startRows: 15,\n     * ```\n     */\n    startRows: 5,\n\n    /**\n     * @description\n     * The `stretchH` option determines what happens when the declared grid width\n     * is different from the calculated sum of all column widths.\n     *\n     * You can set the `stretchH` option to one of the following:\n     *\n     * | Setting            | Description                                                       |\n     * | ------------------ | ----------------------------------------------------------------- |\n     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |\n     * | `'last'`           | Fit the grid to the container, by stretching only the last column |\n     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |\n     *\n     * Read more:\n     * - [Column width: Column stretching &#8594;](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'none'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // fit the grid to the container\n     * // by stretching all columns evenly\n     * stretchH: 'all',\n     * ```\n     */\n    stretchH: 'none',\n\n    /**\n     * The `strict` option configures [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * cells' strict/lazy mode.\n     *\n     * You can set the `strict` option to one of the following:\n     *\n     * | Setting | Mode                                                                                  | Description                                                                                                                                       |\n     * | ------- | ------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode) | The value entered must match an autocomplete option (case-sensitive)                                                                              |\n     * | `false` | [Lazy mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-lazy-mode)     | The value entered doesn't have to match an autocomplete option.<br>The end user can:<br>- Choose from suggested options<br>- Enter a custom value |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of every cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // values entered must match `A`, `B`, or `C`\n     *   strict: true\n     *   },\n     * ],\n     * ```\n     */\n    strict: void 0,\n\n    /**\n     * The `tableClassName` option lets you add CSS class names\n     * to every Handsontable instance inside the `container` element.\n     *\n     * You can set the `tableClassName` option to one of the following:\n     *\n     * | Setting             | Description                                                                                |\n     * | ------------------- | ------------------------------------------------------------------------------------------ |\n     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |\n     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    tableClassName: void 0,\n\n    /**\n     * The `tabMoves` option configures the action of the <kbd>Tab</kbd> key.\n     *\n     * You can set the `tabMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`    | Number | - On pressing <kbd>Tab</kbd>, move selection `row` rows down<br>- On pressing <kbd>Shift</kbd>+<kbd>Tab</kbd>, move selection `row` rows up              |\n     * | `col`    | Number | - On pressing <kbd>Tab</kbd>, move selection `col` columns right<br>- On pressing <kbd>Shift</kbd>+<kbd>Tab</kbd>, move selection `col` columns left     |\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {row: 0, col: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Tab, move selection 2 rows down and 2 columns right\n     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left\n     * tabMoves: {row: 2, col: 2},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Tab\n     * // you can use it to check whether the user pressed Tab or Shift+Tab\n     * tabMoves(event) {\n     *   return {row: 2, col: 2};\n     * },\n     * ```\n     */\n    tabMoves: {\n      row: 0,\n      col: 1\n    },\n\n    /**\n     * @description\n     * The `title` option configures [column header](@/guides/columns/column-header.md) names.\n     *\n     * You can set the `title` option to a string.\n     *\n     * Read more:\n     * - [Column header &#8594;](@/guides/columns/column-header.md)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the first column header name to `First name`\n     *     title: 'First name',\n     *     type: 'text',\n     *   },\n     *   {\n     *     // set the second column header name to `Last name`\n     *     title: 'Last name',\n     *     type: 'text',\n     *   }\n     * ],\n     * ```\n     */\n    title: void 0,\n\n    /**\n     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * You can set the `trimDropdown` option to one of the following:\n     *\n     * | Setting          | Description                                                                     |\n     * | ---------------- | ------------------------------------------------------------------------------- |\n     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |\n     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // for every cell of this column\n     *     // make the `autocomplete` list's width the same as the edited cell's width\n     *     trimDropdown: true,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // for every cell of this column\n     *     // scale the `dropdown` list's width to the list's content\n     *     trimDropdown: false,\n     *   }\n     * ],\n     * ```\n     */\n    trimDropdown: true,\n\n    /**\n     * @description\n     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.\n     *\n     * You can set the `trimRows` option to one of the following:\n     *\n     * | Setting  | Description                                                                                   |\n     * | -------- | --------------------------------------------------------------------------------------------- |\n     * | `false`  | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |\n     * | `true`   | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |\n     * | An array | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |\n     *\n     * Read more:\n     * - [Plugins: `TrimRows` &#8594;](@/api/trimRows.md)\n     * - [Row trimming &#8594;](@/guides/rows/row-trimming.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category TrimRows\n     *\n     * @example\n     * ```js\n     * // enable the `TrimRows` plugin\n     * trimRows: true,\n     *\n     * // enable the `TrimRows` plugin\n     * // trim rows 5, 10, and 15 at Handsontable's initialization\n     * trimRows: [5, 10, 15],\n     * ```\n     */\n    trimRows: void 0,\n\n    /**\n     * The `trimWhitespace` option configures automatic whitespace removal.\n     *\n     * You can set the `trimWhitespace` option to one of the following:\n     *\n     * | Setting          | Description                                                     |\n     * | ---------------- | --------------------------------------------------------------- |\n     * | `true` (default) | Remove whitespace at the beginning and at the end of every cell |\n     * | `false`          | Don't remove whitespace                                         |\n     *\n     * @memberof Options#tr\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // don't remove whitespace\n     *     // from any cell of this column\n     *     trimWhitespace: false\n     *   }\n     * ]\n     * ```\n     */\n    trimWhitespace: true,\n\n    /**\n     * @description\n     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).\n     *\n     * You can set the `type` option to one of the following:\n     *\n     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |\n     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |\n     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |\n     * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |\n     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |\n     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |\n     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |\n     * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |\n     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |\n     * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |\n     *\n     * Read more:\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Cell renderer &#8594;](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell editor &#8594;](@/guides/cell-functions/cell-editor.md)\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`renderer`](#renderer)\n     * - [`editor`](#editor)\n     * - [`validator`](#validator)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'text'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` cell type for every cell of the entire grid\n     * type: `'numeric'`,\n     *\n     * // apply the `type` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` cell type for every cell of this column\n     *     type: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomCellType` cell type for every cell of this column\n     *     type: 'myCustomCellType'\n     *   }\n     * ]\n     * ```\n     */\n    type: 'text',\n\n    /**\n     * The `uncheckedTemplate` option lets you configure what value\n     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `uncheckedTemplate` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |\n     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template &#8594;](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()` &#8594;](@/api/core.md#getDataAtCell)\n     * - [`checkedTemplate`](#checkedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `false`\n     *     // when checked, the cell's value is `true`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of every cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `'No'`\n     *     // when checked, the cell's value is `'Yes'`\n     *     type: 'checkbox',\n     *     uncheckedTemplate: 'No'\n     *     checkedTemplate: 'Yes',\n     *  }\n     * ],\n     * ```\n     */\n    uncheckedTemplate: void 0,\n\n    /**\n     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.\n     *\n     * You can set the `undo` option to one of the following:\n     *\n     * | Setting | Description                                        |\n     * | ------- | -------------------------------------------------- |\n     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |\n     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |\n     *\n     * By default, the `undo` option is set to `undefined`,\n     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.\n     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,\n     * set the `undo` option to `false`.\n     *\n     * Read more:\n     * - [Undo and redo &#8594;](@/guides/accessories-and-menus/undo-redo.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category UndoRedo\n     *\n     * @example\n     * ```js\n     * // enable the `UndoRedo` plugin\n     * undo: true,\n     * ```\n     */\n    undo: void 0,\n\n    /**\n     * @description\n     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.\n     *\n     * You can set the `validator` option to one of the following:\n     *\n     * | Setting              | Description                                                                      |\n     * | -------------------- | -------------------------------------------------------------------------------- |\n     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |\n     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |\n     * | A regular expression | A regular expression used for cell validation                                    |\n     *\n     * By setting the `validator` option to a string,\n     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):\n     *\n     * | Alias               | Cell validator function                                                 |\n     * | ------------------- | ----------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |\n     * | `'date'`            | `DateValidator`                                                         |\n     * | `'dropdown'`        | `DropdownValidator`                                                     |\n     * | `'numeric'`         | `NumericValidator`                                                      |\n     * | `'time'`            | `TimeValidator`                                                         |\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell validator &#8594;](@/guides/cell-functions/cell-validator.md)\n     * - [Cell type &#8594;](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration &#8594;](@/guides/getting-started/setting-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {Function|RegExp|string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *    {\n     *      // use a built-in `numeric` cell validator\n     *      validator: 'numeric'\n     *    },\n     *    {\n     *      // validate against a regular expression\n     *      validator: /^[0-9]$/\n     *    },\n     *    {\n     *      // add a custom cell validator function\n     *      validator(value, callback) {\n     *          ...\n     *      }\n     *    },\n     * ],\n     * ```\n     */\n    validator: void 0,\n\n    /**\n     * @description\n     * The `viewportColumnRenderingOffset` option configures the number of columns\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportColumnRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns &#8594;](@/guides/advanced-topics/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 columns outside of the grid's viewport\n     * viewportColumnRenderingOffset: 70,\n     * ```\n     */\n    viewportColumnRenderingOffset: 'auto',\n\n    /**\n     * @description\n     * The `viewportRowRenderingOffset` option configures the number of rows\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportRowRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns &#8594;](@/guides/advanced-topics/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     * - [Column virtualization &#8594;](@/guides/columns/column-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 rows outside of the grid's viewport\n     * viewportRowRenderingOffset: 70,\n     * ```\n     */\n    viewportRowRenderingOffset: 'auto',\n\n    /**\n     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.\n     *\n     * Read more:\n     * - [Autocomplete cell type &#8594;](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type &#8594;](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 10\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // set the `autocomplete` list's height to 15 options\n     *     // for every cell of this column\n     *     visibleRows: 15,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // set the `dropdown` list's height to 5 options\n     *     // for every cell of this column\n     *     visibleRows: 5,\n     *   }\n     * ],\n     * ```\n     */\n    visibleRows: 10,\n\n    /**\n     * The `width` option configures the width of your grid.\n     *\n     * You can set the `width` option to one of the following:\n     *\n     * | Setting                                                                    | Example                   |\n     * | -------------------------------------------------------------------------- | ------------------------- |\n     * | A number of pixels                                                         | `width: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |\n     * | A function that returns a valid number or string                           | `width() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size &#8594;](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's width to 500px\n     * width: 500,\n     *\n     * // set the grid's width to 75vw\n     * width: '75vw',\n     *\n     * // set the grid's width to 500px, using a function\n     * width() {\n     *   return 500;\n     * },\n     * ```\n     */\n    width: void 0,\n\n    /**\n     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.\n     *\n     * You can set the `wordWrap` option to one of the following:\n     *\n     * | Setting          | Description                                             |\n     * | ---------------- | ------------------------------------------------------- |\n     * | `true` (default) | If content exceeds the column's width, wrap the content |\n     * | `false`          | Don't wrap content                                      |\n     *\n     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.\n     *\n     * Read more:\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set column width for every column of the entire grid\n     * colWidths: 100,\n     *\n     * columns: [\n     *   {\n     *     // don't wrap content in this column\n     *     wordWrap: false,\n     *   },\n     *   {\n     *     // if content exceeds this column's width, wrap the content\n     *     wordWrap: true,\n     *   }\n     * ],\n     * ```\n     */\n    wordWrap: true\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  };\n});"]},"metadata":{},"sourceType":"module"}