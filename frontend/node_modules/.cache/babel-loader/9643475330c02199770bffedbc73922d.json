{"ast":null,"code":"import defaultsDeep from 'lodash.defaultsdeep';\nimport Quill from 'quill';\nimport GrammarlyInline from './formats/GrammarlyInline';\nexport default {\n  model: {\n    prop: 'content'\n  },\n  props: {\n    content: {},\n    formats: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    keyBindings: {\n      type: Array,\n\n      default() {\n        return [];\n      }\n\n    },\n    output: {\n      default: 'delta'\n    },\n    bus: {\n      default: false\n    },\n    config: {\n      default() {\n        return {};\n      }\n\n    }\n  },\n\n  data() {\n    return {\n      editor: {},\n      defaultConfig: {\n        modules: {\n          toolbar: [['bold', 'italic', 'underline'], [{\n            'list': 'ordered'\n          }, {\n            'list': 'bullet'\n          }], [{\n            'align': []\n          }]]\n        },\n        theme: 'snow'\n      }\n    };\n  },\n\n  mounted() {\n    if (this.keyBindings.length) {\n      this.defaultConfig.modules.keyboard = {\n        bindings: this.keyBindings.map(binding => {\n          if (binding.remove) return false;\n          return {\n            key: binding.key,\n            metaKey: true,\n            handler: binding.method.bind(this)\n          };\n        })\n      };\n    }\n\n    if (this.config.modules && this.config.modules.toolbar) {\n      this.defaultConfig.modules.toolbar = [];\n    }\n\n    Quill.register(GrammarlyInline);\n    this.editor = new Quill(this.$refs.quill, defaultsDeep(this.config, this.defaultConfig));\n\n    if (this.content && this.content !== '') {\n      if (this.output != 'delta') {\n        this.editor.pasteHTML(this.content);\n      } else {\n        this.editor.setContents(this.content);\n      }\n    }\n\n    this.editor.on('text-change', (delta, source) => {\n      this.$emit('text-change', this.editor, delta, source);\n\n      if (this.editor.getText().length <= 1) {\n        this.$emit('input', '');\n      } else {\n        this.$emit('input', this.output != 'delta' ? this.editor.root.innerHTML : this.editor.getContents());\n      }\n    });\n    this.editor.on('selection-change', range => {\n      this.$emit('selection-change', this.editor, range);\n    });\n\n    if (this.bus) {\n      this.bus.$on('focus-editor', () => this.focusEditor());\n      this.bus.$on('set-content', content => this.editor.setContents(content));\n      this.bus.$on('set-html', html => {\n        if (!html || html === '') return;\n        this.editor.root.innerHTML = html;\n      });\n    }\n\n    this.$on('focus-editor', () => this.focusEditor());\n    this.$on('set-content', content => this.editor.setContents(content));\n    this.$on('set-html', html => {\n      if (!html || html === '') return;\n      this.editor.root.innerHTML = html;\n    });\n    this.$nextTick(() => {\n      const selectors = ['button', '.ql-picker-label', '.ql-picker-item'];\n      const toolbar = this.$el.querySelector('.ql-toolbar');\n      selectors.forEach(selector => {\n        toolbar.querySelectorAll(selector).forEach(element => {\n          element.tabIndex = -1;\n        });\n      });\n    });\n  },\n\n  methods: {\n    focusEditor(e) {\n      if (e && e.srcElement) {\n        let classList = e.srcElement.classList,\n            isSegment = false;\n        classList.forEach(className => {\n          if (className === 'segment') {\n            isSegment = true;\n            return;\n          }\n        });\n        if (!isSegment) return;\n      }\n\n      this.editor.focus();\n      this.editor.setSelection(this.editor.getLength() - 1, this.editor.getLength());\n    }\n\n  },\n\n  beforeDestroy() {\n    if (this.bus) {\n      this.bus.$off('focus-editor');\n      this.bus.$off('set-content');\n      this.bus.$off('set-html');\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["defaultsDeep","Quill","GrammarlyInline","model","prop","props","content","formats","type","Array","default","keyBindings","output","bus","config","data","editor","defaultConfig","modules","toolbar","theme","mounted","length","keyboard","bindings","map","binding","remove","key","metaKey","handler","method","bind","register","$refs","quill","pasteHTML","setContents","on","delta","source","$emit","getText","root","innerHTML","getContents","range","$on","focusEditor","html","$nextTick","selectors","$el","querySelector","forEach","selector","querySelectorAll","element","tabIndex","methods","e","srcElement","classList","isSegment","className","focus","setSelection","getLength","beforeDestroy","$off"],"sourceRoot":"","sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/vue-quill/src/Quill.vue"],"sourcesContent":["<template>\n    <div>\n        <div class=\"ui attached segment\" ref=\"quill\" @click.prevent=\"focusEditor\"></div>\n    </div>\n</template>\n\n<script>\n    import defaultsDeep from 'lodash.defaultsdeep'\n    import Quill from 'quill'\n    import GrammarlyInline from './formats/GrammarlyInline'\n\n    export default {\n        model: {\n            prop: 'content',\n        },\n\n        props: {\n            content: {},\n\n            formats: {\n                type: Array,\n                default() {\n                    return []\n                },\n            },\n\n            keyBindings: {\n                type: Array,\n                default() {\n                    return []\n                },\n            },\n\n            output: {\n                default : 'delta'\n            },\n\n            bus: {\n                default: false,\n            },\n\n            config: {\n                default() {\n                    return {}\n                },\n            },\n        },\n\n        data() {\n            return {\n                editor: {},\n                defaultConfig: {\n                    modules: {\n                        toolbar: [\n                            ['bold', 'italic', 'underline'],\n                            [\n                               { 'list': 'ordered' }, { 'list': 'bullet' }\n                            ],\n                            [{ 'align': [] }],\n                        ],\n                    },\n                    theme: 'snow',\n                },\n            }\n        },\n\n        mounted() {\n            if (this.keyBindings.length) {\n                this.defaultConfig.modules.keyboard = {\n                    bindings: this.keyBindings.map((binding) => {\n                        if (binding.remove) return false\n                        return {\n                            key: binding.key,\n                            metaKey: true,\n                            handler: binding.method.bind(this),\n                        }\n                    })\n                }\n            }\n\n            if (this.config.modules && this.config.modules.toolbar) {\n                this.defaultConfig.modules.toolbar = []\n            }\n\n            Quill.register(GrammarlyInline)\n\n            this.editor = new Quill(this.$refs.quill, defaultsDeep(this.config, this.defaultConfig))\n\n            if (this.content && this.content !== '') {\n\t            if (this.output != 'delta') {\n\t                this.editor.pasteHTML(this.content)\n\t            } else {\n\t                this.editor.setContents(this.content)\n\t            }\n            }\n\n            this.editor.on('text-change', (delta, source) => {\n                this.$emit('text-change', this.editor, delta, source)\n                if (this.editor.getText().length <= 1) {\n                  this.$emit('input', '')\n                } else {\n                  this.$emit('input', this.output != 'delta' ? this.editor.root.innerHTML : this.editor.getContents())\n                }\n            })\n\n            this.editor.on('selection-change', (range) => {\n                this.$emit('selection-change', this.editor, range)\n            })\n\n            if (this.bus) {\n                this.bus.$on('focus-editor', () => this.focusEditor())\n                this.bus.$on('set-content', (content) => this.editor.setContents(content))\n                this.bus.$on('set-html', (html) => {\n                    if (!html || html === '') return\n\n                    this.editor.root.innerHTML = html\n                })\n            }\n\n            this.$on('focus-editor', () => this.focusEditor())\n            this.$on('set-content', (content) => this.editor.setContents(content))\n            this.$on('set-html', (html) => {\n                if (!html || html === '') return\n\n                this.editor.root.innerHTML = html\n            })\n\n            this.$nextTick(() => {\n                const selectors = ['button', '.ql-picker-label', '.ql-picker-item']\n                const toolbar = this.$el.querySelector('.ql-toolbar')\n                selectors.forEach((selector) => {\n                    toolbar.querySelectorAll(selector).forEach((element) => {\n                        element.tabIndex = -1\n                    })\n                })\n            })\n        },\n\n        methods: {\n            focusEditor(e) {\n                if (e && e.srcElement) {\n                    let classList = e.srcElement.classList,\n                        isSegment = false\n\n                    classList.forEach((className) => {\n                        if (className === 'segment') {\n                            isSegment = true\n                            return\n                        }\n                    })\n\n                    if (!isSegment) return\n                }\n\n                this.editor.focus()\n                this.editor.setSelection(this.editor.getLength()-1, this.editor.getLength())\n            }\n        },\n\n        beforeDestroy() {\n            if (this.bus) {\n                this.bus.$off('focus-editor')\n                this.bus.$off('set-content')\n                this.bus.$off('set-html')\n            }\n        },\n    }\n</script>\n"]},"metadata":{},"sourceType":"module"}