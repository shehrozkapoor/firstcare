{"ast":null,"code":"//! moment.js locale configuration\n;\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' && typeof require === 'function' ? factory(require('../moment')) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n})(this, function (moment) {\n  'use strict';\n\n  function plural(word, num) {\n    var forms = word.split('_');\n    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n  }\n\n  function relativeTimeWithPlural(number, withoutSuffix, key) {\n    var format = {\n      'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',\n      'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n      'hh': 'час_часа_часов',\n      'dd': 'день_дня_дней',\n      'MM': 'месяц_месяца_месяцев',\n      'yy': 'год_года_лет'\n    };\n\n    if (key === 'm') {\n      return withoutSuffix ? 'минута' : 'минуту';\n    } else {\n      return number + ' ' + plural(format[key], +number);\n    }\n  }\n\n  var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; // http://new.gramota.ru/spravka/rules/139-prop : § 103\n  // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n  // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\n\n  var ru = moment.defineLocale('ru', {\n    months: {\n      format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n      standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n    },\n    monthsShort: {\n      // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку ?\n      format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n      standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n    },\n    weekdays: {\n      standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n      format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n      isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n    },\n    weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n    monthsParse: monthsParse,\n    longMonthsParse: monthsParse,\n    shortMonthsParse: monthsParse,\n    // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n    monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // копия предыдущего\n    monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n    // полные названия с падежами\n    monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n    // Выражение, которое соотвествует только сокращённым формам\n    monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n    longDateFormat: {\n      LT: 'H:mm',\n      LTS: 'H:mm:ss',\n      L: 'DD.MM.YYYY',\n      LL: 'D MMMM YYYY г.',\n      LLL: 'D MMMM YYYY г., H:mm',\n      LLLL: 'dddd, D MMMM YYYY г., H:mm'\n    },\n    calendar: {\n      sameDay: '[Сегодня, в] LT',\n      nextDay: '[Завтра, в] LT',\n      lastDay: '[Вчера, в] LT',\n      nextWeek: function (now) {\n        if (now.week() !== this.week()) {\n          switch (this.day()) {\n            case 0:\n              return '[В следующее] dddd, [в] LT';\n\n            case 1:\n            case 2:\n            case 4:\n              return '[В следующий] dddd, [в] LT';\n\n            case 3:\n            case 5:\n            case 6:\n              return '[В следующую] dddd, [в] LT';\n          }\n        } else {\n          if (this.day() === 2) {\n            return '[Во] dddd, [в] LT';\n          } else {\n            return '[В] dddd, [в] LT';\n          }\n        }\n      },\n      lastWeek: function (now) {\n        if (now.week() !== this.week()) {\n          switch (this.day()) {\n            case 0:\n              return '[В прошлое] dddd, [в] LT';\n\n            case 1:\n            case 2:\n            case 4:\n              return '[В прошлый] dddd, [в] LT';\n\n            case 3:\n            case 5:\n            case 6:\n              return '[В прошлую] dddd, [в] LT';\n          }\n        } else {\n          if (this.day() === 2) {\n            return '[Во] dddd, [в] LT';\n          } else {\n            return '[В] dddd, [в] LT';\n          }\n        }\n      },\n      sameElse: 'L'\n    },\n    relativeTime: {\n      future: 'через %s',\n      past: '%s назад',\n      s: 'несколько секунд',\n      ss: relativeTimeWithPlural,\n      m: relativeTimeWithPlural,\n      mm: relativeTimeWithPlural,\n      h: 'час',\n      hh: relativeTimeWithPlural,\n      d: 'день',\n      dd: relativeTimeWithPlural,\n      M: 'месяц',\n      MM: relativeTimeWithPlural,\n      y: 'год',\n      yy: relativeTimeWithPlural\n    },\n    meridiemParse: /ночи|утра|дня|вечера/i,\n    isPM: function (input) {\n      return /^(дня|вечера)$/.test(input);\n    },\n    meridiem: function (hour, minute, isLower) {\n      if (hour < 4) {\n        return 'ночи';\n      } else if (hour < 12) {\n        return 'утра';\n      } else if (hour < 17) {\n        return 'дня';\n      } else {\n        return 'вечера';\n      }\n    },\n    dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n    ordinal: function (number, period) {\n      switch (period) {\n        case 'M':\n        case 'd':\n        case 'DDD':\n          return number + '-й';\n\n        case 'D':\n          return number + '-го';\n\n        case 'w':\n        case 'W':\n          return number + '-я';\n\n        default:\n          return number;\n      }\n    },\n    week: {\n      dow: 1,\n      // Monday is the first day of the week.\n      doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n    }\n  });\n  return ru;\n});","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/moment/locale/ru.js"],"names":["global","factory","exports","module","require","define","amd","moment","plural","word","num","forms","split","relativeTimeWithPlural","number","withoutSuffix","key","format","monthsParse","ru","defineLocale","months","standalone","monthsShort","weekdays","isFormat","weekdaysShort","weekdaysMin","longMonthsParse","shortMonthsParse","monthsRegex","monthsShortRegex","monthsStrictRegex","monthsShortStrictRegex","longDateFormat","LT","LTS","L","LL","LLL","LLLL","calendar","sameDay","nextDay","lastDay","nextWeek","now","week","day","lastWeek","sameElse","relativeTime","future","past","s","ss","m","mm","h","hh","d","dd","M","MM","y","yy","meridiemParse","isPM","input","test","meridiem","hour","minute","isLower","dayOfMonthOrdinalParse","ordinal","period","dow","doy"],"mappings":"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","sourcesContent":["//! moment.js locale configuration\n\n;(function (global, factory) {\n   typeof exports === 'object' && typeof module !== 'undefined'\n       && typeof require === 'function' ? factory(require('../moment')) :\n   typeof define === 'function' && define.amd ? define(['../moment'], factory) :\n   factory(global.moment)\n}(this, (function (moment) { 'use strict';\n\n\n    function plural(word, num) {\n        var forms = word.split('_');\n        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);\n    }\n    function relativeTimeWithPlural(number, withoutSuffix, key) {\n        var format = {\n            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',\n            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n            'hh': 'час_часа_часов',\n            'dd': 'день_дня_дней',\n            'MM': 'месяц_месяца_месяцев',\n            'yy': 'год_года_лет'\n        };\n        if (key === 'm') {\n            return withoutSuffix ? 'минута' : 'минуту';\n        }\n        else {\n            return number + ' ' + plural(format[key], +number);\n        }\n    }\n    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];\n\n    // http://new.gramota.ru/spravka/rules/139-prop : § 103\n    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\n    var ru = moment.defineLocale('ru', {\n        months : {\n            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n        },\n        monthsShort : {\n            // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку ?\n            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n        },\n        weekdays : {\n            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n            isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n        },\n        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n        monthsParse : monthsParse,\n        longMonthsParse : monthsParse,\n        shortMonthsParse : monthsParse,\n\n        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n        monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n\n        // копия предыдущего\n        monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n\n        // полные названия с падежами\n        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n\n        // Выражение, которое соотвествует только сокращённым формам\n        monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n        longDateFormat : {\n            LT : 'H:mm',\n            LTS : 'H:mm:ss',\n            L : 'DD.MM.YYYY',\n            LL : 'D MMMM YYYY г.',\n            LLL : 'D MMMM YYYY г., H:mm',\n            LLLL : 'dddd, D MMMM YYYY г., H:mm'\n        },\n        calendar : {\n            sameDay: '[Сегодня, в] LT',\n            nextDay: '[Завтра, в] LT',\n            lastDay: '[Вчера, в] LT',\n            nextWeek: function (now) {\n                if (now.week() !== this.week()) {\n                    switch (this.day()) {\n                        case 0:\n                            return '[В следующее] dddd, [в] LT';\n                        case 1:\n                        case 2:\n                        case 4:\n                            return '[В следующий] dddd, [в] LT';\n                        case 3:\n                        case 5:\n                        case 6:\n                            return '[В следующую] dddd, [в] LT';\n                    }\n                } else {\n                    if (this.day() === 2) {\n                        return '[Во] dddd, [в] LT';\n                    } else {\n                        return '[В] dddd, [в] LT';\n                    }\n                }\n            },\n            lastWeek: function (now) {\n                if (now.week() !== this.week()) {\n                    switch (this.day()) {\n                        case 0:\n                            return '[В прошлое] dddd, [в] LT';\n                        case 1:\n                        case 2:\n                        case 4:\n                            return '[В прошлый] dddd, [в] LT';\n                        case 3:\n                        case 5:\n                        case 6:\n                            return '[В прошлую] dddd, [в] LT';\n                    }\n                } else {\n                    if (this.day() === 2) {\n                        return '[Во] dddd, [в] LT';\n                    } else {\n                        return '[В] dddd, [в] LT';\n                    }\n                }\n            },\n            sameElse: 'L'\n        },\n        relativeTime : {\n            future : 'через %s',\n            past : '%s назад',\n            s : 'несколько секунд',\n            ss : relativeTimeWithPlural,\n            m : relativeTimeWithPlural,\n            mm : relativeTimeWithPlural,\n            h : 'час',\n            hh : relativeTimeWithPlural,\n            d : 'день',\n            dd : relativeTimeWithPlural,\n            M : 'месяц',\n            MM : relativeTimeWithPlural,\n            y : 'год',\n            yy : relativeTimeWithPlural\n        },\n        meridiemParse: /ночи|утра|дня|вечера/i,\n        isPM : function (input) {\n            return /^(дня|вечера)$/.test(input);\n        },\n        meridiem : function (hour, minute, isLower) {\n            if (hour < 4) {\n                return 'ночи';\n            } else if (hour < 12) {\n                return 'утра';\n            } else if (hour < 17) {\n                return 'дня';\n            } else {\n                return 'вечера';\n            }\n        },\n        dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n        ordinal: function (number, period) {\n            switch (period) {\n                case 'M':\n                case 'd':\n                case 'DDD':\n                    return number + '-й';\n                case 'D':\n                    return number + '-го';\n                case 'w':\n                case 'W':\n                    return number + '-я';\n                default:\n                    return number;\n            }\n        },\n        week : {\n            dow : 1, // Monday is the first day of the week.\n            doy : 4  // The week that contains Jan 4th is the first week of the year.\n        }\n    });\n\n    return ru;\n\n})));\n"]},"metadata":{},"sourceType":"script"}