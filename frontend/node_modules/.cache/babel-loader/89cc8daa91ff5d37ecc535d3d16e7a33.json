{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*\n  Expose functions.\n*/\nmodule.exports = {\n  toJalaali: toJalaali,\n  toGregorian: toGregorian,\n  isValidJalaaliDate: isValidJalaaliDate,\n  isLeapJalaaliYear: isLeapJalaaliYear,\n  jalaaliMonthLength: jalaaliMonthLength,\n  jalCal: jalCal,\n  j2d: j2d,\n  d2j: d2j,\n  g2d: g2d,\n  d2g: d2g,\n  jalaaliToDateObject: jalaaliToDateObject,\n  jalaaliWeek: jalaaliWeek\n};\n/*\n  Jalaali years starting the 33-year rule.\n*/\n\nvar breaks = [-61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210, 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178];\n/*\n  Converts a Gregorian date to Jalaali.\n*/\n\nfunction toJalaali(gy, gm, gd) {\n  if (Object.prototype.toString.call(gy) === '[object Date]') {\n    gd = gy.getDate();\n    gm = gy.getMonth() + 1;\n    gy = gy.getFullYear();\n  }\n\n  return d2j(g2d(gy, gm, gd));\n}\n/*\n  Converts a Jalaali date to Gregorian.\n*/\n\n\nfunction toGregorian(jy, jm, jd) {\n  return d2g(j2d(jy, jm, jd));\n}\n/*\n  Checks whether a Jalaali date is valid or not.\n*/\n\n\nfunction isValidJalaaliDate(jy, jm, jd) {\n  return jy >= -61 && jy <= 3177 && jm >= 1 && jm <= 12 && jd >= 1 && jd <= jalaaliMonthLength(jy, jm);\n}\n/*\n  Is this a leap year or not?\n*/\n\n\nfunction isLeapJalaaliYear(jy) {\n  return jalCalLeap(jy) === 0;\n}\n/*\n  Number of days in a given month in a Jalaali year.\n*/\n\n\nfunction jalaaliMonthLength(jy, jm) {\n  if (jm <= 6) return 31;\n  if (jm <= 11) return 30;\n  if (isLeapJalaaliYear(jy)) return 30;\n  return 29;\n}\n/*\n    This function determines if the Jalaali (Persian) year is\n    leap (366-day long) or is the common year (365 days)\n\n    @param jy Jalaali calendar year (-61 to 3177)\n    @returns number of years since the last leap year (0 to 4)\n */\n\n\nfunction jalCalLeap(jy) {\n  var bl = breaks.length,\n      jp = breaks[0],\n      jm,\n      jump,\n      leap,\n      n,\n      i;\n  if (jy < jp || jy >= breaks[bl - 1]) throw new Error('Invalid Jalaali year ' + jy);\n\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i];\n    jump = jm - jp;\n    if (jy < jm) break;\n    jp = jm;\n  }\n\n  n = jy - jp;\n  if (jump - n < 6) n = n - jump + div(jump + 4, 33) * 33;\n  leap = mod(mod(n + 1, 33) - 1, 4);\n\n  if (leap === -1) {\n    leap = 4;\n  }\n\n  return leap;\n}\n/*\n  This function determines if the Jalaali (Persian) year is\n  leap (366-day long) or is the common year (365 days), and\n  finds the day in March (Gregorian calendar) of the first\n  day of the Jalaali year (jy).\n\n  @param jy Jalaali calendar year (-61 to 3177)\n  @param withoutLeap when don't need leap (true or false) default is false\n  @return\n    leap: number of years since the last leap year (0 to 4)\n    gy: Gregorian year of the beginning of Jalaali year\n    march: the March day of Farvardin the 1st (1st day of jy)\n  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n  @see: http://www.fourmilab.ch/documents/calendar/\n*/\n\n\nfunction jalCal(jy, withoutLeap) {\n  var bl = breaks.length,\n      gy = jy + 621,\n      leapJ = -14,\n      jp = breaks[0],\n      jm,\n      jump,\n      leap,\n      leapG,\n      march,\n      n,\n      i;\n  if (jy < jp || jy >= breaks[bl - 1]) throw new Error('Invalid Jalaali year ' + jy); // Find the limiting years for the Jalaali year jy.\n\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i];\n    jump = jm - jp;\n    if (jy < jm) break;\n    leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);\n    jp = jm;\n  }\n\n  n = jy - jp; // Find the number of leap years from AD 621 to the beginning\n  // of the current Jalaali year in the Persian calendar.\n\n  leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);\n  if (mod(jump, 33) === 4 && jump - n === 4) leapJ += 1; // And the same in the Gregorian calendar (until the year gy).\n\n  leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150; // Determine the Gregorian date of Farvardin the 1st.\n\n  march = 20 + leapJ - leapG; // return with gy and march when we don't need leap\n\n  if (withoutLeap) return {\n    gy: gy,\n    march: march\n  }; // Find how many years have passed since the last leap year.\n\n  if (jump - n < 6) n = n - jump + div(jump + 4, 33) * 33;\n  leap = mod(mod(n + 1, 33) - 1, 4);\n\n  if (leap === -1) {\n    leap = 4;\n  }\n\n  return {\n    leap: leap,\n    gy: gy,\n    march: march\n  };\n}\n/*\n  Converts a date of the Jalaali calendar to the Julian Day number.\n\n  @param jy Jalaali year (1 to 3100)\n  @param jm Jalaali month (1 to 12)\n  @param jd Jalaali day (1 to 29/31)\n  @return Julian Day number\n*/\n\n\nfunction j2d(jy, jm, jd) {\n  var r = jalCal(jy, true);\n  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;\n}\n/*\n  Converts the Julian Day number to a date in the Jalaali calendar.\n\n  @param jdn Julian Day number\n  @return\n    jy: Jalaali year (1 to 3100)\n    jm: Jalaali month (1 to 12)\n    jd: Jalaali day (1 to 29/31)\n*/\n\n\nfunction d2j(jdn) {\n  var gy = d2g(jdn).gy // Calculate Gregorian year (gy).\n  ,\n      jy = gy - 621,\n      r = jalCal(jy, false),\n      jdn1f = g2d(gy, 3, r.march),\n      jd,\n      jm,\n      k; // Find number of days that passed since 1 Farvardin.\n\n  k = jdn - jdn1f;\n\n  if (k >= 0) {\n    if (k <= 185) {\n      // The first 6 months.\n      jm = 1 + div(k, 31);\n      jd = mod(k, 31) + 1;\n      return {\n        jy: jy,\n        jm: jm,\n        jd: jd\n      };\n    } else {\n      // The remaining months.\n      k -= 186;\n    }\n  } else {\n    // Previous Jalaali year.\n    jy -= 1;\n    k += 179;\n    if (r.leap === 1) k += 1;\n  }\n\n  jm = 7 + div(k, 30);\n  jd = mod(k, 30) + 1;\n  return {\n    jy: jy,\n    jm: jm,\n    jd: jd\n  };\n}\n/*\n  Calculates the Julian Day number from Gregorian or Julian\n  calendar dates. This integer number corresponds to the noon of\n  the date (i.e. 12 hours of Universal Time).\n  The procedure was tested to be good since 1 March, -100100 (of both\n  calendars) up to a few million years into the future.\n\n  @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n  @param gm Calendar month (1 to 12)\n  @param gd Calendar day of the month (1 to 28/29/30/31)\n  @return Julian Day number\n*/\n\n\nfunction g2d(gy, gm, gd) {\n  var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;\n  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;\n  return d;\n}\n/*\n  Calculates Gregorian and Julian calendar dates from the Julian Day number\n  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n  calendars) to some millions years ahead of the present.\n\n  @param jdn Julian Day number\n  @return\n    gy: Calendar year (years BC numbered 0, -1, -2, ...)\n    gm: Calendar month (1 to 12)\n    gd: Calendar day of the month M (1 to 28/29/30/31)\n*/\n\n\nfunction d2g(jdn) {\n  var j, i, gd, gm, gy;\n  j = 4 * jdn + 139361631;\n  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;\n  i = div(mod(j, 1461), 4) * 5 + 308;\n  gd = div(mod(i, 153), 5) + 1;\n  gm = mod(div(i, 153), 12) + 1;\n  gy = div(j, 1461) - 100100 + div(8 - gm, 6);\n  return {\n    gy: gy,\n    gm: gm,\n    gd: gd\n  };\n}\n/**\n * Return Saturday and Friday day of current week(week start in Saturday)\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @returns Saturday and Friday of current week\n */\n\n\nfunction jalaaliWeek(jy, jm, jd) {\n  const dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();\n  let startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek + 1);\n  let endDayDifference = 6 + startDayDifference;\n  return {\n    saturday: d2j(j2d(jy, jm, jd + startDayDifference)),\n    friday: d2j(j2d(jy, jm, jd + endDayDifference))\n  };\n}\n/**\n * Convert Jalaali calendar dates to javascript Date object\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @param {number} [h] hours\n * @param {number} [m] minutes\n * @param {number} [s] seconds\n * @param {number} [ms] milliseconds\n * @returns Date object of the jalaali calendar dates\n */\n\n\nfunction jalaaliToDateObject(jy, jm, jd, h, m, s, ms) {\n  var gregorianCalenderDate = toGregorian(jy, jm, jd);\n  return new Date(gregorianCalenderDate.gy, gregorianCalenderDate.gm - 1, gregorianCalenderDate.gd, h || 0, m || 0, s || 0, ms || 0);\n}\n/*\n  Utility helper functions.\n*/\n\n\nfunction div(a, b) {\n  return ~~(a / b);\n}\n\nfunction mod(a, b) {\n  return a - ~~(a / b) * b;\n}","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/jalaali-js/index.js"],"names":["module","exports","toJalaali","toGregorian","isValidJalaaliDate","isLeapJalaaliYear","jalaaliMonthLength","jalCal","j2d","d2j","g2d","d2g","jalaaliToDateObject","jalaaliWeek","breaks","gy","gm","gd","Object","prototype","toString","call","getDate","getMonth","getFullYear","jy","jm","jd","jalCalLeap","bl","length","jp","jump","leap","n","i","Error","div","mod","withoutLeap","leapJ","leapG","march","r","jdn","jdn1f","k","d","j","dayOfWeek","getDay","startDayDifference","endDayDifference","saturday","friday","h","m","s","ms","gregorianCalenderDate","Date","a","b"],"mappings":"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","sourcesContent":["/*\n  Expose functions.\n*/\nmodule.exports =\n  { toJalaali: toJalaali\n  , toGregorian: toGregorian\n  , isValidJalaaliDate: isValidJalaaliDate\n  , isLeapJalaaliYear: isLeapJalaaliYear\n  , jalaaliMonthLength: jalaaliMonthLength\n  , jalCal: jalCal\n  , j2d: j2d\n  , d2j: d2j\n  , g2d: g2d\n  , d2g: d2g\n  , jalaaliToDateObject: jalaaliToDateObject\n  , jalaaliWeek: jalaaliWeek\n  }\n\n/*\n  Jalaali years starting the 33-year rule.\n*/\nvar breaks =  [ -61, 9, 38, 199, 426, 686, 756, 818, 1111, 1181, 1210\n  , 1635, 2060, 2097, 2192, 2262, 2324, 2394, 2456, 3178\n  ]\n\n/*\n  Converts a Gregorian date to Jalaali.\n*/\nfunction toJalaali(gy, gm, gd) {\n  if (Object.prototype.toString.call(gy) === '[object Date]') {\n    gd = gy.getDate()\n    gm = gy.getMonth() + 1\n    gy = gy.getFullYear()\n  }\n  return d2j(g2d(gy, gm, gd))\n}\n\n/*\n  Converts a Jalaali date to Gregorian.\n*/\nfunction toGregorian(jy, jm, jd) {\n  return d2g(j2d(jy, jm, jd))\n}\n\n/*\n  Checks whether a Jalaali date is valid or not.\n*/\nfunction isValidJalaaliDate(jy, jm, jd) {\n  return  jy >= -61 && jy <= 3177 &&\n          jm >= 1 && jm <= 12 &&\n          jd >= 1 && jd <= jalaaliMonthLength(jy, jm)\n}\n\n/*\n  Is this a leap year or not?\n*/\nfunction isLeapJalaaliYear(jy) {\n  return jalCalLeap(jy) === 0\n}\n\n/*\n  Number of days in a given month in a Jalaali year.\n*/\nfunction jalaaliMonthLength(jy, jm) {\n  if (jm <= 6) return 31\n  if (jm <= 11) return 30\n  if (isLeapJalaaliYear(jy)) return 30\n  return 29\n}\n\n/*\n    This function determines if the Jalaali (Persian) year is\n    leap (366-day long) or is the common year (365 days)\n\n    @param jy Jalaali calendar year (-61 to 3177)\n    @returns number of years since the last leap year (0 to 4)\n */\nfunction jalCalLeap(jy) {  \n  var bl = breaks.length        \n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap    \n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n    \n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break    \n    jp = jm\n  }\n  n = jy - jp\n  \n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }  \n \n  return leap\n}\n\n/*\n  This function determines if the Jalaali (Persian) year is\n  leap (366-day long) or is the common year (365 days), and\n  finds the day in March (Gregorian calendar) of the first\n  day of the Jalaali year (jy).\n\n  @param jy Jalaali calendar year (-61 to 3177)\n  @param withoutLeap when don't need leap (true or false) default is false\n  @return\n    leap: number of years since the last leap year (0 to 4)\n    gy: Gregorian year of the beginning of Jalaali year\n    march: the March day of Farvardin the 1st (1st day of jy)\n  @see: http://www.astro.uni.torun.pl/~kb/Papers/EMP/PersianC-EMP.htm\n  @see: http://www.fourmilab.ch/documents/calendar/\n*/\nfunction jalCal(jy, withoutLeap) {  \n  var bl = breaks.length\n    , gy = jy + 621\n    , leapJ = -14\n    , jp = breaks[0]\n    , jm\n    , jump\n    , leap\n    , leapG\n    , march\n    , n\n    , i\n\n  if (jy < jp || jy >= breaks[bl - 1])\n    throw new Error('Invalid Jalaali year ' + jy)\n\n  // Find the limiting years for the Jalaali year jy.\n  for (i = 1; i < bl; i += 1) {\n    jm = breaks[i]\n    jump = jm - jp\n    if (jy < jm)\n      break\n    leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4)\n    jp = jm\n  }\n  n = jy - jp\n\n  // Find the number of leap years from AD 621 to the beginning\n  // of the current Jalaali year in the Persian calendar.\n  leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4)\n  if (mod(jump, 33) === 4 && jump - n === 4)\n    leapJ += 1\n\n  // And the same in the Gregorian calendar (until the year gy).\n  leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150\n\n  // Determine the Gregorian date of Farvardin the 1st.\n  march = 20 + leapJ - leapG\n\n  // return with gy and march when we don't need leap\n  if (withoutLeap) return { gy: gy, march: march };\n\n\n  // Find how many years have passed since the last leap year.\n  if (jump - n < 6)\n    n = n - jump + div(jump + 4, 33) * 33\n  leap = mod(mod(n + 1, 33) - 1, 4)\n  if (leap === -1) {\n    leap = 4\n  }  \n\n  return  { leap: leap\n          , gy: gy\n          , march: march\n          }\n}\n\n/*\n  Converts a date of the Jalaali calendar to the Julian Day number.\n\n  @param jy Jalaali year (1 to 3100)\n  @param jm Jalaali month (1 to 12)\n  @param jd Jalaali day (1 to 29/31)\n  @return Julian Day number\n*/\nfunction j2d(jy, jm, jd) {\n  var r = jalCal(jy, true)\n  return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1\n}\n\n/*\n  Converts the Julian Day number to a date in the Jalaali calendar.\n\n  @param jdn Julian Day number\n  @return\n    jy: Jalaali year (1 to 3100)\n    jm: Jalaali month (1 to 12)\n    jd: Jalaali day (1 to 29/31)\n*/\nfunction d2j(jdn) {\n  var gy = d2g(jdn).gy // Calculate Gregorian year (gy).\n    , jy = gy - 621\n    , r = jalCal(jy, false)\n    , jdn1f = g2d(gy, 3, r.march)\n    , jd\n    , jm\n    , k\n\n  // Find number of days that passed since 1 Farvardin.\n  k = jdn - jdn1f\n  if (k >= 0) {\n    if (k <= 185) {\n      // The first 6 months.\n      jm = 1 + div(k, 31)\n      jd = mod(k, 31) + 1\n      return  { jy: jy\n              , jm: jm\n              , jd: jd\n              }\n    } else {\n      // The remaining months.\n      k -= 186\n    }\n  } else {\n    // Previous Jalaali year.\n    jy -= 1\n    k += 179\n    if (r.leap === 1)\n      k += 1\n  }\n  jm = 7 + div(k, 30)\n  jd = mod(k, 30) + 1\n  return  { jy: jy\n          , jm: jm\n          , jd: jd\n          }\n}\n\n/*\n  Calculates the Julian Day number from Gregorian or Julian\n  calendar dates. This integer number corresponds to the noon of\n  the date (i.e. 12 hours of Universal Time).\n  The procedure was tested to be good since 1 March, -100100 (of both\n  calendars) up to a few million years into the future.\n\n  @param gy Calendar year (years BC numbered 0, -1, -2, ...)\n  @param gm Calendar month (1 to 12)\n  @param gd Calendar day of the month (1 to 28/29/30/31)\n  @return Julian Day number\n*/\nfunction g2d(gy, gm, gd) {\n  var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4)\n      + div(153 * mod(gm + 9, 12) + 2, 5)\n      + gd - 34840408\n  d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752\n  return d\n}\n\n/*\n  Calculates Gregorian and Julian calendar dates from the Julian Day number\n  (jdn) for the period since jdn=-34839655 (i.e. the year -100100 of both\n  calendars) to some millions years ahead of the present.\n\n  @param jdn Julian Day number\n  @return\n    gy: Calendar year (years BC numbered 0, -1, -2, ...)\n    gm: Calendar month (1 to 12)\n    gd: Calendar day of the month M (1 to 28/29/30/31)\n*/\nfunction d2g(jdn) {\n  var j\n    , i\n    , gd\n    , gm\n    , gy\n  j = 4 * jdn + 139361631\n  j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908\n  i = div(mod(j, 1461), 4) * 5 + 308\n  gd = div(mod(i, 153), 5) + 1\n  gm = mod(div(i, 153), 12) + 1\n  gy = div(j, 1461) - 100100 + div(8 - gm, 6)\n  return  { gy: gy\n          , gm: gm\n          , gd: gd\n          }\n}\n\n/**\n * Return Saturday and Friday day of current week(week start in Saturday)\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @returns Saturday and Friday of current week\n */\nfunction jalaaliWeek(jy, jm, jd) {\n  const dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();\n\n  let startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek+1);\n  let endDayDifference = 6+startDayDifference;\n\n  return {\n    saturday: d2j(j2d(jy, jm, jd+startDayDifference)),\n    friday: d2j(j2d(jy, jm, jd+endDayDifference))\n  }\n}\n\n/**\n * Convert Jalaali calendar dates to javascript Date object\n * @param {number} jy jalaali year\n * @param {number} jm jalaali month\n * @param {number} jd jalaali day\n * @param {number} [h] hours\n * @param {number} [m] minutes\n * @param {number} [s] seconds\n * @param {number} [ms] milliseconds\n * @returns Date object of the jalaali calendar dates\n */\nfunction jalaaliToDateObject(\n  jy,\n  jm,\n  jd,\n  h,\n  m,\n  s,\n  ms\n) {\n  var gregorianCalenderDate = toGregorian(jy, jm, jd);\n\n  return new Date(\n    gregorianCalenderDate.gy,\n    gregorianCalenderDate.gm - 1,\n    gregorianCalenderDate.gd,\n    h || 0,\n    m || 0,\n    s || 0,\n    ms || 0\n  );\n}\n\n/*\n  Utility helper functions.\n*/\n\nfunction div(a, b) {\n  return ~~(a / b)\n}\n\nfunction mod(a, b) {\n  return a - ~~(a / b) * b\n}\n"]},"metadata":{},"sourceType":"script"}