{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Checks if the passed value is numeric one. For example these values (passed as string or number)\n * are considered as numeric values:\n *  - 0.001\n *  - .001\n *  - - 10000\n *  - 10000\n *  - 1e+26\n *  - 22e-26\n *  - .45e+26\n *  - 0xabcdef (hex)\n *  - 0x1 (hex)\n *\n * @param {*} value The value to check.\n * @param {string[]} additionalDelimiters An additional delimiters to be used while checking the numeric value.\n * @returns {boolean}\n */\n\n\nexport function isNumeric(value) {\n  var additionalDelimiters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var type = _typeof(value);\n\n  if (type === 'number') {\n    return !isNaN(value) && isFinite(value);\n  } else if (type === 'string') {\n    if (value.length === 0) {\n      return false;\n    } else if (value.length === 1) {\n      return /\\d/.test(value);\n    }\n\n    var delimiter = Array.from(new Set(['.'].concat(_toConsumableArray(additionalDelimiters)))).map(function (d) {\n      return \"\\\\\".concat(d);\n    }).join('|');\n    return new RegExp(\"^[+-]?\\\\s*(((\".concat(delimiter, \")?\\\\d+((\").concat(delimiter, \")\\\\d+)?(e[+-]?\\\\d+)?)|(0x[a-f\\\\d]+))$\"), 'i').test(value.trim());\n  } else if (type === 'object') {\n    return !!value && typeof value.valueOf() === 'number' && !(value instanceof Date);\n  }\n\n  return false;\n}\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\n/**\n * Checks if the passed value is numeric-like value. The helper returns `true` for the same\n * values as for the `isNumeric` function plus `true` for numbers delimited by comma.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\n\nexport function isNumericLike(value) {\n  return isNumeric(value, [',']);\n}\n/**\n * A specialized version of `.forEach` defined by ranges.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEach(rangeFrom, rangeTo, iteratee) {\n  var index = -1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = rangeFrom;\n  } else {\n    index = rangeFrom - 1;\n  }\n  /* eslint-disable-next-line no-plusplus */\n\n\n  while (++index <= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * A specialized version of `.forEach` defined by ranges iterable in reverse order.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEachReverse(rangeFrom, rangeTo, iteratee) {\n  var index = rangeFrom + 1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = 0;\n  }\n  /* eslint-disable-next-line no-plusplus */\n\n\n  while (--index >= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * Calculate value from percent.\n *\n * @param {number} value Base value from percent will be calculated.\n * @param {string|number} percent Can be number or string (eq. `'33%'`).\n * @returns {number}\n */\n\nexport function valueAccordingPercent(value, percent) {\n  percent = parseInt(percent.toString().replace('%', ''), 10);\n  percent = isNaN(percent) ? 0 : percent;\n  return parseInt(value * percent / 100, 10);\n}","map":{"version":3,"sources":["/Users/shehrozkapoor/Desktop/FIRST_CARE/firstcare-frontend/node_modules/handsontable/helpers/number.mjs"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","_typeof","obj","isNumeric","value","additionalDelimiters","arguments","undefined","type","isNaN","isFinite","delimiter","Set","concat","map","d","join","RegExp","trim","valueOf","Date","isNumericLike","rangeEach","rangeFrom","rangeTo","iteratee","index","rangeEachReverse","valueAccordingPercent","percent","parseInt","replace"],"mappings":"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","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Checks if the passed value is numeric one. For example these values (passed as string or number)\n * are considered as numeric values:\n *  - 0.001\n *  - .001\n *  - - 10000\n *  - 10000\n *  - 1e+26\n *  - 22e-26\n *  - .45e+26\n *  - 0xabcdef (hex)\n *  - 0x1 (hex)\n *\n * @param {*} value The value to check.\n * @param {string[]} additionalDelimiters An additional delimiters to be used while checking the numeric value.\n * @returns {boolean}\n */\nexport function isNumeric(value) {\n  var additionalDelimiters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var type = _typeof(value);\n\n  if (type === 'number') {\n    return !isNaN(value) && isFinite(value);\n  } else if (type === 'string') {\n    if (value.length === 0) {\n      return false;\n    } else if (value.length === 1) {\n      return /\\d/.test(value);\n    }\n\n    var delimiter = Array.from(new Set(['.'].concat(_toConsumableArray(additionalDelimiters)))).map(function (d) {\n      return \"\\\\\".concat(d);\n    }).join('|');\n    return new RegExp(\"^[+-]?\\\\s*(((\".concat(delimiter, \")?\\\\d+((\").concat(delimiter, \")\\\\d+)?(e[+-]?\\\\d+)?)|(0x[a-f\\\\d]+))$\"), 'i').test(value.trim());\n  } else if (type === 'object') {\n    return !!value && typeof value.valueOf() === 'number' && !(value instanceof Date);\n  }\n\n  return false;\n}\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\n/**\n * Checks if the passed value is numeric-like value. The helper returns `true` for the same\n * values as for the `isNumeric` function plus `true` for numbers delimited by comma.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\n\nexport function isNumericLike(value) {\n  return isNumeric(value, [',']);\n}\n/**\n * A specialized version of `.forEach` defined by ranges.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEach(rangeFrom, rangeTo, iteratee) {\n  var index = -1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = rangeFrom;\n  } else {\n    index = rangeFrom - 1;\n  }\n  /* eslint-disable-next-line no-plusplus */\n\n\n  while (++index <= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * A specialized version of `.forEach` defined by ranges iterable in reverse order.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\n\nexport function rangeEachReverse(rangeFrom, rangeTo, iteratee) {\n  var index = rangeFrom + 1;\n\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = 0;\n  }\n  /* eslint-disable-next-line no-plusplus */\n\n\n  while (--index >= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n/**\n * Calculate value from percent.\n *\n * @param {number} value Base value from percent will be calculated.\n * @param {string|number} percent Can be number or string (eq. `'33%'`).\n * @returns {number}\n */\n\nexport function valueAccordingPercent(value, percent) {\n  percent = parseInt(percent.toString().replace('%', ''), 10);\n  percent = isNaN(percent) ? 0 : percent;\n  return parseInt(value * percent / 100, 10);\n}"]},"metadata":{},"sourceType":"module"}