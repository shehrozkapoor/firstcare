function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import "core-js/modules/es.array.concat.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.reflect.construct.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
export var SimpleArithmerticPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(SimpleArithmerticPlugin, _FunctionPlugin);

  var _super = _createSuper(SimpleArithmerticPlugin);

  function SimpleArithmerticPlugin() {
    _classCallCheck(this, SimpleArithmerticPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(SimpleArithmerticPlugin, [{
    key: "add",
    value: function add(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.ADD'), this.arithmeticHelper.addWithEpsilon);
    }
  }, {
    key: "concat",
    value: function concat(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.CONCAT'), this.arithmeticHelper.concat);
    }
  }, {
    key: "divide",
    value: function divide(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.DIVIDE'), this.arithmeticHelper.divide);
    }
  }, {
    key: "eq",
    value: function eq(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.EQ'), this.arithmeticHelper.eq);
    }
  }, {
    key: "gt",
    value: function gt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.GT'), this.arithmeticHelper.gt);
    }
  }, {
    key: "gte",
    value: function gte(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.GTE'), this.arithmeticHelper.geq);
    }
  }, {
    key: "lt",
    value: function lt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.LT'), this.arithmeticHelper.lt);
    }
  }, {
    key: "lte",
    value: function lte(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.LTE'), this.arithmeticHelper.leq);
    }
  }, {
    key: "minus",
    value: function minus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.MINUS'), this.arithmeticHelper.subtract);
    }
  }, {
    key: "multiply",
    value: function multiply(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.MULTIPLY'), this.arithmeticHelper.multiply);
    }
  }, {
    key: "ne",
    value: function ne(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.NE'), this.arithmeticHelper.neq);
    }
  }, {
    key: "pow",
    value: function pow(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.POW'), this.arithmeticHelper.pow);
    }
  }, {
    key: "uminus",
    value: function uminus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UMINUS'), this.arithmeticHelper.unaryMinus);
    }
  }, {
    key: "upercent",
    value: function upercent(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UNARY_PERCENT'), this.arithmeticHelper.unaryPercent);
    }
  }, {
    key: "uplus",
    value: function uplus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UPLUS'), this.arithmeticHelper.unaryPlus);
    }
  }]);

  return SimpleArithmerticPlugin;
}(FunctionPlugin);
SimpleArithmerticPlugin.implementedFunctions = {
  'HF.ADD': {
    method: 'add',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.CONCAT': {
    method: 'concat',
    parameters: [{
      argumentType: ArgumentTypes.STRING,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.STRING,
      passSubtype: true
    }]
  },
  'HF.DIVIDE': {
    method: 'divide',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.EQ': {
    method: 'eq',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.GT': {
    method: 'gt',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.GTE': {
    method: 'gte',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.LT': {
    method: 'lt',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.LTE': {
    method: 'lte',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.MINUS': {
    method: 'minus',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.MULTIPLY': {
    method: 'multiply',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.NE': {
    method: 'ne',
    parameters: [{
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.POW': {
    method: 'pow',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UMINUS': {
    method: 'uminus',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UNARY_PERCENT': {
    method: 'upercent',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UPLUS': {
    method: 'uplus',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  }
};