function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import "core-js/modules/es.math.trunc.js";
import "core-js/modules/es.number.max-safe-integer.js";
import "core-js/modules/es.number.constructor.js";
import "core-js/modules/es.array.reverse.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.reflect.construct.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/es.regexp.exec.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { CellError, ErrorType } from '../../Cell';
import { ErrorMessage } from '../../error-message';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';
export var MathPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MathPlugin, _FunctionPlugin);

  var _super = _createSuper(MathPlugin);

  function MathPlugin() {
    _classCallCheck(this, MathPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(MathPlugin, [{
    key: "fact",
    value: function fact(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FACT'), function (arg) {
        arg = Math.trunc(arg);
        var ret = 1;

        for (var i = 1; i <= arg; i++) {
          ret *= i;
        }

        return ret;
      });
    }
  }, {
    key: "factdouble",
    value: function factdouble(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FACTDOUBLE'), function (arg) {
        arg = Math.trunc(arg);
        var ret = 1;

        for (var i = arg; i >= 1; i -= 2) {
          ret *= i;
        }

        return ret;
      });
    }
  }, {
    key: "combin",
    value: function combin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COMBIN'), function (n, m) {
        if (m > n) {
          return new CellError(ErrorType.NUM, ErrorMessage.WrongOrder);
        }

        n = Math.trunc(n);
        m = Math.trunc(m);
        return _combin(n, m);
      });
    }
  }, {
    key: "combina",
    value: function combina(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COMBINA'), function (n, m) {
        n = Math.trunc(n);
        m = Math.trunc(m);

        if (n + m - 1 >= 1030) {
          //Product #2 does not enforce this
          return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);
        }

        if (n === 0 && m === 0) {
          return 1;
        }

        return _combin(n + m - 1, m);
      });
    }
  }, {
    key: "gcd",
    value: function gcd(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('GCD'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var processedArgs = _this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);

        if (processedArgs instanceof CellError) {
          return processedArgs;
        }

        var ret = 0;

        var _iterator = _createForOfIteratorHelper(processedArgs),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var val = _step.value;

            if (val < 0) {
              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);
            }

            ret = binaryGCD(ret, Math.trunc(val));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (ret > Number.MAX_SAFE_INTEGER) {
          //inconsistency with product #1
          return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);
        }

        return ret;
      });
    }
  }, {
    key: "lcm",
    value: function lcm(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('LCM'), function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var processedArgs = _this2.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);

        if (processedArgs instanceof CellError) {
          return processedArgs;
        }

        var ret = 1;

        var _iterator2 = _createForOfIteratorHelper(processedArgs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var val = _step2.value;

            if (val < 0) {
              return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);
            }

            ret = binaryLCM(ret, Math.trunc(val));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (ret > Number.MAX_SAFE_INTEGER) {
          //inconsistency with product #1
          return new CellError(ErrorType.NUM, ErrorMessage.ValueLarge);
        }

        return ret;
      });
    }
  }, {
    key: "mround",
    value: function mround(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MROUND'), function (nom, denom) {
        if (denom === 0) {
          return 0;
        }

        if (nom > 0 && denom < 0 || nom < 0 && denom > 0) {
          return new CellError(ErrorType.NUM, ErrorMessage.DistinctSigns);
        }

        return Math.round(nom / denom) * denom;
      });
    }
  }, {
    key: "multinomial",
    value: function multinomial(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MULTINOMIAL'), function () {
        var n = 0;
        var ans = 1;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        for (var _i = 0, _args = args; _i < _args.length; _i++) {
          var arg = _args[_i];

          if (arg < 0) {
            return new CellError(ErrorType.NUM, ErrorMessage.ValueSmall);
          }

          arg = Math.trunc(arg);

          for (var i = 1; i <= arg; i++) {
            ans *= (n + i) / i;
          }

          n += arg;
        }

        return Math.round(ans);
      });
    }
  }, {
    key: "quotient",
    value: function quotient(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('QUOTIENT'), function (nom, denom) {
        if (denom === 0) {
          return new CellError(ErrorType.DIV_BY_ZERO);
        }

        return Math.trunc(nom / denom);
      });
    }
  }, {
    key: "seriessum",
    value: function seriessum(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('SERIESSUM'), function (x, n, m, range) {
        var coefs = _this3.arithmeticHelper.manyToOnlyNumbersDropNulls(range.valuesFromTopLeftCorner());

        if (coefs instanceof CellError) {
          return coefs;
        }

        var ret = 0;
        coefs.reverse();

        var _iterator3 = _createForOfIteratorHelper(coefs),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var coef = _step3.value;
            ret *= Math.pow(x, m);
            ret += coef;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return ret * Math.pow(x, n);
      });
    }
  }, {
    key: "sign",
    value: function sign(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SIGN'), function (arg) {
        if (arg > 0) {
          return 1;
        } else if (arg < 0) {
          return -1;
        } else {
          return 0;
        }
      });
    }
  }, {
    key: "sumx2my2",
    value: function sumx2my2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMX2MY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof CellError) {
            return valX;
          }

          if (valY instanceof CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX, 2) - Math.pow(valY, 2);
          }
        }

        return ret;
      });
    }
  }, {
    key: "sumx2py2",
    value: function sumx2py2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMX2PY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof CellError) {
            return valX;
          }

          if (valY instanceof CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX, 2) + Math.pow(valY, 2);
          }
        }

        return ret;
      });
    }
  }, {
    key: "sumxmy2",
    value: function sumxmy2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMXMY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new CellError(ErrorType.NA, ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof CellError) {
            return valX;
          }

          if (valY instanceof CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX - valY, 2);
          }
        }

        return ret;
      });
    }
  }]);

  return MathPlugin;
}(FunctionPlugin);
MathPlugin.implementedFunctions = {
  'FACT': {
    method: 'fact',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 170
    }]
  },
  'FACTDOUBLE': {
    method: 'factdouble',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 288
    }]
  },
  'COMBIN': {
    method: 'combin',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0,
      lessThan: 1030
    }, {
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'COMBINA': {
    method: 'combina',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'GCD': {
    method: 'gcd',
    parameters: [{
      argumentType: ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'LCM': {
    method: 'lcm',
    parameters: [{
      argumentType: ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MROUND': {
    method: 'mround',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER
    }]
  },
  'MULTINOMIAL': {
    method: 'multinomial',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'QUOTIENT': {
    method: 'quotient',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER
    }]
  },
  'SERIESSUM': {
    method: 'seriessum',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.RANGE
    }]
  },
  'SIGN': {
    method: 'sign',
    parameters: [{
      argumentType: ArgumentTypes.NUMBER
    }]
  },
  'SUMX2MY2': {
    method: 'sumx2my2',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.RANGE
    }]
  },
  'SUMX2PY2': {
    method: 'sumx2py2',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.RANGE
    }]
  },
  'SUMXMY2': {
    method: 'sumxmy2',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.RANGE
    }]
  }
};

function _combin(n, m) {
  if (2 * m > n) {
    m = n - m;
  }

  var ret = 1;

  for (var i = 1; i <= m; i++) {
    ret *= (n - m + i) / i;
  }

  return Math.round(ret);
}

function binaryGCD(a, b) {
  if (a < b) {
    var _ref = [b, a];
    a = _ref[0];
    b = _ref[1];
  }

  while (b > 0) {
    var _ref2 = [b, a % b];
    a = _ref2[0];
    b = _ref2[1];
  }

  return a;
}

function binaryLCM(a, b) {
  if (a === 0 || b === 0) {
    return 0;
  }

  return a * (b / binaryGCD(a, b));
}