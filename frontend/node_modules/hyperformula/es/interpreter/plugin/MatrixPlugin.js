function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import "core-js/modules/es.array.map.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.reflect.construct.js";
import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";
import "core-js/modules/es.array.slice.js";
import "core-js/modules/es.function.name.js";
import "core-js/modules/es.array.from.js";
import "core-js/modules/es.regexp.exec.js";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
import { ArraySize } from '../../ArraySize';
import { CellError, ErrorType } from '../../Cell';
import { ErrorMessage } from '../../error-message';
import { AstNodeType } from '../../parser';
import { InterpreterState } from '../InterpreterState';
import { SimpleRangeValue } from '../SimpleRangeValue';
import { ArgumentTypes, FunctionPlugin } from './FunctionPlugin';

function arraySizeForMultiplication(leftArraySize, rightArraySize) {
  return new ArraySize(rightArraySize.width, leftArraySize.height);
}

function arraySizeForPoolFunction(inputArray, windowSize, stride) {
  return new ArraySize(1 + (inputArray.width - windowSize) / stride, 1 + (inputArray.height - windowSize) / stride);
}

export var MatrixPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MatrixPlugin, _FunctionPlugin);

  var _super = _createSuper(MatrixPlugin);

  function MatrixPlugin(interpreter) {
    var _this;

    _classCallCheck(this, MatrixPlugin);

    _this = _super.call(this, interpreter);

    _this.createCpuKernel = function (kernel, outputSize) {
      return function () {
        var result = [];

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        for (var y = 0; y < outputSize.height; ++y) {
          result.push([]);

          for (var x = 0; x < outputSize.width; ++x) {
            result[y][x] = kernel.apply({
              thread: {
                x: x,
                y: y
              }
            }, args);
          }
        }

        return result;
      };
    };

    _this.createGpuJsKernel = function (kernel, outputSize) {
      return _this.interpreter.getGpuInstance().createKernel(kernel).setPrecision('unsigned').setOutput([outputSize.width, outputSize.height]);
    };

    if (_this.config.gpujs === undefined) {
      _this.createKernel = _this.createCpuKernel;
    } else {
      _this.createKernel = _this.createGpuJsKernel;
    }

    return _this;
  }

  _createClass(MatrixPlugin, [{
    key: "mmult",
    value: function mmult(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('MMULT'), function (leftMatrix, rightMatrix) {
        if (!leftMatrix.hasOnlyNumbers() || !rightMatrix.hasOnlyNumbers()) {
          return new CellError(ErrorType.VALUE, ErrorMessage.NumberRange);
        }

        if (rightMatrix.height() !== leftMatrix.width()) {
          return new CellError(ErrorType.VALUE, ErrorMessage.ArrayDimensions);
        }

        var outputSize = arraySizeForMultiplication(leftMatrix.size, rightMatrix.size);

        var result = _this2.createKernel(function (a, b, width) {
          var sum = 0;

          for (var i = 0; i < width; ++i) {
            sum += a[this.thread.y][i] * b[i][this.thread.x];
          }

          return sum;
        }, outputSize)(leftMatrix.rawNumbers(), rightMatrix.rawNumbers(), leftMatrix.width());

        return SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "mmultArraySize",
    value: function mmultArraySize(ast, state) {
      var _this3 = this;

      if (ast.args.length !== 2) {
        return ArraySize.error();
      }

      var metadata = this.metadata('MMULT');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this3.arraySizeForAst(arg, new InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });

      var _subChecks = _slicedToArray(subChecks, 2),
          left = _subChecks[0],
          right = _subChecks[1];

      return arraySizeForMultiplication(left, right);
    }
  }, {
    key: "maxpool",
    value: function maxpool(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('MAXPOOL'), function (matrix, windowSize) {
        var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windowSize;

        if (!matrix.hasOnlyNumbers()) {
          return new CellError(ErrorType.VALUE, ErrorMessage.NumberRange);
        }

        var outputSize = arraySizeForPoolFunction(matrix.size, windowSize, stride);

        var result = _this4.createKernel(function (a, windowSize, stride) {
          var leftCornerX = this.thread.x * stride;
          var leftCornerY = this.thread.y * stride;
          var currentMax = a[leftCornerY][leftCornerX];

          for (var i = 0; i < windowSize; i++) {
            for (var j = 0; j < windowSize; j++) {
              currentMax = Math.max(currentMax, a[leftCornerY + i][leftCornerX + j]);
            }
          }

          return currentMax;
        }, outputSize)(matrix.rawNumbers(), windowSize, stride);

        return SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "medianpool",
    value: function medianpool(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('MEDIANPOOL'), function (matrix, windowSize) {
        var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windowSize;

        if (!matrix.hasOnlyNumbers()) {
          return new CellError(ErrorType.VALUE, ErrorMessage.NumberRange);
        }

        var outputSize = arraySizeForPoolFunction(matrix.size, windowSize, stride);

        var result = _this5.createKernel(function (a, windowSize, stride) {
          var leftCornerX = this.thread.x * stride;
          var leftCornerY = this.thread.y * stride;
          var currentMax = a[leftCornerY][leftCornerX];

          for (var i = 0; i < windowSize; i++) {
            for (var j = 0; j < windowSize; j++) {
              currentMax = Math.max(currentMax, a[leftCornerY + i][leftCornerX + j]);
            }
          }

          var currentMin = a[leftCornerY][leftCornerX];

          for (var i2 = 0; i2 < windowSize; i2++) {
            for (var j2 = 0; j2 < windowSize; j2++) {
              currentMin = Math.min(currentMin, a[leftCornerY + i2][leftCornerX + j2]);
            }
          }

          var numberOfElements = windowSize * windowSize;
          var leftEnd = currentMin;
          var rightEnd = currentMax;
          var result = 42;

          for (var iter = 0; iter < 32; iter++) {
            var medianGuess = (leftEnd + rightEnd) / 2;
            var medianGuessCount = 0;

            for (var i3 = 0; i3 < windowSize; i3++) {
              for (var j3 = 0; j3 < windowSize; j3++) {
                if (a[leftCornerY + i3][leftCornerX + j3] > medianGuess) {
                  medianGuessCount++;
                }
              }
            }

            if (windowSize % 2 === 0) {
              if (medianGuessCount === numberOfElements / 2) {
                result = medianGuess;
                break;
              } else if (medianGuessCount > numberOfElements / 2) {
                leftEnd = medianGuess;
              } else {
                rightEnd = medianGuess;
              }
            } else {
              if (medianGuessCount === (numberOfElements - 1) / 2) {
                result = medianGuess;
                break;
              } else if (medianGuessCount > (numberOfElements - 1) / 2) {
                leftEnd = medianGuess;
              } else {
                rightEnd = medianGuess;
              }
            }
          }

          return result;
        }, outputSize)(matrix.rawNumbers(), windowSize, stride);

        return SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "maxpoolArraySize",
    value: function maxpoolArraySize(ast, state) {
      var _this6 = this;

      if (ast.args.length < 2 || ast.args.length > 3) {
        return ArraySize.error();
      }

      var metadata = this.metadata('MAXPOOL');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this6.arraySizeForAst(arg, new InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var array = subChecks[0];
      var windowArg = ast.args[1];
      var window;

      if (windowArg.type === AstNodeType.NUMBER) {
        window = windowArg.value;
      } else {
        window = 1;
      }

      var stride = window;

      if (ast.args.length === 3) {
        var strideArg = ast.args[2];

        if (strideArg.type === AstNodeType.NUMBER) {
          stride = strideArg.value;
        } else {
          stride = 1;
        }
      }

      if (window > array.width || window > array.height || stride > window || (array.width - window) % stride !== 0 || (array.height - window) % stride !== 0) {
        return ArraySize.error();
      }

      return arraySizeForPoolFunction(array, window, stride);
    }
  }, {
    key: "medianpoolArraySize",
    value: function medianpoolArraySize(ast, state) {
      return this.maxpoolArraySize(ast, state);
    }
  }, {
    key: "transpose",
    value: function transpose(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TRANSPOSE'), function (matrix) {
        var input = matrix.rawData();
        var inputSize = matrix.size;
        var result = [];

        for (var i = 0; i < inputSize.width; ++i) {
          result[i] = [];

          for (var j = 0; j < inputSize.height; ++j) {
            result[i][j] = input[j][i];
          }
        }

        return SimpleRangeValue.onlyValues(result);
      });
    }
  }, {
    key: "transposeArraySize",
    value: function transposeArraySize(ast, state) {
      var _this7 = this;

      if (ast.args.length !== 1) {
        return ArraySize.error();
      }

      var metadata = this.metadata('MMULT');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this7.arraySizeForAst(arg, new InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });

      var _subChecks2 = _slicedToArray(subChecks, 1),
          size = _subChecks2[0];

      return new ArraySize(size.height, size.width);
    }
  }]);

  return MatrixPlugin;
}(FunctionPlugin);
MatrixPlugin.implementedFunctions = {
  'MMULT': {
    method: 'mmult',
    arraySizeMethod: 'mmultArraySize',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.RANGE
    }],
    vectorizationForbidden: true
  },
  'TRANSPOSE': {
    method: 'transpose',
    arraySizeMethod: 'transposeArraySize',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }],
    vectorizationForbidden: true
  },
  'MAXPOOL': {
    method: 'maxpool',
    arraySizeMethod: 'maxpoolArraySize',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER,
      optionalArg: true
    }],
    vectorizationForbidden: true
  },
  'MEDIANPOOL': {
    method: 'medianpool',
    arraySizeMethod: 'medianpoolArraySize',
    parameters: [{
      argumentType: ArgumentTypes.RANGE
    }, {
      argumentType: ArgumentTypes.NUMBER
    }, {
      argumentType: ArgumentTypes.NUMBER,
      optionalArg: true
    }],
    vectorizationForbidden: true
  }
};