function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import "core-js/modules/es.symbol.js";
import "core-js/modules/es.symbol.description.js";
import "core-js/modules/es.object.to-string.js";
import "core-js/modules/es.object.get-prototype-of.js";
import "core-js/modules/es.reflect.construct.js";
import "core-js/modules/es.symbol.iterator.js";
import "core-js/modules/es.array.iterator.js";
import "core-js/modules/es.string.iterator.js";
import "core-js/modules/web.dom-collections.iterator.js";

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
export var EmptyValue = Symbol('Empty value');
export function getRawValue(num) {
  if (num instanceof RichNumber) {
    return num.val;
  } else {
    return num;
  }
}
export var RichNumber = /*#__PURE__*/function () {
  function RichNumber(val, format) {
    _classCallCheck(this, RichNumber);

    this.val = val;
    this.format = format;
  }

  _createClass(RichNumber, [{
    key: "fromNumber",
    value: function fromNumber(val) {
      return new this.constructor(val);
    }
  }]);

  return RichNumber;
}();
export function cloneNumber(val, newVal) {
  if (typeof val === 'number') {
    return newVal;
  } else {
    var ret = val.fromNumber(newVal);
    ret.format = val.format;
    return ret;
  }
}
export var DateNumber = /*#__PURE__*/function (_RichNumber) {
  _inherits(DateNumber, _RichNumber);

  var _super = _createSuper(DateNumber);

  function DateNumber() {
    _classCallCheck(this, DateNumber);

    return _super.apply(this, arguments);
  }

  _createClass(DateNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_DATE;
    }
  }]);

  return DateNumber;
}(RichNumber);
export var CurrencyNumber = /*#__PURE__*/function (_RichNumber2) {
  _inherits(CurrencyNumber, _RichNumber2);

  var _super2 = _createSuper(CurrencyNumber);

  function CurrencyNumber() {
    _classCallCheck(this, CurrencyNumber);

    return _super2.apply(this, arguments);
  }

  _createClass(CurrencyNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_CURRENCY;
    }
  }]);

  return CurrencyNumber;
}(RichNumber);
export var TimeNumber = /*#__PURE__*/function (_RichNumber3) {
  _inherits(TimeNumber, _RichNumber3);

  var _super3 = _createSuper(TimeNumber);

  function TimeNumber() {
    _classCallCheck(this, TimeNumber);

    return _super3.apply(this, arguments);
  }

  _createClass(TimeNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_TIME;
    }
  }]);

  return TimeNumber;
}(RichNumber);
export var DateTimeNumber = /*#__PURE__*/function (_RichNumber4) {
  _inherits(DateTimeNumber, _RichNumber4);

  var _super4 = _createSuper(DateTimeNumber);

  function DateTimeNumber() {
    _classCallCheck(this, DateTimeNumber);

    return _super4.apply(this, arguments);
  }

  _createClass(DateTimeNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_DATETIME;
    }
  }]);

  return DateTimeNumber;
}(RichNumber);
export var PercentNumber = /*#__PURE__*/function (_RichNumber5) {
  _inherits(PercentNumber, _RichNumber5);

  var _super5 = _createSuper(PercentNumber);

  function PercentNumber() {
    _classCallCheck(this, PercentNumber);

    return _super5.apply(this, arguments);
  }

  _createClass(PercentNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_PERCENT;
    }
  }]);

  return PercentNumber;
}(RichNumber);
export function isExtendedNumber(val) {
  return typeof val === 'number' || val instanceof RichNumber;
}
export var NumberType;

(function (NumberType) {
  NumberType["NUMBER_RAW"] = "NUMBER_RAW";
  NumberType["NUMBER_DATE"] = "NUMBER_DATE";
  NumberType["NUMBER_TIME"] = "NUMBER_TIME";
  NumberType["NUMBER_DATETIME"] = "NUMBER_DATETIME";
  NumberType["NUMBER_CURRENCY"] = "NUMBER_CURRENCY";
  NumberType["NUMBER_PERCENT"] = "NUMBER_PERCENT";
})(NumberType || (NumberType = {}));

export function getTypeOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return num.getDetailedType();
  } else {
    return NumberType.NUMBER_RAW;
  }
}
export function getFormatOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return num.format;
  } else {
    return undefined;
  }
}
export function getTypeFormatOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return {
      type: num.getDetailedType(),
      format: num.format
    };
  } else {
    return {
      type: NumberType.NUMBER_RAW
    };
  }
}