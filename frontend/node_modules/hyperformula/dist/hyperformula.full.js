/*!
 * Copyright (c) HANDSONCODE sp. z o. o.
 * 
 * HYPERFORMULA is software distributed by HANDSONCODE sp. z o. o.,
 * a Polish corporation, based in Gdynia, Poland, at 96/98 Aleja Zwycięstwa,
 * registered with the National Court Register under number 538651,
 * EU tax ID number: PL5862294002, share capital: PLN 62,800.00.
 * 
 * This software is protected by applicable copyright laws, including
 * international treaties, and double-licensed.
 * 
 * First, commercial purposes dictate individual approach
 * and the terms of such use are subject to negotiations.
 * 
 * Second, at your option, your use of this Software –
 * either commercial, non-commercial, or both –
 * may be subject to the GNU General Public License
 * in such version as included in the “gpl-3.0.txt” file,
 * available in the main directory of this software repository.
 * 
 * HANDSONCODE PROVIDES THIS SOFTWARE ON AN “AS IS” BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND. IN NO EVENT
 * AND UNDER NO LEGAL THEORY, SHALL HANDSONCODE BE LIABLE
 * TO YOU FOR DAMAGES, INCLUDING ANY DIRECT, INDIRECT, SPECIAL,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY CHARACTER ARISING
 * FROM USE OR INABILITY TO USE THIS SOFTWARE.
 * 
 * Version: 1.3.1
 * Release date: 11/01/2022 (built at 11/01/2022 10:43:18)
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("HyperFormula", [], factory);
	else if(typeof exports === 'object')
		exports["HyperFormula"] = factory();
	else
		root["HyperFormula"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

__webpack_require__(125);

__webpack_require__(136);

exports.__esModule = true;
exports.default = void 0;

__webpack_require__(137);

__webpack_require__(138);

__webpack_require__(139);

var _Cell = __webpack_require__(143);

exports.CellError = _Cell.CellError;
exports.CellType = _Cell.CellType;
exports.CellValueDetailedType = _Cell.CellValueDetailedType;
exports.CellValueType = _Cell.CellValueType;
exports.ErrorType = _Cell.ErrorType;

var _CellValue = __webpack_require__(288);

exports.DetailedCellError = _CellValue.DetailedCellError;

var _Config = __webpack_require__(289);

var _ChooseAddressMappingPolicy = __webpack_require__(295);

exports.AlwaysDense = _ChooseAddressMappingPolicy.AlwaysDense;
exports.AlwaysSparse = _ChooseAddressMappingPolicy.AlwaysSparse;
exports.DenseSparseChooseBasedOnThreshold = _ChooseAddressMappingPolicy.DenseSparseChooseBasedOnThreshold;

var _errors = __webpack_require__(165);

exports.ConfigValueTooBigError = _errors.ConfigValueTooBigError;
exports.ConfigValueTooSmallError = _errors.ConfigValueTooSmallError;
exports.EvaluationSuspendedError = _errors.EvaluationSuspendedError;
exports.ExpectedOneOfValuesError = _errors.ExpectedOneOfValuesError;
exports.ExpectedValueOfTypeError = _errors.ExpectedValueOfTypeError;
exports.FunctionPluginValidationError = _errors.FunctionPluginValidationError;
exports.InvalidAddressError = _errors.InvalidAddressError;
exports.InvalidArgumentsError = _errors.InvalidArgumentsError;
exports.LanguageAlreadyRegisteredError = _errors.LanguageAlreadyRegisteredError;
exports.LanguageNotRegisteredError = _errors.LanguageNotRegisteredError;
exports.MissingTranslationError = _errors.MissingTranslationError;
exports.NamedExpressionDoesNotExistError = _errors.NamedExpressionDoesNotExistError;
exports.NamedExpressionNameIsAlreadyTakenError = _errors.NamedExpressionNameIsAlreadyTakenError;
exports.NamedExpressionNameIsInvalidError = _errors.NamedExpressionNameIsInvalidError;
exports.NoOperationToRedoError = _errors.NoOperationToRedoError;
exports.NoOperationToUndoError = _errors.NoOperationToUndoError;
exports.NoRelativeAddressesAllowedError = _errors.NoRelativeAddressesAllowedError;
exports.NoSheetWithIdError = _errors.NoSheetWithIdError;
exports.NoSheetWithNameError = _errors.NoSheetWithNameError;
exports.NotAFormulaError = _errors.NotAFormulaError;
exports.NothingToPasteError = _errors.NothingToPasteError;
exports.ProtectedFunctionTranslationError = _errors.ProtectedFunctionTranslationError;
exports.SheetNameAlreadyTakenError = _errors.SheetNameAlreadyTakenError;
exports.SheetSizeLimitExceededError = _errors.SheetSizeLimitExceededError;
exports.SourceLocationHasArrayError = _errors.SourceLocationHasArrayError;
exports.TargetLocationHasArrayError = _errors.TargetLocationHasArrayError;
exports.UnableToParseError = _errors.UnableToParseError;

var _Exporter = __webpack_require__(324);

exports.ExportedCellChange = _Exporter.ExportedCellChange;
exports.ExportedNamedExpressionChange = _Exporter.ExportedNamedExpressionChange;

var _HyperFormula2 = __webpack_require__(306);

exports.HyperFormula = _HyperFormula2.HyperFormula;

var _enGB = _interopRequireDefault(__webpack_require__(347));

var _interpreter = __webpack_require__(348);

exports.FunctionPlugin = _interpreter.FunctionPlugin;

var plugins = _interopRequireWildcard(__webpack_require__(349));

var _SimpleRangeValue = __webpack_require__(245);

exports.SimpleRangeValue = _SimpleRangeValue.SimpleRangeValue;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/** @internal */
var HyperFormulaNS = /*#__PURE__*/function (_HyperFormula) {
  _inherits(HyperFormulaNS, _HyperFormula);

  var _super = _createSuper(HyperFormulaNS);

  function HyperFormulaNS() {
    _classCallCheck(this, HyperFormulaNS);

    return _super.apply(this, arguments);
  }

  return _createClass(HyperFormulaNS);
}(_HyperFormula2.HyperFormula);

HyperFormulaNS.HyperFormula = _HyperFormula2.HyperFormula;
HyperFormulaNS.ErrorType = _Cell.ErrorType;
HyperFormulaNS.CellType = _Cell.CellType;
HyperFormulaNS.CellValueType = _Cell.CellValueType;
HyperFormulaNS.CellValueDetailedType = _Cell.CellValueDetailedType;
HyperFormulaNS.DetailedCellError = _CellValue.DetailedCellError;
HyperFormulaNS.ExportedCellChange = _Exporter.ExportedCellChange;
HyperFormulaNS.ExportedNamedExpressionChange = _Exporter.ExportedNamedExpressionChange;
HyperFormulaNS.ConfigValueTooBigError = _errors.ConfigValueTooBigError;
HyperFormulaNS.ConfigValueTooSmallError = _errors.ConfigValueTooSmallError;
HyperFormulaNS.EvaluationSuspendedError = _errors.EvaluationSuspendedError;
HyperFormulaNS.ExpectedOneOfValuesError = _errors.ExpectedOneOfValuesError;
HyperFormulaNS.ExpectedValueOfTypeError = _errors.ExpectedValueOfTypeError;
HyperFormulaNS.FunctionPlugin = _interpreter.FunctionPlugin;
HyperFormulaNS.FunctionPluginValidationError = _errors.FunctionPluginValidationError;
HyperFormulaNS.InvalidAddressError = _errors.InvalidAddressError;
HyperFormulaNS.InvalidArgumentsError = _errors.InvalidArgumentsError;
HyperFormulaNS.LanguageNotRegisteredError = _errors.LanguageNotRegisteredError;
HyperFormulaNS.LanguageAlreadyRegisteredError = _errors.LanguageAlreadyRegisteredError;
HyperFormulaNS.MissingTranslationError = _errors.MissingTranslationError;
HyperFormulaNS.NamedExpressionDoesNotExistError = _errors.NamedExpressionDoesNotExistError;
HyperFormulaNS.NamedExpressionNameIsAlreadyTakenError = _errors.NamedExpressionNameIsAlreadyTakenError;
HyperFormulaNS.NamedExpressionNameIsInvalidError = _errors.NamedExpressionNameIsInvalidError;
HyperFormulaNS.NoOperationToRedoError = _errors.NoOperationToRedoError;
HyperFormulaNS.NoOperationToUndoError = _errors.NoOperationToUndoError;
HyperFormulaNS.NoRelativeAddressesAllowedError = _errors.NoRelativeAddressesAllowedError;
HyperFormulaNS.NoSheetWithIdError = _errors.NoSheetWithIdError;
HyperFormulaNS.NoSheetWithNameError = _errors.NoSheetWithNameError;
HyperFormulaNS.NotAFormulaError = _errors.NotAFormulaError;
HyperFormulaNS.NothingToPasteError = _errors.NothingToPasteError;
HyperFormulaNS.ProtectedFunctionTranslationError = _errors.ProtectedFunctionTranslationError;
HyperFormulaNS.SheetNameAlreadyTakenError = _errors.SheetNameAlreadyTakenError;
HyperFormulaNS.SheetSizeLimitExceededError = _errors.SheetSizeLimitExceededError;
HyperFormulaNS.SourceLocationHasArrayError = _errors.SourceLocationHasArrayError;
HyperFormulaNS.TargetLocationHasArrayError = _errors.TargetLocationHasArrayError;
HyperFormulaNS.UnableToParseError = _errors.UnableToParseError;
var defaultLanguage = _Config.Config.defaultConfig.language;

_HyperFormula2.HyperFormula.registerLanguage(defaultLanguage, _enGB.default);

_HyperFormula2.HyperFormula.languages[_enGB.default.langCode] = _enGB.default;

var _iterator = _createForOfIteratorHelper(Object.getOwnPropertyNames(plugins)),
    _step;

try {
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    var pluginName = _step.value;

    if (!pluginName.startsWith('_')) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
      // @ts-ignore
      _HyperFormula2.HyperFormula.registerFunctionPlugin(plugins[pluginName]);
    }
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}

var _default = HyperFormulaNS;
exports.default = _default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

var TO_STRING_TAG_SUPPORT = __webpack_require__(2);
var redefine = __webpack_require__(22);
var toString = __webpack_require__(47);

// `Object.prototype.toString` method
// https://tc39.es/ecma262/#sec-object.prototype.tostring
if (!TO_STRING_TAG_SUPPORT) {
  redefine(Object.prototype, 'toString', toString, { unsafe: true });
}


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

module.exports = String(test) === '[object z]';


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var shared = __webpack_require__(6);
var hasOwn = __webpack_require__(10);
var uid = __webpack_require__(14);
var NATIVE_SYMBOL = __webpack_require__(15);
var USE_SYMBOL_AS_UID = __webpack_require__(21);

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof global == 'object' && global) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(5)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var IS_PURE = __webpack_require__(7);
var store = __webpack_require__(8);

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.20.2',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2022 Denis Pushkarev (zloirock.ru)'
});


/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = false;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var setGlobal = __webpack_require__(9);

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var toObject = __webpack_require__(12);

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),
/* 11 */
/***/ (function(module, exports) {

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var uncurryThis = bind && bind.bind(call, call);

module.exports = bind ? function (fn) {
  return fn && uncurryThis(fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var requireObjectCoercible = __webpack_require__(13);

var Object = global.Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);

var TypeError = global.TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(16);
var fails = __webpack_require__(20);

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var userAgent = __webpack_require__(17);

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(18);

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isCallable = __webpack_require__(19);

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),
/* 19 */
/***/ (function(module, exports) {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(15);

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isCallable = __webpack_require__(19);
var hasOwn = __webpack_require__(10);
var createNonEnumerableProperty = __webpack_require__(23);
var setGlobal = __webpack_require__(9);
var inspectSource = __webpack_require__(41);
var InternalStateModule = __webpack_require__(42);
var CONFIGURABLE_FUNCTION_NAME = __webpack_require__(46).CONFIGURABLE;

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var name = options && options.name !== undefined ? options.name : key;
  var state;
  if (isCallable(value)) {
    if (String(name).slice(0, 7) === 'Symbol(') {
      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
    }
    if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
      createNonEnumerableProperty(value, 'name', name);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
});


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var definePropertyModule = __webpack_require__(25);
var createPropertyDescriptor = __webpack_require__(40);

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var DESCRIPTORS = __webpack_require__(24);
var IE8_DOM_DEFINE = __webpack_require__(26);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(29);
var anObject = __webpack_require__(30);
var toPropertyKey = __webpack_require__(31);

var TypeError = global.TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? V8_PROTOTYPE_DEFINE_BUG ? function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE in Attributes ? Attributes[CONFIGURABLE] : current[CONFIGURABLE],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var fails = __webpack_require__(20);
var createElement = __webpack_require__(27);

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isObject = __webpack_require__(28);

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__(19);

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var fails = __webpack_require__(20);

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
module.exports = DESCRIPTORS && fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isObject = __webpack_require__(28);

var String = global.String;
var TypeError = global.TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

var toPrimitive = __webpack_require__(32);
var isSymbol = __webpack_require__(34);

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var call = __webpack_require__(33);
var isObject = __webpack_require__(28);
var isSymbol = __webpack_require__(34);
var getMethod = __webpack_require__(36);
var ordinaryToPrimitive = __webpack_require__(39);
var wellKnownSymbol = __webpack_require__(3);

var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

var call = Function.prototype.call;

module.exports = call.bind ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var getBuiltIn = __webpack_require__(18);
var isCallable = __webpack_require__(19);
var isPrototypeOf = __webpack_require__(35);
var USE_SYMBOL_AS_UID = __webpack_require__(21);

var Object = global.Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));
};


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

var aCallable = __webpack_require__(37);

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isCallable = __webpack_require__(19);
var tryToString = __webpack_require__(38);

var TypeError = global.TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);

var String = global.String;

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var call = __webpack_require__(33);
var isCallable = __webpack_require__(19);
var isObject = __webpack_require__(28);

var TypeError = global.TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var isCallable = __webpack_require__(19);
var store = __webpack_require__(8);

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var NATIVE_WEAK_MAP = __webpack_require__(43);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var isObject = __webpack_require__(28);
var createNonEnumerableProperty = __webpack_require__(23);
var hasOwn = __webpack_require__(10);
var shared = __webpack_require__(8);
var sharedKey = __webpack_require__(44);
var hiddenKeys = __webpack_require__(45);

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isCallable = __webpack_require__(19);
var inspectSource = __webpack_require__(41);

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(6);
var uid = __webpack_require__(14);

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var hasOwn = __webpack_require__(10);

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var TO_STRING_TAG_SUPPORT = __webpack_require__(2);
var classof = __webpack_require__(48);

// `Object.prototype.toString` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.tostring
module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
  return '[object ' + classof(this) + ']';
};


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var TO_STRING_TAG_SUPPORT = __webpack_require__(2);
var isCallable = __webpack_require__(19);
var classofRaw = __webpack_require__(49);
var wellKnownSymbol = __webpack_require__(3);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var Object = global.Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable(O.callee) ? 'Arguments' : result;
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var getBuiltIn = __webpack_require__(18);
var apply = __webpack_require__(68);
var bind = __webpack_require__(69);
var aConstructor = __webpack_require__(71);
var anObject = __webpack_require__(30);
var isObject = __webpack_require__(28);
var create = __webpack_require__(73);
var fails = __webpack_require__(20);

var nativeConstruct = getBuiltIn('Reflect', 'construct');
var ObjectPrototype = Object.prototype;
var push = [].push;

// `Reflect.construct` method
// https://tc39.es/ecma262/#sec-reflect.construct
// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function () {
  function F() { /* empty */ }
  return !(nativeConstruct(function () { /* empty */ }, [], F) instanceof F);
});

var ARGS_BUG = !fails(function () {
  nativeConstruct(function () { /* empty */ });
});

var FORCED = NEW_TARGET_BUG || ARGS_BUG;

$({ target: 'Reflect', stat: true, forced: FORCED, sham: FORCED }, {
  construct: function construct(Target, args /* , newTarget */) {
    aConstructor(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aConstructor(arguments[2]);
    if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);
    if (Target == newTarget) {
      // w/o altered newTarget, optimization for 0-4 arguments
      switch (args.length) {
        case 0: return new Target();
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      apply(push, $args, args);
      return new (apply(bind, Target, $args))();
    }
    // with altered newTarget, not support built-in constructors
    var proto = newTarget.prototype;
    var instance = create(isObject(proto) ? proto : ObjectPrototype);
    var result = apply(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var getOwnPropertyDescriptor = __webpack_require__(52).f;
var createNonEnumerableProperty = __webpack_require__(23);
var redefine = __webpack_require__(22);
var setGlobal = __webpack_require__(9);
var copyConstructorProperties = __webpack_require__(56);
var isForced = __webpack_require__(67);

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var call = __webpack_require__(33);
var propertyIsEnumerableModule = __webpack_require__(53);
var createPropertyDescriptor = __webpack_require__(40);
var toIndexedObject = __webpack_require__(54);
var toPropertyKey = __webpack_require__(31);
var hasOwn = __webpack_require__(10);
var IE8_DOM_DEFINE = __webpack_require__(26);

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(55);
var requireObjectCoercible = __webpack_require__(13);

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var fails = __webpack_require__(20);
var classof = __webpack_require__(49);

var Object = global.Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : Object(it);
} : Object;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__(10);
var ownKeys = __webpack_require__(57);
var getOwnPropertyDescriptorModule = __webpack_require__(52);
var definePropertyModule = __webpack_require__(25);

module.exports = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key) && !(exceptions && hasOwn(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(18);
var uncurryThis = __webpack_require__(11);
var getOwnPropertyNamesModule = __webpack_require__(58);
var getOwnPropertySymbolsModule = __webpack_require__(66);
var anObject = __webpack_require__(30);

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(59);
var enumBugKeys = __webpack_require__(65);

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var hasOwn = __webpack_require__(10);
var toIndexedObject = __webpack_require__(54);
var indexOf = __webpack_require__(60).indexOf;
var hiddenKeys = __webpack_require__(45);

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

var toIndexedObject = __webpack_require__(54);
var toAbsoluteIndex = __webpack_require__(61);
var lengthOfArrayLike = __webpack_require__(63);

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(62);

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),
/* 62 */
/***/ (function(module, exports) {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- safe
  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

var toLength = __webpack_require__(64);

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

var toIntegerOrInfinity = __webpack_require__(62);

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),
/* 65 */
/***/ (function(module, exports) {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),
/* 66 */
/***/ (function(module, exports) {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var isCallable = __webpack_require__(19);

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),
/* 68 */
/***/ (function(module, exports) {

var FunctionPrototype = Function.prototype;
var apply = FunctionPrototype.apply;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;

// eslint-disable-next-line es/no-reflect -- safe
module.exports = typeof Reflect == 'object' && Reflect.apply || (bind ? call.bind(apply) : function () {
  return call.apply(apply, arguments);
});


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var aCallable = __webpack_require__(37);
var isObject = __webpack_require__(28);
var hasOwn = __webpack_require__(10);
var arraySlice = __webpack_require__(70);

var Function = global.Function;
var concat = uncurryThis([].concat);
var join = uncurryThis([].join);
var factories = {};

var construct = function (C, argsLength, args) {
  if (!hasOwn(factories, argsLength)) {
    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
    factories[argsLength] = Function('C,a', 'return new C(' + join(list, ',') + ')');
  } return factories[argsLength](C, args);
};

// `Function.prototype.bind` method implementation
// https://tc39.es/ecma262/#sec-function.prototype.bind
module.exports = Function.bind || function bind(that /* , ...args */) {
  var F = aCallable(this);
  var Prototype = F.prototype;
  var partArgs = arraySlice(arguments, 1);
  var boundFunction = function bound(/* args... */) {
    var args = concat(partArgs, arraySlice(arguments));
    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);
  };
  if (isObject(Prototype)) boundFunction.prototype = Prototype;
  return boundFunction;
};


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);

module.exports = uncurryThis([].slice);


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isConstructor = __webpack_require__(72);
var tryToString = __webpack_require__(38);

var TypeError = global.TypeError;

// `Assert: IsConstructor(argument) is true`
module.exports = function (argument) {
  if (isConstructor(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a constructor');
};


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var fails = __webpack_require__(20);
var isCallable = __webpack_require__(19);
var classof = __webpack_require__(48);
var getBuiltIn = __webpack_require__(18);
var inspectSource = __webpack_require__(41);

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec = uncurryThis(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable(argument)) return false;
  switch (classof(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec(constructorRegExp, inspectSource(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
module.exports = !construct || fails(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

/* global ActiveXObject -- old IE, WSH */
var anObject = __webpack_require__(30);
var definePropertiesModule = __webpack_require__(74);
var enumBugKeys = __webpack_require__(65);
var hiddenKeys = __webpack_require__(45);
var html = __webpack_require__(76);
var documentCreateElement = __webpack_require__(27);
var sharedKey = __webpack_require__(44);

var GT = '>';
var LT = '<';
var PROTOTYPE = 'prototype';
var SCRIPT = 'script';
var IE_PROTO = sharedKey('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE] = anObject(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var V8_PROTOTYPE_DEFINE_BUG = __webpack_require__(29);
var definePropertyModule = __webpack_require__(25);
var anObject = __webpack_require__(30);
var toIndexedObject = __webpack_require__(54);
var objectKeys = __webpack_require__(75);

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es/no-object-defineproperties -- safe
exports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var props = toIndexedObject(Properties);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);
  return O;
};


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

var internalObjectKeys = __webpack_require__(59);
var enumBugKeys = __webpack_require__(65);

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

var getBuiltIn = __webpack_require__(18);

module.exports = getBuiltIn('document', 'documentElement');


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var isArray = __webpack_require__(78);
var isConstructor = __webpack_require__(72);
var isObject = __webpack_require__(28);
var toAbsoluteIndex = __webpack_require__(61);
var lengthOfArrayLike = __webpack_require__(63);
var toIndexedObject = __webpack_require__(54);
var createProperty = __webpack_require__(79);
var wellKnownSymbol = __webpack_require__(3);
var arrayMethodHasSpeciesSupport = __webpack_require__(80);
var un$Slice = __webpack_require__(70);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
var Array = global.Array;
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
    var length = lengthOfArrayLike(O);
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
        return un$Slice(O, k, fin);
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(49);

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es/no-array-isarray -- safe
module.exports = Array.isArray || function isArray(argument) {
  return classof(argument) == 'Array';
};


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toPropertyKey = __webpack_require__(31);
var definePropertyModule = __webpack_require__(25);
var createPropertyDescriptor = __webpack_require__(40);

module.exports = function (object, key, value) {
  var propertyKey = toPropertyKey(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var wellKnownSymbol = __webpack_require__(3);
var V8_VERSION = __webpack_require__(16);

var SPECIES = wellKnownSymbol('species');

module.exports = function (METHOD_NAME) {
  // We can't use this feature detection in V8 since it causes
  // deoptimization and serious performance degradation
  // https://github.com/zloirock/core-js/issues/677
  return V8_VERSION >= 51 || !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var FUNCTION_NAME_EXISTS = __webpack_require__(46).EXISTS;
var uncurryThis = __webpack_require__(11);
var defineProperty = __webpack_require__(25).f;

var FunctionPrototype = Function.prototype;
var functionToString = uncurryThis(FunctionPrototype.toString);
var nameRE = /function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/;
var regExpExec = uncurryThis(nameRE.exec);
var NAME = 'name';

// Function instances `.name` property
// https://tc39.es/ecma262/#sec-function-instances-name
if (DESCRIPTORS && !FUNCTION_NAME_EXISTS) {
  defineProperty(FunctionPrototype, NAME, {
    configurable: true,
    get: function () {
      try {
        return regExpExec(nameRE, functionToString(this))[1];
      } catch (error) {
        return '';
      }
    }
  });
}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var from = __webpack_require__(83);
var checkCorrectnessOfIteration = __webpack_require__(91);

var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
  // eslint-disable-next-line es/no-array-from -- required for testing
  Array.from(iterable);
});

// `Array.from` method
// https://tc39.es/ecma262/#sec-array.from
$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {
  from: from
});


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var bind = __webpack_require__(84);
var call = __webpack_require__(33);
var toObject = __webpack_require__(12);
var callWithSafeIterationClosing = __webpack_require__(85);
var isArrayIteratorMethod = __webpack_require__(87);
var isConstructor = __webpack_require__(72);
var lengthOfArrayLike = __webpack_require__(63);
var createProperty = __webpack_require__(79);
var getIterator = __webpack_require__(89);
var getIteratorMethod = __webpack_require__(90);

var Array = global.Array;

// `Array.from` method implementation
// https://tc39.es/ecma262/#sec-array.from
module.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
  var O = toObject(arrayLike);
  var IS_CONSTRUCTOR = isConstructor(this);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined);
  var iteratorMethod = getIteratorMethod(O);
  var index = 0;
  var length, result, step, iterator, next, value;
  // if the target is not iterable or it's an array with the default iterator - use a simple case
  if (iteratorMethod && !(this == Array && isArrayIteratorMethod(iteratorMethod))) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    result = IS_CONSTRUCTOR ? new this() : [];
    for (;!(step = call(next, iterator)).done; index++) {
      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
      createProperty(result, index, value);
    }
  } else {
    length = lengthOfArrayLike(O);
    result = IS_CONSTRUCTOR ? new this(length) : Array(length);
    for (;length > index; index++) {
      value = mapping ? mapfn(O[index], index) : O[index];
      createProperty(result, index, value);
    }
  }
  result.length = index;
  return result;
};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var aCallable = __webpack_require__(37);

var bind = uncurryThis(uncurryThis.bind);

// optional / simple context binding
module.exports = function (fn, that) {
  aCallable(fn);
  return that === undefined ? fn : bind ? bind(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(30);
var iteratorClose = __webpack_require__(86);

// call something on iterator step with safe closing on error
module.exports = function (iterator, fn, value, ENTRIES) {
  try {
    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
  } catch (error) {
    iteratorClose(iterator, 'throw', error);
  }
};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

var call = __webpack_require__(33);
var anObject = __webpack_require__(30);
var getMethod = __webpack_require__(36);

module.exports = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject(iterator);
  try {
    innerResult = getMethod(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject(innerResult);
  return value;
};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);
var Iterators = __webpack_require__(88);

var ITERATOR = wellKnownSymbol('iterator');
var ArrayPrototype = Array.prototype;

// check on default Array iterator
module.exports = function (it) {
  return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
};


/***/ }),
/* 88 */
/***/ (function(module, exports) {

module.exports = {};


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var call = __webpack_require__(33);
var aCallable = __webpack_require__(37);
var anObject = __webpack_require__(30);
var tryToString = __webpack_require__(38);
var getIteratorMethod = __webpack_require__(90);

var TypeError = global.TypeError;

module.exports = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod(argument) : usingIterator;
  if (aCallable(iteratorMethod)) return anObject(call(iteratorMethod, argument));
  throw TypeError(tryToString(argument) + ' is not iterable');
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(48);
var getMethod = __webpack_require__(36);
var Iterators = __webpack_require__(88);
var wellKnownSymbol = __webpack_require__(3);

var ITERATOR = wellKnownSymbol('iterator');

module.exports = function (it) {
  if (it != undefined) return getMethod(it, ITERATOR)
    || getMethod(it, '@@iterator')
    || Iterators[classof(it)];
};


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);

var ITERATOR = wellKnownSymbol('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR] = function () {
    return this;
  };
  // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

module.exports = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(93).charAt;
var toString = __webpack_require__(94);
var InternalStateModule = __webpack_require__(42);
var defineIterator = __webpack_require__(95);

var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: toString(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = charAt(string, index);
  state.index += point.length;
  return { value: point, done: false };
});


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var toIntegerOrInfinity = __webpack_require__(62);
var toString = __webpack_require__(94);
var requireObjectCoercible = __webpack_require__(13);

var charAt = uncurryThis(''.charAt);
var charCodeAt = uncurryThis(''.charCodeAt);
var stringSlice = uncurryThis(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString(requireObjectCoercible($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

module.exports = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var classof = __webpack_require__(48);

var String = global.String;

module.exports = function (argument) {
  if (classof(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return String(argument);
};


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var call = __webpack_require__(33);
var IS_PURE = __webpack_require__(7);
var FunctionName = __webpack_require__(46);
var isCallable = __webpack_require__(19);
var createIteratorConstructor = __webpack_require__(96);
var getPrototypeOf = __webpack_require__(98);
var setPrototypeOf = __webpack_require__(101);
var setToStringTag = __webpack_require__(100);
var createNonEnumerableProperty = __webpack_require__(23);
var redefine = __webpack_require__(22);
var wellKnownSymbol = __webpack_require__(3);
var Iterators = __webpack_require__(88);
var IteratorsCore = __webpack_require__(97);

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR = wellKnownSymbol('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable(CurrentIteratorPrototype[ITERATOR])) {
          redefine(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (!IS_PURE && CONFIGURABLE_FUNCTION_NAME) {
      createNonEnumerableProperty(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    redefine(IterablePrototype, ITERATOR, defaultIterator, { name: DEFAULT });
  }
  Iterators[NAME] = defaultIterator;

  return methods;
};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var IteratorPrototype = __webpack_require__(97).IteratorPrototype;
var create = __webpack_require__(73);
var createPropertyDescriptor = __webpack_require__(40);
var setToStringTag = __webpack_require__(100);
var Iterators = __webpack_require__(88);

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(+!ENUMERABLE_NEXT, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(20);
var isCallable = __webpack_require__(19);
var create = __webpack_require__(73);
var getPrototypeOf = __webpack_require__(98);
var redefine = __webpack_require__(22);
var wellKnownSymbol = __webpack_require__(3);
var IS_PURE = __webpack_require__(7);

var ITERATOR = wellKnownSymbol('iterator');
var BUGGY_SAFARI_ITERATORS = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype[ITERATOR].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};
else if (IS_PURE) IteratorPrototype = create(IteratorPrototype);

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable(IteratorPrototype[ITERATOR])) {
  redefine(IteratorPrototype, ITERATOR, function () {
    return this;
  });
}

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var hasOwn = __webpack_require__(10);
var isCallable = __webpack_require__(19);
var toObject = __webpack_require__(12);
var sharedKey = __webpack_require__(44);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(99);

var IE_PROTO = sharedKey('IE_PROTO');
var Object = global.Object;
var ObjectPrototype = Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  var object = toObject(O);
  if (hasOwn(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof Object ? ObjectPrototype : null;
};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);

module.exports = !fails(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(25).f;
var hasOwn = __webpack_require__(10);
var wellKnownSymbol = __webpack_require__(3);

var TO_STRING_TAG = wellKnownSymbol('toStringTag');

module.exports = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn(target, TO_STRING_TAG)) {
    defineProperty(target, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable no-proto -- safe */
var uncurryThis = __webpack_require__(11);
var anObject = __webpack_require__(30);
var aPossiblePrototype = __webpack_require__(102);

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es/no-object-setprototypeof -- safe
module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isCallable = __webpack_require__(19);

var String = global.String;
var TypeError = global.TypeError;

module.exports = function (argument) {
  if (typeof argument == 'object' || isCallable(argument)) return argument;
  throw TypeError("Can't set " + String(argument) + ' as a prototype');
};


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var exec = __webpack_require__(104);

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$({ target: 'RegExp', proto: true, forced: /./.exec !== exec }, {
  exec: exec
});


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call = __webpack_require__(33);
var uncurryThis = __webpack_require__(11);
var toString = __webpack_require__(94);
var regexpFlags = __webpack_require__(105);
var stickyHelpers = __webpack_require__(106);
var shared = __webpack_require__(6);
var create = __webpack_require__(73);
var getInternalState = __webpack_require__(42).get;
var UNSUPPORTED_DOT_ALL = __webpack_require__(107);
var UNSUPPORTED_NCG = __webpack_require__(108);

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt = uncurryThis(''.charAt);
var indexOf = uncurryThis(''.indexOf);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call(nativeExec, re1, 'a');
  call(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y = stickyHelpers.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState(re);
    var str = toString(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y && re.sticky;
    var flags = call(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice(match.input, charsAdded);
        match[0] = stringSlice(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      call(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

module.exports = patchedExec;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var anObject = __webpack_require__(30);

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
module.exports = function () {
  var that = anObject(this);
  var result = '';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.sticky) result += 'y';
  return result;
};


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var global = __webpack_require__(4);

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp = global.RegExp;

var UNSUPPORTED_Y = fails(function () {
  var re = $RegExp('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y || fails(function () {
  return !$RegExp('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y || fails(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

module.exports = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y
};


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var global = __webpack_require__(4);

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var global = __webpack_require__(4);

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global.RegExp;

module.exports = fails(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var getBuiltIn = __webpack_require__(18);
var apply = __webpack_require__(68);
var call = __webpack_require__(33);
var uncurryThis = __webpack_require__(11);
var IS_PURE = __webpack_require__(7);
var DESCRIPTORS = __webpack_require__(24);
var NATIVE_SYMBOL = __webpack_require__(15);
var fails = __webpack_require__(20);
var hasOwn = __webpack_require__(10);
var isArray = __webpack_require__(78);
var isCallable = __webpack_require__(19);
var isObject = __webpack_require__(28);
var isPrototypeOf = __webpack_require__(35);
var isSymbol = __webpack_require__(34);
var anObject = __webpack_require__(30);
var toObject = __webpack_require__(12);
var toIndexedObject = __webpack_require__(54);
var toPropertyKey = __webpack_require__(31);
var $toString = __webpack_require__(94);
var createPropertyDescriptor = __webpack_require__(40);
var nativeObjectCreate = __webpack_require__(73);
var objectKeys = __webpack_require__(75);
var getOwnPropertyNamesModule = __webpack_require__(58);
var getOwnPropertyNamesExternal = __webpack_require__(110);
var getOwnPropertySymbolsModule = __webpack_require__(66);
var getOwnPropertyDescriptorModule = __webpack_require__(52);
var definePropertyModule = __webpack_require__(25);
var definePropertiesModule = __webpack_require__(74);
var propertyIsEnumerableModule = __webpack_require__(53);
var arraySlice = __webpack_require__(70);
var redefine = __webpack_require__(22);
var shared = __webpack_require__(6);
var sharedKey = __webpack_require__(44);
var hiddenKeys = __webpack_require__(45);
var uid = __webpack_require__(14);
var wellKnownSymbol = __webpack_require__(3);
var wrappedWellKnownSymbolModule = __webpack_require__(112);
var defineWellKnownSymbol = __webpack_require__(113);
var setToStringTag = __webpack_require__(100);
var InternalStateModule = __webpack_require__(42);
var $forEach = __webpack_require__(115).forEach;

var HIDDEN = sharedKey('hidden');
var SYMBOL = 'Symbol';
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);

var ObjectPrototype = Object[PROTOTYPE];
var $Symbol = global.Symbol;
var SymbolPrototype = $Symbol && $Symbol[PROTOTYPE];
var TypeError = global.TypeError;
var QObject = global.QObject;
var $stringify = getBuiltIn('JSON', 'stringify');
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var push = uncurryThis([].push);

var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var StringToSymbolRegistry = shared('string-to-symbol-registry');
var SymbolToStringRegistry = shared('symbol-to-string-registry');
var WellKnownSymbolsStore = shared('wks');

// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (O, P, Attributes) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
  nativeDefineProperty(O, P, Attributes);
  if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate(SymbolPrototype);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var $defineProperty = function defineProperty(O, P, Attributes) {
  if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
  anObject(O);
  var key = toPropertyKey(P);
  anObject(Attributes);
  if (hasOwn(AllSymbols, key)) {
    if (!Attributes.enumerable) {
      if (!hasOwn(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
      O[HIDDEN][key] = true;
    } else {
      if (hasOwn(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
      Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(O, key, Attributes);
  } return nativeDefineProperty(O, key, Attributes);
};

var $defineProperties = function defineProperties(O, Properties) {
  anObject(O);
  var properties = toIndexedObject(Properties);
  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
  $forEach(keys, function (key) {
    if (!DESCRIPTORS || call($propertyIsEnumerable, properties, key)) $defineProperty(O, key, properties[key]);
  });
  return O;
};

var $create = function create(O, Properties) {
  return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
};

var $propertyIsEnumerable = function propertyIsEnumerable(V) {
  var P = toPropertyKey(V);
  var enumerable = call(nativePropertyIsEnumerable, this, P);
  if (this === ObjectPrototype && hasOwn(AllSymbols, P) && !hasOwn(ObjectPrototypeSymbols, P)) return false;
  return enumerable || !hasOwn(this, P) || !hasOwn(AllSymbols, P) || hasOwn(this, HIDDEN) && this[HIDDEN][P]
    ? enumerable : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
  var it = toIndexedObject(O);
  var key = toPropertyKey(P);
  if (it === ObjectPrototype && hasOwn(AllSymbols, key) && !hasOwn(ObjectPrototypeSymbols, key)) return;
  var descriptor = nativeGetOwnPropertyDescriptor(it, key);
  if (descriptor && hasOwn(AllSymbols, key) && !(hasOwn(it, HIDDEN) && it[HIDDEN][key])) {
    descriptor.enumerable = true;
  }
  return descriptor;
};

var $getOwnPropertyNames = function getOwnPropertyNames(O) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (!hasOwn(AllSymbols, key) && !hasOwn(hiddenKeys, key)) push(result, key);
  });
  return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
  var result = [];
  $forEach(names, function (key) {
    if (hasOwn(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || hasOwn(ObjectPrototype, key))) {
      push(result, AllSymbols[key]);
    }
  });
  return result;
};

// `Symbol` constructor
// https://tc39.es/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (isPrototypeOf(SymbolPrototype, this)) throw TypeError('Symbol is not a constructor');
    var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) call(setter, ObjectPrototypeSymbols, value);
      if (hasOwn(this, HIDDEN) && hasOwn(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };

  SymbolPrototype = $Symbol[PROTOTYPE];

  redefine(SymbolPrototype, 'toString', function toString() {
    return getInternalState(this).tag;
  });

  redefine($Symbol, 'withoutSetter', function (description) {
    return wrap(uid(description), description);
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  definePropertiesModule.f = $defineProperties;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty(SymbolPrototype, 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }
}

$({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
  Symbol: $Symbol
});

$forEach(objectKeys(WellKnownSymbolsStore), function (name) {
  defineWellKnownSymbol(name);
});

$({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.es/ecma262/#sec-symbol.for
  'for': function (key) {
    var string = $toString(key);
    if (hasOwn(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
    var symbol = $Symbol(string);
    StringToSymbolRegistry[string] = symbol;
    SymbolToStringRegistry[symbol] = string;
    return symbol;
  },
  // `Symbol.keyFor` method
  // https://tc39.es/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    if (hasOwn(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.es/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.es/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.es/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.es/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
$({ target: 'Object', stat: true, forced: fails(function () { getOwnPropertySymbolsModule.f(1); }) }, {
  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
    return getOwnPropertySymbolsModule.f(toObject(it));
  }
});

// `JSON.stringify` method behavior with symbols
// https://tc39.es/ecma262/#sec-json.stringify
if ($stringify) {
  var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
    var symbol = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    return $stringify([symbol]) != '[null]'
      // WebKit converts symbol values to JSON as null
      || $stringify({ a: symbol }) != '{}'
      // V8 throws on boxed symbols
      || $stringify(Object(symbol)) != '{}';
  });

  $({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
    // eslint-disable-next-line no-unused-vars -- required for `.length`
    stringify: function stringify(it, replacer, space) {
      var args = arraySlice(arguments);
      var $replacer = replacer;
      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      if (!isArray(replacer)) replacer = function (key, value) {
        if (isCallable($replacer)) value = call($replacer, this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return apply($stringify, null, args);
    }
  });
}

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive
if (!SymbolPrototype[TO_PRIMITIVE]) {
  var valueOf = SymbolPrototype.valueOf;
  // eslint-disable-next-line no-unused-vars -- required for .length
  redefine(SymbolPrototype, TO_PRIMITIVE, function (hint) {
    // TODO: improve hint logic
    return call(valueOf, this);
  });
}
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

/* eslint-disable es/no-object-getownpropertynames -- safe */
var classof = __webpack_require__(49);
var toIndexedObject = __webpack_require__(54);
var $getOwnPropertyNames = __webpack_require__(58).f;
var arraySlice = __webpack_require__(111);

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return $getOwnPropertyNames(it);
  } catch (error) {
    return arraySlice(windowNames);
  }
};

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && classof(it) == 'Window'
    ? getWindowNames(it)
    : $getOwnPropertyNames(toIndexedObject(it));
};


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var toAbsoluteIndex = __webpack_require__(61);
var lengthOfArrayLike = __webpack_require__(63);
var createProperty = __webpack_require__(79);

var Array = global.Array;
var max = Math.max;

module.exports = function (O, start, end) {
  var length = lengthOfArrayLike(O);
  var k = toAbsoluteIndex(start, length);
  var fin = toAbsoluteIndex(end === undefined ? length : end, length);
  var result = Array(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);

exports.f = wellKnownSymbol;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

var path = __webpack_require__(114);
var hasOwn = __webpack_require__(10);
var wrappedWellKnownSymbolModule = __webpack_require__(112);
var defineProperty = __webpack_require__(25).f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!hasOwn(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);

module.exports = global;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__(84);
var uncurryThis = __webpack_require__(11);
var IndexedObject = __webpack_require__(55);
var toObject = __webpack_require__(12);
var lengthOfArrayLike = __webpack_require__(63);
var arraySpeciesCreate = __webpack_require__(116);

var push = uncurryThis([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

module.exports = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod(7)
};


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

var arraySpeciesConstructor = __webpack_require__(117);

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isArray = __webpack_require__(78);
var isConstructor = __webpack_require__(72);
var isObject = __webpack_require__(28);
var wellKnownSymbol = __webpack_require__(3);

var SPECIES = wellKnownSymbol('species');
var Array = global.Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return C === undefined ? Array : C;
};


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// `Symbol.prototype.description` getter
// https://tc39.es/ecma262/#sec-symbol.prototype.description

var $ = __webpack_require__(51);
var DESCRIPTORS = __webpack_require__(24);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var hasOwn = __webpack_require__(10);
var isCallable = __webpack_require__(19);
var isPrototypeOf = __webpack_require__(35);
var toString = __webpack_require__(94);
var defineProperty = __webpack_require__(25).f;
var copyConstructorProperties = __webpack_require__(56);

var NativeSymbol = global.Symbol;
var SymbolPrototype = NativeSymbol && NativeSymbol.prototype;

if (DESCRIPTORS && isCallable(NativeSymbol) && (!('description' in SymbolPrototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : toString(arguments[0]);
    var result = isPrototypeOf(SymbolPrototype, this)
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };

  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  SymbolWrapper.prototype = SymbolPrototype;
  SymbolPrototype.constructor = SymbolWrapper;

  var NATIVE_SYMBOL = String(NativeSymbol('test')) == 'Symbol(test)';
  var symbolToString = uncurryThis(SymbolPrototype.toString);
  var symbolValueOf = uncurryThis(SymbolPrototype.valueOf);
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  var replace = uncurryThis(''.replace);
  var stringSlice = uncurryThis(''.slice);

  defineProperty(SymbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = symbolValueOf(this);
      var string = symbolToString(symbol);
      if (hasOwn(EmptyStringDescriptionStore, symbol)) return '';
      var desc = NATIVE_SYMBOL ? stringSlice(string, 7, -1) : replace(string, regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  $({ global: true, forced: true }, {
    Symbol: SymbolWrapper
  });
}


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

var defineWellKnownSymbol = __webpack_require__(113);

// `Symbol.iterator` well-known symbol
// https://tc39.es/ecma262/#sec-symbol.iterator
defineWellKnownSymbol('iterator');


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toIndexedObject = __webpack_require__(54);
var addToUnscopables = __webpack_require__(121);
var Iterators = __webpack_require__(88);
var InternalStateModule = __webpack_require__(42);
var defineProperty = __webpack_require__(25).f;
var defineIterator = __webpack_require__(95);
var IS_PURE = __webpack_require__(7);
var DESCRIPTORS = __webpack_require__(24);

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

// V8 ~ Chrome 45- bug
if (!IS_PURE && DESCRIPTORS && values.name !== 'values') try {
  defineProperty(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);
var create = __webpack_require__(73);
var definePropertyModule = __webpack_require__(25);

var UNSCOPABLES = wellKnownSymbol('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create(null)
  });
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var DOMIterables = __webpack_require__(123);
var DOMTokenListPrototype = __webpack_require__(124);
var ArrayIteratorMethods = __webpack_require__(120);
var createNonEnumerableProperty = __webpack_require__(23);
var wellKnownSymbol = __webpack_require__(3);

var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) {
      createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');


/***/ }),
/* 123 */
/***/ (function(module, exports) {

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = __webpack_require__(27);

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype = classList && classList.constructor && classList.constructor.prototype;

module.exports = DOMTokenListPrototype === Object.prototype ? undefined : DOMTokenListPrototype;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var redefineAll = __webpack_require__(126);
var InternalMetadataModule = __webpack_require__(127);
var collection = __webpack_require__(131);
var collectionWeak = __webpack_require__(135);
var isObject = __webpack_require__(28);
var isExtensible = __webpack_require__(128);
var enforceInternalState = __webpack_require__(42).enforce;
var NATIVE_WEAK_MAP = __webpack_require__(43);

var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;
var InternalWeakMap;

var wrapper = function (init) {
  return function WeakMap() {
    return init(this, arguments.length ? arguments[0] : undefined);
  };
};

// `WeakMap` constructor
// https://tc39.es/ecma262/#sec-weakmap-constructor
var $WeakMap = collection('WeakMap', wrapper, collectionWeak);

// IE11 WeakMap frozen keys fix
// We can't use feature detection because it crash some old IE builds
// https://github.com/zloirock/core-js/issues/485
if (NATIVE_WEAK_MAP && IS_IE11) {
  InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
  InternalMetadataModule.enable();
  var WeakMapPrototype = $WeakMap.prototype;
  var nativeDelete = uncurryThis(WeakMapPrototype['delete']);
  var nativeHas = uncurryThis(WeakMapPrototype.has);
  var nativeGet = uncurryThis(WeakMapPrototype.get);
  var nativeSet = uncurryThis(WeakMapPrototype.set);
  redefineAll(WeakMapPrototype, {
    'delete': function (key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeDelete(this, key) || state.frozen['delete'](key);
      } return nativeDelete(this, key);
    },
    has: function has(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) || state.frozen.has(key);
      } return nativeHas(this, key);
    },
    get: function get(key) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        return nativeHas(this, key) ? nativeGet(this, key) : state.frozen.get(key);
      } return nativeGet(this, key);
    },
    set: function set(key, value) {
      if (isObject(key) && !isExtensible(key)) {
        var state = enforceInternalState(this);
        if (!state.frozen) state.frozen = new InternalWeakMap();
        nativeHas(this, key) ? nativeSet(this, key, value) : state.frozen.set(key, value);
      } else nativeSet(this, key, value);
      return this;
    }
  });
}


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

var redefine = __webpack_require__(22);

module.exports = function (target, src, options) {
  for (var key in src) redefine(target, key, src[key], options);
  return target;
};


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var hiddenKeys = __webpack_require__(45);
var isObject = __webpack_require__(28);
var hasOwn = __webpack_require__(10);
var defineProperty = __webpack_require__(25).f;
var getOwnPropertyNamesModule = __webpack_require__(58);
var getOwnPropertyNamesExternalModule = __webpack_require__(110);
var isExtensible = __webpack_require__(128);
var uid = __webpack_require__(14);
var FREEZING = __webpack_require__(130);

var REQUIRED = false;
var METADATA = uid('meta');
var id = 0;

var setMetadata = function (it) {
  defineProperty(it, METADATA, { value: {
    objectID: 'O' + id++, // object ID
    weakData: {}          // weak collections IDs
  } });
};

var fastKey = function (it, create) {
  // return a primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMetadata(it);
  // return object ID
  } return it[METADATA].objectID;
};

var getWeakData = function (it, create) {
  if (!hasOwn(it, METADATA)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMetadata(it);
  // return the store of weak collections IDs
  } return it[METADATA].weakData;
};

// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZING && REQUIRED && isExtensible(it) && !hasOwn(it, METADATA)) setMetadata(it);
  return it;
};

var enable = function () {
  meta.enable = function () { /* empty */ };
  REQUIRED = true;
  var getOwnPropertyNames = getOwnPropertyNamesModule.f;
  var splice = uncurryThis([].splice);
  var test = {};
  test[METADATA] = 1;

  // prevent exposing of metadata key
  if (getOwnPropertyNames(test).length) {
    getOwnPropertyNamesModule.f = function (it) {
      var result = getOwnPropertyNames(it);
      for (var i = 0, length = result.length; i < length; i++) {
        if (result[i] === METADATA) {
          splice(result, i, 1);
          break;
        }
      } return result;
    };

    $({ target: 'Object', stat: true, forced: true }, {
      getOwnPropertyNames: getOwnPropertyNamesExternalModule.f
    });
  }
};

var meta = module.exports = {
  enable: enable,
  fastKey: fastKey,
  getWeakData: getWeakData,
  onFreeze: onFreeze
};

hiddenKeys[METADATA] = true;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);
var isObject = __webpack_require__(28);
var classof = __webpack_require__(49);
var ARRAY_BUFFER_NON_EXTENSIBLE = __webpack_require__(129);

// eslint-disable-next-line es/no-object-isextensible -- safe
var $isExtensible = Object.isExtensible;
var FAILS_ON_PRIMITIVES = fails(function () { $isExtensible(1); });

// `Object.isExtensible` method
// https://tc39.es/ecma262/#sec-object.isextensible
module.exports = (FAILS_ON_PRIMITIVES || ARRAY_BUFFER_NON_EXTENSIBLE) ? function isExtensible(it) {
  if (!isObject(it)) return false;
  if (ARRAY_BUFFER_NON_EXTENSIBLE && classof(it) == 'ArrayBuffer') return false;
  return $isExtensible ? $isExtensible(it) : true;
} : $isExtensible;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

// FF26- bug: ArrayBuffers are non-extensible, but Object.isExtensible does not report it
var fails = __webpack_require__(20);

module.exports = fails(function () {
  if (typeof ArrayBuffer == 'function') {
    var buffer = new ArrayBuffer(8);
    // eslint-disable-next-line es/no-object-isextensible, es/no-object-defineproperty -- safe
    if (Object.isExtensible(buffer)) Object.defineProperty(buffer, 'a', { value: 8 });
  }
});


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

var fails = __webpack_require__(20);

module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
  return Object.isExtensible(Object.preventExtensions({}));
});


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var isForced = __webpack_require__(67);
var redefine = __webpack_require__(22);
var InternalMetadataModule = __webpack_require__(127);
var iterate = __webpack_require__(132);
var anInstance = __webpack_require__(133);
var isCallable = __webpack_require__(19);
var isObject = __webpack_require__(28);
var fails = __webpack_require__(20);
var checkCorrectnessOfIteration = __webpack_require__(91);
var setToStringTag = __webpack_require__(100);
var inheritIfRequired = __webpack_require__(134);

module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
  var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
  var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
  var ADDER = IS_MAP ? 'set' : 'add';
  var NativeConstructor = global[CONSTRUCTOR_NAME];
  var NativePrototype = NativeConstructor && NativeConstructor.prototype;
  var Constructor = NativeConstructor;
  var exported = {};

  var fixMethod = function (KEY) {
    var uncurriedNativeMethod = uncurryThis(NativePrototype[KEY]);
    redefine(NativePrototype, KEY,
      KEY == 'add' ? function add(value) {
        uncurriedNativeMethod(this, value === 0 ? 0 : value);
        return this;
      } : KEY == 'delete' ? function (key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'get' ? function get(key) {
        return IS_WEAK && !isObject(key) ? undefined : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : KEY == 'has' ? function has(key) {
        return IS_WEAK && !isObject(key) ? false : uncurriedNativeMethod(this, key === 0 ? 0 : key);
      } : function set(key, value) {
        uncurriedNativeMethod(this, key === 0 ? 0 : key, value);
        return this;
      }
    );
  };

  var REPLACE = isForced(
    CONSTRUCTOR_NAME,
    !isCallable(NativeConstructor) || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
      new NativeConstructor().entries().next();
    }))
  );

  if (REPLACE) {
    // create collection constructor
    Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
    InternalMetadataModule.enable();
  } else if (isForced(CONSTRUCTOR_NAME, true)) {
    var instance = new Constructor();
    // early implementations not supports chaining
    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;
    // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false
    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });
    // most early implementations doesn't supports iterables, most modern - not close it correctly
    // eslint-disable-next-line no-new -- required for testing
    var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) { new NativeConstructor(iterable); });
    // for early implementations -0 and +0 not the same
    var BUGGY_ZERO = !IS_WEAK && fails(function () {
      // V8 ~ Chromium 42- fails only with 5+ elements
      var $instance = new NativeConstructor();
      var index = 5;
      while (index--) $instance[ADDER](index, index);
      return !$instance.has(-0);
    });

    if (!ACCEPT_ITERABLES) {
      Constructor = wrapper(function (dummy, iterable) {
        anInstance(dummy, NativePrototype);
        var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
        if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
        return that;
      });
      Constructor.prototype = NativePrototype;
      NativePrototype.constructor = Constructor;
    }

    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }

    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);

    // weak collections should not contains .clear method
    if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
  }

  exported[CONSTRUCTOR_NAME] = Constructor;
  $({ global: true, forced: Constructor != NativeConstructor }, exported);

  setToStringTag(Constructor, CONSTRUCTOR_NAME);

  if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);

  return Constructor;
};


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var bind = __webpack_require__(84);
var call = __webpack_require__(33);
var anObject = __webpack_require__(30);
var tryToString = __webpack_require__(38);
var isArrayIteratorMethod = __webpack_require__(87);
var lengthOfArrayLike = __webpack_require__(63);
var isPrototypeOf = __webpack_require__(35);
var getIterator = __webpack_require__(89);
var getIteratorMethod = __webpack_require__(90);
var iteratorClose = __webpack_require__(86);

var TypeError = global.TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

module.exports = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod(iterable);
    if (!iterFn) throw TypeError(tryToString(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod(iterFn)) {
      for (index = 0, length = lengthOfArrayLike(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = call(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf(ResultPrototype, result)) return result;
  } return new Result(false);
};


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isPrototypeOf = __webpack_require__(35);

var TypeError = global.TypeError;

module.exports = function (it, Prototype) {
  if (isPrototypeOf(Prototype, it)) return it;
  throw TypeError('Incorrect invocation');
};


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

var isCallable = __webpack_require__(19);
var isObject = __webpack_require__(28);
var setPrototypeOf = __webpack_require__(101);

// makes subclassing work correct for wrapped built-ins
module.exports = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf($this, NewTargetPrototype);
  return $this;
};


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(11);
var redefineAll = __webpack_require__(126);
var getWeakData = __webpack_require__(127).getWeakData;
var anObject = __webpack_require__(30);
var isObject = __webpack_require__(28);
var anInstance = __webpack_require__(133);
var iterate = __webpack_require__(132);
var ArrayIterationModule = __webpack_require__(115);
var hasOwn = __webpack_require__(10);
var InternalStateModule = __webpack_require__(42);

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;
var find = ArrayIterationModule.find;
var findIndex = ArrayIterationModule.findIndex;
var splice = uncurryThis([].splice);
var id = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function (store) {
  return store.frozen || (store.frozen = new UncaughtFrozenStore());
};

var UncaughtFrozenStore = function () {
  this.entries = [];
};

var findUncaughtFrozen = function (store, key) {
  return find(store.entries, function (it) {
    return it[0] === key;
  });
};

UncaughtFrozenStore.prototype = {
  get: function (key) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) return entry[1];
  },
  has: function (key) {
    return !!findUncaughtFrozen(this, key);
  },
  set: function (key, value) {
    var entry = findUncaughtFrozen(this, key);
    if (entry) entry[1] = value;
    else this.entries.push([key, value]);
  },
  'delete': function (key) {
    var index = findIndex(this.entries, function (it) {
      return it[0] === key;
    });
    if (~index) splice(this.entries, index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        id: id++,
        frozen: undefined
      });
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var data = getWeakData(anObject(key), true);
      if (data === true) uncaughtFrozenStore(state).set(key, value);
      else data[state.id] = value;
      return that;
    };

    redefineAll(Prototype, {
      // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
      // https://tc39.es/ecma262/#sec-weakset.prototype.delete
      'delete': function (key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state)['delete'](key);
        return data && hasOwn(data, state.id) && delete data[state.id];
      },
      // `{ WeakMap, WeakSet }.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-weakmap.prototype.has
      // https://tc39.es/ecma262/#sec-weakset.prototype.has
      has: function has(key) {
        var state = getInternalState(this);
        if (!isObject(key)) return false;
        var data = getWeakData(key);
        if (data === true) return uncaughtFrozenStore(state).has(key);
        return data && hasOwn(data, state.id);
      }
    });

    redefineAll(Prototype, IS_MAP ? {
      // `WeakMap.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.get
      get: function get(key) {
        var state = getInternalState(this);
        if (isObject(key)) {
          var data = getWeakData(key);
          if (data === true) return uncaughtFrozenStore(state).get(key);
          return data ? data[state.id] : undefined;
        }
      },
      // `WeakMap.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-weakmap.prototype.set
      set: function set(key, value) {
        return define(this, key, value);
      }
    } : {
      // `WeakSet.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-weakset.prototype.add
      add: function add(value) {
        return define(this, value, true);
      }
    });

    return Constructor;
  }
};


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var fails = __webpack_require__(20);
var toIndexedObject = __webpack_require__(54);
var nativeGetOwnPropertyDescriptor = __webpack_require__(52).f;
var DESCRIPTORS = __webpack_require__(24);

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor(1); });
var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
$({ target: 'Object', stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
    return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
  }
});


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var fails = __webpack_require__(20);
var toObject = __webpack_require__(12);
var nativeGetPrototypeOf = __webpack_require__(98);
var CORRECT_PROTOTYPE_GETTER = __webpack_require__(99);

var FAILS_ON_PRIMITIVES = fails(function () { nativeGetPrototypeOf(1); });

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES, sham: !CORRECT_PROTOTYPE_GETTER }, {
  getPrototypeOf: function getPrototypeOf(it) {
    return nativeGetPrototypeOf(toObject(it));
  }
});



/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var fails = __webpack_require__(20);
var getOwnPropertyNames = __webpack_require__(110).f;

// eslint-disable-next-line es/no-object-getownpropertynames -- required for testing
var FAILS_ON_PRIMITIVES = fails(function () { return !Object.getOwnPropertyNames(1); });

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  getOwnPropertyNames: getOwnPropertyNames
});


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var getOwnPropertyDescriptor = __webpack_require__(52).f;
var toLength = __webpack_require__(64);
var toString = __webpack_require__(94);
var notARegExp = __webpack_require__(140);
var requireObjectCoercible = __webpack_require__(13);
var correctIsRegExpLogic = __webpack_require__(142);
var IS_PURE = __webpack_require__(7);

// eslint-disable-next-line es/no-string-prototype-startswith -- safe
var un$StartsWith = uncurryThis(''.startsWith);
var stringSlice = uncurryThis(''.slice);
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.startsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.startswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = toString(searchString);
    return un$StartsWith
      ? un$StartsWith(that, search, index)
      : stringSlice(that, index, index + search.length) === search;
  }
});


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var isRegExp = __webpack_require__(141);

var TypeError = global.TypeError;

module.exports = function (it) {
  if (isRegExp(it)) {
    throw TypeError("The method doesn't accept regular expressions");
  } return it;
};


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(28);
var classof = __webpack_require__(49);
var wellKnownSymbol = __webpack_require__(3);

var MATCH = wellKnownSymbol('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

var wellKnownSymbol = __webpack_require__(3);

var MATCH = wellKnownSymbol('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.invalidSimpleRowAddress = exports.invalidSimpleColumnAddress = exports.invalidSimpleCellAddress = exports.getCellValueType = exports.getCellValueFormat = exports.getCellValueDetailedType = exports.getCellType = exports.equalSimpleCellAddress = exports.addressKey = exports.absoluteSheetReference = exports.ErrorType = exports.CellValueTypeOrd = exports.CellValueType = exports.CellValueNoNumber = exports.CellValueJustNumber = exports.CellValueDetailedType = exports.CellType = exports.CellError = void 0;
exports.isSimpleCellAddress = isSimpleCellAddress;
exports.simpleRowAddress = exports.simpleColumnAddress = exports.simpleCellAddress = exports.movedSimpleCellAddress = void 0;

__webpack_require__(144);

__webpack_require__(146);

var _DependencyGraph = __webpack_require__(147);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Possible errors returned by our interpreter.
 */
var ErrorType;
exports.ErrorType = ErrorType;

(function (ErrorType) {
  /** Division by zero. */
  ErrorType["DIV_BY_ZERO"] = "DIV_BY_ZERO";
  /** Unknown function name. */

  ErrorType["NAME"] = "NAME";
  ErrorType["VALUE"] = "VALUE";
  ErrorType["NUM"] = "NUM";
  ErrorType["NA"] = "NA";
  /** Cyclic dependency. */

  ErrorType["CYCLE"] = "CYCLE";
  /** Wrong address reference. */

  ErrorType["REF"] = "REF";
  /** Array spill error. */

  ErrorType["SPILL"] = "SPILL";
  /** Invalid/missing licence error. */

  ErrorType["LIC"] = "LIC";
  /** Generic error */

  ErrorType["ERROR"] = "ERROR";
})(ErrorType || (exports.ErrorType = ErrorType = {}));

var CellType;
exports.CellType = CellType;

(function (CellType) {
  CellType["FORMULA"] = "FORMULA";
  CellType["VALUE"] = "VALUE";
  CellType["ARRAY"] = "ARRAY";
  CellType["EMPTY"] = "EMPTY";
  CellType["ARRAYFORMULA"] = "ARRAYFORMULA";
})(CellType || (exports.CellType = CellType = {}));

var getCellType = function getCellType(vertex, address) {
  if (vertex instanceof _DependencyGraph.ArrayVertex) {
    if (vertex.isLeftCorner(address)) {
      return CellType.ARRAYFORMULA;
    } else {
      return CellType.ARRAY;
    }
  }

  if (vertex instanceof _DependencyGraph.FormulaCellVertex || vertex instanceof _DependencyGraph.ParsingErrorVertex) {
    return CellType.FORMULA;
  }

  if (vertex instanceof _DependencyGraph.ValueCellVertex) {
    return CellType.VALUE;
  }

  return CellType.EMPTY;
};

exports.getCellType = getCellType;
var CellValueNoNumber;
exports.CellValueNoNumber = CellValueNoNumber;

(function (CellValueNoNumber) {
  CellValueNoNumber["EMPTY"] = "EMPTY";
  CellValueNoNumber["NUMBER"] = "NUMBER";
  CellValueNoNumber["STRING"] = "STRING";
  CellValueNoNumber["BOOLEAN"] = "BOOLEAN";
  CellValueNoNumber["ERROR"] = "ERROR";
})(CellValueNoNumber || (exports.CellValueNoNumber = CellValueNoNumber = {}));

var CellValueJustNumber;
exports.CellValueJustNumber = CellValueJustNumber;

(function (CellValueJustNumber) {
  CellValueJustNumber["NUMBER"] = "NUMBER";
})(CellValueJustNumber || (exports.CellValueJustNumber = CellValueJustNumber = {}));

var CellValueType = Object.assign(Object.assign({}, CellValueNoNumber), CellValueJustNumber);
exports.CellValueType = CellValueType;
var CellValueDetailedType = Object.assign(Object.assign({}, CellValueNoNumber), _InterpreterValue.NumberType);
exports.CellValueDetailedType = CellValueDetailedType;

var CellValueTypeOrd = function CellValueTypeOrd(arg) {
  switch (arg) {
    case CellValueType.EMPTY:
      return 0;

    case CellValueType.NUMBER:
      return 1;

    case CellValueType.STRING:
      return 2;

    case CellValueType.BOOLEAN:
      return 3;

    case CellValueType.ERROR:
      return 4;
  }

  throw new Error('Cell value not computed');
};

exports.CellValueTypeOrd = CellValueTypeOrd;

var getCellValueType = function getCellValueType(cellValue) {
  if (cellValue === _InterpreterValue.EmptyValue) {
    return CellValueType.EMPTY;
  }

  if (cellValue instanceof CellError || cellValue instanceof _SimpleRangeValue.SimpleRangeValue) {
    return CellValueType.ERROR;
  }

  if (typeof cellValue === 'string') {
    return CellValueType.STRING;
  } else if ((0, _InterpreterValue.isExtendedNumber)(cellValue)) {
    return CellValueType.NUMBER;
  } else if (typeof cellValue === 'boolean') {
    return CellValueType.BOOLEAN;
  }

  throw new Error('Cell value not computed');
};

exports.getCellValueType = getCellValueType;

var getCellValueDetailedType = function getCellValueDetailedType(cellValue) {
  if ((0, _InterpreterValue.isExtendedNumber)(cellValue)) {
    return (0, _InterpreterValue.getTypeOfExtendedNumber)(cellValue);
  } else {
    return getCellValueType(cellValue);
  }
};

exports.getCellValueDetailedType = getCellValueDetailedType;

var getCellValueFormat = function getCellValueFormat(cellValue) {
  if ((0, _InterpreterValue.isExtendedNumber)(cellValue)) {
    return (0, _InterpreterValue.getFormatOfExtendedNumber)(cellValue);
  } else {
    return undefined;
  }
};

exports.getCellValueFormat = getCellValueFormat;

var CellError = /*#__PURE__*/function () {
  function CellError(type, message, root) {
    _classCallCheck(this, CellError);

    this.type = type;
    this.message = message;
    this.root = root;
  }

  _createClass(CellError, [{
    key: "attachRootVertex",
    value: function attachRootVertex(vertex) {
      if (this.root === undefined) {
        return new CellError(this.type, this.message, vertex);
      } else {
        return this;
      }
    }
  }], [{
    key: "parsingError",
    value: function parsingError() {
      return new CellError(ErrorType.ERROR, _errorMessage.ErrorMessage.ParseError);
    }
  }]);

  return CellError;
}();

exports.CellError = CellError;

var simpleRowAddress = function simpleRowAddress(sheet, row) {
  return {
    sheet: sheet,
    row: row
  };
};

exports.simpleRowAddress = simpleRowAddress;

var invalidSimpleRowAddress = function invalidSimpleRowAddress(address) {
  return address.row < 0;
};

exports.invalidSimpleRowAddress = invalidSimpleRowAddress;

var simpleColumnAddress = function simpleColumnAddress(sheet, col) {
  return {
    sheet: sheet,
    col: col
  };
};

exports.simpleColumnAddress = simpleColumnAddress;

var invalidSimpleColumnAddress = function invalidSimpleColumnAddress(address) {
  return address.col < 0;
};

exports.invalidSimpleColumnAddress = invalidSimpleColumnAddress;

var simpleCellAddress = function simpleCellAddress(sheet, col, row) {
  return {
    sheet: sheet,
    col: col,
    row: row
  };
};

exports.simpleCellAddress = simpleCellAddress;

var invalidSimpleCellAddress = function invalidSimpleCellAddress(address) {
  return address.col < 0 || address.row < 0;
};

exports.invalidSimpleCellAddress = invalidSimpleCellAddress;

var movedSimpleCellAddress = function movedSimpleCellAddress(address, toSheet, toRight, toBottom) {
  return simpleCellAddress(toSheet, address.col + toRight, address.row + toBottom);
};

exports.movedSimpleCellAddress = movedSimpleCellAddress;

var addressKey = function addressKey(address) {
  return "".concat(address.sheet, ",").concat(address.row, ",").concat(address.col);
};

exports.addressKey = addressKey;

function isSimpleCellAddress(obj) {
  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {
    return 'col' in obj && typeof obj.col === 'number' && 'row' in obj && typeof obj.row === 'number' && 'sheet' in obj && typeof obj.sheet === 'number';
  } else {
    return false;
  }
}

var absoluteSheetReference = function absoluteSheetReference(address, baseAddress) {
  var _a;

  return (_a = address.sheet) !== null && _a !== void 0 ? _a : baseAddress.sheet;
};

exports.absoluteSheetReference = absoluteSheetReference;

var equalSimpleCellAddress = function equalSimpleCellAddress(left, right) {
  return left.sheet === right.sheet && left.col === right.col && left.row === right.row;
};

exports.equalSimpleCellAddress = equalSimpleCellAddress;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var assign = __webpack_require__(145);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(24);
var uncurryThis = __webpack_require__(11);
var call = __webpack_require__(33);
var fails = __webpack_require__(20);
var objectKeys = __webpack_require__(75);
var getOwnPropertySymbolsModule = __webpack_require__(66);
var propertyIsEnumerableModule = __webpack_require__(53);
var toObject = __webpack_require__(12);
var IndexedObject = __webpack_require__(55);

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var fails = __webpack_require__(20);
var isArray = __webpack_require__(78);
var isObject = __webpack_require__(28);
var toObject = __webpack_require__(12);
var lengthOfArrayLike = __webpack_require__(63);
var createProperty = __webpack_require__(79);
var arraySpeciesCreate = __webpack_require__(116);
var arrayMethodHasSpeciesSupport = __webpack_require__(80);
var wellKnownSymbol = __webpack_require__(3);
var V8_VERSION = __webpack_require__(16);

var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';
var TypeError = global.TypeError;

// We can't use this feature detection in V8 since it causes
// deoptimization and serious performance degradation
// https://github.com/zloirock/core-js/issues/679
var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.es/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
$({ target: 'Array', proto: true, forced: FORCED }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  concat: function concat(arg) {
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = lengthOfArrayLike(E);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ValueCellVertex = exports.SparseStrategy = exports.SheetMapping = exports.RangeVertex = exports.RangeMapping = exports.ParsingErrorVertex = exports.Graph = exports.FormulaCellVertex = exports.EmptyCellVertex = exports.DependencyGraph = exports.DenseStrategy = exports.ArrayVertex = exports.ArrayMapping = exports.AddressMapping = void 0;

var _DependencyGraph = __webpack_require__(148);

exports.DependencyGraph = _DependencyGraph.DependencyGraph;

var _AddressMapping = __webpack_require__(260);

exports.AddressMapping = _AddressMapping.AddressMapping;

var _Graph = __webpack_require__(269);

exports.Graph = _Graph.Graph;

var _RangeMapping = __webpack_require__(271);

exports.RangeMapping = _RangeMapping.RangeMapping;

var _SheetMapping = __webpack_require__(277);

exports.SheetMapping = _SheetMapping.SheetMapping;

var _ArrayMapping = __webpack_require__(263);

exports.ArrayMapping = _ArrayMapping.ArrayMapping;

var _FormulaCellVertex = __webpack_require__(265);

exports.FormulaCellVertex = _FormulaCellVertex.FormulaCellVertex;
exports.ArrayVertex = _FormulaCellVertex.ArrayVertex;

var _EmptyCellVertex = __webpack_require__(283);

exports.EmptyCellVertex = _EmptyCellVertex.EmptyCellVertex;

var _ValueCellVertex = __webpack_require__(284);

exports.ValueCellVertex = _ValueCellVertex.ValueCellVertex;

var _ParsingErrorVertex = __webpack_require__(285);

exports.ParsingErrorVertex = _ParsingErrorVertex.ParsingErrorVertex;

var _RangeVertex = __webpack_require__(268);

exports.RangeVertex = _RangeVertex.RangeVertex;

var _SparseStrategy = __webpack_require__(286);

exports.SparseStrategy = _SparseStrategy.SparseStrategy;

var _DenseStrategy = __webpack_require__(287);

exports.DenseStrategy = _DenseStrategy.DenseStrategy;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(77);

__webpack_require__(103);

__webpack_require__(50);

exports.__esModule = true;
exports.DependencyGraph = void 0;

__webpack_require__(149);

__webpack_require__(150);

__webpack_require__(81);

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(151);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(146);

__webpack_require__(154);

__webpack_require__(157);

__webpack_require__(82);

var _AbsoluteCellRange = __webpack_require__(158);

var _absolutizeDependencies = __webpack_require__(243);

var _Cell = __webpack_require__(143);

var _ContentChanges = __webpack_require__(244);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _parser = __webpack_require__(169);

var _Span = __webpack_require__(242);

var _statistics = __webpack_require__(256);

var _2 = __webpack_require__(147);

var _AddressMapping = __webpack_require__(260);

var _ArrayMapping = __webpack_require__(263);

var _collectAddressesDependentToRange = __webpack_require__(264);

var _FormulaCellVertex = __webpack_require__(265);

var _Graph = __webpack_require__(269);

var _RangeMapping = __webpack_require__(271);

var _SheetMapping = __webpack_require__(277);

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var DependencyGraph = /*#__PURE__*/function () {
  function DependencyGraph(addressMapping, rangeMapping, sheetMapping, arrayMapping, stats, lazilyTransformingAstService, functionRegistry, namedExpressions) {
    var _this = this;

    _classCallCheck(this, DependencyGraph);

    this.addressMapping = addressMapping;
    this.rangeMapping = rangeMapping;
    this.sheetMapping = sheetMapping;
    this.arrayMapping = arrayMapping;
    this.stats = stats;
    this.lazilyTransformingAstService = lazilyTransformingAstService;
    this.functionRegistry = functionRegistry;
    this.namedExpressions = namedExpressions;
    this.changes = _ContentChanges.ContentChanges.empty();

    this.dependencyQueryAddresses = function (vertex) {
      if (vertex instanceof _2.RangeVertex) {
        return _this.rangeDependencyQuery(vertex).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              address = _ref2[0],
              _ = _ref2[1];

          return address;
        });
      } else {
        var dependenciesResult = _this.formulaDependencyQuery(vertex);

        if (dependenciesResult !== undefined) {
          var _dependenciesResult = _slicedToArray(dependenciesResult, 2),
              address = _dependenciesResult[0],
              dependencies = _dependenciesResult[1];

          return dependencies.map(function (dependency) {
            if (dependency instanceof _parser.NamedExpressionDependency) {
              return _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet).address;
            } else if ((0, _Cell.isSimpleCellAddress)(dependency)) {
              return dependency;
            } else {
              return (0, _AbsoluteCellRange.simpleCellRange)(dependency.start, dependency.end);
            }
          });
        } else {
          return [];
        }
      }
    };

    this.dependencyQueryVertices = function (vertex) {
      if (vertex instanceof _2.RangeVertex) {
        return _this.rangeDependencyQuery(vertex).map(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              _ = _ref4[0],
              v = _ref4[1];

          return v;
        });
      } else {
        var dependenciesResult = _this.formulaDependencyQuery(vertex);

        if (dependenciesResult !== undefined) {
          var _dependenciesResult2 = _slicedToArray(dependenciesResult, 2),
              address = _dependenciesResult2[0],
              dependencies = _dependenciesResult2[1];

          return dependencies.map(function (dependency) {
            if (dependency instanceof _AbsoluteCellRange.AbsoluteCellRange) {
              return _this.rangeMapping.fetchRange(dependency.start, dependency.end);
            } else if (dependency instanceof _parser.NamedExpressionDependency) {
              var namedExpression = _this.namedExpressions.namedExpressionOrPlaceholder(dependency.name, address.sheet);

              return _this.addressMapping.fetchCell(namedExpression.address);
            } else {
              return _this.addressMapping.fetchCell(dependency);
            }
          });
        } else {
          return [];
        }
      }
    };

    this.rangeDependencyQuery = function (vertex) {
      var allDeps = [];

      var _this$rangeMapping$fi = _this.rangeMapping.findSmallerRange(vertex.range),
          smallerRangeVertex = _this$rangeMapping$fi.smallerRangeVertex,
          restRange = _this$rangeMapping$fi.restRange; //checking whether this range was splitted by bruteForce or not


      var range;

      if (smallerRangeVertex !== undefined && _this.graph.adjacentNodes(smallerRangeVertex).has(vertex)) {
        range = restRange;
        allDeps.push([new _AbsoluteCellRange.AbsoluteCellRange(smallerRangeVertex.start, smallerRangeVertex.end), smallerRangeVertex]);
      } else {
        //did we ever need to use full range
        range = vertex.range;
      }

      var _iterator = _createForOfIteratorHelper(range.addresses(_this)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var address = _step.value;

          var cell = _this.addressMapping.getCell(address);

          if (cell instanceof _2.EmptyCellVertex) {
            cell.address = address;
          }

          if (cell !== undefined) {
            allDeps.push([address, cell]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return allDeps;
    };

    this.formulaDependencyQuery = function (vertex) {
      var formula;
      var address;

      if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
        address = vertex.getAddress(_this.lazilyTransformingAstService);
        formula = vertex.getFormula(_this.lazilyTransformingAstService);
      } else {
        return undefined;
      }

      var deps = (0, _parser.collectDependencies)(formula, _this.functionRegistry);
      return [address, (0, _absolutizeDependencies.absolutizeDependencies)(deps, address)];
    };

    this.graph = new _Graph.Graph(this.dependencyQueryVertices);
  }
  /**
   * Invariants:
   * - empty cell has associated EmptyCellVertex if and only if it is a dependency (possibly indirect, through range) to some formula
   */


  _createClass(DependencyGraph, [{
    key: "setFormulaToCell",
    value: function setFormulaToCell(address, ast, dependencies, size, hasVolatileFunction, hasStructuralChangeFunction) {
      var newVertex = _FormulaCellVertex.FormulaVertex.fromAst(ast, address, size, this.lazilyTransformingAstService.version());

      this.exchangeOrAddFormulaVertex(newVertex);
      this.processCellDependencies(dependencies, newVertex);
      this.graph.markNodeAsSpecialRecentlyChanged(newVertex);

      if (hasVolatileFunction) {
        this.markAsVolatile(newVertex);
      }

      if (hasStructuralChangeFunction) {
        this.markAsDependentOnStructureChange(newVertex);
      }

      this.correctInfiniteRangesDependency(address);
      return this.getAndClearContentChanges();
    }
  }, {
    key: "setParsingErrorToCell",
    value: function setParsingErrorToCell(address, errorVertex) {
      var vertex = this.shrinkPossibleArrayAndGetCell(address);
      this.exchangeOrAddGraphNode(vertex, errorVertex);
      this.addressMapping.setCell(address, errorVertex);
      this.graph.markNodeAsSpecialRecentlyChanged(errorVertex);
      this.correctInfiniteRangesDependency(address);
      return this.getAndClearContentChanges();
    }
  }, {
    key: "setValueToCell",
    value: function setValueToCell(address, value) {
      var vertex = this.shrinkPossibleArrayAndGetCell(address);

      if (vertex instanceof _2.ArrayVertex) {
        this.arrayMapping.removeArray(vertex.getRange());
      }

      if (vertex instanceof _2.ValueCellVertex) {
        var oldValues = vertex.getValues();

        if (oldValues.rawValue !== value.rawValue) {
          vertex.setValues(value);
          this.graph.markNodeAsSpecialRecentlyChanged(vertex);
        }
      } else {
        var newVertex = new _2.ValueCellVertex(value.parsedValue, value.rawValue);
        this.exchangeOrAddGraphNode(vertex, newVertex);
        this.addressMapping.setCell(address, newVertex);
        this.graph.markNodeAsSpecialRecentlyChanged(newVertex);
      }

      this.correctInfiniteRangesDependency(address);
      return this.getAndClearContentChanges();
    }
  }, {
    key: "setCellEmpty",
    value: function setCellEmpty(address) {
      var vertex = this.shrinkPossibleArrayAndGetCell(address);

      if (vertex === undefined) {
        return _ContentChanges.ContentChanges.empty();
      }

      if (this.graph.adjacentNodes(vertex).size > 0) {
        var emptyVertex = new _2.EmptyCellVertex(address);
        this.exchangeGraphNode(vertex, emptyVertex);

        if (this.graph.adjacentNodesCount(emptyVertex) === 0) {
          this.removeVertex(emptyVertex);
          this.addressMapping.removeCell(address);
        } else {
          this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);
          this.addressMapping.setCell(address, emptyVertex);
        }
      } else {
        this.removeVertex(vertex);
        this.addressMapping.removeCell(address);
      }

      return this.getAndClearContentChanges();
    }
  }, {
    key: "ensureThatVertexIsNonArrayCellVertex",
    value: function ensureThatVertexIsNonArrayCellVertex(vertex) {
      if (vertex instanceof _2.ArrayVertex) {
        throw new Error('Illegal operation');
      }
    }
  }, {
    key: "clearRecentlyChangedVertices",
    value: function clearRecentlyChangedVertices() {
      this.graph.clearSpecialNodesRecentlyChanged();
    }
  }, {
    key: "verticesToRecompute",
    value: function verticesToRecompute() {
      return new Set([].concat(_toConsumableArray(this.graph.specialNodesRecentlyChanged), _toConsumableArray(this.volatileVertices())));
    }
  }, {
    key: "processCellDependencies",
    value: function processCellDependencies(cellDependencies, endVertex) {
      var _this2 = this;

      cellDependencies.forEach(function (dep) {
        if (dep instanceof _AbsoluteCellRange.AbsoluteCellRange) {
          var range = dep;

          var rangeVertex = _this2.getRange(range.start, range.end);

          if (rangeVertex === undefined) {
            rangeVertex = new _2.RangeVertex(range);

            _this2.rangeMapping.setRange(rangeVertex);
          }

          _this2.graph.addNode(rangeVertex);

          if (!range.isFinite()) {
            _this2.graph.markNodeAsInfiniteRange(rangeVertex);
          }

          var _this2$rangeMapping$f = _this2.rangeMapping.findSmallerRange(range),
              smallerRangeVertex = _this2$rangeMapping$f.smallerRangeVertex,
              restRange = _this2$rangeMapping$f.restRange;

          if (smallerRangeVertex !== undefined) {
            _this2.graph.addEdge(smallerRangeVertex, rangeVertex);

            if (rangeVertex.bruteForce) {
              rangeVertex.bruteForce = false;

              var _iterator2 = _createForOfIteratorHelper(range.addresses(_this2)),
                  _step2;

              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var cellFromRange = _step2.value;

                  //if we ever switch heuristic to processing by sorted sizes, this would be unnecessary
                  _this2.graph.removeEdge(_this2.fetchCell(cellFromRange), rangeVertex);
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          } else {
            rangeVertex.bruteForce = true;
          }

          var array = _this2.arrayMapping.getArray(restRange);

          if (array !== undefined) {
            _this2.graph.addEdge(array, rangeVertex);
          } else {
            var _iterator3 = _createForOfIteratorHelper(restRange.addresses(_this2)),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _cellFromRange = _step3.value;

                _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(_cellFromRange), rangeVertex);
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }

          _this2.graph.addEdge(rangeVertex, endVertex);

          if (range.isFinite()) {
            _this2.correctInfiniteRangesDependenciesByRangeVertex(rangeVertex);
          }
        } else if (dep instanceof _parser.NamedExpressionDependency) {
          var sheetOfVertex = endVertex.getAddress(_this2.lazilyTransformingAstService).sheet;

          var namedExpressionVertex = _this2.fetchNamedExpressionVertex(dep.name, sheetOfVertex);

          _this2.graph.addEdge(namedExpressionVertex, endVertex);
        } else {
          _this2.graph.addEdge(_this2.fetchCellOrCreateEmpty(dep), endVertex);
        }
      });
    }
  }, {
    key: "fetchNamedExpressionVertex",
    value: function fetchNamedExpressionVertex(expressionName, sheetId) {
      var namedExpression = this.namedExpressions.namedExpressionOrPlaceholder(expressionName, sheetId);
      return this.fetchCellOrCreateEmpty(namedExpression.address);
    }
  }, {
    key: "exchangeNode",
    value: function exchangeNode(addressFrom, addressTo) {
      var vertexFrom = this.fetchCellOrCreateEmpty(addressFrom);
      var vertexTo = this.fetchCellOrCreateEmpty(addressTo);
      this.addressMapping.removeCell(addressFrom);
      this.exchangeGraphNode(vertexFrom, vertexTo);
    }
  }, {
    key: "correctInfiniteRangesDependency",
    value: function correctInfiniteRangesDependency(address) {
      var vertex = undefined;

      var _iterator4 = _createForOfIteratorHelper(this.graph.infiniteRanges),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var range = _step4.value;
          var infiniteRangeVertex = range;

          if (infiniteRangeVertex.range.addressInRange(address)) {
            vertex = vertex !== null && vertex !== void 0 ? vertex : this.fetchCellOrCreateEmpty(address);
            this.graph.addEdge(vertex, infiniteRangeVertex);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "fetchCellOrCreateEmpty",
    value: function fetchCellOrCreateEmpty(address) {
      var vertex = this.addressMapping.getCell(address);

      if (vertex === undefined) {
        vertex = new _2.EmptyCellVertex(address);
        this.graph.addNode(vertex);
        this.addressMapping.setCell(address, vertex);
      }

      return vertex;
    }
  }, {
    key: "removeRows",
    value: function removeRows(removedRows) {
      var _this3 = this;

      this.stats.measure(_statistics.StatType.ADJUSTING_GRAPH, function () {
        var _iterator5 = _createForOfIteratorHelper(_this3.addressMapping.entriesFromRowsSpan(removedRows)),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _step5$value = _slicedToArray(_step5.value, 2),
                address = _step5$value[0],
                vertex = _step5$value[1];

            var _iterator6 = _createForOfIteratorHelper(_this3.graph.adjacentNodes(vertex)),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var adjacentNode = _step6.value;

                _this3.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }

            if (vertex instanceof _2.ArrayVertex) {
              if (vertex.isLeftCorner(address)) {
                _this3.shrinkArrayToCorner(vertex);

                _this3.arrayMapping.removeArray(vertex.getRange());
              } else {
                continue;
              }
            }

            _this3.removeVertex(vertex);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ADDRESS_MAPPING, function () {
        _this3.addressMapping.removeRows(removedRows);
      });
      var affectedArrays = this.stats.measure(_statistics.StatType.ADJUSTING_RANGES, function () {
        var affectedRanges = _this3.truncateRanges(removedRows, function (address) {
          return address.row;
        });

        return _this3.getArrayVerticesRelatedToRanges(affectedRanges);
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ARRAY_MAPPING, function () {
        _this3.fixArraysAfterRemovingRows(removedRows.sheet, removedRows.rowStart, removedRows.numberOfRows);
      });
      this.addStructuralNodesToChangeSet();
      return {
        affectedArrays: affectedArrays,
        contentChanges: this.getAndClearContentChanges()
      };
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(removedSheetId) {
      var _this4 = this;

      var arrays = new Set();

      var _iterator7 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(removedSheetId)),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              adr = _step7$value[0],
              vertex = _step7$value[1];

          if (vertex instanceof _2.ArrayVertex) {
            if (arrays.has(vertex)) {
              continue;
            } else {
              arrays.add(vertex);
            }
          }

          var _iterator10 = _createForOfIteratorHelper(this.graph.adjacentNodes(vertex)),
              _step10;

          try {
            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
              var adjacentNode = _step10.value;
              this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);
            }
          } catch (err) {
            _iterator10.e(err);
          } finally {
            _iterator10.f();
          }

          this.removeVertex(vertex);
          this.addressMapping.removeCell(adr);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      this.stats.measure(_statistics.StatType.ADJUSTING_ARRAY_MAPPING, function () {
        var _iterator8 = _createForOfIteratorHelper(arrays.values()),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var array = _step8.value;

            _this4.arrayMapping.removeArray(array.getRange());
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_RANGES, function () {
        var rangesToRemove = _this4.rangeMapping.removeRangesInSheet(removedSheetId);

        var _iterator9 = _createForOfIteratorHelper(rangesToRemove),
            _step9;

        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var range = _step9.value;

            _this4.removeVertex(range);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }

        _this4.stats.measure(_statistics.StatType.ADJUSTING_ADDRESS_MAPPING, function () {
          _this4.addressMapping.removeSheet(removedSheetId);
        });
      });
      this.addStructuralNodesToChangeSet();
    }
  }, {
    key: "clearSheet",
    value: function clearSheet(sheetId) {
      var arrays = new Set();

      var _iterator11 = _createForOfIteratorHelper(this.addressMapping.sheetEntries(sheetId)),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _step11$value = _slicedToArray(_step11.value, 2),
              address = _step11$value[0],
              vertex = _step11$value[1];

          if (vertex instanceof _2.ArrayVertex) {
            arrays.add(vertex);
          } else {
            this.setCellEmpty(address);
          }
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }

      var _iterator12 = _createForOfIteratorHelper(arrays.values()),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var array = _step12.value;
          this.setArrayEmpty(array);
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }

      this.addStructuralNodesToChangeSet();
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(removedColumns) {
      var _this5 = this;

      this.stats.measure(_statistics.StatType.ADJUSTING_GRAPH, function () {
        var _iterator13 = _createForOfIteratorHelper(_this5.addressMapping.entriesFromColumnsSpan(removedColumns)),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var _step13$value = _slicedToArray(_step13.value, 2),
                address = _step13$value[0],
                vertex = _step13$value[1];

            var _iterator14 = _createForOfIteratorHelper(_this5.graph.adjacentNodes(vertex)),
                _step14;

            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var adjacentNode = _step14.value;

                _this5.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }

            if (vertex instanceof _2.ArrayVertex) {
              if (vertex.isLeftCorner(address)) {
                _this5.shrinkArrayToCorner(vertex);

                _this5.arrayMapping.removeArray(vertex.getRange());
              } else {
                continue;
              }
            }

            _this5.removeVertex(vertex);
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ADDRESS_MAPPING, function () {
        _this5.addressMapping.removeColumns(removedColumns);
      });
      var affectedArrays = this.stats.measure(_statistics.StatType.ADJUSTING_RANGES, function () {
        var affectedRanges = _this5.truncateRanges(removedColumns, function (address) {
          return address.col;
        });

        return _this5.getArrayVerticesRelatedToRanges(affectedRanges);
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ARRAY_MAPPING, function () {
        return _this5.fixArraysAfterRemovingColumns(removedColumns.sheet, removedColumns.columnStart, removedColumns.numberOfColumns);
      });
      this.addStructuralNodesToChangeSet();
      return {
        affectedArrays: affectedArrays,
        contentChanges: this.getAndClearContentChanges()
      };
    }
  }, {
    key: "addRows",
    value: function addRows(addedRows) {
      var _this6 = this;

      this.stats.measure(_statistics.StatType.ADJUSTING_ADDRESS_MAPPING, function () {
        _this6.addressMapping.addRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);
      });
      var affectedArrays = this.stats.measure(_statistics.StatType.ADJUSTING_RANGES, function () {
        var result = _this6.rangeMapping.moveAllRangesInSheetAfterRowByRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);

        _this6.fixRangesWhenAddingRows(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);

        return _this6.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ARRAY_MAPPING, function () {
        _this6.fixArraysAfterAddingRow(addedRows.sheet, addedRows.rowStart, addedRows.numberOfRows);
      });

      var _iterator15 = _createForOfIteratorHelper(this.addressMapping.verticesFromRowsSpan(addedRows)),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var vertex = _step15.value;
          this.graph.markNodeAsSpecialRecentlyChanged(vertex);
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }

      this.addStructuralNodesToChangeSet();
      return {
        affectedArrays: affectedArrays
      };
    }
  }, {
    key: "addColumns",
    value: function addColumns(addedColumns) {
      var _this7 = this;

      this.stats.measure(_statistics.StatType.ADJUSTING_ADDRESS_MAPPING, function () {
        _this7.addressMapping.addColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);
      });
      var affectedArrays = this.stats.measure(_statistics.StatType.ADJUSTING_RANGES, function () {
        var result = _this7.rangeMapping.moveAllRangesInSheetAfterColumnByColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);

        _this7.fixRangesWhenAddingColumns(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);

        return _this7.getArrayVerticesRelatedToRanges(result.verticesWithChangedSize);
      });
      this.stats.measure(_statistics.StatType.ADJUSTING_ARRAY_MAPPING, function () {
        return _this7.fixArraysAfterAddingColumn(addedColumns.sheet, addedColumns.columnStart, addedColumns.numberOfColumns);
      });

      var _iterator16 = _createForOfIteratorHelper(this.addressMapping.verticesFromColumnsSpan(addedColumns)),
          _step16;

      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var vertex = _step16.value;
          this.graph.markNodeAsSpecialRecentlyChanged(vertex);
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }

      this.addStructuralNodesToChangeSet();
      return {
        affectedArrays: affectedArrays,
        contentChanges: this.getAndClearContentChanges()
      };
    }
  }, {
    key: "ensureNoArrayInRange",
    value: function ensureNoArrayInRange(range) {
      if (this.arrayMapping.isFormulaArrayInRange(range)) {
        throw Error('It is not possible to move / replace cells with array');
      }
    }
  }, {
    key: "isThereSpaceForArray",
    value: function isThereSpaceForArray(arrayVertex) {
      var range = arrayVertex.getRangeOrUndef();

      if (range === undefined) {
        return false;
      }

      var _iterator17 = _createForOfIteratorHelper(range.addresses(this)),
          _step17;

      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var address = _step17.value;
          var vertexUnderAddress = this.addressMapping.getCell(address);

          if (vertexUnderAddress !== undefined && !(vertexUnderAddress instanceof _2.EmptyCellVertex) && vertexUnderAddress !== arrayVertex) {
            return false;
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }

      return true;
    }
  }, {
    key: "moveCells",
    value: function moveCells(sourceRange, toRight, toBottom, toSheet) {
      var _iterator18 = _createForOfIteratorHelper(sourceRange.addressesWithDirection(toRight, toBottom, this)),
          _step18;

      try {
        for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
          var sourceAddress = _step18.value;
          var targetAddress = (0, _Cell.simpleCellAddress)(toSheet, sourceAddress.col + toRight, sourceAddress.row + toBottom);
          var sourceVertex = this.addressMapping.getCell(sourceAddress);
          var targetVertex = this.addressMapping.getCell(targetAddress);
          this.addressMapping.removeCell(sourceAddress);

          if (sourceVertex !== undefined) {
            this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);
            this.addressMapping.setCell(targetAddress, sourceVertex);
            var emptyVertex = undefined;

            var _iterator20 = _createForOfIteratorHelper(this.graph.adjacentNodes(sourceVertex)),
                _step20;

            try {
              for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                var adjacentNode = _step20.value;

                if (adjacentNode instanceof _2.RangeVertex && !sourceRange.containsRange(adjacentNode.range)) {
                  emptyVertex = emptyVertex !== null && emptyVertex !== void 0 ? emptyVertex : this.fetchCellOrCreateEmpty(sourceAddress);
                  this.graph.addEdge(emptyVertex, adjacentNode);
                  this.graph.removeEdge(sourceVertex, adjacentNode);
                }
              }
            } catch (err) {
              _iterator20.e(err);
            } finally {
              _iterator20.f();
            }

            if (emptyVertex) {
              this.graph.markNodeAsSpecialRecentlyChanged(emptyVertex);
              this.addressMapping.setCell(sourceAddress, emptyVertex);
            }
          }

          if (targetVertex !== undefined) {
            if (sourceVertex === undefined) {
              this.addressMapping.removeCell(targetAddress);
            }

            var _iterator21 = _createForOfIteratorHelper(this.graph.adjacentNodes(targetVertex)),
                _step21;

            try {
              for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                var _adjacentNode = _step21.value;
                sourceVertex = sourceVertex !== null && sourceVertex !== void 0 ? sourceVertex : this.fetchCellOrCreateEmpty(targetAddress);
                this.graph.addEdge(sourceVertex, _adjacentNode);
                this.graph.markNodeAsSpecialRecentlyChanged(sourceVertex);
              }
            } catch (err) {
              _iterator21.e(err);
            } finally {
              _iterator21.f();
            }

            this.removeVertex(targetVertex);
          }
        }
      } catch (err) {
        _iterator18.e(err);
      } finally {
        _iterator18.f();
      }

      var _iterator19 = _createForOfIteratorHelper(this.rangeMapping.rangeVerticesContainedInRange(sourceRange)),
          _step19;

      try {
        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
          var rangeVertex = _step19.value;

          var _iterator22 = _createForOfIteratorHelper(this.graph.adjacentNodes(rangeVertex)),
              _step22;

          try {
            for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
              var _adjacentNode2 = _step22.value;

              if (_adjacentNode2 instanceof _2.RangeVertex && !sourceRange.containsRange(_adjacentNode2.range)) {
                this.graph.removeEdge(rangeVertex, _adjacentNode2);

                var _iterator23 = _createForOfIteratorHelper(rangeVertex.range.addresses(this)),
                    _step23;

                try {
                  for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                    var address = _step23.value;
                    var newEmptyVertex = this.fetchCellOrCreateEmpty(address);
                    this.graph.addEdge(newEmptyVertex, _adjacentNode2);
                    this.addressMapping.setCell(address, newEmptyVertex);
                    this.graph.markNodeAsSpecialRecentlyChanged(newEmptyVertex);
                  }
                } catch (err) {
                  _iterator23.e(err);
                } finally {
                  _iterator23.f();
                }
              }
            }
          } catch (err) {
            _iterator22.e(err);
          } finally {
            _iterator22.f();
          }
        }
      } catch (err) {
        _iterator19.e(err);
      } finally {
        _iterator19.f();
      }

      this.rangeMapping.moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet);
    }
  }, {
    key: "setArrayEmpty",
    value: function setArrayEmpty(arrayVertex) {
      var arrayRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(arrayVertex.getAddress(this.lazilyTransformingAstService), arrayVertex.width, arrayVertex.height);

      var adjacentNodes = this.graph.adjacentNodes(arrayVertex);

      var _iterator24 = _createForOfIteratorHelper(arrayRange.addresses(this)),
          _step24;

      try {
        for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
          var address = _step24.value;
          this.addressMapping.removeCell(address);
        }
      } catch (err) {
        _iterator24.e(err);
      } finally {
        _iterator24.f();
      }

      var _iterator25 = _createForOfIteratorHelper(adjacentNodes.values()),
          _step25;

      try {
        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
          var adjacentNode = _step25.value;
          var nodeDependencies = (0, _collectAddressesDependentToRange.collectAddressesDependentToRange)(this.functionRegistry, adjacentNode, arrayVertex.getRange(), this.lazilyTransformingAstService, this);

          var _iterator26 = _createForOfIteratorHelper(nodeDependencies),
              _step26;

          try {
            for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
              var _address = _step26.value;
              var vertex = this.fetchCellOrCreateEmpty(_address);
              this.graph.addEdge(vertex, adjacentNode);
            }
          } catch (err) {
            _iterator26.e(err);
          } finally {
            _iterator26.f();
          }

          if (nodeDependencies.length > 0) {
            this.graph.markNodeAsSpecialRecentlyChanged(adjacentNode);
          }
        }
      } catch (err) {
        _iterator25.e(err);
      } finally {
        _iterator25.f();
      }

      this.removeVertex(arrayVertex);
      this.arrayMapping.removeArray(arrayVertex.getRange());
    }
  }, {
    key: "addVertex",
    value: function addVertex(address, vertex) {
      this.graph.addNode(vertex);
      this.addressMapping.setCell(address, vertex);
    }
  }, {
    key: "addArrayVertex",
    value: function addArrayVertex(address, vertex) {
      this.graph.addNode(vertex);
      this.setAddressMappingForArrayVertex(vertex, address);
    }
  }, {
    key: "arrayFormulaNodes",
    value: /*#__PURE__*/regeneratorRuntime.mark(function arrayFormulaNodes() {
      var _iterator27, _step27, vertex;

      return regeneratorRuntime.wrap(function arrayFormulaNodes$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator27 = _createForOfIteratorHelper(this.graph.nodes);
              _context.prev = 1;

              _iterator27.s();

            case 3:
              if ((_step27 = _iterator27.n()).done) {
                _context.next = 10;
                break;
              }

              vertex = _step27.value;

              if (!(vertex instanceof _2.ArrayVertex)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return vertex;

            case 8:
              _context.next = 3;
              break;

            case 10:
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);

              _iterator27.e(_context.t0);

            case 15:
              _context.prev = 15;

              _iterator27.f();

              return _context.finish(15);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, arrayFormulaNodes, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "entriesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {
      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.delegateYield(this.addressMapping.entriesFromRowsSpan(rowsSpan), "t0", 1);

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, entriesFromRowsSpan, this);
    })
  }, {
    key: "entriesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {
      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.delegateYield(this.addressMapping.entriesFromColumnsSpan(columnsSpan), "t0", 1);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, entriesFromColumnsSpan, this);
    })
  }, {
    key: "existsVertex",
    value: function existsVertex(address) {
      return this.addressMapping.has(address);
    }
  }, {
    key: "fetchCell",
    value: function fetchCell(address) {
      return this.addressMapping.fetchCell(address);
    }
  }, {
    key: "getCell",
    value: function getCell(address) {
      return this.addressMapping.getCell(address);
    }
  }, {
    key: "getCellValue",
    value: function getCellValue(address) {
      return this.addressMapping.getCellValue(address);
    }
  }, {
    key: "getRawValue",
    value: function getRawValue(address) {
      return this.addressMapping.getRawValue(address);
    }
  }, {
    key: "getScalarValue",
    value: function getScalarValue(address) {
      var value = this.addressMapping.getCellValue(address);

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
      }

      return value;
    }
  }, {
    key: "existsEdge",
    value: function existsEdge(fromNode, toNode) {
      return this.graph.existsEdge(fromNode, toNode);
    }
  }, {
    key: "getSheetId",
    value: function getSheetId(sheetName) {
      return this.sheetMapping.fetch(sheetName);
    }
  }, {
    key: "getSheetHeight",
    value: function getSheetHeight(sheet) {
      return this.addressMapping.getHeight(sheet);
    }
  }, {
    key: "getSheetWidth",
    value: function getSheetWidth(sheet) {
      return this.addressMapping.getWidth(sheet);
    }
  }, {
    key: "getArray",
    value: function getArray(range) {
      return this.arrayMapping.getArray(range);
    }
  }, {
    key: "setArray",
    value: function setArray(range, vertex) {
      this.arrayMapping.setArray(range, vertex);
    }
  }, {
    key: "getRange",
    value: function getRange(start, end) {
      return this.rangeMapping.getRange(start, end);
    }
  }, {
    key: "topSortWithScc",
    value: function topSortWithScc() {
      return this.graph.topSortWithScc();
    }
  }, {
    key: "markAsVolatile",
    value: function markAsVolatile(vertex) {
      this.graph.markNodeAsSpecial(vertex);
    }
  }, {
    key: "markAsDependentOnStructureChange",
    value: function markAsDependentOnStructureChange(vertex) {
      this.graph.markNodeAsChangingWithStructure(vertex);
    }
  }, {
    key: "forceApplyPostponedTransformations",
    value: function forceApplyPostponedTransformations() {
      var _iterator28 = _createForOfIteratorHelper(this.graph.nodes.values()),
          _step28;

      try {
        for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
          var vertex = _step28.value;

          if (vertex instanceof _2.FormulaCellVertex) {
            vertex.ensureRecentData(this.lazilyTransformingAstService);
          }
        }
      } catch (err) {
        _iterator28.e(err);
      } finally {
        _iterator28.f();
      }
    }
  }, {
    key: "volatileVertices",
    value: function volatileVertices() {
      return this.graph.specialNodes;
    }
  }, {
    key: "getArrayVerticesRelatedToRanges",
    value: function getArrayVerticesRelatedToRanges(ranges) {
      var _this8 = this;

      var arrayVertices = ranges.map(function (range) {
        if (_this8.graph.hasNode(range)) {
          return Array.from(_this8.graph.adjacentNodes(range)).filter(function (node) {
            return node instanceof _2.ArrayVertex;
          });
        } else {
          return [];
        }
      });
      return _construct(Set, _toConsumableArray(arrayVertices));
    }
  }, {
    key: "rawValuesFromRange",
    value: /*#__PURE__*/regeneratorRuntime.mark(function rawValuesFromRange(range) {
      var _iterator29, _step29, address, value;

      return regeneratorRuntime.wrap(function rawValuesFromRange$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iterator29 = _createForOfIteratorHelper(range.addresses(this));
              _context4.prev = 1;

              _iterator29.s();

            case 3:
              if ((_step29 = _iterator29.n()).done) {
                _context4.next = 11;
                break;
              }

              address = _step29.value;
              value = this.getScalarValue(address);

              if (!(value !== _InterpreterValue.EmptyValue)) {
                _context4.next = 9;
                break;
              }

              _context4.next = 9;
              return [(0, _InterpreterValue.getRawValue)(value), address];

            case 9:
              _context4.next = 3;
              break;

            case 11:
              _context4.next = 16;
              break;

            case 13:
              _context4.prev = 13;
              _context4.t0 = _context4["catch"](1);

              _iterator29.e(_context4.t0);

            case 16:
              _context4.prev = 16;

              _iterator29.f();

              return _context4.finish(16);

            case 19:
            case "end":
              return _context4.stop();
          }
        }
      }, rawValuesFromRange, this, [[1, 13, 16, 19]]);
    })
  }, {
    key: "entriesFromRange",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRange(range) {
      var _iterator30, _step30, address;

      return regeneratorRuntime.wrap(function entriesFromRange$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _iterator30 = _createForOfIteratorHelper(range.addresses(this));
              _context5.prev = 1;

              _iterator30.s();

            case 3:
              if ((_step30 = _iterator30.n()).done) {
                _context5.next = 9;
                break;
              }

              address = _step30.value;
              _context5.next = 7;
              return [address, this.getCell(address)];

            case 7:
              _context5.next = 3;
              break;

            case 9:
              _context5.next = 14;
              break;

            case 11:
              _context5.prev = 11;
              _context5.t0 = _context5["catch"](1);

              _iterator30.e(_context5.t0);

            case 14:
              _context5.prev = 14;

              _iterator30.f();

              return _context5.finish(14);

            case 17:
            case "end":
              return _context5.stop();
          }
        }
      }, entriesFromRange, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "exchangeGraphNode",
    value: function exchangeGraphNode(oldNode, newNode) {
      var _this9 = this;

      this.graph.addNode(newNode);
      var adjNodesStored = this.graph.adjacentNodes(oldNode);
      this.removeVertex(oldNode);
      adjNodesStored.forEach(function (adjacentNode) {
        if (_this9.graph.hasNode(adjacentNode)) {
          _this9.graph.addEdge(newNode, adjacentNode);
        }
      });
    }
  }, {
    key: "exchangeOrAddGraphNode",
    value: function exchangeOrAddGraphNode(oldNode, newNode) {
      if (oldNode) {
        this.exchangeGraphNode(oldNode, newNode);
      } else {
        this.graph.addNode(newNode);
      }
    }
  }, {
    key: "computeListOfValuesInRange",
    value: function computeListOfValuesInRange(range) {
      var values = [];

      var _iterator31 = _createForOfIteratorHelper(range.addresses(this)),
          _step31;

      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var cellFromRange = _step31.value;
          var value = this.getScalarValue(cellFromRange);
          values.push(value);
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }

      return values;
    }
  }, {
    key: "shrinkArrayToCorner",
    value: function shrinkArrayToCorner(array) {
      this.cleanAddressMappingUnderArray(array);

      var _iterator32 = _createForOfIteratorHelper(this.adjacentArrayVertices(array)),
          _step32;

      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var adjacentVertex = _step32.value;
          var relevantDependencies = void 0;

          if (adjacentVertex instanceof _FormulaCellVertex.FormulaVertex) {
            relevantDependencies = this.formulaDirectDependenciesToArray(adjacentVertex, array);
          } else {
            relevantDependencies = this.rangeDirectDependenciesToArray(adjacentVertex, array);
          }

          var dependentToCorner = false;

          var _iterator33 = _createForOfIteratorHelper(relevantDependencies),
              _step33;

          try {
            for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
              var _step33$value = _slicedToArray(_step33.value, 2),
                  address = _step33$value[0],
                  vertex = _step33$value[1];

              if (array.isLeftCorner(address)) {
                dependentToCorner = true;
              }

              this.graph.addEdge(vertex, adjacentVertex);
              this.graph.markNodeAsSpecialRecentlyChanged(vertex);
            }
          } catch (err) {
            _iterator33.e(err);
          } finally {
            _iterator33.f();
          }

          if (!dependentToCorner) {
            this.graph.removeEdge(array, adjacentVertex);
          }
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }

      this.graph.markNodeAsSpecialRecentlyChanged(array);
    }
  }, {
    key: "isArrayInternalCell",
    value: function isArrayInternalCell(address) {
      var vertex = this.getCell(address);
      return vertex instanceof _2.ArrayVertex && !vertex.isLeftCorner(address);
    }
  }, {
    key: "getAndClearContentChanges",
    value: function getAndClearContentChanges() {
      var changes = this.changes;
      this.changes = _ContentChanges.ContentChanges.empty();
      return changes;
    }
  }, {
    key: "getAdjacentNodesAddresses",
    value: function getAdjacentNodesAddresses(inputVertex) {
      var _this10 = this;

      var deps = this.graph.adjacentNodes(inputVertex);
      var ret = [];
      deps.forEach(function (vertex) {
        var castVertex = vertex;

        if (castVertex instanceof _2.RangeVertex) {
          ret.push((0, _AbsoluteCellRange.simpleCellRange)(castVertex.start, castVertex.end));
        } else {
          ret.push(castVertex.getAddress(_this10.lazilyTransformingAstService));
        }
      });
      return ret;
    }
  }, {
    key: "correctInfiniteRangesDependenciesByRangeVertex",
    value: function correctInfiniteRangesDependenciesByRangeVertex(vertex) {
      var _iterator34 = _createForOfIteratorHelper(this.graph.infiniteRanges),
          _step34;

      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var range = _step34.value;
          var infiniteRangeVertex = range;
          var intersection = vertex.range.intersectionWith(infiniteRangeVertex.range);

          if (intersection === undefined) {
            continue;
          }

          var _iterator35 = _createForOfIteratorHelper(intersection.addresses(this)),
              _step35;

          try {
            for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
              var address = _step35.value;
              this.graph.addEdge(this.fetchCellOrCreateEmpty(address), range);
            }
          } catch (err) {
            _iterator35.e(err);
          } finally {
            _iterator35.f();
          }
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
    }
  }, {
    key: "cleanAddressMappingUnderArray",
    value: function cleanAddressMappingUnderArray(vertex) {
      var arrayRange = vertex.getRange();

      var _iterator36 = _createForOfIteratorHelper(arrayRange.addresses(this)),
          _step36;

      try {
        for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
          var address = _step36.value;
          var oldValue = vertex.getArrayCellValue(address);

          if (this.getCell(address) === vertex) {
            if (vertex.isLeftCorner(address)) {
              this.changes.addChange(new _Cell.CellError(_Cell.ErrorType.REF), address, oldValue);
            } else {
              this.addressMapping.removeCell(address);
              this.changes.addChange(_InterpreterValue.EmptyValue, address, oldValue);
            }
          } else {
            this.changes.addChange(_InterpreterValue.EmptyValue, address, oldValue);
          }
        }
      } catch (err) {
        _iterator36.e(err);
      } finally {
        _iterator36.f();
      }
    }
  }, {
    key: "formulaDirectDependenciesToArray",
    value: /*#__PURE__*/regeneratorRuntime.mark(function formulaDirectDependenciesToArray(vertex, array) {
      var _a, _ref5, _ref6, formulaDependencies, _iterator37, _step37, dependency, _vertex;

      return regeneratorRuntime.wrap(function formulaDirectDependenciesToArray$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _ref5 = (_a = this.formulaDependencyQuery(vertex)) !== null && _a !== void 0 ? _a : [], _ref6 = _slicedToArray(_ref5, 2), formulaDependencies = _ref6[1];

              if (!(formulaDependencies === undefined)) {
                _context6.next = 3;
                break;
              }

              return _context6.abrupt("return");

            case 3:
              _iterator37 = _createForOfIteratorHelper(formulaDependencies);
              _context6.prev = 4;

              _iterator37.s();

            case 6:
              if ((_step37 = _iterator37.n()).done) {
                _context6.next = 16;
                break;
              }

              dependency = _step37.value;

              if (!(dependency instanceof _parser.NamedExpressionDependency || dependency instanceof _AbsoluteCellRange.AbsoluteCellRange)) {
                _context6.next = 10;
                break;
              }

              return _context6.abrupt("continue", 14);

            case 10:
              if (!array.getRange().addressInRange(dependency)) {
                _context6.next = 14;
                break;
              }

              _vertex = this.fetchCellOrCreateEmpty(dependency);
              _context6.next = 14;
              return [dependency, _vertex];

            case 14:
              _context6.next = 6;
              break;

            case 16:
              _context6.next = 21;
              break;

            case 18:
              _context6.prev = 18;
              _context6.t0 = _context6["catch"](4);

              _iterator37.e(_context6.t0);

            case 21:
              _context6.prev = 21;

              _iterator37.f();

              return _context6.finish(21);

            case 24:
            case "end":
              return _context6.stop();
          }
        }
      }, formulaDirectDependenciesToArray, this, [[4, 18, 21, 24]]);
    })
  }, {
    key: "rangeDirectDependenciesToArray",
    value: /*#__PURE__*/regeneratorRuntime.mark(function rangeDirectDependenciesToArray(vertex, array) {
      var _this$rangeMapping$fi2, range, _iterator38, _step38, address, cell;

      return regeneratorRuntime.wrap(function rangeDirectDependenciesToArray$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _this$rangeMapping$fi2 = this.rangeMapping.findSmallerRange(vertex.range), range = _this$rangeMapping$fi2.restRange;
              _iterator38 = _createForOfIteratorHelper(range.addresses(this));
              _context7.prev = 2;

              _iterator38.s();

            case 4:
              if ((_step38 = _iterator38.n()).done) {
                _context7.next = 12;
                break;
              }

              address = _step38.value;

              if (!array.getRange().addressInRange(address)) {
                _context7.next = 10;
                break;
              }

              cell = this.fetchCellOrCreateEmpty(address);
              _context7.next = 10;
              return [address, cell];

            case 10:
              _context7.next = 4;
              break;

            case 12:
              _context7.next = 17;
              break;

            case 14:
              _context7.prev = 14;
              _context7.t0 = _context7["catch"](2);

              _iterator38.e(_context7.t0);

            case 17:
              _context7.prev = 17;

              _iterator38.f();

              return _context7.finish(17);

            case 20:
            case "end":
              return _context7.stop();
          }
        }
      }, rangeDirectDependenciesToArray, this, [[2, 14, 17, 20]]);
    })
  }, {
    key: "adjacentArrayVertices",
    value: /*#__PURE__*/regeneratorRuntime.mark(function adjacentArrayVertices(vertex) {
      var adjacentNodes, _iterator39, _step39, item;

      return regeneratorRuntime.wrap(function adjacentArrayVertices$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              adjacentNodes = this.graph.adjacentNodes(vertex);
              _iterator39 = _createForOfIteratorHelper(adjacentNodes);
              _context8.prev = 2;

              _iterator39.s();

            case 4:
              if ((_step39 = _iterator39.n()).done) {
                _context8.next = 11;
                break;
              }

              item = _step39.value;

              if (!(item instanceof _FormulaCellVertex.FormulaVertex || item instanceof _2.RangeVertex)) {
                _context8.next = 9;
                break;
              }

              _context8.next = 9;
              return item;

            case 9:
              _context8.next = 4;
              break;

            case 11:
              _context8.next = 16;
              break;

            case 13:
              _context8.prev = 13;
              _context8.t0 = _context8["catch"](2);

              _iterator39.e(_context8.t0);

            case 16:
              _context8.prev = 16;

              _iterator39.f();

              return _context8.finish(16);

            case 19:
            case "end":
              return _context8.stop();
          }
        }
      }, adjacentArrayVertices, this, [[2, 13, 16, 19]]);
    })
  }, {
    key: "addStructuralNodesToChangeSet",
    value: function addStructuralNodesToChangeSet() {
      var _iterator40 = _createForOfIteratorHelper(this.graph.specialNodesStructuralChanges),
          _step40;

      try {
        for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
          var vertex = _step40.value;
          this.graph.markNodeAsSpecialRecentlyChanged(vertex);
        }
      } catch (err) {
        _iterator40.e(err);
      } finally {
        _iterator40.f();
      }
    }
  }, {
    key: "fixRangesWhenAddingRows",
    value: function fixRangesWhenAddingRows(sheet, row, numberOfRows) {
      var originalValues = Array.from(this.rangeMapping.rangesInSheet(sheet));

      for (var _i2 = 0, _originalValues = originalValues; _i2 < _originalValues.length; _i2++) {
        var rangeVertex = _originalValues[_i2];

        if (rangeVertex.range.includesRow(row + numberOfRows)) {
          if (rangeVertex.bruteForce) {
            var addedSubrangeInThatRange = rangeVertex.range.rangeWithSameWidth(row, numberOfRows);

            var _iterator41 = _createForOfIteratorHelper(addedSubrangeInThatRange.addresses(this)),
                _step41;

            try {
              for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
                var address = _step41.value;
                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);
              }
            } catch (err) {
              _iterator41.e(err);
            } finally {
              _iterator41.f();
            }
          } else {
            var currentRangeVertex = rangeVertex;
            var find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);

            if (find.smallerRangeVertex !== undefined) {
              continue;
            }

            while (find.smallerRangeVertex === undefined) {
              var newRangeVertex = new _2.RangeVertex(_AbsoluteCellRange.AbsoluteCellRange.spanFrom(currentRangeVertex.range.start, currentRangeVertex.range.width(), currentRangeVertex.range.height() - 1));
              this.rangeMapping.setRange(newRangeVertex);
              this.graph.addNode(newRangeVertex);
              var restRange = new _AbsoluteCellRange.AbsoluteCellRange((0, _Cell.simpleCellAddress)(currentRangeVertex.range.start.sheet, currentRangeVertex.range.start.col, currentRangeVertex.range.end.row), currentRangeVertex.range.end);
              this.addAllFromRange(restRange, currentRangeVertex);
              this.graph.addEdge(newRangeVertex, currentRangeVertex);
              currentRangeVertex = newRangeVertex;
              find = this.rangeMapping.findSmallerRange(currentRangeVertex.range);
            }

            this.graph.addEdge(find.smallerRangeVertex, currentRangeVertex);
            this.addAllFromRange(find.restRange, currentRangeVertex);
            this.graph.removeEdge(find.smallerRangeVertex, rangeVertex);
          }
        }
      }
    }
  }, {
    key: "addAllFromRange",
    value: function addAllFromRange(range, vertex) {
      var _iterator42 = _createForOfIteratorHelper(range.addresses(this)),
          _step42;

      try {
        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
          var address = _step42.value;
          this.graph.addEdge(this.fetchCellOrCreateEmpty(address), vertex);
        }
      } catch (err) {
        _iterator42.e(err);
      } finally {
        _iterator42.f();
      }
    }
  }, {
    key: "fixRangesWhenAddingColumns",
    value: function fixRangesWhenAddingColumns(sheet, column, numberOfColumns) {
      var _iterator43 = _createForOfIteratorHelper(this.rangeMapping.rangesInSheet(sheet)),
          _step43;

      try {
        for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
          var rangeVertex = _step43.value;

          if (rangeVertex.range.includesColumn(column + numberOfColumns)) {
            var subrange = void 0;

            if (rangeVertex.bruteForce) {
              subrange = rangeVertex.range.rangeWithSameHeight(column, numberOfColumns);
            } else {
              subrange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom((0, _Cell.simpleCellAddress)(sheet, column, rangeVertex.range.end.row), numberOfColumns, 1);
            }

            var _iterator44 = _createForOfIteratorHelper(subrange.addresses(this)),
                _step44;

            try {
              for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                var address = _step44.value;
                this.graph.addEdge(this.fetchCellOrCreateEmpty(address), rangeVertex);
              }
            } catch (err) {
              _iterator44.e(err);
            } finally {
              _iterator44.f();
            }
          }
        }
      } catch (err) {
        _iterator43.e(err);
      } finally {
        _iterator43.f();
      }
    }
  }, {
    key: "exchangeOrAddFormulaVertex",
    value: function exchangeOrAddFormulaVertex(vertex) {
      var address = vertex.getAddress(this.lazilyTransformingAstService);

      var range = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(address, vertex.width, vertex.height);

      var oldNode = this.shrinkPossibleArrayAndGetCell(address);

      if (vertex instanceof _2.ArrayVertex) {
        this.setArray(range, vertex);
      }

      this.exchangeOrAddGraphNode(oldNode, vertex);
      this.addressMapping.setCell(address, vertex);

      if (vertex instanceof _2.ArrayVertex) {
        if (!this.isThereSpaceForArray(vertex)) {
          return;
        }

        var _iterator45 = _createForOfIteratorHelper(range.addresses(this)),
            _step45;

        try {
          for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
            var cellAddress = _step45.value;

            if (vertex.isLeftCorner(cellAddress)) {
              continue;
            }

            var old = this.getCell(cellAddress);
            this.exchangeOrAddGraphNode(old, vertex);
          }
        } catch (err) {
          _iterator45.e(err);
        } finally {
          _iterator45.f();
        }
      }

      var _iterator46 = _createForOfIteratorHelper(range.addresses(this)),
          _step46;

      try {
        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
          var _cellAddress = _step46.value;
          this.addressMapping.setCell(_cellAddress, vertex);
        }
      } catch (err) {
        _iterator46.e(err);
      } finally {
        _iterator46.f();
      }
    }
  }, {
    key: "setAddressMappingForArrayVertex",
    value: function setAddressMappingForArrayVertex(vertex, formulaAddress) {
      this.addressMapping.setCell(formulaAddress, vertex);

      if (!(vertex instanceof _2.ArrayVertex)) {
        return;
      }

      var range = _AbsoluteCellRange.AbsoluteCellRange.spanFromOrUndef(formulaAddress, vertex.width, vertex.height);

      if (range === undefined) {
        return;
      }

      this.setArray(range, vertex);

      if (!this.isThereSpaceForArray(vertex)) {
        return;
      }

      var _iterator47 = _createForOfIteratorHelper(range.addresses(this)),
          _step47;

      try {
        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
          var address = _step47.value;
          this.addressMapping.setCell(address, vertex);
        }
      } catch (err) {
        _iterator47.e(err);
      } finally {
        _iterator47.f();
      }
    }
  }, {
    key: "truncateRanges",
    value: function truncateRanges(span, coordinate) {
      var _this$rangeMapping$tr = this.rangeMapping.truncateRanges(span, coordinate),
          verticesToRemove = _this$rangeMapping$tr.verticesToRemove,
          verticesToMerge = _this$rangeMapping$tr.verticesToMerge,
          verticesWithChangedSize = _this$rangeMapping$tr.verticesWithChangedSize;

      var _iterator48 = _createForOfIteratorHelper(verticesToMerge),
          _step48;

      try {
        for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
          var _step48$value = _slicedToArray(_step48.value, 2),
              existingVertex = _step48$value[0],
              mergedVertex = _step48$value[1];

          this.mergeRangeVertices(existingVertex, mergedVertex);
        }
      } catch (err) {
        _iterator48.e(err);
      } finally {
        _iterator48.f();
      }

      var _iterator49 = _createForOfIteratorHelper(verticesToRemove),
          _step49;

      try {
        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
          var rangeVertex = _step49.value;
          this.removeVertexAndCleanupDependencies(rangeVertex);
        }
      } catch (err) {
        _iterator49.e(err);
      } finally {
        _iterator49.f();
      }

      return verticesWithChangedSize;
    }
  }, {
    key: "fixArraysAfterAddingRow",
    value: function fixArraysAfterAddingRow(sheet, rowStart, numberOfRows) {
      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, numberOfRows);

      if (rowStart <= 0) {
        return;
      }

      var _iterator50 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(_Span.RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),
          _step50;

      try {
        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
          var _step50$value = _slicedToArray(_step50.value, 2),
              array = _step50$value[1];

          var arrayRange = array.getRange();

          for (var col = arrayRange.start.col; col <= arrayRange.end.col; ++col) {
            for (var row = rowStart; row <= arrayRange.end.row; ++row) {
              var destination = (0, _Cell.simpleCellAddress)(sheet, col, row);
              var source = (0, _Cell.simpleCellAddress)(sheet, col, row + numberOfRows);
              var value = array.getArrayCellValue(destination);
              this.addressMapping.moveCell(source, destination);
              this.changes.addChange(_InterpreterValue.EmptyValue, source, value);
            }
          }
        }
      } catch (err) {
        _iterator50.e(err);
      } finally {
        _iterator50.f();
      }
    }
  }, {
    key: "fixArraysAfterRemovingRows",
    value: function fixArraysAfterRemovingRows(sheet, rowStart, numberOfRows) {
      this.arrayMapping.moveArrayVerticesAfterRowByRows(sheet, rowStart, -numberOfRows);

      if (rowStart <= 0) {
        return;
      }

      var _iterator51 = _createForOfIteratorHelper(this.arrayMapping.arraysInRows(_Span.RowsSpan.fromRowStartAndEnd(sheet, rowStart - 1, rowStart - 1))),
          _step51;

      try {
        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
          var _step51$value = _slicedToArray(_step51.value, 2),
              array = _step51$value[1];

          if (this.isThereSpaceForArray(array)) {
            var _iterator52 = _createForOfIteratorHelper(array.getRange().addresses(this)),
                _step52;

            try {
              for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
                var address = _step52.value;
                this.addressMapping.setCell(address, array);
              }
            } catch (err) {
              _iterator52.e(err);
            } finally {
              _iterator52.f();
            }
          } else {
            this.setNoSpaceIfArray(array);
          }
        }
      } catch (err) {
        _iterator51.e(err);
      } finally {
        _iterator51.f();
      }
    }
  }, {
    key: "fixArraysAfterAddingColumn",
    value: function fixArraysAfterAddingColumn(sheet, columnStart, numberOfColumns) {
      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, numberOfColumns);

      if (columnStart <= 0) {
        return;
      }

      var _iterator53 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(_Span.ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),
          _step53;

      try {
        for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
          var _step53$value = _slicedToArray(_step53.value, 2),
              array = _step53$value[1];

          var arrayRange = array.getRange();

          for (var row = arrayRange.start.row; row <= arrayRange.end.row; ++row) {
            for (var col = columnStart; col <= arrayRange.end.col; ++col) {
              var destination = (0, _Cell.simpleCellAddress)(sheet, col, row);
              var source = (0, _Cell.simpleCellAddress)(sheet, col + numberOfColumns, row);
              var value = array.getArrayCellValue(destination);
              this.addressMapping.moveCell(source, destination);
              this.changes.addChange(_InterpreterValue.EmptyValue, source, value);
            }
          }
        }
      } catch (err) {
        _iterator53.e(err);
      } finally {
        _iterator53.f();
      }
    }
  }, {
    key: "fixArraysAfterRemovingColumns",
    value: function fixArraysAfterRemovingColumns(sheet, columnStart, numberOfColumns) {
      this.arrayMapping.moveArrayVerticesAfterColumnByColumns(sheet, columnStart, -numberOfColumns);

      if (columnStart <= 0) {
        return;
      }

      var _iterator54 = _createForOfIteratorHelper(this.arrayMapping.arraysInCols(_Span.ColumnsSpan.fromColumnStartAndEnd(sheet, columnStart - 1, columnStart - 1))),
          _step54;

      try {
        for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
          var _step54$value = _slicedToArray(_step54.value, 2),
              array = _step54$value[1];

          if (this.isThereSpaceForArray(array)) {
            var _iterator55 = _createForOfIteratorHelper(array.getRange().addresses(this)),
                _step55;

            try {
              for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                var address = _step55.value;
                this.addressMapping.setCell(address, array);
              }
            } catch (err) {
              _iterator55.e(err);
            } finally {
              _iterator55.f();
            }
          } else {
            this.setNoSpaceIfArray(array);
          }
        }
      } catch (err) {
        _iterator54.e(err);
      } finally {
        _iterator54.f();
      }
    }
  }, {
    key: "shrinkPossibleArrayAndGetCell",
    value: function shrinkPossibleArrayAndGetCell(address) {
      var vertex = this.getCell(address);

      if (!(vertex instanceof _2.ArrayVertex)) {
        return vertex;
      }

      this.setNoSpaceIfArray(vertex);
      return this.getCell(address);
    }
  }, {
    key: "setNoSpaceIfArray",
    value: function setNoSpaceIfArray(vertex) {
      if (vertex instanceof _2.ArrayVertex) {
        this.shrinkArrayToCorner(vertex);
        vertex.setNoSpace();
      }
    }
  }, {
    key: "removeVertex",
    value: function removeVertex(vertex) {
      this.removeVertexAndCleanupDependencies(vertex);

      if (vertex instanceof _2.RangeVertex) {
        this.rangeMapping.removeRange(vertex);
      }
    }
  }, {
    key: "mergeRangeVertices",
    value: function mergeRangeVertices(existingVertex, newVertex) {
      var _this11 = this;

      var adjNodesStored = this.graph.adjacentNodes(newVertex);
      this.removeVertexAndCleanupDependencies(newVertex);
      this.graph.softRemoveEdge(existingVertex, newVertex);
      adjNodesStored.forEach(function (adjacentNode) {
        if (_this11.graph.hasNode(adjacentNode)) {
          _this11.graph.addEdge(existingVertex, adjacentNode);
        }
      });
    }
  }, {
    key: "removeVertexAndCleanupDependencies",
    value: function removeVertexAndCleanupDependencies(inputVertex) {
      var dependencies = new Set(this.graph.removeNode(inputVertex));

      while (dependencies.size > 0) {
        var vertex = dependencies.values().next().value;
        dependencies.delete(vertex);

        if (this.graph.hasNode(vertex) && this.graph.adjacentNodesCount(vertex) === 0) {
          if (vertex instanceof _2.RangeVertex || vertex instanceof _2.EmptyCellVertex) {
            this.graph.removeNode(vertex).forEach(function (candidate) {
              return dependencies.add(candidate);
            });
          }

          if (vertex instanceof _2.RangeVertex) {
            this.rangeMapping.removeRange(vertex);
          } else if (vertex instanceof _2.EmptyCellVertex) {
            this.addressMapping.removeCell(vertex.address);
          }
        }
      }
    }
  }], [{
    key: "buildEmpty",
    value: function buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats) {
      return new DependencyGraph(new _AddressMapping.AddressMapping(config.chooseAddressMappingPolicy), new _RangeMapping.RangeMapping(), new _SheetMapping.SheetMapping(config.translationPackage), new _ArrayMapping.ArrayMapping(), stats, lazilyTransformingAstService, functionRegistry, namedExpressions);
    }
  }]);

  return DependencyGraph;
}();

exports.DependencyGraph = DependencyGraph;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $map = __webpack_require__(115).map;
var arrayMethodHasSpeciesSupport = __webpack_require__(80);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');

// `Array.prototype.map` method
// https://tc39.es/ecma262/#sec-array.prototype.map
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  map: function map(callbackfn /* , thisArg */) {
    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__(131);
var collectionStrong = __webpack_require__(152);

// `Set` constructor
// https://tc39.es/ecma262/#sec-set-objects
collection('Set', function (init) {
  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var defineProperty = __webpack_require__(25).f;
var create = __webpack_require__(73);
var redefineAll = __webpack_require__(126);
var bind = __webpack_require__(84);
var anInstance = __webpack_require__(133);
var iterate = __webpack_require__(132);
var defineIterator = __webpack_require__(95);
var setSpecies = __webpack_require__(153);
var DESCRIPTORS = __webpack_require__(24);
var fastKey = __webpack_require__(127).fastKey;
var InternalStateModule = __webpack_require__(42);

var setInternalState = InternalStateModule.set;
var internalStateGetterFor = InternalStateModule.getterFor;

module.exports = {
  getConstructor: function (wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
    var Constructor = wrapper(function (that, iterable) {
      anInstance(that, Prototype);
      setInternalState(that, {
        type: CONSTRUCTOR_NAME,
        index: create(null),
        first: undefined,
        last: undefined,
        size: 0
      });
      if (!DESCRIPTORS) that.size = 0;
      if (iterable != undefined) iterate(iterable, that[ADDER], { that: that, AS_ENTRIES: IS_MAP });
    });

    var Prototype = Constructor.prototype;

    var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

    var define = function (that, key, value) {
      var state = getInternalState(that);
      var entry = getEntry(that, key);
      var previous, index;
      // change existing entry
      if (entry) {
        entry.value = value;
      // create new entry
      } else {
        state.last = entry = {
          index: index = fastKey(key, true),
          key: key,
          value: value,
          previous: previous = state.last,
          next: undefined,
          removed: false
        };
        if (!state.first) state.first = entry;
        if (previous) previous.next = entry;
        if (DESCRIPTORS) state.size++;
        else that.size++;
        // add to index
        if (index !== 'F') state.index[index] = entry;
      } return that;
    };

    var getEntry = function (that, key) {
      var state = getInternalState(that);
      // fast case
      var index = fastKey(key);
      var entry;
      if (index !== 'F') return state.index[index];
      // frozen object case
      for (entry = state.first; entry; entry = entry.next) {
        if (entry.key == key) return entry;
      }
    };

    redefineAll(Prototype, {
      // `{ Map, Set }.prototype.clear()` methods
      // https://tc39.es/ecma262/#sec-map.prototype.clear
      // https://tc39.es/ecma262/#sec-set.prototype.clear
      clear: function clear() {
        var that = this;
        var state = getInternalState(that);
        var data = state.index;
        var entry = state.first;
        while (entry) {
          entry.removed = true;
          if (entry.previous) entry.previous = entry.previous.next = undefined;
          delete data[entry.index];
          entry = entry.next;
        }
        state.first = state.last = undefined;
        if (DESCRIPTORS) state.size = 0;
        else that.size = 0;
      },
      // `{ Map, Set }.prototype.delete(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.delete
      // https://tc39.es/ecma262/#sec-set.prototype.delete
      'delete': function (key) {
        var that = this;
        var state = getInternalState(that);
        var entry = getEntry(that, key);
        if (entry) {
          var next = entry.next;
          var prev = entry.previous;
          delete state.index[entry.index];
          entry.removed = true;
          if (prev) prev.next = next;
          if (next) next.previous = prev;
          if (state.first == entry) state.first = next;
          if (state.last == entry) state.last = prev;
          if (DESCRIPTORS) state.size--;
          else that.size--;
        } return !!entry;
      },
      // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.foreach
      // https://tc39.es/ecma262/#sec-set.prototype.foreach
      forEach: function forEach(callbackfn /* , that = undefined */) {
        var state = getInternalState(this);
        var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        var entry;
        while (entry = entry ? entry.next : state.first) {
          boundFunction(entry.value, entry.key, this);
          // revert to the last existing entry
          while (entry && entry.removed) entry = entry.previous;
        }
      },
      // `{ Map, Set}.prototype.has(key)` methods
      // https://tc39.es/ecma262/#sec-map.prototype.has
      // https://tc39.es/ecma262/#sec-set.prototype.has
      has: function has(key) {
        return !!getEntry(this, key);
      }
    });

    redefineAll(Prototype, IS_MAP ? {
      // `Map.prototype.get(key)` method
      // https://tc39.es/ecma262/#sec-map.prototype.get
      get: function get(key) {
        var entry = getEntry(this, key);
        return entry && entry.value;
      },
      // `Map.prototype.set(key, value)` method
      // https://tc39.es/ecma262/#sec-map.prototype.set
      set: function set(key, value) {
        return define(this, key === 0 ? 0 : key, value);
      }
    } : {
      // `Set.prototype.add(value)` method
      // https://tc39.es/ecma262/#sec-set.prototype.add
      add: function add(value) {
        return define(this, value = value === 0 ? 0 : value, value);
      }
    });
    if (DESCRIPTORS) defineProperty(Prototype, 'size', {
      get: function () {
        return getInternalState(this).size;
      }
    });
    return Constructor;
  },
  setStrong: function (Constructor, CONSTRUCTOR_NAME, IS_MAP) {
    var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
    var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
    var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME);
    // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
    // https://tc39.es/ecma262/#sec-map.prototype.entries
    // https://tc39.es/ecma262/#sec-map.prototype.keys
    // https://tc39.es/ecma262/#sec-map.prototype.values
    // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
    // https://tc39.es/ecma262/#sec-set.prototype.entries
    // https://tc39.es/ecma262/#sec-set.prototype.keys
    // https://tc39.es/ecma262/#sec-set.prototype.values
    // https://tc39.es/ecma262/#sec-set.prototype-@@iterator
    defineIterator(Constructor, CONSTRUCTOR_NAME, function (iterated, kind) {
      setInternalState(this, {
        type: ITERATOR_NAME,
        target: iterated,
        state: getInternalCollectionState(iterated),
        kind: kind,
        last: undefined
      });
    }, function () {
      var state = getInternalIteratorState(this);
      var kind = state.kind;
      var entry = state.last;
      // revert to the last existing entry
      while (entry && entry.removed) entry = entry.previous;
      // get next entry
      if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
        // or finish the iteration
        state.target = undefined;
        return { value: undefined, done: true };
      }
      // return step by kind
      if (kind == 'keys') return { value: entry.key, done: false };
      if (kind == 'values') return { value: entry.value, done: false };
      return { value: [entry.key, entry.value], done: false };
    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

    // `{ Map, Set }.prototype[@@species]` accessors
    // https://tc39.es/ecma262/#sec-get-map-@@species
    // https://tc39.es/ecma262/#sec-get-set-@@species
    setSpecies(CONSTRUCTOR_NAME);
  }
};


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var getBuiltIn = __webpack_require__(18);
var definePropertyModule = __webpack_require__(25);
var wellKnownSymbol = __webpack_require__(3);
var DESCRIPTORS = __webpack_require__(24);

var SPECIES = wellKnownSymbol('species');

module.exports = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule.f;

  if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
    defineProperty(Constructor, SPECIES, {
      configurable: true,
      get: function () { return this; }
    });
  }
};


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var DOMIterables = __webpack_require__(123);
var DOMTokenListPrototype = __webpack_require__(124);
var forEach = __webpack_require__(155);
var createNonEnumerableProperty = __webpack_require__(23);

var handlePrototype = function (CollectionPrototype) {
  // some Chrome versions have non-configurable methods on DOMTokenList
  if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
    createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
  } catch (error) {
    CollectionPrototype.forEach = forEach;
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  if (DOMIterables[COLLECTION_NAME]) {
    handlePrototype(global[COLLECTION_NAME] && global[COLLECTION_NAME].prototype);
  }
}

handlePrototype(DOMTokenListPrototype);


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $forEach = __webpack_require__(115).forEach;
var arrayMethodIsStrict = __webpack_require__(156);

var STRICT_METHOD = arrayMethodIsStrict('forEach');

// `Array.prototype.forEach` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.foreach
module.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */) {
  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
// eslint-disable-next-line es/no-array-prototype-foreach -- safe
} : [].forEach;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var fails = __webpack_require__(20);

module.exports = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails(function () {
    // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
    method.call(null, argument || function () { throw 1; }, 1);
  });
};


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $filter = __webpack_require__(115).filter;
var arrayMethodHasSpeciesSupport = __webpack_require__(80);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');

// `Array.prototype.filter` method
// https://tc39.es/ecma262/#sec-array.prototype.filter
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  filter: function filter(callbackfn /* , thisArg */) {
    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(137);

__webpack_require__(50);

exports.__esModule = true;
exports.WRONG_RANGE_SIZE = exports.AbsoluteRowRange = exports.AbsoluteColumnRange = exports.AbsoluteCellRange = void 0;
exports.isSimpleCellRange = isSimpleCellRange;
exports.simpleCellRange = void 0;

__webpack_require__(149);

__webpack_require__(159);

__webpack_require__(161);

__webpack_require__(146);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

var _Cell = __webpack_require__(143);

var _errors = __webpack_require__(165);

var _parser = __webpack_require__(169);

var _Span = __webpack_require__(242);

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var WRONG_RANGE_SIZE = 'AbsoluteCellRange: Wrong range size';
exports.WRONG_RANGE_SIZE = WRONG_RANGE_SIZE;

function isSimpleCellRange(obj) {
  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {
    return 'start' in obj && (0, _Cell.isSimpleCellAddress)(obj.start) && 'end' in obj && (0, _Cell.isSimpleCellAddress)(obj.end);
  } else {
    return false;
  }
}

var simpleCellRange = function simpleCellRange(start, end) {
  return {
    start: start,
    end: end
  };
};

exports.simpleCellRange = simpleCellRange;

var AbsoluteCellRange = /*#__PURE__*/function () {
  function AbsoluteCellRange(start, end) {
    _classCallCheck(this, AbsoluteCellRange);

    if (start.sheet !== end.sheet) {
      throw new _errors.SheetsNotEqual(start.sheet, end.sheet);
    }

    this.start = (0, _Cell.simpleCellAddress)(start.sheet, start.col, start.row);
    this.end = (0, _Cell.simpleCellAddress)(end.sheet, end.col, end.row);
  }

  _createClass(AbsoluteCellRange, [{
    key: "sheet",
    get: function get() {
      return this.start.sheet;
    }
  }, {
    key: "isFinite",
    value: function isFinite() {
      return Number.isFinite(this.size());
    }
  }, {
    key: "doesOverlap",
    value: function doesOverlap(other) {
      if (this.start.sheet != other.start.sheet) {
        return false;
      }

      if (this.end.row < other.start.row || this.start.row > other.end.row) {
        return false;
      }

      if (this.end.col < other.start.col || this.start.col > other.end.col) {
        return false;
      }

      return true;
    }
  }, {
    key: "addressInRange",
    value: function addressInRange(address) {
      if (this.sheet !== address.sheet) {
        return false;
      }

      return this.start.row <= address.row && this.end.row >= address.row && this.start.col <= address.col && this.end.col >= address.col;
    }
  }, {
    key: "columnInRange",
    value: function columnInRange(address) {
      if (this.sheet !== address.sheet) {
        return false;
      }

      return this.start.col <= address.col && this.end.col >= address.col;
    }
  }, {
    key: "rowInRange",
    value: function rowInRange(address) {
      if (this.sheet !== address.sheet) {
        return false;
      }

      return this.start.row <= address.row && this.end.row >= address.row;
    }
  }, {
    key: "containsRange",
    value: function containsRange(range) {
      return this.addressInRange(range.start) && this.addressInRange(range.end);
    }
  }, {
    key: "intersectionWith",
    value: function intersectionWith(other) {
      if (this.sheet !== other.start.sheet) {
        return undefined;
      }

      var startRow = Math.max(this.start.row, other.start.row);
      var endRow = Math.min(this.end.row, other.end.row);
      var startCol = Math.max(this.start.col, other.start.col);
      var endCol = Math.min(this.end.col, other.end.col);

      if (startRow > endRow || startCol > endCol) {
        return undefined;
      }

      return new AbsoluteCellRange((0, _Cell.simpleCellAddress)(this.sheet, startCol, startRow), (0, _Cell.simpleCellAddress)(this.sheet, endCol, endRow));
    }
  }, {
    key: "includesRow",
    value: function includesRow(row) {
      return this.start.row < row && this.end.row >= row;
    }
  }, {
    key: "includesColumn",
    value: function includesColumn(column) {
      return this.start.col < column && this.end.col >= column;
    }
  }, {
    key: "shiftByRows",
    value: function shiftByRows(numberOfRows) {
      this.start.row += numberOfRows;
      this.end.row += numberOfRows;
    }
  }, {
    key: "expandByRows",
    value: function expandByRows(numberOfRows) {
      this.end.row += numberOfRows;
    }
  }, {
    key: "shiftByColumns",
    value: function shiftByColumns(numberOfColumns) {
      this.start.col += numberOfColumns;
      this.end.col += numberOfColumns;
    }
  }, {
    key: "shifted",
    value: function shifted(byCols, byRows) {
      return AbsoluteCellRange.spanFrom((0, _Cell.simpleCellAddress)(this.sheet, this.start.col + byCols, this.start.row + byRows), this.width(), this.height());
    }
  }, {
    key: "expandByColumns",
    value: function expandByColumns(numberOfColumns) {
      this.end.col += numberOfColumns;
    }
  }, {
    key: "moveToSheet",
    value: function moveToSheet(toSheet) {
      this.start.sheet = toSheet;
      this.end.sheet = toSheet;
    }
  }, {
    key: "removeSpan",
    value: function removeSpan(span) {
      if (span instanceof _Span.RowsSpan) {
        this.removeRows(span.start, span.end);
      } else {
        this.removeColumns(span.start, span.end);
      }
    }
  }, {
    key: "shouldBeRemoved",
    value: function shouldBeRemoved() {
      return this.width() <= 0 || this.height() <= 0;
    }
  }, {
    key: "rangeWithSameWidth",
    value: function rangeWithSameWidth(startRow, numberOfRows) {
      return AbsoluteCellRange.spanFrom((0, _Cell.simpleCellAddress)(this.sheet, this.start.col, startRow), this.width(), numberOfRows);
    }
  }, {
    key: "rangeWithSameHeight",
    value: function rangeWithSameHeight(startColumn, numberOfColumns) {
      return AbsoluteCellRange.spanFrom((0, _Cell.simpleCellAddress)(this.sheet, startColumn, this.start.row), numberOfColumns, this.height());
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.start.sheet, ",").concat(this.start.col, ",").concat(this.start.row, ",").concat(this.end.col, ",").concat(this.end.row);
    }
  }, {
    key: "width",
    value: function width() {
      return this.end.col - this.start.col + 1;
    }
  }, {
    key: "height",
    value: function height() {
      return this.end.row - this.start.row + 1;
    }
  }, {
    key: "size",
    value: function size() {
      return this.height() * this.width();
    }
  }, {
    key: "arrayOfAddressesInRange",
    value: function arrayOfAddressesInRange() {
      var result = [];

      for (var y = 0; y < this.height(); ++y) {
        result[y] = [];

        for (var x = 0; x < this.width(); ++x) {
          var value = (0, _Cell.simpleCellAddress)(this.sheet, this.start.col + x, this.start.row + y);
          result[y].push(value);
        }
      }

      return result;
    }
  }, {
    key: "withStart",
    value: function withStart(newStart) {
      return new AbsoluteCellRange(newStart, this.end);
    }
  }, {
    key: "sameDimensionsAs",
    value: function sameDimensionsAs(other) {
      return this.width() === other.width() && this.height() === other.height();
    }
  }, {
    key: "sameAs",
    value: function sameAs(other) {
      return (0, _Cell.equalSimpleCellAddress)(this.start, other.start) && (0, _Cell.equalSimpleCellAddress)(this.end, other.end);
    }
  }, {
    key: "addressesArrayMap",
    value: function addressesArrayMap(dependencyGraph, op) {
      var ret = [];
      var currentRow = this.start.row;

      while (currentRow <= this.effectiveEndRow(dependencyGraph)) {
        var currentColumn = this.start.col;
        var tmp = [];

        while (currentColumn <= this.effectiveEndColumn(dependencyGraph)) {
          tmp.push(op((0, _Cell.simpleCellAddress)(this.start.sheet, currentColumn, currentRow)));
          currentColumn++;
        }

        ret.push(tmp);
        currentRow++;
      }

      return ret;
    }
  }, {
    key: "addresses",
    value: function addresses(dependencyGraph) {
      var ret = [];
      var currentRow = this.start.row;
      var limitRow = this.effectiveEndRow(dependencyGraph);
      var limitColumn = this.effectiveEndColumn(dependencyGraph);

      while (currentRow <= limitRow) {
        var currentColumn = this.start.col;

        while (currentColumn <= limitColumn) {
          ret.push((0, _Cell.simpleCellAddress)(this.start.sheet, currentColumn, currentRow));
          currentColumn++;
        }

        currentRow++;
      }

      return ret;
    }
  }, {
    key: "addressesWithDirection",
    value: /*#__PURE__*/regeneratorRuntime.mark(function addressesWithDirection(right, bottom, dependencyGraph) {
      var currentRow, currentColumn, _currentRow, _currentColumn, _currentRow2, _currentColumn2, _currentRow3, _currentColumn3;

      return regeneratorRuntime.wrap(function addressesWithDirection$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(right > 0)) {
                _context.next = 30;
                break;
              }

              if (!(bottom > 0)) {
                _context.next = 16;
                break;
              }

              currentRow = this.effectiveEndRow(dependencyGraph);

            case 3:
              if (!(currentRow >= this.start.row)) {
                _context.next = 14;
                break;
              }

              currentColumn = this.effectiveEndColumn(dependencyGraph);

            case 5:
              if (!(currentColumn >= this.start.col)) {
                _context.next = 11;
                break;
              }

              _context.next = 8;
              return (0, _Cell.simpleCellAddress)(this.start.sheet, currentColumn, currentRow);

            case 8:
              currentColumn -= 1;
              _context.next = 5;
              break;

            case 11:
              currentRow -= 1;
              _context.next = 3;
              break;

            case 14:
              _context.next = 28;
              break;

            case 16:
              _currentRow = this.start.row;

            case 17:
              if (!(_currentRow <= this.effectiveEndRow(dependencyGraph))) {
                _context.next = 28;
                break;
              }

              _currentColumn = this.effectiveEndColumn(dependencyGraph);

            case 19:
              if (!(_currentColumn >= this.start.col)) {
                _context.next = 25;
                break;
              }

              _context.next = 22;
              return (0, _Cell.simpleCellAddress)(this.start.sheet, _currentColumn, _currentRow);

            case 22:
              _currentColumn -= 1;
              _context.next = 19;
              break;

            case 25:
              _currentRow += 1;
              _context.next = 17;
              break;

            case 28:
              _context.next = 57;
              break;

            case 30:
              if (!(bottom > 0)) {
                _context.next = 45;
                break;
              }

              _currentRow2 = this.effectiveEndRow(dependencyGraph);

            case 32:
              if (!(_currentRow2 >= this.start.row)) {
                _context.next = 43;
                break;
              }

              _currentColumn2 = this.start.col;

            case 34:
              if (!(_currentColumn2 <= this.effectiveEndColumn(dependencyGraph))) {
                _context.next = 40;
                break;
              }

              _context.next = 37;
              return (0, _Cell.simpleCellAddress)(this.start.sheet, _currentColumn2, _currentRow2);

            case 37:
              _currentColumn2 += 1;
              _context.next = 34;
              break;

            case 40:
              _currentRow2 -= 1;
              _context.next = 32;
              break;

            case 43:
              _context.next = 57;
              break;

            case 45:
              _currentRow3 = this.start.row;

            case 46:
              if (!(_currentRow3 <= this.effectiveEndRow(dependencyGraph))) {
                _context.next = 57;
                break;
              }

              _currentColumn3 = this.start.col;

            case 48:
              if (!(_currentColumn3 <= this.effectiveEndColumn(dependencyGraph))) {
                _context.next = 54;
                break;
              }

              _context.next = 51;
              return (0, _Cell.simpleCellAddress)(this.start.sheet, _currentColumn3, _currentRow3);

            case 51:
              _currentColumn3 += 1;
              _context.next = 48;
              break;

            case 54:
              _currentRow3 += 1;
              _context.next = 46;
              break;

            case 57:
            case "end":
              return _context.stop();
          }
        }
      }, addressesWithDirection, this);
    })
  }, {
    key: "getAddress",
    value: function getAddress(col, row) {
      if (col < 0 || row < 0 || row > this.height() - 1 || col > this.width() - 1) {
        throw Error('Index out of bound');
      }

      return (0, _Cell.simpleCellAddress)(this.start.sheet, this.start.col + col, this.start.row + row);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {
      return this.end.col >= maxColumns || this.end.row >= maxRows;
    }
  }, {
    key: "effectiveEndColumn",
    value: function effectiveEndColumn(_dependencyGraph) {
      return this.end.col;
    }
  }, {
    key: "effectiveEndRow",
    value: function effectiveEndRow(_dependencyGraph) {
      return this.end.row;
    }
  }, {
    key: "effectiveWidth",
    value: function effectiveWidth(_dependencyGraph) {
      return this.width();
    }
  }, {
    key: "effectiveHeight",
    value: function effectiveHeight(_dependencyGraph) {
      return this.height();
    }
  }, {
    key: "removeRows",
    value: function removeRows(rowStart, rowEnd) {
      if (rowStart > this.end.row) {
        return;
      }

      if (rowEnd < this.start.row) {
        var numberOfRows = rowEnd - rowStart + 1;
        return this.shiftByRows(-numberOfRows);
      }

      if (rowStart <= this.start.row) {
        this.start.row = rowStart;
      }

      this.end.row -= Math.min(rowEnd, this.end.row) - rowStart + 1;
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(columnStart, columnEnd) {
      if (columnStart > this.end.col) {
        return;
      }

      if (columnEnd < this.start.col) {
        var numberOfColumns = columnEnd - columnStart + 1;
        return this.shiftByColumns(-numberOfColumns);
      }

      if (columnStart <= this.start.col) {
        this.start.col = columnStart;
      }

      this.end.col -= Math.min(columnEnd, this.end.col) - columnStart + 1;
    }
  }], [{
    key: "fromAst",
    value: function fromAst(ast, baseAddress) {
      if (ast.type === _parser.AstNodeType.CELL_RANGE) {
        return AbsoluteCellRange.fromCellRange(ast, baseAddress);
      } else if (ast.type === _parser.AstNodeType.COLUMN_RANGE) {
        return AbsoluteColumnRange.fromColumnRange(ast, baseAddress);
      } else {
        return AbsoluteRowRange.fromRowRangeAst(ast, baseAddress);
      }
    }
  }, {
    key: "fromAstOrUndef",
    value: function fromAstOrUndef(ast, baseAddress) {
      try {
        return AbsoluteCellRange.fromAst(ast, baseAddress);
      } catch (_e) {
        return undefined;
      }
    }
  }, {
    key: "fromCellRange",
    value: function fromCellRange(x, baseAddress) {
      return new AbsoluteCellRange(x.start.toSimpleCellAddress(baseAddress), x.end.toSimpleCellAddress(baseAddress));
    }
  }, {
    key: "spanFrom",
    value: function spanFrom(topLeftCorner, width, height) {
      var ret = AbsoluteCellRange.spanFromOrUndef(topLeftCorner, width, height);

      if (ret === undefined) {
        throw new Error(WRONG_RANGE_SIZE);
      }

      return ret;
    }
  }, {
    key: "spanFromOrUndef",
    value: function spanFromOrUndef(topLeftCorner, width, height) {
      if (!Number.isFinite(width) && Number.isFinite(height)) {
        if (topLeftCorner.col !== 0) {
          return undefined;
        }

        return new AbsoluteRowRange(topLeftCorner.sheet, topLeftCorner.row, topLeftCorner.row + height - 1);
      } else if (!Number.isFinite(height) && Number.isFinite(width)) {
        if (topLeftCorner.row !== 0) {
          return undefined;
        }

        return new AbsoluteColumnRange(topLeftCorner.sheet, topLeftCorner.col, topLeftCorner.col + width - 1);
      } else if (Number.isFinite(height) && Number.isFinite(width)) {
        return new AbsoluteCellRange(topLeftCorner, (0, _Cell.simpleCellAddress)(topLeftCorner.sheet, topLeftCorner.col + width - 1, topLeftCorner.row + height - 1));
      }

      return undefined;
    }
  }, {
    key: "fromCoordinates",
    value: function fromCoordinates(sheet, x1, y1, x2, y2) {
      return new AbsoluteCellRange((0, _Cell.simpleCellAddress)(sheet, x1, y1), (0, _Cell.simpleCellAddress)(sheet, x2, y2));
    }
  }]);

  return AbsoluteCellRange;
}();

exports.AbsoluteCellRange = AbsoluteCellRange;

var AbsoluteColumnRange = /*#__PURE__*/function (_AbsoluteCellRange) {
  _inherits(AbsoluteColumnRange, _AbsoluteCellRange);

  var _super = _createSuper(AbsoluteColumnRange);

  function AbsoluteColumnRange(sheet, columnStart, columnEnd) {
    _classCallCheck(this, AbsoluteColumnRange);

    return _super.call(this, (0, _Cell.simpleCellAddress)(sheet, columnStart, 0), (0, _Cell.simpleCellAddress)(sheet, columnEnd, Number.POSITIVE_INFINITY));
  }

  _createClass(AbsoluteColumnRange, [{
    key: "shouldBeRemoved",
    value: function shouldBeRemoved() {
      return this.width() <= 0;
    }
  }, {
    key: "shiftByRows",
    value: function shiftByRows(_numberOfRows) {
      return;
    }
  }, {
    key: "expandByRows",
    value: function expandByRows(_numberOfRows) {
      return;
    }
  }, {
    key: "shifted",
    value: function shifted(byCols, _byRows) {
      return new AbsoluteColumnRange(this.sheet, this.start.col + byCols, this.end.col + byCols);
    }
  }, {
    key: "rangeWithSameHeight",
    value: function rangeWithSameHeight(startColumn, numberOfColumns) {
      return new AbsoluteColumnRange(this.sheet, startColumn, startColumn + numberOfColumns - 1);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(maxColumns, _maxRows) {
      return this.end.col >= maxColumns;
    }
  }, {
    key: "effectiveEndRow",
    value: function effectiveEndRow(dependencyGraph) {
      return this.effectiveHeight(dependencyGraph) - 1;
    }
  }, {
    key: "effectiveHeight",
    value: function effectiveHeight(dependencyGraph) {
      return dependencyGraph.getSheetHeight(this.sheet);
    }
  }, {
    key: "removeRows",
    value: function removeRows(_rowStart, _rowEnd) {
      return;
    }
  }], [{
    key: "fromColumnRange",
    value: function fromColumnRange(x, baseAddress) {
      var start = x.start.toSimpleColumnAddress(baseAddress);
      var end = x.end.toSimpleColumnAddress(baseAddress);

      if (start.sheet !== end.sheet) {
        throw new _errors.SheetsNotEqual(start.sheet, end.sheet);
      }

      return new AbsoluteColumnRange(start.sheet, start.col, end.col);
    }
  }]);

  return AbsoluteColumnRange;
}(AbsoluteCellRange);

exports.AbsoluteColumnRange = AbsoluteColumnRange;

var AbsoluteRowRange = /*#__PURE__*/function (_AbsoluteCellRange2) {
  _inherits(AbsoluteRowRange, _AbsoluteCellRange2);

  var _super2 = _createSuper(AbsoluteRowRange);

  function AbsoluteRowRange(sheet, rowStart, rowEnd) {
    _classCallCheck(this, AbsoluteRowRange);

    return _super2.call(this, (0, _Cell.simpleCellAddress)(sheet, 0, rowStart), (0, _Cell.simpleCellAddress)(sheet, Number.POSITIVE_INFINITY, rowEnd));
  }

  _createClass(AbsoluteRowRange, [{
    key: "shouldBeRemoved",
    value: function shouldBeRemoved() {
      return this.height() <= 0;
    }
  }, {
    key: "shiftByColumns",
    value: function shiftByColumns(_numberOfColumns) {
      return;
    }
  }, {
    key: "expandByColumns",
    value: function expandByColumns(_numberOfColumns) {
      return;
    }
  }, {
    key: "shifted",
    value: function shifted(byCols, byRows) {
      return new AbsoluteRowRange(this.sheet, this.start.row + byRows, this.end.row + byRows);
    }
  }, {
    key: "rangeWithSameWidth",
    value: function rangeWithSameWidth(startRow, numberOfRows) {
      return new AbsoluteRowRange(this.sheet, startRow, startRow + numberOfRows - 1);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(_maxColumns, maxRows) {
      return this.end.row >= maxRows;
    }
  }, {
    key: "effectiveEndColumn",
    value: function effectiveEndColumn(dependencyGraph) {
      return this.effectiveWidth(dependencyGraph) - 1;
    }
  }, {
    key: "effectiveWidth",
    value: function effectiveWidth(dependencyGraph) {
      return dependencyGraph.getSheetWidth(this.sheet);
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(_columnStart, _columnEnd) {
      return;
    }
  }], [{
    key: "fromRowRangeAst",
    value: function fromRowRangeAst(x, baseAddress) {
      var start = x.start.toSimpleRowAddress(baseAddress);
      var end = x.end.toSimpleRowAddress(baseAddress);

      if (start.sheet !== end.sheet) {
        throw new _errors.SheetsNotEqual(start.sheet, end.sheet);
      }

      return new AbsoluteRowRange(start.sheet, start.row, end.row);
    }
  }]);

  return AbsoluteRowRange;
}(AbsoluteCellRange);

exports.AbsoluteRowRange = AbsoluteRowRange;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var numberIsFinite = __webpack_require__(160);

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
$({ target: 'Number', stat: true }, { isFinite: numberIsFinite });


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);

var globalIsFinite = global.isFinite;

// `Number.isFinite` method
// https://tc39.es/ecma262/#sec-number.isfinite
// eslint-disable-next-line es/no-number-isfinite -- safe
module.exports = Number.isFinite || function isFinite(it) {
  return typeof it == 'number' && globalIsFinite(it);
};


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var DESCRIPTORS = __webpack_require__(24);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var isForced = __webpack_require__(67);
var redefine = __webpack_require__(22);
var hasOwn = __webpack_require__(10);
var inheritIfRequired = __webpack_require__(134);
var isPrototypeOf = __webpack_require__(35);
var isSymbol = __webpack_require__(34);
var toPrimitive = __webpack_require__(32);
var fails = __webpack_require__(20);
var getOwnPropertyNames = __webpack_require__(58).f;
var getOwnPropertyDescriptor = __webpack_require__(52).f;
var defineProperty = __webpack_require__(25).f;
var thisNumberValue = __webpack_require__(162);
var trim = __webpack_require__(163).trim;

var NUMBER = 'Number';
var NativeNumber = global[NUMBER];
var NumberPrototype = NativeNumber.prototype;
var TypeError = global.TypeError;
var arraySlice = uncurryThis(''.slice);
var charCodeAt = uncurryThis(''.charCodeAt);

// `ToNumeric` abstract operation
// https://tc39.es/ecma262/#sec-tonumeric
var toNumeric = function (value) {
  var primValue = toPrimitive(value, 'number');
  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);
};

// `ToNumber` abstract operation
// https://tc39.es/ecma262/#sec-tonumber
var toNumber = function (argument) {
  var it = toPrimitive(argument, 'number');
  var first, third, radix, maxCode, digits, length, index, code;
  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');
  if (typeof it == 'string' && it.length > 2) {
    it = trim(it);
    first = charCodeAt(it, 0);
    if (first === 43 || first === 45) {
      third = charCodeAt(it, 2);
      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if (first === 48) {
      switch (charCodeAt(it, 1)) {
        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i
        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i
        default: return +it;
      }
      digits = arraySlice(it, 2);
      length = digits.length;
      for (index = 0; index < length; index++) {
        code = charCodeAt(digits, index);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if (code < 48 || code > maxCode) return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

// `Number` constructor
// https://tc39.es/ecma262/#sec-number-constructor
if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
  var NumberWrapper = function Number(value) {
    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));
    var dummy = this;
    // check on 1..constructor(foo) case
    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })
      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;
  };
  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES2015 (in case, if modules with ES2015 Number statics required before):
    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +
    // ESNext
    'fromString,range'
  ).split(','), j = 0, key; keys.length > j; j++) {
    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {
      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
    }
  }
  NumberWrapper.prototype = NumberPrototype;
  NumberPrototype.constructor = NumberWrapper;
  redefine(global, NUMBER, NumberWrapper);
}


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);

// `thisNumberValue` abstract operation
// https://tc39.es/ecma262/#sec-thisnumbervalue
module.exports = uncurryThis(1.0.valueOf);


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var requireObjectCoercible = __webpack_require__(13);
var toString = __webpack_require__(94);
var whitespaces = __webpack_require__(164);

var replace = uncurryThis(''.replace);
var whitespace = '[' + whitespaces + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod = function (TYPE) {
  return function ($this) {
    var string = toString(requireObjectCoercible($this));
    if (TYPE & 1) string = replace(string, ltrim, '');
    if (TYPE & 2) string = replace(string, rtrim, '');
    return string;
  };
};

module.exports = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod(3)
};


/***/ }),
/* 164 */
/***/ (function(module, exports) {

// a string of all valid unicode whitespaces
module.exports = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(50);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.UnableToParseError = exports.TargetLocationHasArrayError = exports.SourceLocationHasArrayError = exports.SheetsNotEqual = exports.SheetSizeLimitExceededError = exports.SheetNameAlreadyTakenError = exports.ProtectedFunctionTranslationError = exports.ProtectedFunctionError = exports.NothingToPasteError = exports.NotAFormulaError = exports.NoSheetWithNameError = exports.NoSheetWithIdError = exports.NoRelativeAddressesAllowedError = exports.NoOperationToUndoError = exports.NoOperationToRedoError = exports.NamedExpressionNameIsInvalidError = exports.NamedExpressionNameIsAlreadyTakenError = exports.NamedExpressionDoesNotExistError = exports.MissingTranslationError = exports.LanguageNotRegisteredError = exports.LanguageAlreadyRegisteredError = exports.InvalidArgumentsError = exports.InvalidAddressError = exports.FunctionPluginValidationError = exports.ExpectedValueOfTypeError = exports.ExpectedOneOfValuesError = exports.EvaluationSuspendedError = exports.ConfigValueTooSmallError = exports.ConfigValueTooBigError = exports.ConfigValueEmpty = exports.AliasAlreadyExisting = void 0;

__webpack_require__(146);

__webpack_require__(1);

__webpack_require__(167);

__webpack_require__(168);

__webpack_require__(103);

__webpack_require__(137);

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/**
 * Error thrown when the sheet of a given ID does not exist.
 */
var NoSheetWithIdError = /*#__PURE__*/function (_Error) {
  _inherits(NoSheetWithIdError, _Error);

  var _super = _createSuper(NoSheetWithIdError);

  function NoSheetWithIdError(sheetId) {
    _classCallCheck(this, NoSheetWithIdError);

    return _super.call(this, "There's no sheet with id = ".concat(sheetId));
  }

  return _createClass(NoSheetWithIdError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the sheet of a given name does not exist.
 */


exports.NoSheetWithIdError = NoSheetWithIdError;

var NoSheetWithNameError = /*#__PURE__*/function (_Error2) {
  _inherits(NoSheetWithNameError, _Error2);

  var _super2 = _createSuper(NoSheetWithNameError);

  function NoSheetWithNameError(sheetName) {
    _classCallCheck(this, NoSheetWithNameError);

    return _super2.call(this, "There's no sheet with name '".concat(sheetName, "'"));
  }

  return _createClass(NoSheetWithNameError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the sheet of a given name already exists.
 */


exports.NoSheetWithNameError = NoSheetWithNameError;

var SheetNameAlreadyTakenError = /*#__PURE__*/function (_Error3) {
  _inherits(SheetNameAlreadyTakenError, _Error3);

  var _super3 = _createSuper(SheetNameAlreadyTakenError);

  function SheetNameAlreadyTakenError(sheetName) {
    _classCallCheck(this, SheetNameAlreadyTakenError);

    return _super3.call(this, "Sheet with name ".concat(sheetName, " already exists"));
  }

  return _createClass(SheetNameAlreadyTakenError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when loaded sheet size exceeds configured limits.
 */


exports.SheetNameAlreadyTakenError = SheetNameAlreadyTakenError;

var SheetSizeLimitExceededError = /*#__PURE__*/function (_Error4) {
  _inherits(SheetSizeLimitExceededError, _Error4);

  var _super4 = _createSuper(SheetSizeLimitExceededError);

  function SheetSizeLimitExceededError() {
    _classCallCheck(this, SheetSizeLimitExceededError);

    return _super4.call(this, 'Sheet size limit exceeded');
  }

  return _createClass(SheetSizeLimitExceededError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the the provided string is not a valid formula, i.e does not start with "="
 */


exports.SheetSizeLimitExceededError = SheetSizeLimitExceededError;

var NotAFormulaError = /*#__PURE__*/function (_Error5) {
  _inherits(NotAFormulaError, _Error5);

  var _super5 = _createSuper(NotAFormulaError);

  function NotAFormulaError() {
    _classCallCheck(this, NotAFormulaError);

    return _super5.call(this, 'This is not a formula');
  }

  return _createClass(NotAFormulaError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the given address is invalid.
 */


exports.NotAFormulaError = NotAFormulaError;

var InvalidAddressError = /*#__PURE__*/function (_Error6) {
  _inherits(InvalidAddressError, _Error6);

  var _super6 = _createSuper(InvalidAddressError);

  function InvalidAddressError(address) {
    _classCallCheck(this, InvalidAddressError);

    return _super6.call(this, "Address (row = ".concat(address.row, ", col = ").concat(address.col, ") is invalid"));
  }

  return _createClass(InvalidAddressError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the given arguments are invalid
 */


exports.InvalidAddressError = InvalidAddressError;

var InvalidArgumentsError = /*#__PURE__*/function (_Error7) {
  _inherits(InvalidArgumentsError, _Error7);

  var _super7 = _createSuper(InvalidArgumentsError);

  function InvalidArgumentsError(expectedArguments) {
    _classCallCheck(this, InvalidArgumentsError);

    return _super7.call(this, "Invalid arguments, expected ".concat(expectedArguments));
  }

  return _createClass(InvalidArgumentsError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the given sheets are not equal.
 */


exports.InvalidArgumentsError = InvalidArgumentsError;

var SheetsNotEqual = /*#__PURE__*/function (_Error8) {
  _inherits(SheetsNotEqual, _Error8);

  var _super8 = _createSuper(SheetsNotEqual);

  function SheetsNotEqual(sheet1, sheet2) {
    _classCallCheck(this, SheetsNotEqual);

    return _super8.call(this, "Sheets ".concat(sheet1, " and ").concat(sheet2, " are not equal."));
  }

  return _createClass(SheetsNotEqual);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the given named expression already exists in the workbook and therefore it cannot be added.
 */


exports.SheetsNotEqual = SheetsNotEqual;

var NamedExpressionNameIsAlreadyTakenError = /*#__PURE__*/function (_Error9) {
  _inherits(NamedExpressionNameIsAlreadyTakenError, _Error9);

  var _super9 = _createSuper(NamedExpressionNameIsAlreadyTakenError);

  function NamedExpressionNameIsAlreadyTakenError(expressionName) {
    _classCallCheck(this, NamedExpressionNameIsAlreadyTakenError);

    return _super9.call(this, "Name of Named Expression '".concat(expressionName, "' is already present"));
  }

  return _createClass(NamedExpressionNameIsAlreadyTakenError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the name given for the named expression is invalid.
 */


exports.NamedExpressionNameIsAlreadyTakenError = NamedExpressionNameIsAlreadyTakenError;

var NamedExpressionNameIsInvalidError = /*#__PURE__*/function (_Error10) {
  _inherits(NamedExpressionNameIsInvalidError, _Error10);

  var _super10 = _createSuper(NamedExpressionNameIsInvalidError);

  function NamedExpressionNameIsInvalidError(expressionName) {
    _classCallCheck(this, NamedExpressionNameIsInvalidError);

    return _super10.call(this, "Name of Named Expression '".concat(expressionName, "' is invalid"));
  }

  return _createClass(NamedExpressionNameIsInvalidError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the given named expression does not exist.
 */


exports.NamedExpressionNameIsInvalidError = NamedExpressionNameIsInvalidError;

var NamedExpressionDoesNotExistError = /*#__PURE__*/function (_Error11) {
  _inherits(NamedExpressionDoesNotExistError, _Error11);

  var _super11 = _createSuper(NamedExpressionDoesNotExistError);

  function NamedExpressionDoesNotExistError(expressionName) {
    _classCallCheck(this, NamedExpressionDoesNotExistError);

    return _super11.call(this, "Named Expression '".concat(expressionName, "' does not exist"));
  }

  return _createClass(NamedExpressionDoesNotExistError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when there are no operations to be undone by the [[undo]] method.
 */


exports.NamedExpressionDoesNotExistError = NamedExpressionDoesNotExistError;

var NoOperationToUndoError = /*#__PURE__*/function (_Error12) {
  _inherits(NoOperationToUndoError, _Error12);

  var _super12 = _createSuper(NoOperationToUndoError);

  function NoOperationToUndoError() {
    _classCallCheck(this, NoOperationToUndoError);

    return _super12.call(this, 'There is no operation to undo');
  }

  return _createClass(NoOperationToUndoError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when there are no operations to redo by the [[redo]] method.
 */


exports.NoOperationToUndoError = NoOperationToUndoError;

var NoOperationToRedoError = /*#__PURE__*/function (_Error13) {
  _inherits(NoOperationToRedoError, _Error13);

  var _super13 = _createSuper(NoOperationToRedoError);

  function NoOperationToRedoError() {
    _classCallCheck(this, NoOperationToRedoError);

    return _super13.call(this, 'There is no operation to redo');
  }

  return _createClass(NoOperationToRedoError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when there is nothing to paste by the [[paste]] method.
 */


exports.NoOperationToRedoError = NoOperationToRedoError;

var NothingToPasteError = /*#__PURE__*/function (_Error14) {
  _inherits(NothingToPasteError, _Error14);

  var _super14 = _createSuper(NothingToPasteError);

  function NothingToPasteError() {
    _classCallCheck(this, NothingToPasteError);

    return _super14.call(this, 'There is nothing to paste');
  }

  return _createClass(NothingToPasteError);
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.NothingToPasteError = NothingToPasteError;

function replacer(key, val) {
  switch (_typeof(val)) {
    case 'function':
    case 'symbol':
      return val.toString();

    case 'bigint':
      return 'BigInt(' + val.toString() + ')';

    default:
      {
        if (val instanceof RegExp) {
          return 'RegExp(' + val.toString() + ')';
        } else {
          return val;
        }
      }
  }
}
/**
 * Error thrown when the given value cannot be parsed.
 *
 * Checks against the validity in:
 *
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[setCellsContents]]
 */


var UnableToParseError = /*#__PURE__*/function (_Error15) {
  _inherits(UnableToParseError, _Error15);

  var _super15 = _createSuper(UnableToParseError);

  function UnableToParseError(value) {
    _classCallCheck(this, UnableToParseError);

    return _super15.call(this, "Unable to parse value: ".concat(JSON.stringify(value, replacer, 4)));
  }

  return _createClass(UnableToParseError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the expected value type differs from the given value type.
 * It also displays the expected type.
 * This error might be thrown while setting or updating the [[ConfigParams]].
 * The following methods accept [[ConfigParams]] as a parameter:
 *
 * @see [[buildEmpty]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[updateConfig]]
 */


exports.UnableToParseError = UnableToParseError;

var ExpectedValueOfTypeError = /*#__PURE__*/function (_Error16) {
  _inherits(ExpectedValueOfTypeError, _Error16);

  var _super16 = _createSuper(ExpectedValueOfTypeError);

  function ExpectedValueOfTypeError(expectedType, paramName) {
    _classCallCheck(this, ExpectedValueOfTypeError);

    return _super16.call(this, "Expected value of type: ".concat(expectedType, " for config parameter: ").concat(paramName));
  }

  return _createClass(ExpectedValueOfTypeError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when supplied config parameter value is an empty string.
 * This error might be thrown while setting or updating the [[ConfigParams]].
 * The following methods accept [[ConfigParams]] as a parameter:
 *
 * @see [[buildEmpty]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[updateConfig]]
 */


exports.ExpectedValueOfTypeError = ExpectedValueOfTypeError;

var ConfigValueEmpty = /*#__PURE__*/function (_Error17) {
  _inherits(ConfigValueEmpty, _Error17);

  var _super17 = _createSuper(ConfigValueEmpty);

  function ConfigValueEmpty(paramName) {
    _classCallCheck(this, ConfigValueEmpty);

    return _super17.call(this, "Config parameter ".concat(paramName, " cannot be empty."));
  }

  return _createClass(ConfigValueEmpty);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when supplied config parameter value is too small.
 * This error might be thrown while setting or updating the [[ConfigParams]].
 * The following methods accept [[ConfigParams]] as a parameter:
 *
 * @see [[buildEmpty]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[updateConfig]]
 */


exports.ConfigValueEmpty = ConfigValueEmpty;

var ConfigValueTooSmallError = /*#__PURE__*/function (_Error18) {
  _inherits(ConfigValueTooSmallError, _Error18);

  var _super18 = _createSuper(ConfigValueTooSmallError);

  function ConfigValueTooSmallError(paramName, minimum) {
    _classCallCheck(this, ConfigValueTooSmallError);

    return _super18.call(this, "Config parameter ".concat(paramName, " should be at least ").concat(minimum));
  }

  return _createClass(ConfigValueTooSmallError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when supplied config parameter value is too big.
 * This error might be thrown while setting or updating the [[ConfigParams]].
 * The following methods accept [[ConfigParams]] as a parameter:
 *
 * @see [[buildEmpty]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[updateConfig]]
 */


exports.ConfigValueTooSmallError = ConfigValueTooSmallError;

var ConfigValueTooBigError = /*#__PURE__*/function (_Error19) {
  _inherits(ConfigValueTooBigError, _Error19);

  var _super19 = _createSuper(ConfigValueTooBigError);

  function ConfigValueTooBigError(paramName, maximum) {
    _classCallCheck(this, ConfigValueTooBigError);

    return _super19.call(this, "Config parameter ".concat(paramName, " should be at most ").concat(maximum));
  }

  return _createClass(ConfigValueTooBigError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when the value was expected to be set for a config parameter.
 * It also displays the expected value.
 * This error might be thrown while setting or updating the [[ConfigParams]].
 * The following methods accept [[ConfigParams]] as a parameter:
 *
 * @see [[buildEmpty]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * @see [[updateConfig]]
 */


exports.ConfigValueTooBigError = ConfigValueTooBigError;

var ExpectedOneOfValuesError = /*#__PURE__*/function (_Error20) {
  _inherits(ExpectedOneOfValuesError, _Error20);

  var _super20 = _createSuper(ExpectedOneOfValuesError);

  function ExpectedOneOfValuesError(values, paramName) {
    _classCallCheck(this, ExpectedOneOfValuesError);

    return _super20.call(this, "Expected one of ".concat(values, " for config parameter: ").concat(paramName));
  }

  return _createClass(ExpectedOneOfValuesError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when computations become suspended.
 * To perform any other action wait for the batch to complete or resume the evaluation.
 * Relates to:
 *
 * @see [[batch]]
 * @see [[suspendEvaluation]]
 * @see [[resumeEvaluation]]
 */


exports.ExpectedOneOfValuesError = ExpectedOneOfValuesError;

var EvaluationSuspendedError = /*#__PURE__*/function (_Error21) {
  _inherits(EvaluationSuspendedError, _Error21);

  var _super21 = _createSuper(EvaluationSuspendedError);

  function EvaluationSuspendedError() {
    _classCallCheck(this, EvaluationSuspendedError);

    return _super21.call(this, 'Computations are suspended');
  }

  return _createClass(EvaluationSuspendedError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when translation is missing in translation package.
 *
 * TODO
 */


exports.EvaluationSuspendedError = EvaluationSuspendedError;

var MissingTranslationError = /*#__PURE__*/function (_Error22) {
  _inherits(MissingTranslationError, _Error22);

  var _super22 = _createSuper(MissingTranslationError);

  function MissingTranslationError(key) {
    _classCallCheck(this, MissingTranslationError);

    return _super22.call(this, "Translation for ".concat(key, " is missing in the translation package you're using."));
  }

  return _createClass(MissingTranslationError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when trying to override protected translation.
 *
 * @see [[registerLanguage]]
 * @see [[registerFunction]]
 * @see [[registerFunctionPlugin]]
 */


exports.MissingTranslationError = MissingTranslationError;

var ProtectedFunctionTranslationError = /*#__PURE__*/function (_Error23) {
  _inherits(ProtectedFunctionTranslationError, _Error23);

  var _super23 = _createSuper(ProtectedFunctionTranslationError);

  function ProtectedFunctionTranslationError(key) {
    _classCallCheck(this, ProtectedFunctionTranslationError);

    return _super23.call(this, "Cannot register translation for function with id: ".concat(key));
  }

  return _createClass(ProtectedFunctionTranslationError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when trying to retrieve not registered language
 *
 * @see [[getLanguage]]
 * @see [[unregisterLanguage]]
 */


exports.ProtectedFunctionTranslationError = ProtectedFunctionTranslationError;

var LanguageNotRegisteredError = /*#__PURE__*/function (_Error24) {
  _inherits(LanguageNotRegisteredError, _Error24);

  var _super24 = _createSuper(LanguageNotRegisteredError);

  function LanguageNotRegisteredError() {
    _classCallCheck(this, LanguageNotRegisteredError);

    return _super24.call(this, 'Language not registered.');
  }

  return _createClass(LanguageNotRegisteredError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when trying to register already registered language
 *
 * @see [[registerLanguage]]
 */


exports.LanguageNotRegisteredError = LanguageNotRegisteredError;

var LanguageAlreadyRegisteredError = /*#__PURE__*/function (_Error25) {
  _inherits(LanguageAlreadyRegisteredError, _Error25);

  var _super25 = _createSuper(LanguageAlreadyRegisteredError);

  function LanguageAlreadyRegisteredError() {
    _classCallCheck(this, LanguageAlreadyRegisteredError);

    return _super25.call(this, 'Language already registered.');
  }

  return _createClass(LanguageAlreadyRegisteredError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when function plugin is invalid.
 *
 * @see [[registerFunction]]
 * @see [[registerFunctionPlugin]]
 * @see [[buildFromArray]]
 * @see [[buildFromSheets]]
 * */


exports.LanguageAlreadyRegisteredError = LanguageAlreadyRegisteredError;

var FunctionPluginValidationError = /*#__PURE__*/function (_Error26) {
  _inherits(FunctionPluginValidationError, _Error26);

  var _super26 = _createSuper(FunctionPluginValidationError);

  function FunctionPluginValidationError() {
    _classCallCheck(this, FunctionPluginValidationError);

    return _super26.apply(this, arguments);
  }

  _createClass(FunctionPluginValidationError, null, [{
    key: "functionNotDeclaredInPlugin",
    value: function functionNotDeclaredInPlugin(functionId, pluginName) {
      return new FunctionPluginValidationError("Function with id ".concat(functionId, " not declared in plugin ").concat(pluginName));
    }
  }, {
    key: "functionMethodNotFound",
    value: function functionMethodNotFound(functionName, pluginName) {
      return new FunctionPluginValidationError("Function method ".concat(functionName, " not found in plugin ").concat(pluginName));
    }
  }]);

  return FunctionPluginValidationError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when trying to register, override or remove function with reserved id.
 *
 * @see [[registerFunctionPlugin]]
 * @see [[registerFunction]]
 * @see [[unregisterFunction]]
 * */


exports.FunctionPluginValidationError = FunctionPluginValidationError;

var ProtectedFunctionError = /*#__PURE__*/function (_Error27) {
  _inherits(ProtectedFunctionError, _Error27);

  var _super27 = _createSuper(ProtectedFunctionError);

  function ProtectedFunctionError() {
    _classCallCheck(this, ProtectedFunctionError);

    return _super27.apply(this, arguments);
  }

  _createClass(ProtectedFunctionError, null, [{
    key: "cannotRegisterFunctionWithId",
    value: function cannotRegisterFunctionWithId(functionId) {
      return new ProtectedFunctionError("Cannot register function with id ".concat(functionId));
    }
  }, {
    key: "cannotUnregisterFunctionWithId",
    value: function cannotUnregisterFunctionWithId(functionId) {
      return new ProtectedFunctionError("Cannot unregister function with id ".concat(functionId));
    }
  }, {
    key: "cannotUnregisterProtectedPlugin",
    value: function cannotUnregisterProtectedPlugin() {
      return new ProtectedFunctionError('Cannot unregister protected plugin');
    }
  }]);

  return ProtectedFunctionError;
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when selected source location has an array.
 */


exports.ProtectedFunctionError = ProtectedFunctionError;

var SourceLocationHasArrayError = /*#__PURE__*/function (_Error28) {
  _inherits(SourceLocationHasArrayError, _Error28);

  var _super28 = _createSuper(SourceLocationHasArrayError);

  function SourceLocationHasArrayError() {
    _classCallCheck(this, SourceLocationHasArrayError);

    return _super28.call(this, 'Cannot perform this operation, source location has an array inside.');
  }

  return _createClass(SourceLocationHasArrayError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when selected target location has an array.
 *
 * @see [[addRows]]
 * @see [[addColumns]]
 * @see [[moveCells]]
 * @see [[moveRows]]
 * @see [[moveColumns]]
 * @see [[paste]]
 */


exports.SourceLocationHasArrayError = SourceLocationHasArrayError;

var TargetLocationHasArrayError = /*#__PURE__*/function (_Error29) {
  _inherits(TargetLocationHasArrayError, _Error29);

  var _super29 = _createSuper(TargetLocationHasArrayError);

  function TargetLocationHasArrayError() {
    _classCallCheck(this, TargetLocationHasArrayError);

    return _super29.call(this, 'Cannot perform this operation, target location has an array inside.');
  }

  return _createClass(TargetLocationHasArrayError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when named expression contains relative addresses.
 *
 * @see [[addNamedExpression]]
 * @see [[changeNamedExpression]]
 * */


exports.TargetLocationHasArrayError = TargetLocationHasArrayError;

var NoRelativeAddressesAllowedError = /*#__PURE__*/function (_Error30) {
  _inherits(NoRelativeAddressesAllowedError, _Error30);

  var _super30 = _createSuper(NoRelativeAddressesAllowedError);

  function NoRelativeAddressesAllowedError() {
    _classCallCheck(this, NoRelativeAddressesAllowedError);

    return _super30.call(this, 'Relative addresses not allowed in named expressions.');
  }

  return _createClass(NoRelativeAddressesAllowedError);
}( /*#__PURE__*/_wrapNativeSuper(Error));
/**
 * Error thrown when alias to a function is already defined.
 *
 * @see [[registerFunctionPlugin]]
 * @see [[registerFunction]]
 */


exports.NoRelativeAddressesAllowedError = NoRelativeAddressesAllowedError;

var AliasAlreadyExisting = /*#__PURE__*/function (_Error31) {
  _inherits(AliasAlreadyExisting, _Error31);

  var _super31 = _createSuper(AliasAlreadyExisting);

  function AliasAlreadyExisting(name, pluginName) {
    _classCallCheck(this, AliasAlreadyExisting);

    return _super31.call(this, "Alias id ".concat(name, " in plugin ").concat(pluginName, " already defined as a function or alias."));
  }

  return _createClass(AliasAlreadyExisting);
}( /*#__PURE__*/_wrapNativeSuper(Error));

exports.AliasAlreadyExisting = AliasAlreadyExisting;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var collection = __webpack_require__(131);
var collectionStrong = __webpack_require__(152);

// `Map` constructor
// https://tc39.es/ecma262/#sec-map-objects
collection('Map', function (init) {
  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };
}, collectionStrong);


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var uncurryThis = __webpack_require__(11);
var PROPER_FUNCTION_NAME = __webpack_require__(46).PROPER;
var redefine = __webpack_require__(22);
var anObject = __webpack_require__(30);
var isPrototypeOf = __webpack_require__(35);
var $toString = __webpack_require__(94);
var fails = __webpack_require__(20);
var regExpFlags = __webpack_require__(105);

var TO_STRING = 'toString';
var RegExpPrototype = RegExp.prototype;
var n$ToString = RegExpPrototype[TO_STRING];
var getFlags = uncurryThis(regExpFlags);

var NOT_GENERIC = fails(function () { return n$ToString.call({ source: 'a', flags: 'b' }) != '/a/b'; });
// FF44- RegExp#toString has a wrong name
var INCORRECT_NAME = PROPER_FUNCTION_NAME && n$ToString.name != TO_STRING;

// `RegExp.prototype.toString` method
// https://tc39.es/ecma262/#sec-regexp.prototype.tostring
if (NOT_GENERIC || INCORRECT_NAME) {
  redefine(RegExp.prototype, TO_STRING, function toString() {
    var R = anObject(this);
    var p = $toString(R.source);
    var rf = R.flags;
    var f = $toString(rf === undefined && isPrototypeOf(RegExpPrototype, R) && !('flags' in RegExpPrototype) ? getFlags(R) : rf);
    return '/' + p + '/' + f;
  }, { unsafe: true });
}


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var isForced = __webpack_require__(67);
var inheritIfRequired = __webpack_require__(134);
var createNonEnumerableProperty = __webpack_require__(23);
var defineProperty = __webpack_require__(25).f;
var getOwnPropertyNames = __webpack_require__(58).f;
var isPrototypeOf = __webpack_require__(35);
var isRegExp = __webpack_require__(141);
var toString = __webpack_require__(94);
var regExpFlags = __webpack_require__(105);
var stickyHelpers = __webpack_require__(106);
var redefine = __webpack_require__(22);
var fails = __webpack_require__(20);
var hasOwn = __webpack_require__(10);
var enforceInternalState = __webpack_require__(42).enforce;
var setSpecies = __webpack_require__(153);
var wellKnownSymbol = __webpack_require__(3);
var UNSUPPORTED_DOT_ALL = __webpack_require__(107);
var UNSUPPORTED_NCG = __webpack_require__(108);

var MATCH = wellKnownSymbol('match');
var NativeRegExp = global.RegExp;
var RegExpPrototype = NativeRegExp.prototype;
var SyntaxError = global.SyntaxError;
var getFlags = uncurryThis(regExpFlags);
var exec = uncurryThis(RegExpPrototype.exec);
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);
// TODO: Use only propper RegExpIdentifierName
var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
var re1 = /a/g;
var re2 = /a/g;

// "new" should create a new object, old webkit bug
var CORRECT_NEW = new NativeRegExp(re1) !== re1;

var MISSED_STICKY = stickyHelpers.MISSED_STICKY;
var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;

var BASE_FORCED = DESCRIPTORS &&
  (!CORRECT_NEW || MISSED_STICKY || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function () {
    re2[MATCH] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
  }));

var handleDotAll = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var brackets = false;
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      result += chr + charAt(string, ++index);
      continue;
    }
    if (!brackets && chr === '.') {
      result += '[\\s\\S]';
    } else {
      if (chr === '[') {
        brackets = true;
      } else if (chr === ']') {
        brackets = false;
      } result += chr;
    }
  } return result;
};

var handleNCG = function (string) {
  var length = string.length;
  var index = 0;
  var result = '';
  var named = [];
  var names = {};
  var brackets = false;
  var ncg = false;
  var groupid = 0;
  var groupname = '';
  var chr;
  for (; index <= length; index++) {
    chr = charAt(string, index);
    if (chr === '\\') {
      chr = chr + charAt(string, ++index);
    } else if (chr === ']') {
      brackets = false;
    } else if (!brackets) switch (true) {
      case chr === '[':
        brackets = true;
        break;
      case chr === '(':
        if (exec(IS_NCG, stringSlice(string, index + 1))) {
          index += 2;
          ncg = true;
        }
        result += chr;
        groupid++;
        continue;
      case chr === '>' && ncg:
        if (groupname === '' || hasOwn(names, groupname)) {
          throw new SyntaxError('Invalid capture group name');
        }
        names[groupname] = true;
        named[named.length] = [groupname, groupid];
        ncg = false;
        groupname = '';
        continue;
    }
    if (ncg) groupname += chr;
    else result += chr;
  } return [result, named];
};

// `RegExp` constructor
// https://tc39.es/ecma262/#sec-regexp-constructor
if (isForced('RegExp', BASE_FORCED)) {
  var RegExpWrapper = function RegExp(pattern, flags) {
    var thisIsRegExp = isPrototypeOf(RegExpPrototype, this);
    var patternIsRegExp = isRegExp(pattern);
    var flagsAreUndefined = flags === undefined;
    var groups = [];
    var rawPattern = pattern;
    var rawFlags, dotAll, sticky, handled, result, state;

    if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
      return pattern;
    }

    if (patternIsRegExp || isPrototypeOf(RegExpPrototype, pattern)) {
      pattern = pattern.source;
      if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags(rawPattern);
    }

    pattern = pattern === undefined ? '' : toString(pattern);
    flags = flags === undefined ? '' : toString(flags);
    rawPattern = pattern;

    if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
      dotAll = !!flags && stringIndexOf(flags, 's') > -1;
      if (dotAll) flags = replace(flags, /s/g, '');
    }

    rawFlags = flags;

    if (MISSED_STICKY && 'sticky' in re1) {
      sticky = !!flags && stringIndexOf(flags, 'y') > -1;
      if (sticky && UNSUPPORTED_Y) flags = replace(flags, /y/g, '');
    }

    if (UNSUPPORTED_NCG) {
      handled = handleNCG(pattern);
      pattern = handled[0];
      groups = handled[1];
    }

    result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);

    if (dotAll || sticky || groups.length) {
      state = enforceInternalState(result);
      if (dotAll) {
        state.dotAll = true;
        state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
      }
      if (sticky) state.sticky = true;
      if (groups.length) state.groups = groups;
    }

    if (pattern !== rawPattern) try {
      // fails in old engines, but we have no alternatives for unsupported regex syntax
      createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
    } catch (error) { /* empty */ }

    return result;
  };

  var proxy = function (key) {
    key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
      configurable: true,
      get: function () { return NativeRegExp[key]; },
      set: function (it) { NativeRegExp[key] = it; }
    });
  };

  for (var keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index;) {
    proxy(keys[index++]);
  }

  RegExpPrototype.constructor = RegExpWrapper;
  RegExpWrapper.prototype = RegExpPrototype;
  redefine(global, 'RegExp', RegExpWrapper);
}

// https://tc39.es/ecma262/#sec-get-regexp-@@species
setSpecies('RegExp');


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.simpleCellRangeToString = exports.simpleCellRangeFromString = exports.simpleCellAddressToString = exports.simpleCellAddressFromString = exports.collectDependencies = exports.cellAddressFromString = exports.buildProcedureAst = exports.buildParsingErrorAst = exports.buildLexerConfig = exports.buildCellRangeAst = exports.buildCellErrorAst = exports.Unparser = exports.RowRangeDependency = exports.ParsingErrorType = exports.ParserWithCaching = exports.NamedExpressionDependency = exports.FormulaLexer = exports.ColumnRangeDependency = exports.CellRangeDependency = exports.CellAddress = exports.AstNodeType = exports.AddressDependency = void 0;

var _addressRepresentationConverters = __webpack_require__(170);

exports.cellAddressFromString = _addressRepresentationConverters.cellAddressFromString;
exports.simpleCellAddressFromString = _addressRepresentationConverters.simpleCellAddressFromString;
exports.simpleCellAddressToString = _addressRepresentationConverters.simpleCellAddressToString;
exports.simpleCellRangeFromString = _addressRepresentationConverters.simpleCellRangeFromString;
exports.simpleCellRangeToString = _addressRepresentationConverters.simpleCellRangeToString;

var _CellAddress = __webpack_require__(181);

exports.CellAddress = _CellAddress.CellAddress;

var _ParserWithCaching = __webpack_require__(228);

exports.ParserWithCaching = _ParserWithCaching.ParserWithCaching;

var _collectDependencies = __webpack_require__(240);

exports.collectDependencies = _collectDependencies.collectDependencies;

var _LexerConfig = __webpack_require__(183);

exports.buildLexerConfig = _LexerConfig.buildLexerConfig;

var _FormulaParser = __webpack_require__(233);

exports.FormulaLexer = _FormulaParser.FormulaLexer;

var _Ast = __webpack_require__(230);

exports.AstNodeType = _Ast.AstNodeType;
exports.ParsingErrorType = _Ast.ParsingErrorType;
exports.buildProcedureAst = _Ast.buildProcedureAst;
exports.buildCellRangeAst = _Ast.buildCellRangeAst;
exports.buildParsingErrorAst = _Ast.buildParsingErrorAst;
exports.buildCellErrorAst = _Ast.buildCellErrorAst;

var _Unparser = __webpack_require__(239);

exports.Unparser = _Unparser.Unparser;

var _RelativeDependency = __webpack_require__(241);

exports.AddressDependency = _RelativeDependency.AddressDependency;
exports.CellRangeDependency = _RelativeDependency.CellRangeDependency;
exports.ColumnRangeDependency = _RelativeDependency.ColumnRangeDependency;
exports.RowRangeDependency = _RelativeDependency.RowRangeDependency;
exports.NamedExpressionDependency = _RelativeDependency.NamedExpressionDependency;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.columnAddressFromString = exports.cellAddressFromString = void 0;
exports.columnIndexToLabel = columnIndexToLabel;
exports.rowAddressFromString = void 0;
exports.sheetIndexToString = sheetIndexToString;
exports.simpleCellRangeToString = exports.simpleCellRangeFromString = exports.simpleCellAddressToString = exports.simpleCellAddressFromString = void 0;

__webpack_require__(168);

__webpack_require__(103);

__webpack_require__(167);

__webpack_require__(146);

__webpack_require__(161);

__webpack_require__(171);

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(179);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _CellAddress = __webpack_require__(181);

var _ColumnAddress = __webpack_require__(182);

var _LexerConfig = __webpack_require__(183);

var _RowAddress = __webpack_require__(227);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var addressRegex = new RegExp("^(".concat(_LexerConfig.sheetNameRegexp, ")?(\\").concat(_LexerConfig.ABSOLUTE_OPERATOR, "?)([A-Za-z]+)(\\").concat(_LexerConfig.ABSOLUTE_OPERATOR, "?)([0-9]+)$"));
var columnRegex = new RegExp("^(".concat(_LexerConfig.sheetNameRegexp, ")?(\\").concat(_LexerConfig.ABSOLUTE_OPERATOR, "?)([A-Za-z]+)$"));
var rowRegex = new RegExp("^(".concat(_LexerConfig.sheetNameRegexp, ")?(\\").concat(_LexerConfig.ABSOLUTE_OPERATOR, "?)([0-9]+)$"));
var simpleSheetNameRegex = new RegExp("^".concat(_LexerConfig.simpleSheetName, "$"));
/**
 * Computes R0C0 representation of cell address based on it's string representation and base address.
 *
 * @param sheetMapping - mapping function needed to change name of a sheet to index
 * @param stringAddress - string representation of cell address, e.g. 'C64'
 * @param baseAddress - base address for R0C0 conversion
 * @returns object representation of address
 */

var cellAddressFromString = function cellAddressFromString(sheetMapping, stringAddress, baseAddress) {
  var result = addressRegex.exec(stringAddress);
  var col = columnLabelToIndex(result[6]);
  var sheet = extractSheetNumber(result, sheetMapping);

  if (sheet === undefined) {
    return undefined;
  }

  if (sheet === null) {
    sheet = undefined;
  }

  var row = Number(result[8]) - 1;

  if (result[5] === _LexerConfig.ABSOLUTE_OPERATOR && result[7] === _LexerConfig.ABSOLUTE_OPERATOR) {
    return _CellAddress.CellAddress.absolute(col, row, sheet);
  } else if (result[5] === _LexerConfig.ABSOLUTE_OPERATOR) {
    return _CellAddress.CellAddress.absoluteCol(col, row - baseAddress.row, sheet);
  } else if (result[7] === _LexerConfig.ABSOLUTE_OPERATOR) {
    return _CellAddress.CellAddress.absoluteRow(col - baseAddress.col, row, sheet);
  } else {
    return _CellAddress.CellAddress.relative(row - baseAddress.row, col - baseAddress.col, sheet);
  }
};

exports.cellAddressFromString = cellAddressFromString;

var columnAddressFromString = function columnAddressFromString(sheetMapping, stringAddress, baseAddress) {
  var result = columnRegex.exec(stringAddress);
  var sheet = extractSheetNumber(result, sheetMapping);

  if (sheet === undefined) {
    return undefined;
  }

  if (sheet === null) {
    sheet = undefined;
  }

  var col = columnLabelToIndex(result[6]);

  if (result[5] === _LexerConfig.ABSOLUTE_OPERATOR) {
    return _ColumnAddress.ColumnAddress.absolute(col, sheet);
  } else {
    return _ColumnAddress.ColumnAddress.relative(col - baseAddress.col, sheet);
  }
};

exports.columnAddressFromString = columnAddressFromString;

var rowAddressFromString = function rowAddressFromString(sheetMapping, stringAddress, baseAddress) {
  var result = rowRegex.exec(stringAddress);
  var sheet = extractSheetNumber(result, sheetMapping);

  if (sheet === undefined) {
    return undefined;
  }

  if (sheet === null) {
    sheet = undefined;
  }

  var row = Number(result[6]) - 1;

  if (result[5] === _LexerConfig.ABSOLUTE_OPERATOR) {
    return _RowAddress.RowAddress.absolute(row, sheet);
  } else {
    return _RowAddress.RowAddress.relative(row - baseAddress.row, sheet);
  }
};
/**
 * Computes simple (absolute) address of a cell address based on its string representation.
 * If sheet name present in string representation but is not present in sheet mapping, returns undefined.
 * If sheet name is not present in string representation, returns {@param sheetContext} as sheet number
 *
 * @param sheetMapping - mapping function needed to change name of a sheet to index
 * @param stringAddress - string representation of cell address, e.g. 'C64'
 * @param sheetContext - sheet in context of which we should parse the address
 * @returns absolute representation of address, e.g. { sheet: 0, col: 1, row: 1 }
 */


exports.rowAddressFromString = rowAddressFromString;

var simpleCellAddressFromString = function simpleCellAddressFromString(sheetMapping, stringAddress, sheetContext) {
  var result = addressRegex.exec(stringAddress);
  var col = columnLabelToIndex(result[6]);
  var sheet = extractSheetNumber(result, sheetMapping);

  if (sheet === undefined) {
    return undefined;
  }

  if (sheet === null) {
    sheet = sheetContext;
  }

  var row = Number(result[8]) - 1;
  return (0, _Cell.simpleCellAddress)(sheet, col, row);
};

exports.simpleCellAddressFromString = simpleCellAddressFromString;

var simpleCellRangeFromString = function simpleCellRangeFromString(sheetMapping, stringAddress, sheetContext) {
  var split = stringAddress.split(_LexerConfig.RANGE_OPERATOR);

  if (split.length !== 2) {
    return undefined;
  }

  var _split = _slicedToArray(split, 2),
      startString = _split[0],
      endString = _split[1];

  var start = simpleCellAddressFromString(sheetMapping, startString, sheetContext);

  if (start === undefined) {
    return undefined;
  }

  var end = simpleCellAddressFromString(sheetMapping, endString, start.sheet);

  if (end === undefined) {
    return undefined;
  }

  if (start.sheet !== end.sheet) {
    return undefined;
  }

  return (0, _AbsoluteCellRange.simpleCellRange)(start, end);
};
/**
 * Returns string representation of absolute address
 * If sheet index is not present in sheet mapping, returns undefined
 *
 * @param sheetIndexMapping - mapping function needed to change sheet index to sheet name
 * @param address - object representation of absolute address
 * @param sheetIndex - if is not equal with address sheet index, string representation will contain sheet name
 * */


exports.simpleCellRangeFromString = simpleCellRangeFromString;

var simpleCellAddressToString = function simpleCellAddressToString(sheetIndexMapping, address, sheetIndex) {
  var column = columnIndexToLabel(address.col);
  var sheetName = sheetIndexToString(address.sheet, sheetIndexMapping);

  if (sheetName === undefined) {
    return undefined;
  }

  if (sheetIndex !== address.sheet) {
    return "".concat(sheetName, "!").concat(column).concat(address.row + 1);
  } else {
    return "".concat(column).concat(address.row + 1);
  }
};

exports.simpleCellAddressToString = simpleCellAddressToString;

var simpleCellRangeToString = function simpleCellRangeToString(sheetIndexMapping, address, sheetIndex) {
  var startString = simpleCellAddressToString(sheetIndexMapping, address.start, sheetIndex);
  var endString = simpleCellAddressToString(sheetIndexMapping, address.end, address.start.sheet);

  if (startString === undefined || endString === undefined) {
    return undefined;
  } else {
    return "".concat(startString).concat(_LexerConfig.RANGE_OPERATOR).concat(endString);
  }
};
/**
 * Convert column label to index
 *
 * @param columnStringRepresentation - column label (e.g. 'AAB')
 * @returns column index
 * */


exports.simpleCellRangeToString = simpleCellRangeToString;

function columnLabelToIndex(columnStringRepresentation) {
  if (columnStringRepresentation.length === 1) {
    return columnStringRepresentation.toUpperCase().charCodeAt(0) - 65;
  } else {
    return columnStringRepresentation.split('').reduce(function (currentColumn, nextLetter) {
      return currentColumn * 26 + (nextLetter.toUpperCase().charCodeAt(0) - 64);
    }, 0) - 1;
  }
}
/**
 * Converts column index to label
 *
 * @param column - address to convert
 * @returns string representation, e.g. 'AAB'
 */


function columnIndexToLabel(column) {
  var result = '';

  while (column >= 0) {
    result = String.fromCharCode(column % 26 + 97) + result;
    column = Math.floor(column / 26) - 1;
  }

  return result.toUpperCase();
}

function sheetIndexToString(sheetId, sheetMappingFn) {
  var sheetName = sheetMappingFn(sheetId);

  if (sheetName === undefined) {
    return undefined;
  }

  if (simpleSheetNameRegex.test(sheetName)) {
    return sheetName;
  } else {
    sheetName = sheetName.replace(/'/g, "''");
    return "'".concat(sheetName, "'");
  }
}

function extractSheetNumber(regexResult, sheetMapping) {
  var _a;

  var maybeSheetName = (_a = regexResult[3]) !== null && _a !== void 0 ? _a : regexResult[2];

  if (maybeSheetName) {
    maybeSheetName = maybeSheetName.replace(/''/g, "'");
    return sheetMapping(maybeSheetName);
  } else {
    return null;
  }
}

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var apply = __webpack_require__(68);
var call = __webpack_require__(33);
var uncurryThis = __webpack_require__(11);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(172);
var isRegExp = __webpack_require__(141);
var anObject = __webpack_require__(30);
var requireObjectCoercible = __webpack_require__(13);
var speciesConstructor = __webpack_require__(173);
var advanceStringIndex = __webpack_require__(174);
var toLength = __webpack_require__(64);
var toString = __webpack_require__(94);
var getMethod = __webpack_require__(36);
var arraySlice = __webpack_require__(111);
var callRegExpExec = __webpack_require__(175);
var regexpExec = __webpack_require__(104);
var stickyHelpers = __webpack_require__(106);
var fails = __webpack_require__(20);

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis(/./.exec);
var push = uncurryThis($push);
var stringSlice = uncurryThis(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? call(splitter, separator, O, limit)
        : call(internalSplit, toString(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push(A, stringSlice(S, p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            push(A, z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      push(A, stringSlice(S, p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// TODO: Remove from `core-js@4` since it's moved to entry points
__webpack_require__(103);
var uncurryThis = __webpack_require__(11);
var redefine = __webpack_require__(22);
var regexpExec = __webpack_require__(104);
var fails = __webpack_require__(20);
var wellKnownSymbol = __webpack_require__(3);
var createNonEnumerableProperty = __webpack_require__(23);

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

module.exports = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    redefine(String.prototype, KEY, methods[0]);
    redefine(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(30);
var aConstructor = __webpack_require__(71);
var wellKnownSymbol = __webpack_require__(3);

var SPECIES = wellKnownSymbol('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
module.exports = function (O, defaultConstructor) {
  var C = anObject(O).constructor;
  var S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aConstructor(S);
};


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var charAt = __webpack_require__(93).charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
module.exports = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var call = __webpack_require__(33);
var anObject = __webpack_require__(30);
var isCallable = __webpack_require__(19);
var classof = __webpack_require__(49);
var regexpExec = __webpack_require__(104);

var TypeError = global.TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
module.exports = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call(exec, R, S);
    if (result !== null) anObject(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call(regexpExec, R, S);
  throw TypeError('RegExp#exec called on incompatible receiver');
};


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $reduce = __webpack_require__(177).left;
var arrayMethodIsStrict = __webpack_require__(156);
var CHROME_VERSION = __webpack_require__(16);
var IS_NODE = __webpack_require__(178);

var STRICT_METHOD = arrayMethodIsStrict('reduce');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    var length = arguments.length;
    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(4);
var aCallable = __webpack_require__(37);
var toObject = __webpack_require__(12);
var IndexedObject = __webpack_require__(55);
var lengthOfArrayLike = __webpack_require__(63);

var TypeError = global.TypeError;

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aCallable(callbackfn);
    var O = toObject(that);
    var self = IndexedObject(O);
    var length = lengthOfArrayLike(O);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

module.exports = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod(true)
};


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(49);
var global = __webpack_require__(4);

module.exports = classof(global.process) == 'process';


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var apply = __webpack_require__(68);
var call = __webpack_require__(33);
var uncurryThis = __webpack_require__(11);
var fixRegExpWellKnownSymbolLogic = __webpack_require__(172);
var fails = __webpack_require__(20);
var anObject = __webpack_require__(30);
var isCallable = __webpack_require__(19);
var toIntegerOrInfinity = __webpack_require__(62);
var toLength = __webpack_require__(64);
var toString = __webpack_require__(94);
var requireObjectCoercible = __webpack_require__(13);
var advanceStringIndex = __webpack_require__(174);
var getMethod = __webpack_require__(36);
var getSubstitution = __webpack_require__(180);
var regExpExec = __webpack_require__(175);
var wellKnownSymbol = __webpack_require__(3);

var REPLACE = wellKnownSymbol('replace');
var max = Math.max;
var min = Math.min;
var concat = uncurryThis([].concat);
var push = uncurryThis([].push);
var stringIndexOf = uncurryThis(''.indexOf);
var stringSlice = uncurryThis(''.slice);

var maybeToString = function (it) {
  return it === undefined ? it : String(it);
};

// IE <= 11 replaces $0 with the whole match, as if it was $&
// https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0
var REPLACE_KEEPS_$0 = (function () {
  // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
  return 'a'.replace(/./, '$0') === '$0';
})();

// Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string
var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = (function () {
  if (/./[REPLACE]) {
    return /./[REPLACE]('a', '$0') === '';
  }
  return false;
})();

var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
  var re = /./;
  re.exec = function () {
    var result = [];
    result.groups = { a: '7' };
    return result;
  };
  // eslint-disable-next-line regexp/no-useless-dollar-replacements -- false positive
  return ''.replace(re, '$<a>') !== '7';
});

// @@replace logic
fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
  var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';

  return [
    // `String.prototype.replace` method
    // https://tc39.es/ecma262/#sec-string.prototype.replace
    function replace(searchValue, replaceValue) {
      var O = requireObjectCoercible(this);
      var replacer = searchValue == undefined ? undefined : getMethod(searchValue, REPLACE);
      return replacer
        ? call(replacer, searchValue, O, replaceValue)
        : call(nativeReplace, toString(O), searchValue, replaceValue);
    },
    // `RegExp.prototype[@@replace]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
    function (string, replaceValue) {
      var rx = anObject(this);
      var S = toString(string);

      if (
        typeof replaceValue == 'string' &&
        stringIndexOf(replaceValue, UNSAFE_SUBSTITUTE) === -1 &&
        stringIndexOf(replaceValue, '$<') === -1
      ) {
        var res = maybeCallNative(nativeReplace, rx, S, replaceValue);
        if (res.done) return res.value;
      }

      var functionalReplace = isCallable(replaceValue);
      if (!functionalReplace) replaceValue = toString(replaceValue);

      var global = rx.global;
      if (global) {
        var fullUnicode = rx.unicode;
        rx.lastIndex = 0;
      }
      var results = [];
      while (true) {
        var result = regExpExec(rx, S);
        if (result === null) break;

        push(results, result);
        if (!global) break;

        var matchStr = toString(result[0]);
        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
      }

      var accumulatedResult = '';
      var nextSourcePosition = 0;
      for (var i = 0; i < results.length; i++) {
        result = results[i];

        var matched = toString(result[0]);
        var position = max(min(toIntegerOrInfinity(result.index), S.length), 0);
        var captures = [];
        // NOTE: This is equivalent to
        //   captures = result.slice(1).map(maybeToString)
        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
        // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.
        for (var j = 1; j < result.length; j++) push(captures, maybeToString(result[j]));
        var namedCaptures = result.groups;
        if (functionalReplace) {
          var replacerArgs = concat([matched], captures, position, S);
          if (namedCaptures !== undefined) push(replacerArgs, namedCaptures);
          var replacement = toString(apply(replaceValue, undefined, replacerArgs));
        } else {
          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
        }
        if (position >= nextSourcePosition) {
          accumulatedResult += stringSlice(S, nextSourcePosition, position) + replacement;
          nextSourcePosition = position + matched.length;
        }
      }
      return accumulatedResult + stringSlice(S, nextSourcePosition);
    }
  ];
}, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

var uncurryThis = __webpack_require__(11);
var toObject = __webpack_require__(12);

var floor = Math.floor;
var charAt = uncurryThis(''.charAt);
var replace = uncurryThis(''.replace);
var stringSlice = uncurryThis(''.slice);
var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g;

// `GetSubstitution` abstract operation
// https://tc39.es/ecma262/#sec-getsubstitution
module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
  var tailPos = position + matched.length;
  var m = captures.length;
  var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
  if (namedCaptures !== undefined) {
    namedCaptures = toObject(namedCaptures);
    symbols = SUBSTITUTION_SYMBOLS;
  }
  return replace(replacement, symbols, function (match, ch) {
    var capture;
    switch (charAt(ch, 0)) {
      case '$': return '$';
      case '&': return matched;
      case '`': return stringSlice(str, 0, position);
      case "'": return stringSlice(str, tailPos);
      case '<':
        capture = namedCaptures[stringSlice(ch, 1, -1)];
        break;
      default: // \d\d?
        var n = +ch;
        if (n === 0) return match;
        if (n > m) {
          var f = floor(n / 10);
          if (f === 0) return match;
          if (f <= m) return captures[f - 1] === undefined ? charAt(ch, 1) : captures[f - 1] + charAt(ch, 1);
          return match;
        }
        capture = captures[n - 1];
    }
    return capture === undefined ? '' : capture;
  });
};


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.CellReferenceType = exports.CellAddress = void 0;

__webpack_require__(146);

var _Cell = __webpack_require__(143);

var _addressRepresentationConverters = __webpack_require__(170);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/** Possible kinds of cell references */
var CellReferenceType;
exports.CellReferenceType = CellReferenceType;

(function (CellReferenceType) {
  /** Cell reference with both row and column relative. */
  CellReferenceType["CELL_REFERENCE_RELATIVE"] = "CELL_REFERENCE";
  /** Cell reference with both row and column absolute. */

  CellReferenceType["CELL_REFERENCE_ABSOLUTE"] = "CELL_REFERENCE_ABSOLUTE";
  /** Cell reference with absolute column and relative row. */

  CellReferenceType["CELL_REFERENCE_ABSOLUTE_COL"] = "CELL_REFERENCE_ABSOLUTE_COL";
  /** Cell reference with relative column and absolute row. */

  CellReferenceType["CELL_REFERENCE_ABSOLUTE_ROW"] = "CELL_REFERENCE_ABSOLUTE_ROW";
})(CellReferenceType || (exports.CellReferenceType = CellReferenceType = {}));

var CellAddress = /*#__PURE__*/function () {
  function CellAddress(col, row, type, sheet) {
    _classCallCheck(this, CellAddress);

    this.col = col;
    this.row = row;
    this.type = type;
    this.sheet = sheet;
  }

  _createClass(CellAddress, [{
    key: "toSimpleCellAddress",
    value:
    /**
     * Converts R0C0 representation of cell address to simple object representation.
     *
     * @param baseAddress - base address for R0C0 shifts
     */
    function toSimpleCellAddress(baseAddress) {
      var sheet = (0, _Cell.absoluteSheetReference)(this, baseAddress);

      if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE) {
        return (0, _Cell.simpleCellAddress)(sheet, this.col, this.row);
      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {
        return (0, _Cell.simpleCellAddress)(sheet, baseAddress.col + this.col, this.row);
      } else if (this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {
        return (0, _Cell.simpleCellAddress)(sheet, this.col, baseAddress.row + this.row);
      } else {
        return (0, _Cell.simpleCellAddress)(sheet, baseAddress.col + this.col, baseAddress.row + this.row);
      }
    }
  }, {
    key: "toSimpleColumnAddress",
    value: function toSimpleColumnAddress(baseAddress) {
      var sheet = (0, _Cell.absoluteSheetReference)(this, baseAddress);
      var column = this.col;

      if (this.isColumnRelative()) {
        column += baseAddress.col;
      }

      return (0, _Cell.simpleColumnAddress)(sheet, column);
    }
  }, {
    key: "toSimpleRowAddress",
    value: function toSimpleRowAddress(baseAddress) {
      var sheet = (0, _Cell.absoluteSheetReference)(this, baseAddress);
      var row = this.row;

      if (this.isRowRelative()) {
        row += baseAddress.row;
      }

      return (0, _Cell.simpleRowAddress)(sheet, row);
    }
  }, {
    key: "isRowAbsolute",
    value: function isRowAbsolute() {
      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;
    }
  }, {
    key: "isColumnAbsolute",
    value: function isColumnAbsolute() {
      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;
    }
  }, {
    key: "isColumnRelative",
    value: function isColumnRelative() {
      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW;
    }
  }, {
    key: "isRowRelative",
    value: function isRowRelative() {
      return this.type === CellReferenceType.CELL_REFERENCE_RELATIVE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL;
    }
  }, {
    key: "isAbsolute",
    value: function isAbsolute() {
      return this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE && this.sheet !== undefined;
    }
  }, {
    key: "shiftedByRows",
    value: function shiftedByRows(numberOfRows) {
      return new CellAddress(this.col, this.row + numberOfRows, this.type, this.sheet);
    }
  }, {
    key: "shiftedByColumns",
    value: function shiftedByColumns(numberOfColumns) {
      return new CellAddress(this.col + numberOfColumns, this.row, this.type, this.sheet);
    }
  }, {
    key: "moved",
    value: function moved(toSheet, toRight, toBottom) {
      var newSheet = this.sheet === undefined ? undefined : toSheet;
      return new CellAddress(this.col + toRight, this.row + toBottom, this.type, newSheet);
    }
  }, {
    key: "withAbsoluteSheet",
    value: function withAbsoluteSheet(sheet) {
      return new CellAddress(this.col, this.row, this.type, sheet);
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(baseAddress) {
      return (0, _Cell.invalidSimpleCellAddress)(this.toSimpleCellAddress(baseAddress));
    }
  }, {
    key: "shiftRelativeDimensions",
    value: function shiftRelativeDimensions(toRight, toBottom) {
      var col = this.isColumnAbsolute() ? this.col : this.col + toRight;
      var row = this.isRowAbsolute() ? this.row : this.row + toBottom;
      return new CellAddress(col, row, this.type, this.sheet);
    }
  }, {
    key: "shiftAbsoluteDimensions",
    value: function shiftAbsoluteDimensions(toRight, toBottom) {
      var col = this.isColumnRelative() ? this.col : this.col + toRight;
      var row = this.isRowRelative() ? this.row : this.row + toBottom;
      return new CellAddress(col, row, this.type, this.sheet);
    }
  }, {
    key: "hash",
    value: function hash(withSheet) {
      var sheetPart = withSheet && this.sheet !== undefined ? "#".concat(this.sheet) : '';

      switch (this.type) {
        case CellReferenceType.CELL_REFERENCE_RELATIVE:
          {
            return "".concat(sheetPart, "#").concat(this.row, "R").concat(this.col);
          }

        case CellReferenceType.CELL_REFERENCE_ABSOLUTE:
          {
            return "".concat(sheetPart, "#").concat(this.row, "A").concat(this.col);
          }

        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL:
          {
            return "".concat(sheetPart, "#").concat(this.row, "AC").concat(this.col);
          }

        case CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW:
          {
            return "".concat(sheetPart, "#").concat(this.row, "AR").concat(this.col);
          }
      }
    }
  }, {
    key: "unparse",
    value: function unparse(baseAddress) {
      var simpleAddress = this.toSimpleCellAddress(baseAddress);

      if ((0, _Cell.invalidSimpleCellAddress)(simpleAddress)) {
        return undefined;
      }

      var column = (0, _addressRepresentationConverters.columnIndexToLabel)(simpleAddress.col);
      var rowDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW ? '$' : '';
      var colDollar = this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE || this.type === CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL ? '$' : '';
      return "".concat(colDollar).concat(column).concat(rowDollar).concat(simpleAddress.row + 1);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(maxColumns, maxRows) {
      return this.row >= maxRows || this.col >= maxColumns;
    }
  }], [{
    key: "relative",
    value: function relative(row, col, sheet) {
      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_RELATIVE, sheet);
    }
  }, {
    key: "absolute",
    value: function absolute(col, row, sheet) {
      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE, sheet);
    }
  }, {
    key: "absoluteCol",
    value: function absoluteCol(col, row, sheet) {
      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL, sheet);
    }
  }, {
    key: "absoluteRow",
    value: function absoluteRow(col, row, sheet) {
      return new CellAddress(col, row, CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW, sheet);
    }
  }]);

  return CellAddress;
}();

exports.CellAddress = CellAddress;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ReferenceType = exports.ColumnAddress = void 0;

__webpack_require__(146);

var _Cell = __webpack_require__(143);

var _addressRepresentationConverters = __webpack_require__(170);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ReferenceType;
exports.ReferenceType = ReferenceType;

(function (ReferenceType) {
  ReferenceType["RELATIVE"] = "RELATIVE";
  ReferenceType["ABSOLUTE"] = "ABSOLUTE";
})(ReferenceType || (exports.ReferenceType = ReferenceType = {}));

var ColumnAddress = /*#__PURE__*/function () {
  function ColumnAddress(type, col, sheet) {
    _classCallCheck(this, ColumnAddress);

    this.type = type;
    this.col = col;
    this.sheet = sheet;
  }

  _createClass(ColumnAddress, [{
    key: "isColumnAbsolute",
    value: function isColumnAbsolute() {
      return this.type === ReferenceType.ABSOLUTE;
    }
  }, {
    key: "isColumnRelative",
    value: function isColumnRelative() {
      return this.type === ReferenceType.RELATIVE;
    }
  }, {
    key: "isAbsolute",
    value: function isAbsolute() {
      return this.type === ReferenceType.ABSOLUTE && this.sheet !== undefined;
    }
  }, {
    key: "moved",
    value: function moved(toSheet, toRight, _toBottom) {
      var newSheet = this.sheet === undefined ? undefined : toSheet;
      return new ColumnAddress(this.type, this.col + toRight, newSheet);
    }
  }, {
    key: "shiftedByColumns",
    value: function shiftedByColumns(numberOfColumns) {
      return new ColumnAddress(this.type, this.col + numberOfColumns, this.sheet);
    }
  }, {
    key: "toSimpleColumnAddress",
    value: function toSimpleColumnAddress(baseAddress) {
      var sheet = (0, _Cell.absoluteSheetReference)(this, baseAddress);
      var column = this.col;

      if (this.isColumnRelative()) {
        column = baseAddress.col + this.col;
      }

      return (0, _Cell.simpleColumnAddress)(sheet, column);
    }
  }, {
    key: "shiftRelativeDimensions",
    value: function shiftRelativeDimensions(toRight, _toBottom) {
      var col = this.isColumnRelative() ? this.col + toRight : this.col;
      return new ColumnAddress(this.type, col, this.sheet);
    }
  }, {
    key: "shiftAbsoluteDimensions",
    value: function shiftAbsoluteDimensions(toRight, _toBottom) {
      var col = this.isColumnAbsolute() ? this.col + toRight : this.col;
      return new ColumnAddress(this.type, col, this.sheet);
    }
  }, {
    key: "withAbsoluteSheet",
    value: function withAbsoluteSheet(sheet) {
      return new ColumnAddress(this.type, this.col, sheet);
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(baseAddress) {
      return this.toSimpleColumnAddress(baseAddress).col < 0;
    }
  }, {
    key: "hash",
    value: function hash(withSheet) {
      var sheetPart = withSheet && this.sheet !== undefined ? "#".concat(this.sheet) : '';

      switch (this.type) {
        case ReferenceType.RELATIVE:
          {
            return "".concat(sheetPart, "#COLR").concat(this.col);
          }

        case ReferenceType.ABSOLUTE:
          {
            return "".concat(sheetPart, "#COLA").concat(this.col);
          }
      }
    }
  }, {
    key: "unparse",
    value: function unparse(baseAddress) {
      var simpleAddress = this.toSimpleColumnAddress(baseAddress);

      if ((0, _Cell.invalidSimpleColumnAddress)(simpleAddress)) {
        return undefined;
      }

      var column = (0, _addressRepresentationConverters.columnIndexToLabel)(simpleAddress.col);
      var dollar = this.type === ReferenceType.ABSOLUTE ? '$' : '';
      return "".concat(dollar).concat(column);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(maxColumns) {
      return this.col >= maxColumns;
    }
  }], [{
    key: "absolute",
    value: function absolute(column, sheet) {
      return new ColumnAddress(ReferenceType.ABSOLUTE, column, sheet);
    }
  }, {
    key: "relative",
    value: function relative(column, sheet) {
      return new ColumnAddress(ReferenceType.RELATIVE, column, sheet);
    }
  }]);

  return ColumnAddress;
}();

exports.ColumnAddress = ColumnAddress;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(82);

__webpack_require__(77);

__webpack_require__(81);

exports.__esModule = true;
exports.simpleSheetName = exports.sheetNameRegexp = exports.quotedSheetName = exports.buildLexerConfig = exports.WhiteSpace = exports.TimesOp = exports.StringLiteral = exports.RowRange = exports.RangeSeparator = exports.RParen = exports.RANGE_OPERATOR = exports.ProcedureName = exports.PowerOp = exports.PlusOp = exports.PercentOp = exports.NotEqualOp = exports.NamedExpression = exports.MultiplicationOp = exports.MinusOp = exports.LessThanOrEqualOp = exports.LessThanOp = exports.LParen = exports.GreaterThanOrEqualOp = exports.GreaterThanOp = exports.ErrorLiteral = exports.EqualsOp = exports.DivOp = exports.ConcatenateOp = exports.ColumnRange = exports.CellReference = exports.BooleanOp = exports.ArrayRParen = exports.ArrayLParen = exports.AdditionOp = exports.ABSOLUTE_OPERATOR = void 0;

__webpack_require__(168);

__webpack_require__(103);

__webpack_require__(167);

__webpack_require__(146);

var _chevrotain = __webpack_require__(184);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var RANGE_OPERATOR = ':';
exports.RANGE_OPERATOR = RANGE_OPERATOR;
var ABSOLUTE_OPERATOR = '$';
/* arithmetic */
// abstract for + -

exports.ABSOLUTE_OPERATOR = ABSOLUTE_OPERATOR;
var AdditionOp = (0, _chevrotain.createToken)({
  name: 'AdditionOp',
  pattern: _chevrotain.Lexer.NA
});
exports.AdditionOp = AdditionOp;
var PlusOp = (0, _chevrotain.createToken)({
  name: 'PlusOp',
  pattern: /\+/,
  categories: AdditionOp
});
exports.PlusOp = PlusOp;
var MinusOp = (0, _chevrotain.createToken)({
  name: 'MinusOp',
  pattern: /-/,
  categories: AdditionOp
}); // abstract for * /

exports.MinusOp = MinusOp;
var MultiplicationOp = (0, _chevrotain.createToken)({
  name: 'MultiplicationOp',
  pattern: _chevrotain.Lexer.NA
});
exports.MultiplicationOp = MultiplicationOp;
var TimesOp = (0, _chevrotain.createToken)({
  name: 'TimesOp',
  pattern: /\*/,
  categories: MultiplicationOp
});
exports.TimesOp = TimesOp;
var DivOp = (0, _chevrotain.createToken)({
  name: 'DivOp',
  pattern: /\//,
  categories: MultiplicationOp
});
exports.DivOp = DivOp;
var PowerOp = (0, _chevrotain.createToken)({
  name: 'PowerOp',
  pattern: /\^/
});
exports.PowerOp = PowerOp;
var PercentOp = (0, _chevrotain.createToken)({
  name: 'PercentOp',
  pattern: /%/
});
exports.PercentOp = PercentOp;
var BooleanOp = (0, _chevrotain.createToken)({
  name: 'BooleanOp',
  pattern: _chevrotain.Lexer.NA
});
exports.BooleanOp = BooleanOp;
var EqualsOp = (0, _chevrotain.createToken)({
  name: 'EqualsOp',
  pattern: /=/,
  categories: BooleanOp
});
exports.EqualsOp = EqualsOp;
var NotEqualOp = (0, _chevrotain.createToken)({
  name: 'NotEqualOp',
  pattern: /<>/,
  categories: BooleanOp
});
exports.NotEqualOp = NotEqualOp;
var GreaterThanOp = (0, _chevrotain.createToken)({
  name: 'GreaterThanOp',
  pattern: />/,
  categories: BooleanOp
});
exports.GreaterThanOp = GreaterThanOp;
var LessThanOp = (0, _chevrotain.createToken)({
  name: 'LessThanOp',
  pattern: /</,
  categories: BooleanOp
});
exports.LessThanOp = LessThanOp;
var GreaterThanOrEqualOp = (0, _chevrotain.createToken)({
  name: 'GreaterThanOrEqualOp',
  pattern: />=/,
  categories: BooleanOp
});
exports.GreaterThanOrEqualOp = GreaterThanOrEqualOp;
var LessThanOrEqualOp = (0, _chevrotain.createToken)({
  name: 'LessThanOrEqualOp',
  pattern: /<=/,
  categories: BooleanOp
});
exports.LessThanOrEqualOp = LessThanOrEqualOp;
var ConcatenateOp = (0, _chevrotain.createToken)({
  name: 'ConcatenateOp',
  pattern: /&/
});
/* addresses */

exports.ConcatenateOp = ConcatenateOp;
var simpleSheetName = "[A-Za-z0-9_\xC0-\u02AF]+";
exports.simpleSheetName = simpleSheetName;
var quotedSheetName = "'(((?!').|'')*)'";
exports.quotedSheetName = quotedSheetName;
var sheetNameRegexp = "(".concat(simpleSheetName, "|").concat(quotedSheetName, ")!");
exports.sheetNameRegexp = sheetNameRegexp;
var CellReference = (0, _chevrotain.createToken)({
  name: 'CellReference',
  pattern: new RegExp("(".concat(sheetNameRegexp, ")?\\").concat(ABSOLUTE_OPERATOR, "?[A-Za-z]+\\").concat(ABSOLUTE_OPERATOR, "?[0-9]+"))
});
exports.CellReference = CellReference;
var ColumnRange = (0, _chevrotain.createToken)({
  name: 'ColumnRange',
  pattern: new RegExp("(".concat(sheetNameRegexp, ")?\\").concat(ABSOLUTE_OPERATOR, "?[A-Za-z]+").concat(RANGE_OPERATOR, "(").concat(sheetNameRegexp, ")?\\").concat(ABSOLUTE_OPERATOR, "?[A-Za-z]+"))
});
exports.ColumnRange = ColumnRange;
var RowRange = (0, _chevrotain.createToken)({
  name: 'RowRange',
  pattern: new RegExp("(".concat(sheetNameRegexp, ")?\\").concat(ABSOLUTE_OPERATOR, "?[0-9]+").concat(RANGE_OPERATOR, "(").concat(sheetNameRegexp, ")?\\").concat(ABSOLUTE_OPERATOR, "?[0-9]+"))
});
exports.RowRange = RowRange;
var RangeSeparator = (0, _chevrotain.createToken)({
  name: 'RangeSeparator',
  pattern: "".concat(RANGE_OPERATOR)
});
/* parenthesis */

exports.RangeSeparator = RangeSeparator;
var LParen = (0, _chevrotain.createToken)({
  name: 'LParen',
  pattern: /\(/
});
exports.LParen = LParen;
var RParen = (0, _chevrotain.createToken)({
  name: 'RParen',
  pattern: /\)/
});
/* array parenthesis */

exports.RParen = RParen;
var ArrayLParen = (0, _chevrotain.createToken)({
  name: 'ArrayLParen',
  pattern: /{/
});
exports.ArrayLParen = ArrayLParen;
var ArrayRParen = (0, _chevrotain.createToken)({
  name: 'ArrayRParen',
  pattern: /}/
});
/* procedures */

exports.ArrayRParen = ArrayRParen;
var ProcedureName = (0, _chevrotain.createToken)({
  name: 'ProcedureName',
  pattern: /([A-Za-z\u00C0-\u02AF][A-Za-z0-9\u00C0-\u02AF._]*)\(/
});
/* named expressions */

exports.ProcedureName = ProcedureName;
var NamedExpression = (0, _chevrotain.createToken)({
  name: 'NamedExpression',
  pattern: /[A-Za-z\u00C0-\u02AF_][A-Za-z0-9\u00C0-\u02AF._]*/
});
/* string literal */

exports.NamedExpression = NamedExpression;
var StringLiteral = (0, _chevrotain.createToken)({
  name: 'StringLiteral',
  pattern: /"([^"\\]*(\\.[^"\\]*)*)"/
});
/* error literal */

exports.StringLiteral = StringLiteral;
var ErrorLiteral = (0, _chevrotain.createToken)({
  name: 'ErrorLiteral',
  pattern: /#[A-Za-z0-9\/]+[?!]?/
});
/* skipping whitespaces */

exports.ErrorLiteral = ErrorLiteral;
var WhiteSpace = (0, _chevrotain.createToken)({
  name: 'WhiteSpace',
  pattern: /[ \t\n\r]+/
});
exports.WhiteSpace = WhiteSpace;

var buildLexerConfig = function buildLexerConfig(config) {
  var offsetProcedureNameLiteral = config.translationPackage.getFunctionTranslation('OFFSET');
  var errorMapping = config.errorMapping;
  var functionMapping = config.translationPackage.buildFunctionMapping();
  var ArrayRowSeparator = (0, _chevrotain.createToken)({
    name: 'ArrayRowSep',
    pattern: config.arrayRowSeparator
  });
  var ArrayColSeparator = (0, _chevrotain.createToken)({
    name: 'ArrayColSep',
    pattern: config.arrayColumnSeparator
  });
  /* configurable tokens */

  var ArgSeparator, inject;

  if (config.functionArgSeparator === config.arrayColumnSeparator) {
    ArgSeparator = ArrayColSeparator;
    inject = [];
  } else if (config.functionArgSeparator === config.arrayRowSeparator) {
    ArgSeparator = ArrayRowSeparator;
    inject = [];
  } else {
    ArgSeparator = (0, _chevrotain.createToken)({
      name: 'ArgSeparator',
      pattern: config.functionArgSeparator
    });
    inject = [ArgSeparator];
  }

  var NumberLiteral = (0, _chevrotain.createToken)({
    name: 'NumberLiteral',
    pattern: new RegExp("(([".concat(config.decimalSeparator, "]\\d+)|(\\d+([").concat(config.decimalSeparator, "]\\d*)?))(e[+-]?\\d+)?"))
  });
  var OffsetProcedureName = (0, _chevrotain.createToken)({
    name: 'OffsetProcedureName',
    pattern: new RegExp(offsetProcedureNameLiteral, 'i')
  });
  /* order is important, first pattern is used */

  var allTokens = [WhiteSpace, PlusOp, MinusOp, TimesOp, DivOp, PowerOp, EqualsOp, NotEqualOp, PercentOp, GreaterThanOrEqualOp, LessThanOrEqualOp, GreaterThanOp, LessThanOp, LParen, RParen, ArrayLParen, ArrayRParen, OffsetProcedureName, ProcedureName, RangeSeparator].concat(_toConsumableArray(inject), [ColumnRange, RowRange, NumberLiteral, StringLiteral, ErrorLiteral, ConcatenateOp, BooleanOp, AdditionOp, MultiplicationOp, CellReference, NamedExpression, ArrayRowSeparator, ArrayColSeparator]);
  return {
    ArgSeparator: ArgSeparator,
    NumberLiteral: NumberLiteral,
    OffsetProcedureName: OffsetProcedureName,
    ArrayRowSeparator: ArrayRowSeparator,
    ArrayColSeparator: ArrayColSeparator,
    allTokens: allTokens,
    errorMapping: errorMapping,
    functionMapping: functionMapping,
    decimalSeparator: config.decimalSeparator,
    maxColumns: config.maxColumns,
    maxRows: config.maxRows
  };
};

exports.buildLexerConfig = buildLexerConfig;

/***/ }),
/* 184 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearCache", function() { return clearCache; });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(185);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return _version__WEBPACK_IMPORTED_MODULE_0__["VERSION"]; });

/* harmony import */ var _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(186);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Parser", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__["Parser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CstParser", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__["CstParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmbeddedActionsParser", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__["EmbeddedActionsParser"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParserDefinitionErrorType", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ALT", function() { return _parse_parser_parser__WEBPACK_IMPORTED_MODULE_1__["EMPTY_ALT"]; });

/* harmony import */ var _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(192);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Lexer", function() { return _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__["Lexer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LexerDefinitionErrorType", function() { return _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__["LexerDefinitionErrorType"]; });

/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(191);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createToken", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["createToken"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createTokenInstance", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["createTokenInstance"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EOF", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["EOF"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tokenLabel", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["tokenLabel"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tokenMatcher", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["tokenMatcher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tokenName", function() { return _scan_tokens_public__WEBPACK_IMPORTED_MODULE_3__["tokenName"]; });

/* harmony import */ var _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(205);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultGrammarResolverErrorProvider", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__["defaultGrammarResolverErrorProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultGrammarValidatorErrorProvider", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__["defaultGrammarValidatorErrorProvider"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultParserErrorProvider", function() { return _parse_errors_public__WEBPACK_IMPORTED_MODULE_4__["defaultParserErrorProvider"]; });

/* harmony import */ var _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(212);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EarlyExitException", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__["EarlyExitException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isRecognitionException", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__["isRecognitionException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MismatchedTokenException", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__["MismatchedTokenException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotAllInputParsedException", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__["NotAllInputParsedException"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NoViableAltException", function() { return _parse_exceptions_public__WEBPACK_IMPORTED_MODULE_5__["NoViableAltException"]; });

/* harmony import */ var _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(198);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultLexerErrorProvider", function() { return _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_6__["defaultLexerErrorProvider"]; });

/* harmony import */ var _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(190);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Alternation", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Alternation"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Flat", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Flat"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NonTerminal", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["NonTerminal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Option", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Option"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Repetition", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Repetition"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RepetitionMandatory", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["RepetitionMandatory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RepetitionMandatoryWithSeparator", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["RepetitionMandatoryWithSeparator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RepetitionWithSeparator", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["RepetitionWithSeparator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Rule", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Rule"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Terminal", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["Terminal"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeGrammar", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["serializeGrammar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "serializeProduction", function() { return _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_7__["serializeProduction"]; });

/* harmony import */ var _parse_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(201);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GAstVisitor", function() { return _parse_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_8__["GAstVisitor"]; });

/* harmony import */ var _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(209);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "assignOccurrenceIndices", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__["assignOccurrenceIndices"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "resolveGrammar", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__["resolveGrammar"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "validateGrammar", function() { return _parse_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_9__["validateGrammar"]; });

/* harmony import */ var _diagrams_render_public__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(224);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createSyntaxDiagramsCode", function() { return _diagrams_render_public__WEBPACK_IMPORTED_MODULE_10__["createSyntaxDiagramsCode"]; });

/* harmony import */ var _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(225);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateParserFactory", function() { return _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__["generateParserFactory"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generateParserModule", function() { return _generate_generate_public__WEBPACK_IMPORTED_MODULE_11__["generateParserModule"]; });

// semantic version



// Tokens utilities

// Other Utilities



// grammar reflection API

// GAST Utilities



/* istanbul ignore next */
function clearCache() {
    console.warn("The clearCache function was 'soft' removed from the Chevrotain API." +
        "\n\t It performs no action other than printing this message." +
        "\n\t Please avoid using it as it will be completely removed in the future");
}


//# sourceMappingURL=api.js.map

/***/ }),
/* 185 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
// needs a separate module as this is required inside chevrotain productive code
// and also in the entry point for webpack(api.ts).
// A separate file avoids cyclic dependencies and webpack errors.
var VERSION = "6.5.0";
//# sourceMappingURL=version.js.map

/***/ }),
/* 186 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END_OF_FILE", function() { return END_OF_FILE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_PARSER_CONFIG", function() { return DEFAULT_PARSER_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_RULE_CONFIG", function() { return DEFAULT_RULE_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParserDefinitionErrorType", function() { return ParserDefinitionErrorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY_ALT", function() { return EMPTY_ALT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Parser", function() { return Parser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CstParser", function() { return CstParser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedActionsParser", function() { return EmbeddedActionsParser; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _grammar_follow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(188);
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(191);
/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(203);
/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(205);
/* harmony import */ var _grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(209);
/* harmony import */ var _traits_recoverable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(211);
/* harmony import */ var _traits_looksahead__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(213);
/* harmony import */ var _traits_tree_builder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(214);
/* harmony import */ var _traits_lexer_adapter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(217);
/* harmony import */ var _traits_recognizer_api__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(218);
/* harmony import */ var _traits_recognizer_engine__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(219);
/* harmony import */ var _traits_error_handler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(220);
/* harmony import */ var _traits_context_assist__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(221);
/* harmony import */ var _traits_gast_recorder__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(222);
/* harmony import */ var _traits_perf_tracer__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(223);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
















var END_OF_FILE = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__["createTokenInstance"])(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_2__["EOF"], "", NaN, NaN, NaN, NaN, NaN, NaN);
Object.freeze(END_OF_FILE);
var DEFAULT_PARSER_CONFIG = Object.freeze({
    recoveryEnabled: false,
    maxLookahead: 4,
    ignoredIssues: {},
    dynamicTokensEnabled: false,
    outputCst: true,
    errorMessageProvider: _errors_public__WEBPACK_IMPORTED_MODULE_4__["defaultParserErrorProvider"],
    nodeLocationTracking: "none",
    traceInitPerf: false,
    skipValidations: false
});
var DEFAULT_RULE_CONFIG = Object.freeze({
    recoveryValueFunc: function () { return undefined; },
    resyncEnabled: true
});
var ParserDefinitionErrorType;
(function (ParserDefinitionErrorType) {
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_NAME"] = 0] = "INVALID_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_RULE_NAME"] = 1] = "DUPLICATE_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_RULE_OVERRIDE"] = 2] = "INVALID_RULE_OVERRIDE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_PRODUCTIONS"] = 3] = "DUPLICATE_PRODUCTIONS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["UNRESOLVED_SUBRULE_REF"] = 4] = "UNRESOLVED_SUBRULE_REF";
    ParserDefinitionErrorType[ParserDefinitionErrorType["LEFT_RECURSION"] = 5] = "LEFT_RECURSION";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NONE_LAST_EMPTY_ALT"] = 6] = "NONE_LAST_EMPTY_ALT";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_ALTS"] = 7] = "AMBIGUOUS_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["CONFLICT_TOKENS_RULES_NAMESPACE"] = 8] = "CONFLICT_TOKENS_RULES_NAMESPACE";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_TOKEN_NAME"] = 9] = "INVALID_TOKEN_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["INVALID_NESTED_RULE_NAME"] = 10] = "INVALID_NESTED_RULE_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["DUPLICATE_NESTED_NAME"] = 11] = "DUPLICATE_NESTED_NAME";
    ParserDefinitionErrorType[ParserDefinitionErrorType["NO_NON_EMPTY_LOOKAHEAD"] = 12] = "NO_NON_EMPTY_LOOKAHEAD";
    ParserDefinitionErrorType[ParserDefinitionErrorType["AMBIGUOUS_PREFIX_ALTS"] = 13] = "AMBIGUOUS_PREFIX_ALTS";
    ParserDefinitionErrorType[ParserDefinitionErrorType["TOO_MANY_ALTS"] = 14] = "TOO_MANY_ALTS";
})(ParserDefinitionErrorType || (ParserDefinitionErrorType = {}));
function EMPTY_ALT(value) {
    if (value === void 0) { value = undefined; }
    return function () {
        return value;
    };
}
var Parser = /** @class */ (function () {
    function Parser(tokenVocabulary, config) {
        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }
        this.ignoredIssues = DEFAULT_PARSER_CONFIG.ignoredIssues;
        this.definitionErrors = [];
        this.selfAnalysisDone = false;
        var that = this;
        that.initErrorHandler(config);
        that.initLexerAdapter();
        that.initLooksAhead(config);
        that.initRecognizerEngine(tokenVocabulary, config);
        that.initRecoverable(config);
        that.initTreeBuilder(config);
        that.initContentAssist();
        that.initGastRecorder(config);
        that.initPerformanceTracer(config);
        /* istanbul ignore if - complete over-kill to test this, we should only add a test when we actually hard deprecate it and throw an error... */
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "ignoredIssues") &&
            config.ignoredIssues !== DEFAULT_PARSER_CONFIG.ignoredIssues) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["PRINT_WARNING"])("The <ignoredIssues> IParserConfig property is soft-deprecated and will be removed in future versions.\n\t" +
                "Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.");
        }
        this.ignoredIssues = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "ignoredIssues")
            ? config.ignoredIssues
            : DEFAULT_PARSER_CONFIG.ignoredIssues;
        this.skipValidations = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "skipValidations")
            ? config.skipValidations
            : DEFAULT_PARSER_CONFIG.skipValidations;
    }
    /**
     *  @deprecated use the **instance** method with the same name instead
     */
    Parser.performSelfAnalysis = function (parserInstance) {
        ;
        parserInstance.performSelfAnalysis();
    };
    Parser.prototype.performSelfAnalysis = function () {
        var _this = this;
        this.TRACE_INIT("performSelfAnalysis", function () {
            var defErrorsMsgs;
            _this.selfAnalysisDone = true;
            var className = _this.className;
            _this.TRACE_INIT("toFastProps", function () {
                // Without this voodoo magic the parser would be x3-x4 slower
                // It seems it is better to invoke `toFastProperties` **before**
                // Any manipulations of the `this` object done during the recording phase.
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["toFastProperties"])(_this);
            });
            _this.TRACE_INIT("Grammar Recording", function () {
                try {
                    _this.enableRecording();
                    // Building the GAST
                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(_this.definedRulesNames, function (currRuleName) {
                        var wrappedRule = _this[currRuleName];
                        var originalGrammarAction = wrappedRule["originalGrammarAction"];
                        var recordedRuleGast = undefined;
                        _this.TRACE_INIT(currRuleName + " Rule", function () {
                            recordedRuleGast = _this.topLevelRuleRecord(currRuleName, originalGrammarAction);
                        });
                        _this.gastProductionsCache[currRuleName] = recordedRuleGast;
                    });
                }
                finally {
                    _this.disableRecording();
                }
            });
            var resolverErrors = [];
            _this.TRACE_INIT("Grammar Resolving", function () {
                resolverErrors = Object(_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__["resolveGrammar"])({
                    rules: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.gastProductionsCache)
                });
                _this.definitionErrors.push.apply(_this.definitionErrors, resolverErrors); // mutability for the win?
            });
            _this.TRACE_INIT("Grammar Validations", function () {
                // only perform additional grammar validations IFF no resolving errors have occurred.
                // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.
                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(resolverErrors) && _this.skipValidations === false) {
                    var validationErrors = Object(_grammar_gast_gast_resolver_public__WEBPACK_IMPORTED_MODULE_5__["validateGrammar"])({
                        rules: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.gastProductionsCache),
                        maxLookahead: _this.maxLookahead,
                        tokenTypes: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.tokensMap),
                        ignoredIssues: _this.ignoredIssues,
                        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_4__["defaultGrammarValidatorErrorProvider"],
                        grammarName: className
                    });
                    _this.definitionErrors.push.apply(_this.definitionErrors, validationErrors); // mutability for the win?
                }
            });
            // this analysis may fail if the grammar is not perfectly valid
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(_this.definitionErrors)) {
                // The results of these computations are not needed unless error recovery is enabled.
                if (_this.recoveryEnabled) {
                    _this.TRACE_INIT("computeAllProdsFollows", function () {
                        var allFollows = Object(_grammar_follow__WEBPACK_IMPORTED_MODULE_1__["computeAllProdsFollows"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.gastProductionsCache));
                        _this.resyncFollows = allFollows;
                    });
                }
                _this.TRACE_INIT("ComputeLookaheadFunctions", function () {
                    _this.preComputeLookaheadFunctions(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.gastProductionsCache));
                });
            }
            _this.TRACE_INIT("expandAllNestedRuleNames", function () {
                // TODO: is this needed for EmbeddedActionsParser?
                var cstAnalysisResult = Object(_cst_cst__WEBPACK_IMPORTED_MODULE_3__["expandAllNestedRuleNames"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(_this.gastProductionsCache), _this.fullRuleNameToShort);
                _this.allRuleNames = cstAnalysisResult.allRuleNames;
            });
            if (!Parser.DEFER_DEFINITION_ERRORS_HANDLING &&
                !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(_this.definitionErrors)) {
                defErrorsMsgs = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(_this.definitionErrors, function (defError) { return defError.message; });
                throw new Error("Parser Definition Errors detected:\n " + defErrorsMsgs.join("\n-------------------------------\n"));
            }
        });
    };
    // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.
    // (normally during the parser's constructor).
    // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,
    // for example: duplicate rule names, referencing an unresolved subrule, ect...
    // This flag should not be enabled during normal usage, it is used in special situations, for example when
    // needing to display the parser definition errors in some GUI(online playground).
    Parser.DEFER_DEFINITION_ERRORS_HANDLING = false;
    return Parser;
}());

Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["applyMixins"])(Parser, [
    _traits_recoverable__WEBPACK_IMPORTED_MODULE_6__["Recoverable"],
    _traits_looksahead__WEBPACK_IMPORTED_MODULE_7__["LooksAhead"],
    _traits_tree_builder__WEBPACK_IMPORTED_MODULE_8__["TreeBuilder"],
    _traits_lexer_adapter__WEBPACK_IMPORTED_MODULE_9__["LexerAdapter"],
    _traits_recognizer_engine__WEBPACK_IMPORTED_MODULE_11__["RecognizerEngine"],
    _traits_recognizer_api__WEBPACK_IMPORTED_MODULE_10__["RecognizerApi"],
    _traits_error_handler__WEBPACK_IMPORTED_MODULE_12__["ErrorHandler"],
    _traits_context_assist__WEBPACK_IMPORTED_MODULE_13__["ContentAssist"],
    _traits_gast_recorder__WEBPACK_IMPORTED_MODULE_14__["GastRecorder"],
    _traits_perf_tracer__WEBPACK_IMPORTED_MODULE_15__["PerformanceTracer"]
]);
var CstParser = /** @class */ (function (_super) {
    __extends(CstParser, _super);
    function CstParser(tokenVocabulary, config) {
        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }
        var _this = this;
        var configClone = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneObj"])(config);
        configClone.outputCst = true;
        _this = _super.call(this, tokenVocabulary, configClone) || this;
        return _this;
    }
    return CstParser;
}(Parser));

var EmbeddedActionsParser = /** @class */ (function (_super) {
    __extends(EmbeddedActionsParser, _super);
    function EmbeddedActionsParser(tokenVocabulary, config) {
        if (config === void 0) { config = DEFAULT_PARSER_CONFIG; }
        var _this = this;
        var configClone = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneObj"])(config);
        configClone.outputCst = false;
        _this = _super.call(this, tokenVocabulary, configClone) || this;
        return _this;
    }
    return EmbeddedActionsParser;
}(Parser));

//# sourceMappingURL=parser.js.map

/***/ }),
/* 187 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function() { return isEmpty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keys", function() { return keys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "values", function() { return values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapValues", function() { return mapValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "flatten", function() { return flatten; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "first", function() { return first; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function() { return last; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forEach", function() { return forEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "drop", function() { return drop; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dropRight", function() { return dropRight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reject", function() { return reject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pick", function() { return pick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "has", function() { return has; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contains", function() { return contains; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneArr", function() { return cloneArr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneObj", function() { return cloneObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findAll", function() { return findAll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return reduce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compact", function() { return compact; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "uniq", function() { return uniq; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partial", function() { return partial; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRegExp", function() { return isRegExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function() { return every; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "difference", function() { return difference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "some", function() { return some; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "indexOf", function() { return indexOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortBy", function() { return sortBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipObject", function() { return zipObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assign", function() { return assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignNoOverwrite", function() { return assignNoOverwrite; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return defaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NOOP", function() { return NOOP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IDENTITY", function() { return IDENTITY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "packArray", function() { return packArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINT_ERROR", function() { return PRINT_ERROR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRINT_WARNING", function() { return PRINT_WARNING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isES2015MapSupported", function() { return isES2015MapSupported; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMixins", function() { return applyMixins; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toFastProperties", function() { return toFastProperties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "peek", function() { return peek; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return timer; });
/*
 Utils using lodash style API. (not necessarily 100% compliant) for functional and other utils.
 These utils should replace usage of lodash in the production code base. not because they are any better...
 but for the purpose of being a dependency free library.

 The hotspots in the code are already written in imperative style for performance reasons.
 so writing several dozen utils which may be slower than the original lodash, does not matter as much
 considering they will not be invoked in hotspots...
 */
function isEmpty(arr) {
    return arr && arr.length === 0;
}
function keys(obj) {
    if (obj === undefined || obj === null) {
        return [];
    }
    return Object.keys(obj);
}
function values(obj) {
    var vals = [];
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
        vals.push(obj[keys[i]]);
    }
    return vals;
}
function mapValues(obj, callback) {
    var result = [];
    var objKeys = keys(obj);
    for (var idx = 0; idx < objKeys.length; idx++) {
        var currKey = objKeys[idx];
        result.push(callback.call(null, obj[currKey], currKey));
    }
    return result;
}
function map(arr, callback) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        result.push(callback.call(null, arr[idx], idx));
    }
    return result;
}
function flatten(arr) {
    var result = [];
    for (var idx = 0; idx < arr.length; idx++) {
        var currItem = arr[idx];
        if (Array.isArray(currItem)) {
            result = result.concat(flatten(currItem));
        }
        else {
            result.push(currItem);
        }
    }
    return result;
}
function first(arr) {
    return isEmpty(arr) ? undefined : arr[0];
}
function last(arr) {
    var len = arr && arr.length;
    return len ? arr[len - 1] : undefined;
}
function forEach(collection, iteratorCallback) {
    /* istanbul ignore else */
    if (Array.isArray(collection)) {
        for (var i = 0; i < collection.length; i++) {
            iteratorCallback.call(null, collection[i], i);
        }
    }
    else if (isObject(collection)) {
        var colKeys = keys(collection);
        for (var i = 0; i < colKeys.length; i++) {
            var key = colKeys[i];
            var value = collection[key];
            iteratorCallback.call(null, value, key);
        }
    }
    else {
        throw Error("non exhaustive match");
    }
}
function isString(item) {
    return typeof item === "string";
}
function isUndefined(item) {
    return item === undefined;
}
function isFunction(item) {
    return item instanceof Function;
}
function drop(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(howMuch, arr.length);
}
function dropRight(arr, howMuch) {
    if (howMuch === void 0) { howMuch = 1; }
    return arr.slice(0, arr.length - howMuch);
}
function filter(arr, predicate) {
    var result = [];
    if (Array.isArray(arr)) {
        for (var i = 0; i < arr.length; i++) {
            var item = arr[i];
            if (predicate.call(null, item)) {
                result.push(item);
            }
        }
    }
    return result;
}
function reject(arr, predicate) {
    return filter(arr, function (item) { return !predicate(item); });
}
function pick(obj, predicate) {
    var keys = Object.keys(obj);
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        var currKey = keys[i];
        var currItem = obj[currKey];
        if (predicate(currItem)) {
            result[currKey] = currItem;
        }
    }
    return result;
}
function has(obj, prop) {
    if (isObject(obj)) {
        return obj.hasOwnProperty(prop);
    }
    return false;
}
function contains(arr, item) {
    return find(arr, function (currItem) { return currItem === item; }) !== undefined ? true : false;
}
/**
 * shallow clone
 */
function cloneArr(arr) {
    var newArr = [];
    for (var i = 0; i < arr.length; i++) {
        newArr.push(arr[i]);
    }
    return newArr;
}
/**
 * shallow clone
 */
function cloneObj(obj) {
    var clonedObj = {};
    for (var key in obj) {
        /* istanbul ignore else */
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            clonedObj[key] = obj[key];
        }
    }
    return clonedObj;
}
function find(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            return item;
        }
    }
    return undefined;
}
function findAll(arr, predicate) {
    var found = [];
    for (var i = 0; i < arr.length; i++) {
        var item = arr[i];
        if (predicate.call(null, item)) {
            found.push(item);
        }
    }
    return found;
}
function reduce(arrOrObj, iterator, initial) {
    var isArr = Array.isArray(arrOrObj);
    var vals = isArr ? arrOrObj : values(arrOrObj);
    var objKeys = isArr ? [] : keys(arrOrObj);
    var accumulator = initial;
    for (var i = 0; i < vals.length; i++) {
        accumulator = iterator.call(null, accumulator, vals[i], isArr ? i : objKeys[i]);
    }
    return accumulator;
}
function compact(arr) {
    return reject(arr, function (item) { return item === null || item === undefined; });
}
function uniq(arr, identity) {
    if (identity === void 0) { identity = function (item) { return item; }; }
    var identities = [];
    return reduce(arr, function (result, currItem) {
        var currIdentity = identity(currItem);
        if (contains(identities, currIdentity)) {
            return result;
        }
        else {
            identities.push(currIdentity);
            return result.concat(currItem);
        }
    }, []);
}
function partial(func) {
    var restArgs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restArgs[_i - 1] = arguments[_i];
    }
    var firstArg = [null];
    var allArgs = firstArg.concat(restArgs);
    return Function.bind.apply(func, allArgs);
}
function isArray(obj) {
    return Array.isArray(obj);
}
function isRegExp(obj) {
    return obj instanceof RegExp;
}
function isObject(obj) {
    return obj instanceof Object;
}
function every(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (!predicate(arr[i], i)) {
            return false;
        }
    }
    return true;
}
function difference(arr, values) {
    return reject(arr, function (item) { return contains(values, item); });
}
function some(arr, predicate) {
    for (var i = 0; i < arr.length; i++) {
        if (predicate(arr[i])) {
            return true;
        }
    }
    return false;
}
function indexOf(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === value) {
            return i;
        }
    }
    return -1;
}
function sortBy(arr, orderFunc) {
    var result = cloneArr(arr);
    result.sort(function (a, b) { return orderFunc(a) - orderFunc(b); });
    return result;
}
function zipObject(keys, values) {
    if (keys.length !== values.length) {
        throw Error("can't zipObject with different number of keys and values!");
    }
    var result = {};
    for (var i = 0; i < keys.length; i++) {
        result[keys[i]] = values[i];
    }
    return result;
}
/**
 * mutates! (and returns) target
 */
function assign(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            target[currKey] = curSource[currKey];
        }
    }
    return target;
}
/**
 * mutates! (and returns) target
 */
function assignNoOverwrite(target) {
    var sources = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        sources[_i - 1] = arguments[_i];
    }
    for (var i = 0; i < sources.length; i++) {
        var curSource = sources[i];
        if (isUndefined(curSource)) {
            continue;
        }
        var currSourceKeys = keys(curSource);
        for (var j = 0; j < currSourceKeys.length; j++) {
            var currKey = currSourceKeys[j];
            if (!has(target, currKey)) {
                target[currKey] = curSource[currKey];
            }
        }
    }
    return target;
}
function defaults() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return assignNoOverwrite.apply(null, [{}].concat(sources));
}
function groupBy(arr, groupKeyFunc) {
    var result = {};
    forEach(arr, function (item) {
        var currGroupKey = groupKeyFunc(item);
        var currGroupArr = result[currGroupKey];
        if (currGroupArr) {
            currGroupArr.push(item);
        }
        else {
            result[currGroupKey] = [item];
        }
    });
    return result;
}
/**
 * Merge obj2 into obj1.
 * Will overwrite existing properties with the same name
 */
function merge(obj1, obj2) {
    var result = cloneObj(obj1);
    var keys2 = keys(obj2);
    for (var i = 0; i < keys2.length; i++) {
        var key = keys2[i];
        var value = obj2[key];
        result[key] = value;
    }
    return result;
}
function NOOP() { }
function IDENTITY(item) {
    return item;
}
/**
 * Will return a new packed array with same values.
 */
function packArray(holeyArr) {
    var result = [];
    for (var i = 0; i < holeyArr.length; i++) {
        var orgValue = holeyArr[i];
        result.push(orgValue !== undefined ? orgValue : undefined);
    }
    return result;
}
function PRINT_ERROR(msg) {
    /* istanbul ignore else - can't override global.console in node.js */
    if (console && console.error) {
        console.error("Error: " + msg);
    }
}
function PRINT_WARNING(msg) {
    /* istanbul ignore else - can't override global.console in node.js*/
    if (console && console.warn) {
        // TODO: modify docs accordingly
        console.warn("Warning: " + msg);
    }
}
function isES2015MapSupported() {
    return typeof Map === "function";
}
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        var baseProto = baseCtor.prototype;
        Object.getOwnPropertyNames(baseProto).forEach(function (propName) {
            if (propName === "constructor") {
                return;
            }
            var basePropDescriptor = Object.getOwnPropertyDescriptor(baseProto, propName);
            // Handle Accessors
            if (basePropDescriptor &&
                (basePropDescriptor.get || basePropDescriptor.set)) {
                Object.defineProperty(derivedCtor.prototype, propName, basePropDescriptor);
            }
            else {
                derivedCtor.prototype[propName] = baseCtor.prototype[propName];
            }
        });
    });
}
// base on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216
function toFastProperties(toBecomeFast) {
    function FakeConstructor() { }
    // If our object is used as a constructor it would receive
    FakeConstructor.prototype = toBecomeFast;
    var fakeInstance = new FakeConstructor();
    function fakeAccess() {
        return typeof fakeInstance.bar;
    }
    // help V8 understand this is a "real" prototype by actually using
    // the fake instance.
    fakeAccess();
    fakeAccess();
    return toBecomeFast;
    // Eval prevents optimization of this method (even though this is dead code)
    /* istanbul ignore next */
    // tslint:disable-next-line
    eval(toBecomeFast);
}
function peek(arr) {
    return arr[arr.length - 1];
}
/* istanbul ignore next - for performance tracing*/
function timer(func) {
    var start = new Date().getTime();
    var val = func();
    var end = new Date().getTime();
    var total = end - start;
    return { time: total, value: val };
}
//# sourceMappingURL=utils.js.map

/***/ }),
/* 188 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResyncFollowsWalker", function() { return ResyncFollowsWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "computeAllProdsFollows", function() { return computeAllProdsFollows; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildBetweenProdsFollowPrefix", function() { return buildBetweenProdsFollowPrefix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildInProdFollowPrefix", function() { return buildInProdFollowPrefix; });
/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(189);
/* harmony import */ var _first__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(199);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(187);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(202);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(190);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





// This ResyncFollowsWalker computes all of the follows required for RESYNC
// (skipping reference production).
var ResyncFollowsWalker = /** @class */ (function (_super) {
    __extends(ResyncFollowsWalker, _super);
    function ResyncFollowsWalker(topProd) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.follows = {};
        return _this;
    }
    ResyncFollowsWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.follows;
    };
    ResyncFollowsWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        // do nothing! just like in the public sector after 13:00
    };
    ResyncFollowsWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        var followName = buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +
            this.topProd.name;
        var fullRest = currRest.concat(prevRest);
        var restProd = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Flat"]({ definition: fullRest });
        var t_in_topProd_follows = Object(_first__WEBPACK_IMPORTED_MODULE_1__["first"])(restProd);
        this.follows[followName] = t_in_topProd_follows;
    };
    return ResyncFollowsWalker;
}(_rest__WEBPACK_IMPORTED_MODULE_0__["RestWalker"]));

function computeAllProdsFollows(topProductions) {
    var reSyncFollows = {};
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(topProductions, function (topProd) {
        var currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["assign"])(reSyncFollows, currRefsFollow);
    });
    return reSyncFollows;
}
function buildBetweenProdsFollowPrefix(inner, occurenceInParent) {
    return inner.name + occurenceInParent + _constants__WEBPACK_IMPORTED_MODULE_3__["IN"];
}
function buildInProdFollowPrefix(terminal) {
    var terminalName = terminal.terminalType.name;
    return terminalName + terminal.idx + _constants__WEBPACK_IMPORTED_MODULE_3__["IN"];
}
//# sourceMappingURL=follow.js.map

/***/ }),
/* 189 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestWalker", function() { return RestWalker; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(190);


/**
 *  A Grammar Walker that computes the "remaining" grammar "after" a productions in the grammar.
 */
var RestWalker = /** @class */ (function () {
    function RestWalker() {
    }
    RestWalker.prototype.walk = function (prod, prevRest) {
        var _this = this;
        if (prevRest === void 0) { prevRest = []; }
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(prod.definition, function (subProd, index) {
            var currRest = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["drop"])(prod.definition, index + 1);
            /* istanbul ignore else */
            if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]) {
                _this.walkProdRef(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]) {
                _this.walkTerminal(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Flat"]) {
                _this.walkFlat(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]) {
                _this.walkOption(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatory"]) {
                _this.walkAtLeastOne(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatoryWithSeparator"]) {
                _this.walkAtLeastOneSep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"]) {
                _this.walkManySep(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"]) {
                _this.walkMany(subProd, currRest, prevRest);
            }
            else if (subProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"]) {
                _this.walkOr(subProd, currRest, prevRest);
            }
            else {
                throw Error("non exhaustive match");
            }
        });
    };
    RestWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) { };
    RestWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) { };
    RestWalker.prototype.walkFlat = function (flatProd, currRest, prevRest) {
        // ABCDEF => after the D the rest is EF
        var fullOrRest = currRest.concat(prevRest);
        this.walk(flatProd, fullOrRest);
    };
    RestWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        // ABC(DE)?F => after the (DE)? the rest is F
        var fullOrRest = currRest.concat(prevRest);
        this.walk(optionProd, fullOrRest);
    };
    RestWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        // ABC(DE)+F => after the (DE)+ the rest is (DE)?F
        var fullAtLeastOneRest = [
            new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]({ definition: atLeastOneProd.definition })
        ].concat(currRest, prevRest);
        this.walk(atLeastOneProd, fullAtLeastOneRest);
    };
    RestWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F
        var fullAtLeastOneSepRest = restForRepetitionWithSeparator(atLeastOneSepProd, currRest, prevRest);
        this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);
    };
    RestWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        // ABC(DE)*F => after the (DE)* the rest is (DE)?F
        var fullManyRest = [
            new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]({ definition: manyProd.definition })
        ].concat(currRest, prevRest);
        this.walk(manyProd, fullManyRest);
    };
    RestWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F
        var fullManySepRest = restForRepetitionWithSeparator(manySepProd, currRest, prevRest);
        this.walk(manySepProd, fullManySepRest);
    };
    RestWalker.prototype.walkOr = function (orProd, currRest, prevRest) {
        var _this = this;
        // ABC(D|E|F)G => when finding the (D|E|F) the rest is G
        var fullOrRest = currRest.concat(prevRest);
        // walk all different alternatives
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(orProd.definition, function (alt) {
            // wrapping each alternative in a single definition wrapper
            // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows
            // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1
            var prodWrapper = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Flat"]({ definition: [alt] });
            _this.walk(prodWrapper, fullOrRest);
        });
    };
    return RestWalker;
}());

function restForRepetitionWithSeparator(repSepProd, currRest, prevRest) {
    var repSepRest = [
        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]({
            definition: [
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]({ terminalType: repSepProd.separator })
            ].concat(repSepProd.definition)
        })
    ];
    var fullRepSepRest = repSepRest.concat(currRest, prevRest);
    return fullRepSepRest;
}
//# sourceMappingURL=rest.js.map

/***/ }),
/* 190 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractProduction", function() { return AbstractProduction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NonTerminal", function() { return NonTerminal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rule", function() { return Rule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Flat", function() { return Flat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Option", function() { return Option; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepetitionMandatory", function() { return RepetitionMandatory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepetitionMandatoryWithSeparator", function() { return RepetitionMandatoryWithSeparator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Repetition", function() { return Repetition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepetitionWithSeparator", function() { return RepetitionWithSeparator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alternation", function() { return Alternation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Terminal", function() { return Terminal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeGrammar", function() { return serializeGrammar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "serializeProduction", function() { return serializeProduction; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(191);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var AbstractProduction = /** @class */ (function () {
    function AbstractProduction(definition) {
        this.definition = definition;
    }
    AbstractProduction.prototype.accept = function (visitor) {
        visitor.visit(this);
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(this.definition, function (prod) {
            prod.accept(visitor);
        });
    };
    return AbstractProduction;
}());

var NonTerminal = /** @class */ (function (_super) {
    __extends(NonTerminal, _super);
    function NonTerminal(options) {
        var _this = _super.call(this, []) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    Object.defineProperty(NonTerminal.prototype, "definition", {
        get: function () {
            if (this.referencedRule !== undefined) {
                return this.referencedRule.definition;
            }
            return [];
        },
        set: function (definition) {
            // immutable
        },
        enumerable: true,
        configurable: true
    });
    NonTerminal.prototype.accept = function (visitor) {
        visitor.visit(this);
        // don't visit children of a reference, we will get cyclic infinite loops if we do so
    };
    return NonTerminal;
}(AbstractProduction));

var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.orgText = "";
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Rule;
}(AbstractProduction));

// TODO: is this only used in an Alternation?
//       Perhaps `Flat` should be renamed to `Alternative`?
var Flat = /** @class */ (function (_super) {
    __extends(Flat, _super);
    // A named Flat production is used to indicate a Nested Rule in an alternation
    function Flat(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.ignoreAmbiguities = false;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Flat;
}(AbstractProduction));

var Option = /** @class */ (function (_super) {
    __extends(Option, _super);
    function Option(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Option;
}(AbstractProduction));

var RepetitionMandatory = /** @class */ (function (_super) {
    __extends(RepetitionMandatory, _super);
    function RepetitionMandatory(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatory;
}(AbstractProduction));

var RepetitionMandatoryWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionMandatoryWithSeparator, _super);
    function RepetitionMandatoryWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionMandatoryWithSeparator;
}(AbstractProduction));

var Repetition = /** @class */ (function (_super) {
    __extends(Repetition, _super);
    function Repetition(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Repetition;
}(AbstractProduction));

var RepetitionWithSeparator = /** @class */ (function (_super) {
    __extends(RepetitionWithSeparator, _super);
    function RepetitionWithSeparator(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return RepetitionWithSeparator;
}(AbstractProduction));

var Alternation = /** @class */ (function (_super) {
    __extends(Alternation, _super);
    function Alternation(options) {
        var _this = _super.call(this, options.definition) || this;
        _this.idx = 1;
        _this.ignoreAmbiguities = false;
        _this.hasPredicates = false;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(_this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
        return _this;
    }
    return Alternation;
}(AbstractProduction));

var Terminal = /** @class */ (function () {
    function Terminal(options) {
        this.idx = 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["assign"])(this, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(options, function (v) { return v !== undefined; }));
    }
    Terminal.prototype.accept = function (visitor) {
        visitor.visit(this);
    };
    return Terminal;
}());

function serializeGrammar(topRules) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topRules, serializeProduction);
}
function serializeProduction(node) {
    function convertDefinition(definition) {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(definition, serializeProduction);
    }
    /* istanbul ignore else */
    if (node instanceof NonTerminal) {
        return {
            type: "NonTerminal",
            name: node.nonTerminalName,
            idx: node.idx
        };
    }
    else if (node instanceof Flat) {
        return {
            type: "Flat",
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Option) {
        return {
            type: "Option",
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatory) {
        return {
            type: "RepetitionMandatory",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionMandatoryWithSeparator) {
        return {
            type: "RepetitionMandatoryWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof RepetitionWithSeparator) {
        return {
            type: "RepetitionWithSeparator",
            name: node.name,
            idx: node.idx,
            separator: (serializeProduction(new Terminal({ terminalType: node.separator }))),
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Repetition) {
        return {
            type: "Repetition",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Alternation) {
        return {
            type: "Alternation",
            name: node.name,
            idx: node.idx,
            definition: convertDefinition(node.definition)
        };
    }
    else if (node instanceof Terminal) {
        var serializedTerminal = {
            type: "Terminal",
            name: node.terminalType.name,
            label: Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_1__["tokenLabel"])(node.terminalType),
            idx: node.idx
        };
        var pattern = node.terminalType.PATTERN;
        if (node.terminalType.PATTERN) {
            serializedTerminal.pattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isRegExp"])(pattern)
                ? pattern.source
                : pattern;
        }
        return serializedTerminal;
    }
    else if (node instanceof Rule) {
        return {
            type: "Rule",
            name: node.name,
            orgText: node.orgText,
            definition: convertDefinition(node.definition)
        };
    }
    else {
        throw Error("non exhaustive match");
    }
}
//# sourceMappingURL=gast_public.js.map

/***/ }),
/* 191 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenLabel", function() { return tokenLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenName", function() { return tokenName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasTokenLabel", function() { return hasTokenLabel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createToken", function() { return createToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOF", function() { return EOF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTokenInstance", function() { return createTokenInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenMatcher", function() { return tokenMatcher; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _lexer_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(192);
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(197);



function tokenLabel(tokType) {
    if (hasTokenLabel(tokType)) {
        return tokType.LABEL;
    }
    else {
        return tokType.name;
    }
}
function tokenName(tokType) {
    return tokType.name;
}
function hasTokenLabel(obj) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isString"])(obj.LABEL) && obj.LABEL !== "";
}
var PARENT = "parent";
var CATEGORIES = "categories";
var LABEL = "label";
var GROUP = "group";
var PUSH_MODE = "push_mode";
var POP_MODE = "pop_mode";
var LONGER_ALT = "longer_alt";
var LINE_BREAKS = "line_breaks";
var START_CHARS_HINT = "start_chars_hint";
function createToken(config) {
    return createTokenInternal(config);
}
function createTokenInternal(config) {
    var pattern = config.pattern;
    var tokenType = {};
    tokenType.name = config.name;
    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(pattern)) {
        tokenType.PATTERN = pattern;
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, PARENT)) {
        throw "The parent property is no longer supported.\n" +
            "See: https://github.com/SAP/chevrotain/issues/564#issuecomment-349062346 for details.";
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, CATEGORIES)) {
        // casting to ANY as this will be fixed inside `augmentTokenTypes``
        tokenType.CATEGORIES = config[CATEGORIES];
    }
    Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["augmentTokenTypes"])([tokenType]);
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, LABEL)) {
        tokenType.LABEL = config[LABEL];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, GROUP)) {
        tokenType.GROUP = config[GROUP];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, POP_MODE)) {
        tokenType.POP_MODE = config[POP_MODE];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, PUSH_MODE)) {
        tokenType.PUSH_MODE = config[PUSH_MODE];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, LONGER_ALT)) {
        tokenType.LONGER_ALT = config[LONGER_ALT];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, LINE_BREAKS)) {
        tokenType.LINE_BREAKS = config[LINE_BREAKS];
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, START_CHARS_HINT)) {
        tokenType.START_CHARS_HINT = config[START_CHARS_HINT];
    }
    return tokenType;
}
var EOF = createToken({ name: "EOF", pattern: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA });
Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["augmentTokenTypes"])([EOF]);
function createTokenInstance(tokType, image, startOffset, endOffset, startLine, endLine, startColumn, endColumn) {
    return {
        image: image,
        startOffset: startOffset,
        endOffset: endOffset,
        startLine: startLine,
        endLine: endLine,
        startColumn: startColumn,
        endColumn: endColumn,
        tokenTypeIdx: tokType.tokenTypeIdx,
        tokenType: tokType
    };
}
function tokenMatcher(token, tokType) {
    return Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["tokenStructuredMatcher"])(token, tokType);
}
//# sourceMappingURL=tokens_public.js.map

/***/ }),
/* 192 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LexerDefinitionErrorType", function() { return LexerDefinitionErrorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Lexer", function() { return Lexer; });
/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(193);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(197);
/* harmony import */ var _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(198);
/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(196);





var LexerDefinitionErrorType;
(function (LexerDefinitionErrorType) {
    LexerDefinitionErrorType[LexerDefinitionErrorType["MISSING_PATTERN"] = 0] = "MISSING_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_PATTERN"] = 1] = "INVALID_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EOI_ANCHOR_FOUND"] = 2] = "EOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNSUPPORTED_FLAGS_FOUND"] = 3] = "UNSUPPORTED_FLAGS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["DUPLICATE_PATTERNS_FOUND"] = 4] = "DUPLICATE_PATTERNS_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["INVALID_GROUP_TYPE_FOUND"] = 5] = "INVALID_GROUP_TYPE_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["PUSH_MODE_DOES_NOT_EXIST"] = 6] = "PUSH_MODE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE"] = 7] = "MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY"] = 8] = "MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY";
    LexerDefinitionErrorType[LexerDefinitionErrorType["MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST"] = 9] = "MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST";
    LexerDefinitionErrorType[LexerDefinitionErrorType["LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED"] = 10] = "LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED";
    LexerDefinitionErrorType[LexerDefinitionErrorType["SOI_ANCHOR_FOUND"] = 11] = "SOI_ANCHOR_FOUND";
    LexerDefinitionErrorType[LexerDefinitionErrorType["EMPTY_MATCH_PATTERN"] = 12] = "EMPTY_MATCH_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["NO_LINE_BREAKS_FLAGS"] = 13] = "NO_LINE_BREAKS_FLAGS";
    LexerDefinitionErrorType[LexerDefinitionErrorType["UNREACHABLE_PATTERN"] = 14] = "UNREACHABLE_PATTERN";
    LexerDefinitionErrorType[LexerDefinitionErrorType["IDENTIFY_TERMINATOR"] = 15] = "IDENTIFY_TERMINATOR";
    LexerDefinitionErrorType[LexerDefinitionErrorType["CUSTOM_LINE_BREAK"] = 16] = "CUSTOM_LINE_BREAK";
})(LexerDefinitionErrorType || (LexerDefinitionErrorType = {}));
var DEFAULT_LEXER_CONFIG = {
    deferDefinitionErrorsHandling: false,
    positionTracking: "full",
    lineTerminatorsPattern: /\n|\r\n?/g,
    lineTerminatorCharacters: ["\n", "\r"],
    ensureOptimizations: false,
    safeMode: false,
    errorMessageProvider: _scan_lexer_errors_public__WEBPACK_IMPORTED_MODULE_3__["defaultLexerErrorProvider"],
    traceInitPerf: false,
    skipValidations: false
};
Object.freeze(DEFAULT_LEXER_CONFIG);
var Lexer = /** @class */ (function () {
    function Lexer(lexerDefinition, config) {
        var _this = this;
        if (config === void 0) { config = DEFAULT_LEXER_CONFIG; }
        this.lexerDefinition = lexerDefinition;
        this.lexerDefinitionErrors = [];
        this.lexerDefinitionWarning = [];
        this.patternIdxToConfig = {};
        this.charCodeToPatternIdxToConfig = {};
        this.modes = [];
        this.emptyGroups = {};
        this.config = undefined;
        this.trackStartLines = true;
        this.trackEndLines = true;
        this.hasCustom = false;
        this.canModeBeOptimized = {};
        if (typeof config === "boolean") {
            throw Error("The second argument to the Lexer constructor is now an ILexerConfig Object.\n" +
                "a boolean 2nd argument is no longer supported");
        }
        // todo: defaults func?
        this.config = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["merge"])(DEFAULT_LEXER_CONFIG, config);
        var traceInitVal = this.config.traceInitPerf;
        if (traceInitVal === true) {
            this.traceInitMaxIdent = Infinity;
            this.traceInitPerf = true;
        }
        else if (typeof traceInitVal === "number") {
            this.traceInitMaxIdent = traceInitVal;
            this.traceInitPerf = true;
        }
        this.traceInitIndent = -1;
        this.TRACE_INIT("Lexer Constructor", function () {
            var actualDefinition;
            var hasOnlySingleMode = true;
            _this.TRACE_INIT("Lexer Config handling", function () {
                if (_this.config.lineTerminatorsPattern ===
                    DEFAULT_LEXER_CONFIG.lineTerminatorsPattern) {
                    // optimized built-in implementation for the defaults definition of lineTerminators
                    _this.config.lineTerminatorsPattern = _lexer__WEBPACK_IMPORTED_MODULE_0__["LineTerminatorOptimizedTester"];
                }
                else {
                    if (_this.config.lineTerminatorCharacters ===
                        DEFAULT_LEXER_CONFIG.lineTerminatorCharacters) {
                        throw Error("Error: Missing <lineTerminatorCharacters> property on the Lexer config.\n" +
                            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS");
                    }
                }
                if (config.safeMode && config.ensureOptimizations) {
                    throw Error('"safeMode" and "ensureOptimizations" flags are mutually exclusive.');
                }
                _this.trackStartLines = /full|onlyStart/i.test(_this.config.positionTracking);
                _this.trackEndLines = /full/i.test(_this.config.positionTracking);
                // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.
                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isArray"])(lexerDefinition)) {
                    actualDefinition = { modes: {} };
                    actualDefinition.modes[_lexer__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_MODE"]] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(lexerDefinition);
                    actualDefinition[_lexer__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_MODE"]] = _lexer__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_MODE"];
                }
                else {
                    // no conversion needed, input should already be a IMultiModeLexerDefinition
                    hasOnlySingleMode = false;
                    actualDefinition = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneObj"])((lexerDefinition));
                }
            });
            if (_this.config.skipValidations === false) {
                _this.TRACE_INIT("performRuntimeChecks", function () {
                    _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["performRuntimeChecks"])(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
                });
                _this.TRACE_INIT("performWarningRuntimeChecks", function () {
                    _this.lexerDefinitionWarning = _this.lexerDefinitionWarning.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["performWarningRuntimeChecks"])(actualDefinition, _this.trackStartLines, _this.config.lineTerminatorCharacters));
                });
            }
            // for extra robustness to avoid throwing an none informative error message
            actualDefinition.modes = actualDefinition.modes
                ? actualDefinition.modes
                : {};
            // an error of undefined TokenTypes will be detected in "performRuntimeChecks" above.
            // this transformation is to increase robustness in the case of partially invalid lexer definition.
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(actualDefinition.modes, function (currModeValue, currModeName) {
                actualDefinition.modes[currModeName] = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["reject"])(currModeValue, function (currTokType) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(currTokType); });
            });
            var allModeNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["keys"])(actualDefinition.modes);
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(actualDefinition.modes, function (currModDef, currModName) {
                _this.TRACE_INIT("Mode: <" + currModName + "> processing", function () {
                    _this.modes.push(currModName);
                    if (_this.config.skipValidations === false) {
                        _this.TRACE_INIT("validatePatterns", function () {
                            _this.lexerDefinitionErrors = _this.lexerDefinitionErrors.concat(Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["validatePatterns"])(currModDef, allModeNames));
                        });
                    }
                    // If definition errors were encountered, the analysis phase may fail unexpectedly/
                    // Considering a lexer with definition errors may never be used, there is no point
                    // to performing the analysis anyhow...
                    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(_this.lexerDefinitionErrors)) {
                        Object(_tokens__WEBPACK_IMPORTED_MODULE_2__["augmentTokenTypes"])(currModDef);
                        var currAnalyzeResult_1;
                        _this.TRACE_INIT("analyzeTokenTypes", function () {
                            currAnalyzeResult_1 = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["analyzeTokenTypes"])(currModDef, {
                                lineTerminatorCharacters: _this.config
                                    .lineTerminatorCharacters,
                                positionTracking: config.positionTracking,
                                ensureOptimizations: config.ensureOptimizations,
                                safeMode: config.safeMode,
                                tracer: _this.TRACE_INIT.bind(_this)
                            });
                        });
                        _this.patternIdxToConfig[currModName] =
                            currAnalyzeResult_1.patternIdxToConfig;
                        _this.charCodeToPatternIdxToConfig[currModName] =
                            currAnalyzeResult_1.charCodeToPatternIdxToConfig;
                        _this.emptyGroups = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["merge"])(_this.emptyGroups, currAnalyzeResult_1.emptyGroups);
                        _this.hasCustom =
                            currAnalyzeResult_1.hasCustom || _this.hasCustom;
                        _this.canModeBeOptimized[currModName] =
                            currAnalyzeResult_1.canBeOptimized;
                    }
                });
            });
            _this.defaultMode = actualDefinition.defaultMode;
            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(_this.lexerDefinitionErrors) &&
                !_this.config.deferDefinitionErrorsHandling) {
                var allErrMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(_this.lexerDefinitionErrors, function (error) {
                    return error.message;
                });
                var allErrMessagesString = allErrMessages.join("-----------------------\n");
                throw new Error("Errors detected in definition of Lexer:\n" +
                    allErrMessagesString);
            }
            // Only print warning if there are no errors, This will avoid pl
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(_this.lexerDefinitionWarning, function (warningDescriptor) {
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["PRINT_WARNING"])(warningDescriptor.message);
            });
            _this.TRACE_INIT("Choosing sub-methods implementations", function () {
                // Choose the relevant internal implementations for this specific parser.
                // These implementations should be in-lined by the JavaScript engine
                // to provide optimal performance in each scenario.
                if (_lexer__WEBPACK_IMPORTED_MODULE_0__["SUPPORT_STICKY"]) {
                    _this.chopInput = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["IDENTITY"];
                    _this.match = _this.matchWithTest;
                }
                else {
                    _this.updateLastIndex = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    _this.match = _this.matchWithExec;
                }
                if (hasOnlySingleMode) {
                    _this.handleModes = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                }
                if (_this.trackStartLines === false) {
                    _this.computeNewColumn = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["IDENTITY"];
                }
                if (_this.trackEndLines === false) {
                    _this.updateTokenEndLineColumnLocation = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                }
                if (/full/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createFullToken;
                }
                else if (/onlyStart/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createStartOnlyToken;
                }
                else if (/onlyOffset/i.test(_this.config.positionTracking)) {
                    _this.createTokenInstance = _this.createOffsetOnlyToken;
                }
                else {
                    throw Error("Invalid <positionTracking> config option: \"" + _this.config.positionTracking + "\"");
                }
                if (_this.hasCustom) {
                    _this.addToken = _this.addTokenUsingPush;
                    _this.handlePayload = _this.handlePayloadWithCustom;
                }
                else {
                    _this.addToken = _this.addTokenUsingMemberAccess;
                    _this.handlePayload = _this.handlePayloadNoCustom;
                }
            });
            _this.TRACE_INIT("Failed Optimization Warnings", function () {
                var unOptimizedModes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["reduce"])(_this.canModeBeOptimized, function (cannotBeOptimized, canBeOptimized, modeName) {
                    if (canBeOptimized === false) {
                        cannotBeOptimized.push(modeName);
                    }
                    return cannotBeOptimized;
                }, []);
                if (config.ensureOptimizations && !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(unOptimizedModes)) {
                    throw Error("Lexer Modes: < " + unOptimizedModes.join(", ") + " > cannot be optimized.\n" +
                        '\t Disable the "ensureOptimizations" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\n' +
                        "\t Or inspect the console log for details on how to resolve these issues.");
                }
            });
            _this.TRACE_INIT("clearRegExpParserCache", function () {
                Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__["clearRegExpParserCache"])();
            });
            _this.TRACE_INIT("toFastProperties", function () {
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["toFastProperties"])(_this);
            });
        });
    }
    Lexer.prototype.tokenize = function (text, initialMode) {
        if (initialMode === void 0) { initialMode = this.defaultMode; }
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(this.lexerDefinitionErrors)) {
            var allErrMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.lexerDefinitionErrors, function (error) {
                return error.message;
            });
            var allErrMessagesString = allErrMessages.join("-----------------------\n");
            throw new Error("Unable to Tokenize because Errors detected in definition of Lexer:\n" +
                allErrMessagesString);
        }
        var lexResult = this.tokenizeInternal(text, initialMode);
        return lexResult;
    };
    // There is quite a bit of duplication between this and "tokenizeInternalLazy"
    // This is intentional due to performance considerations.
    Lexer.prototype.tokenizeInternal = function (text, initialMode) {
        var _this = this;
        var i, j, matchAltImage, longerAltIdx, matchedImage, payload, altPayload, imageLength, group, tokType, newToken, errLength, droppedChar, msg, match;
        var orgText = text;
        var orgLength = orgText.length;
        var offset = 0;
        var matchedTokensIndex = 0;
        // initializing the tokensArray to the "guessed" size.
        // guessing too little will still reduce the number of array re-sizes on pushes.
        // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory
        // but would still have a faster runtime by avoiding (All but one) array resizing.
        var guessedNumberOfTokens = this.hasCustom
            ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.
            : Math.floor(text.length / 10);
        var matchedTokens = new Array(guessedNumberOfTokens);
        var errors = [];
        var line = this.trackStartLines ? 1 : undefined;
        var column = this.trackStartLines ? 1 : undefined;
        var groups = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["cloneEmptyGroups"])(this.emptyGroups);
        var trackLines = this.trackStartLines;
        var lineTerminatorPattern = this.config.lineTerminatorsPattern;
        var currModePatternsLength = 0;
        var patternIdxToConfig = [];
        var currCharCodeToPatternIdxToConfig = [];
        var modeStack = [];
        var emptyArray = [];
        Object.freeze(emptyArray);
        var getPossiblePatterns = undefined;
        function getPossiblePatternsSlow() {
            return patternIdxToConfig;
        }
        function getPossiblePatternsOptimized(charCode) {
            var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_0__["charCodeToOptimizedIndex"])(charCode);
            var possiblePatterns = currCharCodeToPatternIdxToConfig[optimizedCharIdx];
            if (possiblePatterns === undefined) {
                return emptyArray;
            }
            else {
                return possiblePatterns;
            }
        }
        var pop_mode = function (popToken) {
            // TODO: perhaps avoid this error in the edge case there is no more input?
            if (modeStack.length === 1 &&
                // if we have both a POP_MODE and a PUSH_MODE this is in-fact a "transition"
                // So no error should occur.
                popToken.tokenType.PUSH_MODE === undefined) {
                // if we try to pop the last mode there lexer will no longer have ANY mode.
                // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.
                var msg_1 = _this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(popToken);
                errors.push({
                    offset: popToken.startOffset,
                    line: popToken.startLine !== undefined
                        ? popToken.startLine
                        : undefined,
                    column: popToken.startColumn !== undefined
                        ? popToken.startColumn
                        : undefined,
                    length: popToken.image.length,
                    message: msg_1
                });
            }
            else {
                modeStack.pop();
                var newMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["last"])(modeStack);
                patternIdxToConfig = _this.patternIdxToConfig[newMode];
                currCharCodeToPatternIdxToConfig = _this
                    .charCodeToPatternIdxToConfig[newMode];
                currModePatternsLength = patternIdxToConfig.length;
                var modeCanBeOptimized = _this.canModeBeOptimized[newMode] &&
                    _this.config.safeMode === false;
                if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                    getPossiblePatterns = getPossiblePatternsOptimized;
                }
                else {
                    getPossiblePatterns = getPossiblePatternsSlow;
                }
            }
        };
        function push_mode(newMode) {
            modeStack.push(newMode);
            currCharCodeToPatternIdxToConfig = this
                .charCodeToPatternIdxToConfig[newMode];
            patternIdxToConfig = this.patternIdxToConfig[newMode];
            currModePatternsLength = patternIdxToConfig.length;
            currModePatternsLength = patternIdxToConfig.length;
            var modeCanBeOptimized = this.canModeBeOptimized[newMode] &&
                this.config.safeMode === false;
            if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {
                getPossiblePatterns = getPossiblePatternsOptimized;
            }
            else {
                getPossiblePatterns = getPossiblePatternsSlow;
            }
        }
        // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not
        // seem to matter performance wise.
        push_mode.call(this, initialMode);
        var currConfig;
        while (offset < orgLength) {
            matchedImage = null;
            var nextCharCode = orgText.charCodeAt(offset);
            var chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);
            var chosenPatternsLength = chosenPatternIdxToConfig.length;
            for (i = 0; i < chosenPatternsLength; i++) {
                currConfig = chosenPatternIdxToConfig[i];
                var currPattern = currConfig.pattern;
                payload = null;
                // manually in-lined because > 600 chars won't be in-lined in V8
                var singleCharCode = currConfig.short;
                if (singleCharCode !== false) {
                    if (nextCharCode === singleCharCode) {
                        // single character string
                        matchedImage = currPattern;
                    }
                }
                else if (currConfig.isCustom === true) {
                    match = currPattern.exec(orgText, offset, matchedTokens, groups);
                    if (match !== null) {
                        matchedImage = match[0];
                        if (match.payload !== undefined) {
                            payload = match.payload;
                        }
                    }
                    else {
                        matchedImage = null;
                    }
                }
                else {
                    this.updateLastIndex(currPattern, offset);
                    matchedImage = this.match(currPattern, text, offset);
                }
                if (matchedImage !== null) {
                    // even though this pattern matched we must try a another longer alternative.
                    // this can be used to prioritize keywords over identifiers
                    longerAltIdx = currConfig.longerAlt;
                    if (longerAltIdx !== undefined) {
                        // TODO: micro optimize, avoid extra prop access
                        // by saving/linking longerAlt on the original config?
                        var longerAltConfig = patternIdxToConfig[longerAltIdx];
                        var longerAltPattern = longerAltConfig.pattern;
                        altPayload = null;
                        // single Char can never be a longer alt so no need to test it.
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        if (longerAltConfig.isCustom === true) {
                            match = longerAltPattern.exec(orgText, offset, matchedTokens, groups);
                            if (match !== null) {
                                matchAltImage = match[0];
                                if (match.payload !== undefined) {
                                    altPayload = match.payload;
                                }
                            }
                            else {
                                matchAltImage = null;
                            }
                        }
                        else {
                            this.updateLastIndex(longerAltPattern, offset);
                            matchAltImage = this.match(longerAltPattern, text, offset);
                        }
                        if (matchAltImage &&
                            matchAltImage.length > matchedImage.length) {
                            matchedImage = matchAltImage;
                            payload = altPayload;
                            currConfig = longerAltConfig;
                        }
                    }
                    break;
                }
            }
            // successful match
            if (matchedImage !== null) {
                imageLength = matchedImage.length;
                group = currConfig.group;
                if (group !== undefined) {
                    tokType = currConfig.tokenTypeIdx;
                    // TODO: "offset + imageLength" and the new column may be computed twice in case of "full" location information inside
                    // createFullToken method
                    newToken = this.createTokenInstance(matchedImage, offset, tokType, currConfig.tokenType, line, column, imageLength);
                    this.handlePayload(newToken, payload);
                    // TODO: optimize NOOP in case there are no special groups?
                    if (group === false) {
                        matchedTokensIndex = this.addToken(matchedTokens, matchedTokensIndex, newToken);
                    }
                    else {
                        groups[group].push(newToken);
                    }
                }
                text = this.chopInput(text, imageLength);
                offset = offset + imageLength;
                // TODO: with newlines the column may be assigned twice
                column = this.computeNewColumn(column, imageLength);
                if (trackLines === true &&
                    currConfig.canLineTerminator === true) {
                    var numOfLTsInMatch = 0;
                    var foundTerminator = void 0;
                    var lastLTEndOffset = void 0;
                    lineTerminatorPattern.lastIndex = 0;
                    do {
                        foundTerminator = lineTerminatorPattern.test(matchedImage);
                        if (foundTerminator === true) {
                            lastLTEndOffset =
                                lineTerminatorPattern.lastIndex - 1;
                            numOfLTsInMatch++;
                        }
                    } while (foundTerminator === true);
                    if (numOfLTsInMatch !== 0) {
                        line = line + numOfLTsInMatch;
                        column = imageLength - lastLTEndOffset;
                        this.updateTokenEndLineColumnLocation(newToken, group, lastLTEndOffset, numOfLTsInMatch, line, column, imageLength);
                    }
                }
                // will be NOOP if no modes present
                this.handleModes(currConfig, pop_mode, push_mode, newToken);
            }
            else {
                // error recovery, drop characters until we identify a valid token's start point
                var errorStartOffset = offset;
                var errorLine = line;
                var errorColumn = column;
                var foundResyncPoint = false;
                while (!foundResyncPoint && offset < orgLength) {
                    // drop chars until we succeed in matching something
                    droppedChar = orgText.charCodeAt(offset);
                    // Identity Func (when sticky flag is enabled)
                    text = this.chopInput(text, 1);
                    offset++;
                    for (j = 0; j < currModePatternsLength; j++) {
                        var currConfig_1 = patternIdxToConfig[j];
                        var currPattern = currConfig_1.pattern;
                        // manually in-lined because > 600 chars won't be in-lined in V8
                        var singleCharCode = currConfig_1.short;
                        if (singleCharCode !== false) {
                            if (orgText.charCodeAt(offset) === singleCharCode) {
                                // single character string
                                foundResyncPoint = true;
                            }
                        }
                        else if (currConfig_1.isCustom === true) {
                            foundResyncPoint =
                                currPattern.exec(orgText, offset, matchedTokens, groups) !== null;
                        }
                        else {
                            this.updateLastIndex(currPattern, offset);
                            foundResyncPoint = currPattern.exec(text) !== null;
                        }
                        if (foundResyncPoint === true) {
                            break;
                        }
                    }
                }
                errLength = offset - errorStartOffset;
                // at this point we either re-synced or reached the end of the input text
                msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(orgText, errorStartOffset, errLength, errorLine, errorColumn);
                errors.push({
                    offset: errorStartOffset,
                    line: errorLine,
                    column: errorColumn,
                    length: errLength,
                    message: msg
                });
            }
        }
        // if we do have custom patterns which push directly into the
        // TODO: custom tokens should not push directly??
        if (!this.hasCustom) {
            // if we guessed a too large size for the tokens array this will shrink it to the right size.
            matchedTokens.length = matchedTokensIndex;
        }
        return {
            tokens: matchedTokens,
            groups: groups,
            errors: errors
        };
    };
    Lexer.prototype.handleModes = function (config, pop_mode, push_mode, newToken) {
        if (config.pop === true) {
            // need to save the PUSH_MODE property as if the mode is popped
            // patternIdxToPopMode is updated to reflect the new mode after popping the stack
            var pushMode = config.push;
            pop_mode(newToken);
            if (pushMode !== undefined) {
                push_mode.call(this, pushMode);
            }
        }
        else if (config.push !== undefined) {
            push_mode.call(this, config.push);
        }
    };
    Lexer.prototype.chopInput = function (text, length) {
        return text.substring(length);
    };
    Lexer.prototype.updateLastIndex = function (regExp, newLastIndex) {
        regExp.lastIndex = newLastIndex;
    };
    // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler
    Lexer.prototype.updateTokenEndLineColumnLocation = function (newToken, group, lastLTIdx, numOfLTsInMatch, line, column, imageLength) {
        var lastCharIsLT, fixForEndingInLT;
        if (group !== undefined) {
            // a none skipped multi line Token, need to update endLine/endColumn
            lastCharIsLT = lastLTIdx === imageLength - 1;
            fixForEndingInLT = lastCharIsLT ? -1 : 0;
            if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {
                // if a token ends in a LT that last LT only affects the line numbering of following Tokens
                newToken.endLine = line + fixForEndingInLT;
                // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)
                // inclusive to exclusive range.
                newToken.endColumn = column - 1 + -fixForEndingInLT;
            }
            // else single LT in the last character of a token, no need to modify the endLine/EndColumn
        }
    };
    Lexer.prototype.computeNewColumn = function (oldColumn, imageLength) {
        return oldColumn + imageLength;
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.createTokenInstance = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return null;
    };
    Lexer.prototype.createOffsetOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType) {
        return {
            image: image,
            startOffset: startOffset,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createStartOnlyToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn) {
        return {
            image: image,
            startOffset: startOffset,
            startLine: startLine,
            startColumn: startColumn,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    Lexer.prototype.createFullToken = function (image, startOffset, tokenTypeIdx, tokenType, startLine, startColumn, imageLength) {
        return {
            image: image,
            startOffset: startOffset,
            endOffset: startOffset + imageLength - 1,
            startLine: startLine,
            endLine: startLine,
            startColumn: startColumn,
            endColumn: startColumn + imageLength - 1,
            tokenTypeIdx: tokenTypeIdx,
            tokenType: tokenType
        };
    };
    // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.addToken = function (tokenVector, index, tokenToAdd) {
        return 666;
    };
    Lexer.prototype.addTokenUsingPush = function (tokenVector, index, tokenToAdd) {
        tokenVector.push(tokenToAdd);
        return index;
    };
    Lexer.prototype.addTokenUsingMemberAccess = function (tokenVector, index, tokenToAdd) {
        tokenVector[index] = tokenToAdd;
        index++;
        return index;
    };
    // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.
    /* istanbul ignore next - place holder */
    Lexer.prototype.handlePayload = function (token, payload) { };
    Lexer.prototype.handlePayloadNoCustom = function (token, payload) { };
    Lexer.prototype.handlePayloadWithCustom = function (token, payload) {
        if (payload !== null) {
            token.payload = payload;
        }
    };
    /* istanbul ignore next - place holder to be replaced with chosen alternative at runtime */
    Lexer.prototype.match = function (pattern, text, offset) {
        return null;
    };
    Lexer.prototype.matchWithTest = function (pattern, text, offset) {
        var found = pattern.test(text);
        if (found === true) {
            return text.substring(offset, pattern.lastIndex);
        }
        return null;
    };
    Lexer.prototype.matchWithExec = function (pattern, text) {
        var regExpArray = pattern.exec(text);
        return regExpArray !== null ? regExpArray[0] : regExpArray;
    };
    // Duplicated from the parser's perf trace trait to allow future extraction
    // of the lexer to a separate package.
    Lexer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {
        // No need to optimize this using NOOP pattern because
        // It is not called in a hot spot...
        if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["timer"])(phaseImpl), time = _a.time, value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                traceMethod(indent + "<-- <" + phaseDesc + "> time: " + time + "ms");
            }
            this.traceInitIndent--;
            return value;
        }
        else {
            return phaseImpl();
        }
    };
    Lexer.SKIPPED = "This marks a skipped Token pattern, this means each token identified by it will" +
        "be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.";
    Lexer.NA = /NOT_APPLICABLE/;
    return Lexer;
}());

//# sourceMappingURL=lexer_public.js.map

/***/ }),
/* 193 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_MODE", function() { return DEFAULT_MODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MODES", function() { return MODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUPPORT_STICKY", function() { return SUPPORT_STICKY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableSticky", function() { return disableSticky; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableSticky", function() { return enableSticky; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "analyzeTokenTypes", function() { return analyzeTokenTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validatePatterns", function() { return validatePatterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findMissingPatterns", function() { return findMissingPatterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findInvalidPatterns", function() { return findInvalidPatterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findEndOfInputAnchor", function() { return findEndOfInputAnchor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findEmptyMatchRegExps", function() { return findEmptyMatchRegExps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findStartOfInputAnchor", function() { return findStartOfInputAnchor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findUnsupportedFlags", function() { return findUnsupportedFlags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findDuplicatePatterns", function() { return findDuplicatePatterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findInvalidGroupType", function() { return findInvalidGroupType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findModesThatDoNotExist", function() { return findModesThatDoNotExist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findUnreachablePatterns", function() { return findUnreachablePatterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addStartOfInput", function() { return addStartOfInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addStickyFlag", function() { return addStickyFlag; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "performRuntimeChecks", function() { return performRuntimeChecks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "performWarningRuntimeChecks", function() { return performWarningRuntimeChecks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneEmptyGroups", function() { return cloneEmptyGroups; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCustomPattern", function() { return isCustomPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isShortPattern", function() { return isShortPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineTerminatorOptimizedTester", function() { return LineTerminatorOptimizedTester; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildLineBreakIssueMessage", function() { return buildLineBreakIssueMessage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "minOptimizationVal", function() { return minOptimizationVal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "charCodeToOptimizedIndex", function() { return charCodeToOptimizedIndex; });
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(194);
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lexer_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(192);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(187);
/* harmony import */ var _reg_exp__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(195);
/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(196);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();





var PATTERN = "PATTERN";
var DEFAULT_MODE = "defaultMode";
var MODES = "modes";
var SUPPORT_STICKY = typeof new RegExp("(?:)").sticky === "boolean";
function disableSticky() {
    SUPPORT_STICKY = false;
}
function enableSticky() {
    SUPPORT_STICKY = true;
}
function analyzeTokenTypes(tokenTypes, options) {
    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["defaults"])(options, {
        useSticky: SUPPORT_STICKY,
        debug: false,
        safeMode: false,
        positionTracking: "full",
        lineTerminatorCharacters: ["\r", "\n"],
        tracer: function (msg, action) { return action(); }
    });
    var tracer = options.tracer;
    tracer("initCharCodeToOptimizedIndexMap", function () {
        initCharCodeToOptimizedIndexMap();
    });
    var onlyRelevantTypes;
    tracer("Reject Lexer.NA", function () {
        onlyRelevantTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reject"])(tokenTypes, function (currType) {
            return currType[PATTERN] === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA;
        });
    });
    var hasCustom = false;
    var allTransformedPatterns;
    tracer("Transform Patterns", function () {
        hasCustom = false;
        allTransformedPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (currType) {
            var currPattern = currType[PATTERN];
            /* istanbul ignore else */
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(currPattern)) {
                var regExpSource = currPattern.source;
                if (regExpSource.length === 1 &&
                    // only these regExp meta characters which can appear in a length one regExp
                    regExpSource !== "^" &&
                    regExpSource !== "$" &&
                    regExpSource !== ".") {
                    return regExpSource;
                }
                else if (regExpSource.length === 2 &&
                    regExpSource[0] === "\\" &&
                    // not a meta character
                    !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["contains"])([
                        "d",
                        "D",
                        "s",
                        "S",
                        "t",
                        "r",
                        "n",
                        "t",
                        "0",
                        "c",
                        "b",
                        "B",
                        "f",
                        "v",
                        "w",
                        "W"
                    ], regExpSource[1])) {
                    // escaped meta Characters: /\+/ /\[/
                    // or redundant escaping: /\a/
                    // without the escaping "\"
                    return regExpSource[1];
                }
                else {
                    return options.useSticky
                        ? addStickyFlag(currPattern)
                        : addStartOfInput(currPattern);
                }
            }
            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(currPattern)) {
                hasCustom = true;
                // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
                return { exec: currPattern };
            }
            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(currPattern, "exec")) {
                hasCustom = true;
                // ICustomPattern
                return currPattern;
            }
            else if (typeof currPattern === "string") {
                if (currPattern.length === 1) {
                    return currPattern;
                }
                else {
                    var escapedRegExpString = currPattern.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
                    var wrappedRegExp = new RegExp(escapedRegExpString);
                    return options.useSticky
                        ? addStickyFlag(wrappedRegExp)
                        : addStartOfInput(wrappedRegExp);
                }
            }
            else {
                throw Error("non exhaustive match");
            }
        });
    });
    var patternIdxToType;
    var patternIdxToGroup;
    var patternIdxToLongerAltIdx;
    var patternIdxToPushMode;
    var patternIdxToPopMode;
    tracer("misc mapping", function () {
        patternIdxToType = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (currType) { return currType.tokenTypeIdx; });
        patternIdxToGroup = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (clazz) {
            var groupName = clazz.GROUP;
            /* istanbul ignore next */
            if (groupName === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].SKIPPED) {
                return undefined;
            }
            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(groupName)) {
                return groupName;
            }
            else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(groupName)) {
                return false;
            }
            else {
                throw Error("non exhaustive match");
            }
        });
        patternIdxToLongerAltIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (clazz) {
            var longerAltType = clazz.LONGER_ALT;
            if (longerAltType) {
                var longerAltIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["indexOf"])(onlyRelevantTypes, longerAltType);
                return longerAltIdx;
            }
        });
        patternIdxToPushMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (clazz) { return clazz.PUSH_MODE; });
        patternIdxToPopMode = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (clazz) {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(clazz, "POP_MODE");
        });
    });
    var patternIdxToCanLineTerminator;
    tracer("Line Terminator Handling", function () {
        var lineTerminatorCharCodes = getCharCodes(options.lineTerminatorCharacters);
        patternIdxToCanLineTerminator = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (tokType) { return false; });
        if (options.positionTracking !== "onlyOffset") {
            patternIdxToCanLineTerminator = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, function (tokType) {
                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(tokType, "LINE_BREAKS")) {
                    return tokType.LINE_BREAKS;
                }
                else {
                    if (checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false) {
                        return Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__["canMatchCharCode"])(lineTerminatorCharCodes, tokType.PATTERN);
                    }
                }
            });
        }
    });
    var patternIdxToIsCustom;
    var patternIdxToShort;
    var emptyGroups;
    var patternIdxToConfig;
    tracer("Misc Mapping #2", function () {
        patternIdxToIsCustom = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(onlyRelevantTypes, isCustomPattern);
        patternIdxToShort = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(allTransformedPatterns, isShortPattern);
        emptyGroups = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reduce"])(onlyRelevantTypes, function (acc, clazz) {
            var groupName = clazz.GROUP;
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(groupName) && !(groupName === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].SKIPPED)) {
                acc[groupName] = [];
            }
            return acc;
        }, {});
        patternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(allTransformedPatterns, function (x, idx) {
            return {
                pattern: allTransformedPatterns[idx],
                longerAlt: patternIdxToLongerAltIdx[idx],
                canLineTerminator: patternIdxToCanLineTerminator[idx],
                isCustom: patternIdxToIsCustom[idx],
                short: patternIdxToShort[idx],
                group: patternIdxToGroup[idx],
                push: patternIdxToPushMode[idx],
                pop: patternIdxToPopMode[idx],
                tokenTypeIdx: patternIdxToType[idx],
                tokenType: onlyRelevantTypes[idx]
            };
        });
    });
    var canBeOptimized = true;
    var charCodeToPatternIdxToConfig = [];
    if (!options.safeMode) {
        tracer("First Char Optimization", function () {
            charCodeToPatternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reduce"])(onlyRelevantTypes, function (result, currTokType, idx) {
                if (typeof currTokType.PATTERN === "string") {
                    var charCode = currTokType.PATTERN.charCodeAt(0);
                    var optimizedIdx = charCodeToOptimizedIndex(charCode);
                    addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);
                }
                else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isArray"])(currTokType.START_CHARS_HINT)) {
                    var lastOptimizedIdx_1;
                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(currTokType.START_CHARS_HINT, function (charOrInt) {
                        var charCode = typeof charOrInt === "string"
                            ? charOrInt.charCodeAt(0)
                            : charOrInt;
                        var currOptimizedIdx = charCodeToOptimizedIndex(charCode);
                        // Avoid adding the config multiple times
                        if (lastOptimizedIdx_1 !== currOptimizedIdx) {
                            lastOptimizedIdx_1 = currOptimizedIdx;
                            addToMapOfArrays(result, currOptimizedIdx, patternIdxToConfig[idx]);
                        }
                    });
                }
                else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(currTokType.PATTERN)) {
                    if (currTokType.PATTERN.unicode) {
                        canBeOptimized = false;
                        if (options.ensureOptimizations) {
                            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["PRINT_ERROR"])("" + _reg_exp__WEBPACK_IMPORTED_MODULE_3__["failedOptimizationPrefixMsg"] +
                                ("\tUnable to analyze < " + currTokType.PATTERN.toString() + " > pattern.\n") +
                                "\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\n" +
                                "\tThis will disable the lexer's first char optimizations.\n" +
                                "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE");
                        }
                    }
                    else {
                        var optimizedCodes = Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__["getOptimizedStartCodesIndices"])(currTokType.PATTERN, options.ensureOptimizations);
                        /* istanbul ignore if */
                        // start code will only be empty given an empty regExp or failure of regexp-to-ast library
                        // the first should be a different validation and the second cannot be tested.
                        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(optimizedCodes)) {
                            // we cannot understand what codes may start possible matches
                            // The optimization correctness requires knowing start codes for ALL patterns.
                            // Not actually sure this is an error, no debug message
                            canBeOptimized = false;
                        }
                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(optimizedCodes, function (code) {
                            addToMapOfArrays(result, code, patternIdxToConfig[idx]);
                        });
                    }
                }
                else {
                    if (options.ensureOptimizations) {
                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["PRINT_ERROR"])("" + _reg_exp__WEBPACK_IMPORTED_MODULE_3__["failedOptimizationPrefixMsg"] +
                            ("\tTokenType: <" + currTokType.name + "> is using a custom token pattern without providing <start_chars_hint> parameter.\n") +
                            "\tThis will disable the lexer's first char optimizations.\n" +
                            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE");
                    }
                    canBeOptimized = false;
                }
                return result;
            }, []);
        });
    }
    tracer("ArrayPacking", function () {
        charCodeToPatternIdxToConfig = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["packArray"])(charCodeToPatternIdxToConfig);
    });
    return {
        emptyGroups: emptyGroups,
        patternIdxToConfig: patternIdxToConfig,
        charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,
        hasCustom: hasCustom,
        canBeOptimized: canBeOptimized
    };
}
function validatePatterns(tokenTypes, validModesNames) {
    var errors = [];
    var missingResult = findMissingPatterns(tokenTypes);
    errors = errors.concat(missingResult.errors);
    var invalidResult = findInvalidPatterns(missingResult.valid);
    var validTokenTypes = invalidResult.valid;
    errors = errors.concat(invalidResult.errors);
    errors = errors.concat(validateRegExpPattern(validTokenTypes));
    errors = errors.concat(findInvalidGroupType(validTokenTypes));
    errors = errors.concat(findModesThatDoNotExist(validTokenTypes, validModesNames));
    errors = errors.concat(findUnreachablePatterns(validTokenTypes));
    return errors;
}
function validateRegExpPattern(tokenTypes) {
    var errors = [];
    var withRegExpPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currTokType) {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(currTokType[PATTERN]);
    });
    errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));
    errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));
    errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));
    errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));
    return errors;
}
function findMissingPatterns(tokenTypes) {
    var tokenTypesWithMissingPattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        return !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(currType, PATTERN);
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(tokenTypesWithMissingPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- missing static 'PATTERN' property",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].MISSING_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["difference"])(tokenTypes, tokenTypesWithMissingPattern);
    return { errors: errors, valid: valid };
}
function findInvalidPatterns(tokenTypes) {
    var tokenTypesWithInvalidPattern = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(pattern) &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(pattern) &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(pattern, "exec") &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(pattern));
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(tokenTypesWithInvalidPattern, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' can only be a RegExp, a" +
                " Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].INVALID_PATTERN,
            tokenTypes: [currType]
        };
    });
    var valid = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["difference"])(tokenTypes, tokenTypesWithInvalidPattern);
    return { errors: errors, valid: valid };
}
var end_of_input = /[^\\][\$]/;
function findEndOfInputAnchor(tokenTypes) {
    var EndAnchorFinder = /** @class */ (function (_super) {
        __extends(EndAnchorFinder, _super);
        function EndAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        EndAnchorFinder.prototype.visitEndAnchor = function (node) {
            this.found = true;
        };
        return EndAnchorFinder;
    }(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__["BaseRegExpVisitor"]));
    var invalidRegex = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__["getRegExpAst"])(pattern);
            var endAnchorVisitor = new EndAnchorFinder();
            endAnchorVisitor.visit(regexpAst);
            return endAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return end_of_input.test(pattern.source);
        }
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain end of input anchor '$'\n" +
                "\tSee sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].EOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
function findEmptyMatchRegExps(tokenTypes) {
    var matchesEmptyString = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return pattern.test("");
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(matchesEmptyString, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' must not match an empty string",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].EMPTY_MATCH_PATTERN,
            tokenTypes: [currType]
        };
    });
    return errors;
}
var start_of_input = /[^\\[][\^]|^\^/;
function findStartOfInputAnchor(tokenTypes) {
    var StartAnchorFinder = /** @class */ (function (_super) {
        __extends(StartAnchorFinder, _super);
        function StartAnchorFinder() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.found = false;
            return _this;
        }
        StartAnchorFinder.prototype.visitStartAnchor = function (node) {
            this.found = true;
        };
        return StartAnchorFinder;
    }(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__["BaseRegExpVisitor"]));
    var invalidRegex = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        try {
            var regexpAst = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_4__["getRegExpAst"])(pattern);
            var startAnchorVisitor = new StartAnchorFinder();
            startAnchorVisitor.visit(regexpAst);
            return startAnchorVisitor.found;
        }
        catch (e) {
            // old behavior in case of runtime exceptions with regexp-to-ast.
            /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/
            return start_of_input.test(pattern.source);
        }
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(invalidRegex, function (currType) {
        return {
            message: "Unexpected RegExp Anchor Error:\n" +
                "\tToken Type: ->" +
                currType.name +
                "<- static 'PATTERN' cannot contain start of input anchor '^'\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#ANCHORS" +
                "\tfor details.",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].SOI_ANCHOR_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
function findUnsupportedFlags(tokenTypes) {
    var invalidFlags = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (currType) {
        var pattern = currType[PATTERN];
        return (pattern instanceof RegExp && (pattern.multiline || pattern.global));
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(invalidFlags, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'PATTERN' may NOT contain global('g') or multiline('m')",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].UNSUPPORTED_FLAGS_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
// This can only test for identical duplicate RegExps, not semantically equivalent ones.
function findDuplicatePatterns(tokenTypes) {
    var found = [];
    var identicalPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(tokenTypes, function (outerType) {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reduce"])(tokenTypes, function (result, innerType) {
            if (outerType.PATTERN.source === innerType.PATTERN.source &&
                !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["contains"])(found, innerType) &&
                innerType.PATTERN !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA) {
                // this avoids duplicates in the result, each Token Type may only appear in one "set"
                // in essence we are creating Equivalence classes on equality relation.
                found.push(innerType);
                result.push(innerType);
                return result;
            }
            return result;
        }, []);
    });
    identicalPatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["compact"])(identicalPatterns);
    var duplicatePatterns = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(identicalPatterns, function (currIdenticalSet) {
        return currIdenticalSet.length > 1;
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(duplicatePatterns, function (setOfIdentical) {
        var tokenTypeNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(setOfIdentical, function (currType) {
            return currType.name;
        });
        var dupPatternSrc = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["first"])(setOfIdentical).PATTERN;
        return {
            message: "The same RegExp pattern ->" + dupPatternSrc + "<-" +
                ("has been used in all of the following Token Types: " + tokenTypeNames.join(", ") + " <-"),
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].DUPLICATE_PATTERNS_FOUND,
            tokenTypes: setOfIdentical
        };
    });
    return errors;
}
function findInvalidGroupType(tokenTypes) {
    var invalidTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (clazz) {
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(clazz, "GROUP")) {
            return false;
        }
        var group = clazz.GROUP;
        return group !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].SKIPPED && group !== _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA && !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(group);
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(invalidTypes, function (currType) {
        return {
            message: "Token Type: ->" +
                currType.name +
                "<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].INVALID_GROUP_TYPE_FOUND,
            tokenTypes: [currType]
        };
    });
    return errors;
}
function findModesThatDoNotExist(tokenTypes, validModes) {
    var invalidModes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["filter"])(tokenTypes, function (clazz) {
        return (clazz.PUSH_MODE !== undefined &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["contains"])(validModes, clazz.PUSH_MODE));
    });
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(invalidModes, function (tokType) {
        var msg = "Token Type: ->" + tokType.name + "<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->" + tokType.PUSH_MODE + "<-" +
            "which does not exist";
        return {
            message: msg,
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].PUSH_MODE_DOES_NOT_EXIST,
            tokenTypes: [tokType]
        };
    });
    return errors;
}
function findUnreachablePatterns(tokenTypes) {
    var errors = [];
    var canBeTested = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reduce"])(tokenTypes, function (result, tokType, idx) {
        var pattern = tokType.PATTERN;
        if (pattern === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA) {
            return result;
        }
        // a more comprehensive validation for all forms of regExps would require
        // deeper regExp analysis capabilities
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(pattern)) {
            result.push({ str: pattern, idx: idx, tokenType: tokType });
        }
        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(pattern) && noMetaChar(pattern)) {
            result.push({ str: pattern.source, idx: idx, tokenType: tokType });
        }
        return result;
    }, []);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(tokenTypes, function (tokType, testIdx) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(canBeTested, function (_a) {
            var str = _a.str, idx = _a.idx, tokenType = _a.tokenType;
            if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {
                var msg = "Token: ->" + tokenType.name + "<- can never be matched.\n" +
                    ("Because it appears AFTER the Token Type ->" + tokType.name + "<-") +
                    "in the lexer's definition.\n" +
                    "See https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#UNREACHABLE";
                errors.push({
                    message: msg,
                    type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].UNREACHABLE_PATTERN,
                    tokenTypes: [tokType, tokenType]
                });
            }
        });
    });
    return errors;
}
function testTokenType(str, pattern) {
    /* istanbul ignore else */
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(pattern)) {
        var regExpArray = pattern.exec(str);
        return regExpArray !== null && regExpArray.index === 0;
    }
    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(pattern)) {
        // maintain the API of custom patterns
        return pattern(str, 0, [], {});
    }
    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(pattern, "exec")) {
        // maintain the API of custom patterns
        return pattern.exec(str, 0, [], {});
    }
    else if (typeof pattern === "string") {
        return pattern === str;
    }
    else {
        throw Error("non exhaustive match");
    }
}
function noMetaChar(regExp) {
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp
    var metaChars = [
        ".",
        "\\",
        "[",
        "]",
        "|",
        "^",
        "$",
        "(",
        ")",
        "?",
        "*",
        "+",
        "{"
    ];
    return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["find"])(metaChars, function (char) { return regExp.source.indexOf(char) !== -1; }) ===
        undefined);
}
function addStartOfInput(pattern) {
    var flags = pattern.ignoreCase ? "i" : "";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("^(?:" + pattern.source + ")", flags);
}
function addStickyFlag(pattern) {
    var flags = pattern.ignoreCase ? "iy" : "y";
    // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.
    // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)
    return new RegExp("" + pattern.source, flags);
}
function performRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var errors = [];
    // some run time checks to help the end users.
    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition, DEFAULT_MODE)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                DEFAULT_MODE +
                "> property in its definition\n",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE
        });
    }
    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition, MODES)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized without a <" +
                MODES +
                "> property in its definition\n",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY
        });
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition, MODES) &&
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition, DEFAULT_MODE) &&
        !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition.modes, lexerDefinition.defaultMode)) {
        errors.push({
            message: "A MultiMode Lexer cannot be initialized with a " + DEFAULT_MODE + ": <" + lexerDefinition.defaultMode + ">" +
                "which does not exist\n",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST
        });
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(lexerDefinition, MODES)) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(lexerDefinition.modes, function (currModeValue, currModeName) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(currModeValue, function (currTokType, currIdx) {
                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isUndefined"])(currTokType)) {
                    errors.push({
                        message: "A Lexer cannot be initialized using an undefined Token Type. Mode:" +
                            ("<" + currModeName + "> at index: <" + currIdx + ">\n"),
                        type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED
                    });
                }
            });
        });
    }
    return errors;
}
function performWarningRuntimeChecks(lexerDefinition, trackLines, lineTerminatorCharacters) {
    var warnings = [];
    var hasAnyLineBreak = false;
    var allTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["compact"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["flatten"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["mapValues"])(lexerDefinition.modes, function (tokTypes) { return tokTypes; })));
    var concreteTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["reject"])(allTokenTypes, function (currType) { return currType[PATTERN] === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["Lexer"].NA; });
    var terminatorCharCodes = getCharCodes(lineTerminatorCharacters);
    if (trackLines) {
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(concreteTokenTypes, function (tokType) {
            var currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);
            if (currIssue !== false) {
                var message = buildLineBreakIssueMessage(tokType, currIssue);
                var warningDescriptor = {
                    message: message,
                    type: currIssue.issue,
                    tokenType: tokType
                };
                warnings.push(warningDescriptor);
            }
            else {
                // we don't want to attempt to scan if the user explicitly specified the line_breaks option.
                if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(tokType, "LINE_BREAKS")) {
                    if (tokType.LINE_BREAKS === true) {
                        hasAnyLineBreak = true;
                    }
                }
                else {
                    if (Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__["canMatchCharCode"])(terminatorCharCodes, tokType.PATTERN)) {
                        hasAnyLineBreak = true;
                    }
                }
            }
        });
    }
    if (trackLines && !hasAnyLineBreak) {
        warnings.push({
            message: "Warning: No LINE_BREAKS Found.\n" +
                "\tThis Lexer has been defined to track line and column information,\n" +
                "\tBut none of the Token Types can be identified as matching a line terminator.\n" +
                "\tSee https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \n" +
                "\tfor details.",
            type: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].NO_LINE_BREAKS_FLAGS
        });
    }
    return warnings;
}
function cloneEmptyGroups(emptyGroups) {
    var clonedResult = {};
    var groupKeys = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["keys"])(emptyGroups);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["forEach"])(groupKeys, function (currKey) {
        var currGroupValue = emptyGroups[currKey];
        /* istanbul ignore else */
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isArray"])(currGroupValue)) {
            clonedResult[currKey] = [];
        }
        else {
            throw Error("non exhaustive match");
        }
    });
    return clonedResult;
}
// TODO: refactor to avoid duplication
function isCustomPattern(tokenType) {
    var pattern = tokenType.PATTERN;
    /* istanbul ignore else */
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(pattern)) {
        return false;
    }
    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(pattern)) {
        // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object
        return true;
    }
    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(pattern, "exec")) {
        // ICustomPattern
        return true;
    }
    else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(pattern)) {
        return false;
    }
    else {
        throw Error("non exhaustive match");
    }
}
function isShortPattern(pattern) {
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(pattern) && pattern.length === 1) {
        return pattern.charCodeAt(0);
    }
    else {
        return false;
    }
}
/**
 * Faster than using a RegExp for default newline detection during lexing.
 */
var LineTerminatorOptimizedTester = {
    // implements /\n|\r\n?/g.test
    test: function (text) {
        var len = text.length;
        for (var i = this.lastIndex; i < len; i++) {
            var c = text.charCodeAt(i);
            if (c === 10) {
                this.lastIndex = i + 1;
                return true;
            }
            else if (c === 13) {
                if (text.charCodeAt(i + 1) === 10) {
                    this.lastIndex = i + 2;
                }
                else {
                    this.lastIndex = i + 1;
                }
                return true;
            }
        }
        return false;
    },
    lastIndex: 0
};
function checkLineBreaksIssues(tokType, lineTerminatorCharCodes) {
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["has"])(tokType, "LINE_BREAKS")) {
        // if the user explicitly declared the line_breaks option we will respect their choice
        // and assume it is correct.
        return false;
    }
    else {
        /* istanbul ignore else */
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isRegExp"])(tokType.PATTERN)) {
            try {
                Object(_reg_exp__WEBPACK_IMPORTED_MODULE_3__["canMatchCharCode"])(lineTerminatorCharCodes, tokType.PATTERN);
            }
            catch (e) {
                /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */
                return {
                    issue: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].IDENTIFY_TERMINATOR,
                    errMsg: e.message
                };
            }
            return false;
        }
        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(tokType.PATTERN)) {
            // string literal patterns can always be analyzed to detect line terminator usage
            return false;
        }
        else if (isCustomPattern(tokType)) {
            // custom token types
            return { issue: _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].CUSTOM_LINE_BREAK };
        }
        else {
            throw Error("non exhaustive match");
        }
    }
}
function buildLineBreakIssueMessage(tokType, details) {
    /* istanbul ignore else */
    if (details.issue === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].IDENTIFY_TERMINATOR) {
        return ("Warning: unable to identify line terminator usage in pattern.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            ("\t Root cause: " + details.errMsg + ".\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR");
    }
    else if (details.issue === _lexer_public__WEBPACK_IMPORTED_MODULE_1__["LexerDefinitionErrorType"].CUSTOM_LINE_BREAK) {
        return ("Warning: A Custom Token Pattern should specify the <line_breaks> option.\n" +
            ("\tThe problem is in the <" + tokType.name + "> Token Type\n") +
            "\tFor details See: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK");
    }
    else {
        throw Error("non exhaustive match");
    }
}
function getCharCodes(charsOrCodes) {
    var charCodes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["map"])(charsOrCodes, function (numOrString) {
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isString"])(numOrString) && numOrString.length > 0) {
            return numOrString.charCodeAt(0);
        }
        else {
            return numOrString;
        }
    });
    return charCodes;
}
function addToMapOfArrays(map, key, value) {
    if (map[key] === undefined) {
        map[key] = [value];
    }
    else {
        map[key].push(value);
    }
}
var minOptimizationVal = 256;
/**
 * We ae mapping charCode above ASCI (256) into buckets each in the size of 256.
 * This is because ASCI are the most common start chars so each one of those will get its own
 * possible token configs vector.
 *
 * Tokens starting with charCodes "above" ASCI are uncommon, so we can "afford"
 * to place these into buckets of possible token configs, What we gain from
 * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'
 * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).
 * Our 'charCodeToPatternIdxToConfig' max size will now be:
 * 256 + (2^16 / 2^8) - 1 === 511
 *
 * note the hack for fast division integer part extraction
 * See: https://stackoverflow.com/a/4228528
 */
function charCodeToOptimizedIndex(charCode) {
    return charCode < minOptimizationVal
        ? charCode
        : charCodeToOptimizedIdxMap[charCode];
}
/**
 * This is a compromise between cold start / hot running performance
 * Creating this array takes ~3ms on a modern machine,
 * But if we perform the computation at runtime as needed the CSS Lexer benchmark
 * performance degrades by ~10%
 *
 * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.
 */
var charCodeToOptimizedIdxMap = [];
function initCharCodeToOptimizedIndexMap() {
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_2__["isEmpty"])(charCodeToOptimizedIdxMap)) {
        charCodeToOptimizedIdxMap = new Array(65536);
        for (var i = 0; i < 65536; i++) {
            /* tslint:disable */
            charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;
            /* tslint:enable */
        }
    }
}
//# sourceMappingURL=lexer.js.map

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;;(function(root, factory) {
    // istanbul ignore next
    if (true) {
        // istanbul ignore next
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))
    } else {}
})(
    typeof self !== "undefined"
        ? // istanbul ignore next
          self
        : this,
    function() {
        // references
        // https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983
        // https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern
        function RegExpParser() {}

        RegExpParser.prototype.saveState = function() {
            return {
                idx: this.idx,
                input: this.input,
                groupIdx: this.groupIdx
            }
        }

        RegExpParser.prototype.restoreState = function(newState) {
            this.idx = newState.idx
            this.input = newState.input
            this.groupIdx = newState.groupIdx
        }

        RegExpParser.prototype.pattern = function(input) {
            // parser state
            this.idx = 0
            this.input = input
            this.groupIdx = 0

            this.consumeChar("/")
            var value = this.disjunction()
            this.consumeChar("/")

            var flags = {
                type: "Flags",
                global: false,
                ignoreCase: false,
                multiLine: false,
                unicode: false,
                sticky: false
            }

            while (this.isRegExpFlag()) {
                switch (this.popChar()) {
                    case "g":
                        addFlag(flags, "global")
                        break
                    case "i":
                        addFlag(flags, "ignoreCase")
                        break
                    case "m":
                        addFlag(flags, "multiLine")
                        break
                    case "u":
                        addFlag(flags, "unicode")
                        break
                    case "y":
                        addFlag(flags, "sticky")
                        break
                }
            }

            if (this.idx !== this.input.length) {
                throw Error(
                    "Redundant input: " + this.input.substring(this.idx)
                )
            }
            return { type: "Pattern", flags: flags, value: value }
        }

        RegExpParser.prototype.disjunction = function() {
            var alts = []
            alts.push(this.alternative())

            while (this.peekChar() === "|") {
                this.consumeChar("|")
                alts.push(this.alternative())
            }

            return { type: "Disjunction", value: alts }
        }

        RegExpParser.prototype.alternative = function() {
            var terms = []

            while (this.isTerm()) {
                terms.push(this.term())
            }

            return { type: "Alternative", value: terms }
        }

        RegExpParser.prototype.term = function() {
            if (this.isAssertion()) {
                return this.assertion()
            } else {
                return this.atom()
            }
        }

        RegExpParser.prototype.assertion = function() {
            switch (this.popChar()) {
                case "^":
                    return { type: "StartAnchor" }
                case "$":
                    return { type: "EndAnchor" }
                // '\b' or '\B'
                case "\\":
                    switch (this.popChar()) {
                        case "b":
                            return { type: "WordBoundary" }
                        case "B":
                            return { type: "NonWordBoundary" }
                    }
                    // istanbul ignore next
                    throw Error("Invalid Assertion Escape")
                // '(?=' or '(?!'
                case "(":
                    this.consumeChar("?")

                    var type
                    switch (this.popChar()) {
                        case "=":
                            type = "Lookahead"
                            break
                        case "!":
                            type = "NegativeLookahead"
                            break
                    }
                    ASSERT_EXISTS(type)

                    var disjunction = this.disjunction()

                    this.consumeChar(")")

                    return { type: type, value: disjunction }
            }
            // istanbul ignore next
            ASSERT_NEVER_REACH_HERE()
        }

        RegExpParser.prototype.quantifier = function(isBacktracking) {
            var range
            switch (this.popChar()) {
                case "*":
                    range = {
                        atLeast: 0,
                        atMost: Infinity
                    }
                    break
                case "+":
                    range = {
                        atLeast: 1,
                        atMost: Infinity
                    }
                    break
                case "?":
                    range = {
                        atLeast: 0,
                        atMost: 1
                    }
                    break
                case "{":
                    var atLeast = this.integerIncludingZero()
                    switch (this.popChar()) {
                        case "}":
                            range = {
                                atLeast: atLeast,
                                atMost: atLeast
                            }
                            break
                        case ",":
                            var atMost
                            if (this.isDigit()) {
                                atMost = this.integerIncludingZero()
                                range = {
                                    atLeast: atLeast,
                                    atMost: atMost
                                }
                            } else {
                                range = {
                                    atLeast: atLeast,
                                    atMost: Infinity
                                }
                            }
                            this.consumeChar("}")
                            break
                    }
                    // throwing exceptions from "ASSERT_EXISTS" during backtracking
                    // causes severe performance degradations
                    if (isBacktracking === true && range === undefined) {
                        return undefined
                    }
                    ASSERT_EXISTS(range)
                    break
            }

            // throwing exceptions from "ASSERT_EXISTS" during backtracking
            // causes severe performance degradations
            if (isBacktracking === true && range === undefined) {
                return undefined
            }

            ASSERT_EXISTS(range)

            if (this.peekChar(0) === "?") {
                this.consumeChar("?")
                range.greedy = false
            } else {
                range.greedy = true
            }

            range.type = "Quantifier"
            return range
        }

        RegExpParser.prototype.atom = function() {
            var atom
            switch (this.peekChar()) {
                case ".":
                    atom = this.dotAll()
                    break
                case "\\":
                    atom = this.atomEscape()
                    break
                case "[":
                    atom = this.characterClass()
                    break
                case "(":
                    atom = this.group()
                    break
            }

            if (atom === undefined && this.isPatternCharacter()) {
                atom = this.patternCharacter()
            }

            ASSERT_EXISTS(atom)

            if (this.isQuantifier()) {
                atom.quantifier = this.quantifier()
            }

            return atom
        }

        RegExpParser.prototype.dotAll = function() {
            this.consumeChar(".")
            return {
                type: "Set",
                complement: true,
                value: [cc("\n"), cc("\r"), cc("\u2028"), cc("\u2029")]
            }
        }

        RegExpParser.prototype.atomEscape = function() {
            this.consumeChar("\\")

            switch (this.peekChar()) {
                case "1":
                case "2":
                case "3":
                case "4":
                case "5":
                case "6":
                case "7":
                case "8":
                case "9":
                    return this.decimalEscapeAtom()
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.decimalEscapeAtom = function() {
            var value = this.positiveInteger()

            return { type: "GroupBackReference", value: value }
        }

        RegExpParser.prototype.characterClassEscape = function() {
            var set
            var complement = false
            switch (this.popChar()) {
                case "d":
                    set = digitsCharCodes
                    break
                case "D":
                    set = digitsCharCodes
                    complement = true
                    break
                case "s":
                    set = whitespaceCodes
                    break
                case "S":
                    set = whitespaceCodes
                    complement = true
                    break
                case "w":
                    set = wordCharCodes
                    break
                case "W":
                    set = wordCharCodes
                    complement = true
                    break
            }

            ASSERT_EXISTS(set)

            return { type: "Set", value: set, complement: complement }
        }

        RegExpParser.prototype.controlEscapeAtom = function() {
            var escapeCode
            switch (this.popChar()) {
                case "f":
                    escapeCode = cc("\f")
                    break
                case "n":
                    escapeCode = cc("\n")
                    break
                case "r":
                    escapeCode = cc("\r")
                    break
                case "t":
                    escapeCode = cc("\t")
                    break
                case "v":
                    escapeCode = cc("\v")
                    break
            }
            ASSERT_EXISTS(escapeCode)

            return { type: "Character", value: escapeCode }
        }

        RegExpParser.prototype.controlLetterEscapeAtom = function() {
            this.consumeChar("c")
            var letter = this.popChar()
            if (/[a-zA-Z]/.test(letter) === false) {
                throw Error("Invalid ")
            }

            var letterCode = letter.toUpperCase().charCodeAt(0) - 64
            return { type: "Character", value: letterCode }
        }

        RegExpParser.prototype.nulCharacterAtom = function() {
            // TODO implement '[lookahead ∉ DecimalDigit]'
            // TODO: for the deprecated octal escape sequence
            this.consumeChar("0")
            return { type: "Character", value: cc("\0") }
        }

        RegExpParser.prototype.hexEscapeSequenceAtom = function() {
            this.consumeChar("x")
            return this.parseHexDigits(2)
        }

        RegExpParser.prototype.regExpUnicodeEscapeSequenceAtom = function() {
            this.consumeChar("u")
            return this.parseHexDigits(4)
        }

        RegExpParser.prototype.identityEscapeAtom = function() {
            // TODO: implement "SourceCharacter but not UnicodeIDContinue"
            // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments
            var escapedChar = this.popChar()
            return { type: "Character", value: cc(escapedChar) }
        }

        RegExpParser.prototype.classPatternCharacterAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case "]":
                    throw Error("TBD")
                default:
                    var nextChar = this.popChar()
                    return { type: "Character", value: cc(nextChar) }
            }
        }

        RegExpParser.prototype.characterClass = function() {
            var set = []
            var complement = false
            this.consumeChar("[")
            if (this.peekChar(0) === "^") {
                this.consumeChar("^")
                complement = true
            }

            while (this.isClassAtom()) {
                var from = this.classAtom()
                var isFromSingleChar = from.type === "Character"
                if (isFromSingleChar && this.isRangeDash()) {
                    this.consumeChar("-")
                    var to = this.classAtom()
                    var isToSingleChar = to.type === "Character"

                    // a range can only be used when both sides are single characters
                    if (isToSingleChar) {
                        if (to.value < from.value) {
                            throw Error("Range out of order in character class")
                        }
                        set.push({ from: from.value, to: to.value })
                    } else {
                        // literal dash
                        insertToSet(from.value, set)
                        set.push(cc("-"))
                        insertToSet(to.value, set)
                    }
                } else {
                    insertToSet(from.value, set)
                }
            }

            this.consumeChar("]")

            return { type: "Set", complement: complement, value: set }
        }

        RegExpParser.prototype.classAtom = function() {
            switch (this.peekChar()) {
                // istanbul ignore next
                case "]":
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                    throw Error("TBD")
                case "\\":
                    return this.classEscape()
                default:
                    return this.classPatternCharacterAtom()
            }
        }

        RegExpParser.prototype.classEscape = function() {
            this.consumeChar("\\")
            switch (this.peekChar()) {
                // Matches a backspace.
                // (Not to be confused with \b word boundary outside characterClass)
                case "b":
                    this.consumeChar("b")
                    return { type: "Character", value: cc("\u0008") }
                case "d":
                case "D":
                case "s":
                case "S":
                case "w":
                case "W":
                    return this.characterClassEscape()
                case "f":
                case "n":
                case "r":
                case "t":
                case "v":
                    return this.controlEscapeAtom()
                case "c":
                    return this.controlLetterEscapeAtom()
                case "0":
                    return this.nulCharacterAtom()
                case "x":
                    return this.hexEscapeSequenceAtom()
                case "u":
                    return this.regExpUnicodeEscapeSequenceAtom()
                default:
                    return this.identityEscapeAtom()
            }
        }

        RegExpParser.prototype.group = function() {
            var capturing = true
            this.consumeChar("(")
            switch (this.peekChar(0)) {
                case "?":
                    this.consumeChar("?")
                    this.consumeChar(":")
                    capturing = false
                    break
                default:
                    this.groupIdx++
                    break
            }
            var value = this.disjunction()
            this.consumeChar(")")

            var groupAst = {
                type: "Group",
                capturing: capturing,
                value: value
            }

            if (capturing) {
                groupAst.idx = this.groupIdx
            }

            return groupAst
        }

        RegExpParser.prototype.positiveInteger = function() {
            var number = this.popChar()

            // istanbul ignore next - can't ever get here due to previous lookahead checks
            // still implementing this error checking in case this ever changes.
            if (decimalPatternNoZero.test(number) === false) {
                throw Error("Expecting a positive integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.integerIncludingZero = function() {
            var number = this.popChar()
            if (decimalPattern.test(number) === false) {
                throw Error("Expecting an integer")
            }

            while (decimalPattern.test(this.peekChar(0))) {
                number += this.popChar()
            }

            return parseInt(number, 10)
        }

        RegExpParser.prototype.patternCharacter = function() {
            var nextChar = this.popChar()
            switch (nextChar) {
                // istanbul ignore next
                case "\n":
                // istanbul ignore next
                case "\r":
                // istanbul ignore next
                case "\u2028":
                // istanbul ignore next
                case "\u2029":
                // istanbul ignore next
                case "^":
                // istanbul ignore next
                case "$":
                // istanbul ignore next
                case "\\":
                // istanbul ignore next
                case ".":
                // istanbul ignore next
                case "*":
                // istanbul ignore next
                case "+":
                // istanbul ignore next
                case "?":
                // istanbul ignore next
                case "(":
                // istanbul ignore next
                case ")":
                // istanbul ignore next
                case "[":
                // istanbul ignore next
                case "|":
                    // istanbul ignore next
                    throw Error("TBD")
                default:
                    return { type: "Character", value: cc(nextChar) }
            }
        }
        RegExpParser.prototype.isRegExpFlag = function() {
            switch (this.peekChar(0)) {
                case "g":
                case "i":
                case "m":
                case "u":
                case "y":
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isRangeDash = function() {
            return this.peekChar() === "-" && this.isClassAtom(1)
        }

        RegExpParser.prototype.isDigit = function() {
            return decimalPattern.test(this.peekChar(0))
        }

        RegExpParser.prototype.isClassAtom = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }

            switch (this.peekChar(howMuch)) {
                case "]":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.isTerm = function() {
            return this.isAtom() || this.isAssertion()
        }

        RegExpParser.prototype.isAtom = function() {
            if (this.isPatternCharacter()) {
                return true
            }

            switch (this.peekChar(0)) {
                case ".":
                case "\\": // atomEscape
                case "[": // characterClass
                // TODO: isAtom must be called before isAssertion - disambiguate
                case "(": // group
                    return true
                default:
                    return false
            }
        }

        RegExpParser.prototype.isAssertion = function() {
            switch (this.peekChar(0)) {
                case "^":
                case "$":
                    return true
                // '\b' or '\B'
                case "\\":
                    switch (this.peekChar(1)) {
                        case "b":
                        case "B":
                            return true
                        default:
                            return false
                    }
                // '(?=' or '(?!'
                case "(":
                    return (
                        this.peekChar(1) === "?" &&
                        (this.peekChar(2) === "=" || this.peekChar(2) === "!")
                    )
                default:
                    return false
            }
        }

        RegExpParser.prototype.isQuantifier = function() {
            var prevState = this.saveState()
            try {
                return this.quantifier(true) !== undefined
            } catch (e) {
                return false
            } finally {
                this.restoreState(prevState)
            }
        }

        RegExpParser.prototype.isPatternCharacter = function() {
            switch (this.peekChar()) {
                case "^":
                case "$":
                case "\\":
                case ".":
                case "*":
                case "+":
                case "?":
                case "(":
                case ")":
                case "[":
                case "|":
                case "/":
                case "\n":
                case "\r":
                case "\u2028":
                case "\u2029":
                    return false
                default:
                    return true
            }
        }

        RegExpParser.prototype.parseHexDigits = function(howMany) {
            var hexString = ""
            for (var i = 0; i < howMany; i++) {
                var hexChar = this.popChar()
                if (hexDigitPattern.test(hexChar) === false) {
                    throw Error("Expecting a HexDecimal digits")
                }
                hexString += hexChar
            }
            var charCode = parseInt(hexString, 16)
            return { type: "Character", value: charCode }
        }

        RegExpParser.prototype.peekChar = function(howMuch) {
            if (howMuch === undefined) {
                howMuch = 0
            }
            return this.input[this.idx + howMuch]
        }

        RegExpParser.prototype.popChar = function() {
            var nextChar = this.peekChar(0)
            this.consumeChar()
            return nextChar
        }

        RegExpParser.prototype.consumeChar = function(char) {
            if (char !== undefined && this.input[this.idx] !== char) {
                throw Error(
                    "Expected: '" +
                        char +
                        "' but found: '" +
                        this.input[this.idx] +
                        "' at offset: " +
                        this.idx
                )
            }

            if (this.idx >= this.input.length) {
                throw Error("Unexpected end of input")
            }
            this.idx++
        }

        // consts and utilities
        var hexDigitPattern = /[0-9a-fA-F]/
        var decimalPattern = /[0-9]/
        var decimalPatternNoZero = /[1-9]/

        function cc(char) {
            return char.charCodeAt(0)
        }

        function insertToSet(item, set) {
            if (item.length !== undefined) {
                item.forEach(function(subItem) {
                    set.push(subItem)
                })
            } else {
                set.push(item)
            }
        }

        function addFlag(flagObj, flagKey) {
            if (flagObj[flagKey] === true) {
                throw "duplicate flag " + flagKey
            }

            flagObj[flagKey] = true
        }

        function ASSERT_EXISTS(obj) {
            // istanbul ignore next
            if (obj === undefined) {
                throw Error("Internal Error - Should never get here!")
            }
        }

        // istanbul ignore next
        function ASSERT_NEVER_REACH_HERE() {
            throw Error("Internal Error - Should never get here!")
        }

        var i
        var digitsCharCodes = []
        for (i = cc("0"); i <= cc("9"); i++) {
            digitsCharCodes.push(i)
        }

        var wordCharCodes = [cc("_")].concat(digitsCharCodes)
        for (i = cc("a"); i <= cc("z"); i++) {
            wordCharCodes.push(i)
        }

        for (i = cc("A"); i <= cc("Z"); i++) {
            wordCharCodes.push(i)
        }

        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes
        var whitespaceCodes = [
            cc(" "),
            cc("\f"),
            cc("\n"),
            cc("\r"),
            cc("\t"),
            cc("\v"),
            cc("\t"),
            cc("\u00a0"),
            cc("\u1680"),
            cc("\u2000"),
            cc("\u2001"),
            cc("\u2002"),
            cc("\u2003"),
            cc("\u2004"),
            cc("\u2005"),
            cc("\u2006"),
            cc("\u2007"),
            cc("\u2008"),
            cc("\u2009"),
            cc("\u200a"),
            cc("\u2028"),
            cc("\u2029"),
            cc("\u202f"),
            cc("\u205f"),
            cc("\u3000"),
            cc("\ufeff")
        ]

        function BaseRegExpVisitor() {}

        BaseRegExpVisitor.prototype.visitChildren = function(node) {
            for (var key in node) {
                var child = node[key]
                /* istanbul ignore else */
                if (node.hasOwnProperty(key)) {
                    if (child.type !== undefined) {
                        this.visit(child)
                    } else if (Array.isArray(child)) {
                        child.forEach(function(subChild) {
                            this.visit(subChild)
                        }, this)
                    }
                }
            }
        }

        BaseRegExpVisitor.prototype.visit = function(node) {
            switch (node.type) {
                case "Pattern":
                    this.visitPattern(node)
                    break
                case "Flags":
                    this.visitFlags(node)
                    break
                case "Disjunction":
                    this.visitDisjunction(node)
                    break
                case "Alternative":
                    this.visitAlternative(node)
                    break
                case "StartAnchor":
                    this.visitStartAnchor(node)
                    break
                case "EndAnchor":
                    this.visitEndAnchor(node)
                    break
                case "WordBoundary":
                    this.visitWordBoundary(node)
                    break
                case "NonWordBoundary":
                    this.visitNonWordBoundary(node)
                    break
                case "Lookahead":
                    this.visitLookahead(node)
                    break
                case "NegativeLookahead":
                    this.visitNegativeLookahead(node)
                    break
                case "Character":
                    this.visitCharacter(node)
                    break
                case "Set":
                    this.visitSet(node)
                    break
                case "Group":
                    this.visitGroup(node)
                    break
                case "GroupBackReference":
                    this.visitGroupBackReference(node)
                    break
                case "Quantifier":
                    this.visitQuantifier(node)
                    break
            }

            this.visitChildren(node)
        }

        BaseRegExpVisitor.prototype.visitPattern = function(node) {}

        BaseRegExpVisitor.prototype.visitFlags = function(node) {}

        BaseRegExpVisitor.prototype.visitDisjunction = function(node) {}

        BaseRegExpVisitor.prototype.visitAlternative = function(node) {}

        // Assertion
        BaseRegExpVisitor.prototype.visitStartAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitEndAnchor = function(node) {}

        BaseRegExpVisitor.prototype.visitWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitNonWordBoundary = function(node) {}

        BaseRegExpVisitor.prototype.visitLookahead = function(node) {}

        BaseRegExpVisitor.prototype.visitNegativeLookahead = function(node) {}

        // atoms
        BaseRegExpVisitor.prototype.visitCharacter = function(node) {}

        BaseRegExpVisitor.prototype.visitSet = function(node) {}

        BaseRegExpVisitor.prototype.visitGroup = function(node) {}

        BaseRegExpVisitor.prototype.visitGroupBackReference = function(node) {}

        BaseRegExpVisitor.prototype.visitQuantifier = function(node) {}

        return {
            RegExpParser: RegExpParser,
            BaseRegExpVisitor: BaseRegExpVisitor,
            VERSION: "0.4.0"
        }
    }
)


/***/ }),
/* 195 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "failedOptimizationPrefixMsg", function() { return failedOptimizationPrefixMsg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getOptimizedStartCodesIndices", function() { return getOptimizedStartCodesIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstCharOptimizedIndices", function() { return firstCharOptimizedIndices; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canMatchCharCode", function() { return canMatchCharCode; });
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(194);
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(196);
/* harmony import */ var _lexer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(193);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var complementErrorMessage = "Complement Sets are not supported for first char optimization";
var failedOptimizationPrefixMsg = 'Unable to use "first char" lexer optimizations:\n';
function getOptimizedStartCodesIndices(regExp, ensureOptimizations) {
    if (ensureOptimizations === void 0) { ensureOptimizations = false; }
    try {
        var ast = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__["getRegExpAst"])(regExp);
        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);
        return firstChars;
    }
    catch (e) {
        /* istanbul ignore next */
        // Testing this relies on the regexp-to-ast library having a bug... */
        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc
        if (e.message === complementErrorMessage) {
            if (ensureOptimizations) {
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["PRINT_WARNING"])("" + failedOptimizationPrefixMsg +
                    ("\tUnable to optimize: < " + regExp.toString() + " >\n") +
                    "\tComplement Sets cannot be automatically optimized.\n" +
                    "\tThis will disable the lexer's first char optimizations.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.");
            }
        }
        else {
            var msgSuffix = "";
            if (ensureOptimizations) {
                msgSuffix =
                    "\n\tThis will disable the lexer's first char optimizations.\n" +
                        "\tSee: https://sap.github.io/chevrotain/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.";
            }
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["PRINT_ERROR"])(failedOptimizationPrefixMsg + "\n" +
                ("\tFailed parsing: < " + regExp.toString() + " >\n") +
                ("\tUsing the regexp-to-ast library version: " + regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__["VERSION"] + "\n") +
                "\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues" +
                msgSuffix);
        }
    }
    return [];
}
function firstCharOptimizedIndices(ast, result, ignoreCase) {
    switch (ast.type) {
        case "Disjunction":
            for (var i = 0; i < ast.value.length; i++) {
                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);
            }
            break;
        case "Alternative":
            var terms = ast.value;
            for (var i = 0; i < terms.length; i++) {
                var term = terms[i];
                // skip terms that cannot effect the first char results
                switch (term.type) {
                    case "EndAnchor":
                    // A group back reference cannot affect potential starting char.
                    // because if a back reference is the first production than automatically
                    // the group being referenced has had to come BEFORE so its codes have already been added
                    case "GroupBackReference":
                    // assertions do not affect potential starting codes
                    case "Lookahead":
                    case "NegativeLookahead":
                    case "StartAnchor":
                    case "WordBoundary":
                    case "NonWordBoundary":
                        continue;
                }
                var atom = term;
                switch (atom.type) {
                    case "Character":
                        addOptimizedIdxToResult(atom.value, result, ignoreCase);
                        break;
                    case "Set":
                        if (atom.complement === true) {
                            throw Error(complementErrorMessage);
                        }
                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(atom.value, function (code) {
                            if (typeof code === "number") {
                                addOptimizedIdxToResult(code, result, ignoreCase);
                            }
                            else {
                                // range
                                var range = code;
                                // cannot optimize when ignoreCase is
                                if (ignoreCase === true) {
                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {
                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                                    }
                                }
                                // Optimization (2 orders of magnitude less work for very large ranges)
                                else {
                                    // handle unoptimized values
                                    for (var rangeCode = range.from; rangeCode <= range.to &&
                                        rangeCode < _lexer__WEBPACK_IMPORTED_MODULE_3__["minOptimizationVal"]; rangeCode++) {
                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);
                                    }
                                    // Less common charCode where we optimize for faster init time, by using larger "buckets"
                                    if (range.to >= _lexer__WEBPACK_IMPORTED_MODULE_3__["minOptimizationVal"]) {
                                        var minUnOptVal = range.from >= _lexer__WEBPACK_IMPORTED_MODULE_3__["minOptimizationVal"]
                                            ? range.from
                                            : _lexer__WEBPACK_IMPORTED_MODULE_3__["minOptimizationVal"];
                                        var maxUnOptVal = range.to;
                                        var minOptIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__["charCodeToOptimizedIndex"])(minUnOptVal);
                                        var maxOptIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__["charCodeToOptimizedIndex"])(maxUnOptVal);
                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {
                                            result[currOptIdx] = currOptIdx;
                                        }
                                    }
                                }
                            }
                        });
                        break;
                    case "Group":
                        firstCharOptimizedIndices(atom.value, result, ignoreCase);
                        break;
                    /* istanbul ignore next */
                    default:
                        throw Error("Non Exhaustive Match");
                }
                // reached a mandatory production, no more **start** codes can be found on this alternative
                var isOptionalQuantifier = atom.quantifier !== undefined &&
                    atom.quantifier.atLeast === 0;
                if (
                // A group may be optional due to empty contents /(?:)/
                // or if everything inside it is optional /((a)?)/
                (atom.type === "Group" &&
                    isWholeOptional(atom) === false) ||
                    // If this term is not a group it may only be optional if it has an optional quantifier
                    (atom.type !== "Group" && isOptionalQuantifier === false)) {
                    break;
                }
            }
            break;
        /* istanbul ignore next */
        default:
            throw Error("non exhaustive match!");
    }
    // console.log(Object.keys(result).length)
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["values"])(result);
}
function addOptimizedIdxToResult(code, result, ignoreCase) {
    var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__["charCodeToOptimizedIndex"])(code);
    result[optimizedCharIdx] = optimizedCharIdx;
    if (ignoreCase === true) {
        handleIgnoreCase(code, result);
    }
}
function handleIgnoreCase(code, result) {
    var char = String.fromCharCode(code);
    var upperChar = char.toUpperCase();
    /* istanbul ignore else */
    if (upperChar !== char) {
        var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__["charCodeToOptimizedIndex"])(upperChar.charCodeAt(0));
        result[optimizedCharIdx] = optimizedCharIdx;
    }
    else {
        var lowerChar = char.toLowerCase();
        if (lowerChar !== char) {
            var optimizedCharIdx = Object(_lexer__WEBPACK_IMPORTED_MODULE_3__["charCodeToOptimizedIndex"])(lowerChar.charCodeAt(0));
            result[optimizedCharIdx] = optimizedCharIdx;
        }
    }
}
function findCode(setNode, targetCharCodes) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["find"])(setNode.value, function (codeOrRange) {
        if (typeof codeOrRange === "number") {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["contains"])(targetCharCodes, codeOrRange);
        }
        else {
            // range
            var range_1 = codeOrRange;
            return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["find"])(targetCharCodes, function (targetCode) {
                return range_1.from <= targetCode && targetCode <= range_1.to;
            }) !== undefined);
        }
    });
}
function isWholeOptional(ast) {
    if (ast.quantifier && ast.quantifier.atLeast === 0) {
        return true;
    }
    if (!ast.value) {
        return false;
    }
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isArray"])(ast.value)
        ? Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["every"])(ast.value, isWholeOptional)
        : isWholeOptional(ast.value);
}
var CharCodeFinder = /** @class */ (function (_super) {
    __extends(CharCodeFinder, _super);
    function CharCodeFinder(targetCharCodes) {
        var _this = _super.call(this) || this;
        _this.targetCharCodes = targetCharCodes;
        _this.found = false;
        return _this;
    }
    CharCodeFinder.prototype.visitChildren = function (node) {
        // No need to keep looking...
        if (this.found === true) {
            return;
        }
        // switch lookaheads as they do not actually consume any characters thus
        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.
        switch (node.type) {
            case "Lookahead":
                this.visitLookahead(node);
                return;
            case "NegativeLookahead":
                this.visitNegativeLookahead(node);
                return;
        }
        _super.prototype.visitChildren.call(this, node);
    };
    CharCodeFinder.prototype.visitCharacter = function (node) {
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["contains"])(this.targetCharCodes, node.value)) {
            this.found = true;
        }
    };
    CharCodeFinder.prototype.visitSet = function (node) {
        if (node.complement) {
            if (findCode(node, this.targetCharCodes) === undefined) {
                this.found = true;
            }
        }
        else {
            if (findCode(node, this.targetCharCodes) !== undefined) {
                this.found = true;
            }
        }
    };
    return CharCodeFinder;
}(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__["BaseRegExpVisitor"]));
function canMatchCharCode(charCodes, pattern) {
    if (pattern instanceof RegExp) {
        var ast = Object(_reg_exp_parser__WEBPACK_IMPORTED_MODULE_2__["getRegExpAst"])(pattern);
        var charCodeFinder = new CharCodeFinder(charCodes);
        charCodeFinder.visit(ast);
        return charCodeFinder.found;
    }
    else {
        return (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["find"])(pattern, function (char) {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["contains"])(charCodes, char.charCodeAt(0));
        }) !== undefined);
    }
}
//# sourceMappingURL=reg_exp.js.map

/***/ }),
/* 196 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRegExpAst", function() { return getRegExpAst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clearRegExpParserCache", function() { return clearRegExpParserCache; });
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(194);
/* harmony import */ var regexp_to_ast__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__);

var regExpAstCache = {};
var regExpParser = new regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__["RegExpParser"]();
function getRegExpAst(regExp) {
    var regExpStr = regExp.toString();
    if (regExpAstCache.hasOwnProperty(regExpStr)) {
        return regExpAstCache[regExpStr];
    }
    else {
        var regExpAst = regExpParser.pattern(regExpStr);
        regExpAstCache[regExpStr] = regExpAst;
        return regExpAst;
    }
}
function clearRegExpParserCache() {
    regExpAstCache = {};
}
//# sourceMappingURL=reg_exp_parser.js.map

/***/ }),
/* 197 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenStructuredMatcher", function() { return tokenStructuredMatcher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenStructuredMatcherNoCategories", function() { return tokenStructuredMatcherNoCategories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenShortNameIdx", function() { return tokenShortNameIdx; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tokenIdxToClass", function() { return tokenIdxToClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "augmentTokenTypes", function() { return augmentTokenTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandCategories", function() { return expandCategories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignTokenDefaultProps", function() { return assignTokenDefaultProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignCategoriesTokensProp", function() { return assignCategoriesTokensProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignCategoriesMapProp", function() { return assignCategoriesMapProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "singleAssignCategoriesToksMap", function() { return singleAssignCategoriesToksMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasShortKeyProperty", function() { return hasShortKeyProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasCategoriesProperty", function() { return hasCategoriesProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasExtendingTokensTypesProperty", function() { return hasExtendingTokensTypesProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hasExtendingTokensTypesMapProperty", function() { return hasExtendingTokensTypesMapProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isTokenType", function() { return isTokenType; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);

function tokenStructuredMatcher(tokInstance, tokConstructor) {
    var instanceType = tokInstance.tokenTypeIdx;
    if (instanceType === tokConstructor.tokenTypeIdx) {
        return true;
    }
    else {
        return (tokConstructor.isParent === true &&
            tokConstructor.categoryMatchesMap[instanceType] === true);
    }
}
// Optimized tokenMatcher in case our grammar does not use token categories
// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead
function tokenStructuredMatcherNoCategories(token, tokType) {
    return token.tokenTypeIdx === tokType.tokenTypeIdx;
}
var tokenShortNameIdx = 1;
var tokenIdxToClass = {};
function augmentTokenTypes(tokenTypes) {
    // collect the parent Token Types as well.
    var tokenTypesAndParents = expandCategories(tokenTypes);
    // add required tokenType and categoryMatches properties
    assignTokenDefaultProps(tokenTypesAndParents);
    // fill up the categoryMatches
    assignCategoriesMapProp(tokenTypesAndParents);
    assignCategoriesTokensProp(tokenTypesAndParents);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(tokenTypesAndParents, function (tokType) {
        tokType.isParent = tokType.categoryMatches.length > 0;
    });
}
function expandCategories(tokenTypes) {
    var result = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneArr"])(tokenTypes);
    var categories = tokenTypes;
    var searching = true;
    while (searching) {
        categories = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["compact"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(categories, function (currTokType) { return currTokType.CATEGORIES; })));
        var newCategories = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["difference"])(categories, result);
        result = result.concat(newCategories);
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(newCategories)) {
            searching = false;
        }
        else {
            categories = newCategories;
        }
    }
    return result;
}
function assignTokenDefaultProps(tokenTypes) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(tokenTypes, function (currTokType) {
        if (!hasShortKeyProperty(currTokType)) {
            tokenIdxToClass[tokenShortNameIdx] = currTokType;
            currTokType.tokenTypeIdx = tokenShortNameIdx++;
        }
        // CATEGORIES? : TokenType | TokenType[]
        if (hasCategoriesProperty(currTokType) &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(currTokType.CATEGORIES)
        // &&
        // !isUndefined(currTokType.CATEGORIES.PATTERN)
        ) {
            currTokType.CATEGORIES = [currTokType.CATEGORIES];
        }
        if (!hasCategoriesProperty(currTokType)) {
            currTokType.CATEGORIES = [];
        }
        if (!hasExtendingTokensTypesProperty(currTokType)) {
            currTokType.categoryMatches = [];
        }
        if (!hasExtendingTokensTypesMapProperty(currTokType)) {
            currTokType.categoryMatchesMap = {};
        }
    });
}
function assignCategoriesTokensProp(tokenTypes) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(tokenTypes, function (currTokType) {
        // avoid duplications
        currTokType.categoryMatches = [];
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currTokType.categoryMatchesMap, function (val, key) {
            currTokType.categoryMatches.push(tokenIdxToClass[key].tokenTypeIdx);
        });
    });
}
function assignCategoriesMapProp(tokenTypes) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(tokenTypes, function (currTokType) {
        singleAssignCategoriesToksMap([], currTokType);
    });
}
function singleAssignCategoriesToksMap(path, nextNode) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(path, function (pathNode) {
        nextNode.categoryMatchesMap[pathNode.tokenTypeIdx] = true;
    });
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(nextNode.CATEGORIES, function (nextCategory) {
        var newPath = path.concat(nextNode);
        // avoids infinite loops due to cyclic categories.
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(newPath, nextCategory)) {
            singleAssignCategoriesToksMap(newPath, nextCategory);
        }
    });
}
function hasShortKeyProperty(tokType) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokType, "tokenTypeIdx");
}
function hasCategoriesProperty(tokType) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokType, "CATEGORIES");
}
function hasExtendingTokensTypesProperty(tokType) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokType, "categoryMatches");
}
function hasExtendingTokensTypesMapProperty(tokType) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokType, "categoryMatchesMap");
}
function isTokenType(tokType) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokType, "tokenTypeIdx");
}
//# sourceMappingURL=tokens.js.map

/***/ }),
/* 198 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultLexerErrorProvider", function() { return defaultLexerErrorProvider; });
var defaultLexerErrorProvider = {
    buildUnableToPopLexerModeMessage: function (token) {
        return "Unable to pop Lexer Mode after encountering Token ->" + token.image + "<- The Mode Stack is empty";
    },
    buildUnexpectedCharactersMessage: function (fullText, startOffset, length, line, column) {
        return ("unexpected character: ->" + fullText.charAt(startOffset) + "<- at offset: " + startOffset + "," + (" skipped " + length + " characters."));
    }
};
//# sourceMappingURL=lexer_errors_public.js.map

/***/ }),
/* 199 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "first", function() { return first; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstForSequence", function() { return firstForSequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstForBranching", function() { return firstForBranching; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "firstForTerminal", function() { return firstForTerminal; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(190);
/* harmony import */ var _gast_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(200);



function first(prod) {
    /* istanbul ignore else */
    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]) {
        // this could in theory cause infinite loops if
        // (1) prod A refs prod B.
        // (2) prod B refs prod A
        // (3) AB can match the empty set
        // in other words a cycle where everything is optional so the first will keep
        // looking ahead for the next optional part and will never exit
        // currently there is no safeguard for this unique edge case because
        // (1) not sure a grammar in which this can happen is useful for anything (productive)
        return first(prod.referencedRule);
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]) {
        return firstForTerminal(prod);
    }
    else if (Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["isSequenceProd"])(prod)) {
        return firstForSequence(prod);
    }
    else if (Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["isBranchingProd"])(prod)) {
        return firstForBranching(prod);
    }
    else {
        throw Error("non exhaustive match");
    }
}
function firstForSequence(prod) {
    var firstSet = [];
    var seq = prod.definition;
    var nextSubProdIdx = 0;
    var hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    var currSubProd;
    // so we enter the loop at least once (if the definition is not empty
    var isLastInnerProdOptional = true;
    // scan a sequence until it's end or until we have found a NONE optional production in it
    while (hasInnerProdsRemaining && isLastInnerProdOptional) {
        currSubProd = seq[nextSubProdIdx];
        isLastInnerProdOptional = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["isOptionalProd"])(currSubProd);
        firstSet = firstSet.concat(first(currSubProd));
        nextSubProdIdx = nextSubProdIdx + 1;
        hasInnerProdsRemaining = seq.length > nextSubProdIdx;
    }
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["uniq"])(firstSet);
}
function firstForBranching(prod) {
    var allAlternativesFirsts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(prod.definition, function (innerProd) {
        return first(innerProd);
    });
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["uniq"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(allAlternativesFirsts));
}
function firstForTerminal(terminal) {
    return [terminal.terminalType];
}
//# sourceMappingURL=first.js.map

/***/ }),
/* 200 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSequenceProd", function() { return isSequenceProd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isOptionalProd", function() { return isOptionalProd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBranchingProd", function() { return isBranchingProd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getProductionDslName", function() { return getProductionDslName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DslMethodsCollectorVisitor", function() { return DslMethodsCollectorVisitor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "collectMethods", function() { return collectMethods; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(190);
/* harmony import */ var _gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(201);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



function isSequenceProd(prod) {
    return (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Flat"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatory"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatoryWithSeparator"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Rule"]);
}
function isOptionalProd(prod, alreadyVisited) {
    if (alreadyVisited === void 0) { alreadyVisited = []; }
    var isDirectlyOptional = prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"] ||
        prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"];
    if (isDirectlyOptional) {
        return true;
    }
    // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another
    // empty optional top rule
    // may be indirectly optional ((A?B?C?) | (D?E?F?))
    if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"]) {
        // for OR its enough for just one of the alternatives to be optional
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["some"])(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"] && Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(alreadyVisited, prod)) {
        // avoiding stack overflow due to infinite recursion
        return false;
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["AbstractProduction"]) {
        if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]) {
            alreadyVisited.push(prod);
        }
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(prod.definition, function (subProd) {
            return isOptionalProd(subProd, alreadyVisited);
        });
    }
    else {
        return false;
    }
}
function isBranchingProd(prod) {
    return prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"];
}
function getProductionDslName(prod) {
    /* istanbul ignore else */
    if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]) {
        return "SUBRULE";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]) {
        return "OPTION";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"]) {
        return "OR";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatory"]) {
        return "AT_LEAST_ONE";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatoryWithSeparator"]) {
        return "AT_LEAST_ONE_SEP";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"]) {
        return "MANY_SEP";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"]) {
        return "MANY";
    }
    else if (prod instanceof _gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]) {
        return "CONSUME";
    }
    else {
        throw Error("non exhaustive match");
    }
}
var DslMethodsCollectorVisitor = /** @class */ (function (_super) {
    __extends(DslMethodsCollectorVisitor, _super);
    function DslMethodsCollectorVisitor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // A minus is never valid in an identifier name
        _this.separator = "-";
        _this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: []
        };
        return _this;
    }
    DslMethodsCollectorVisitor.prototype.reset = function () {
        this.dslMethods = {
            option: [],
            alternation: [],
            repetition: [],
            repetitionWithSeparator: [],
            repetitionMandatory: [],
            repetitionMandatoryWithSeparator: []
        };
    };
    DslMethodsCollectorVisitor.prototype.visitTerminal = function (terminal) {
        var key = terminal.terminalType.name + this.separator + "Terminal";
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(terminal);
    };
    DslMethodsCollectorVisitor.prototype.visitNonTerminal = function (subrule) {
        var key = subrule.nonTerminalName + this.separator + "Terminal";
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(this.dslMethods, key)) {
            this.dslMethods[key] = [];
        }
        this.dslMethods[key].push(subrule);
    };
    DslMethodsCollectorVisitor.prototype.visitOption = function (option) {
        this.dslMethods.option.push(option);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.dslMethods.repetitionWithSeparator.push(manySep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.dslMethods.repetitionMandatory.push(atLeastOne);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);
    };
    DslMethodsCollectorVisitor.prototype.visitRepetition = function (many) {
        this.dslMethods.repetition.push(many);
    };
    DslMethodsCollectorVisitor.prototype.visitAlternation = function (or) {
        this.dslMethods.alternation.push(or);
    };
    return DslMethodsCollectorVisitor;
}(_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__["GAstVisitor"]));

var collectorVisitor = new DslMethodsCollectorVisitor();
function collectMethods(rule) {
    collectorVisitor.reset();
    rule.accept(collectorVisitor);
    var dslMethods = collectorVisitor.dslMethods;
    // avoid uncleaned references
    collectorVisitor.reset();
    return dslMethods;
}
//# sourceMappingURL=gast.js.map

/***/ }),
/* 201 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GAstVisitor", function() { return GAstVisitor; });
/* harmony import */ var _gast_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(190);

var GAstVisitor = /** @class */ (function () {
    function GAstVisitor() {
    }
    GAstVisitor.prototype.visit = function (node) {
        var nodeAny = node;
        switch (nodeAny.constructor) {
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["NonTerminal"]:
                return this.visitNonTerminal(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Flat"]:
                return this.visitFlat(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Option"]:
                return this.visitOption(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["RepetitionMandatory"]:
                return this.visitRepetitionMandatory(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["RepetitionMandatoryWithSeparator"]:
                return this.visitRepetitionMandatoryWithSeparator(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["RepetitionWithSeparator"]:
                return this.visitRepetitionWithSeparator(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Repetition"]:
                return this.visitRepetition(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Alternation"]:
                return this.visitAlternation(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Terminal"]:
                return this.visitTerminal(nodeAny);
            case _gast_public__WEBPACK_IMPORTED_MODULE_0__["Rule"]:
                return this.visitRule(nodeAny);
            /* istanbul ignore next */
            default:
                throw Error("non exhaustive match");
        }
    };
    GAstVisitor.prototype.visitNonTerminal = function (node) { };
    GAstVisitor.prototype.visitFlat = function (node) { };
    GAstVisitor.prototype.visitOption = function (node) { };
    GAstVisitor.prototype.visitRepetition = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatory = function (node) { };
    GAstVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) { };
    GAstVisitor.prototype.visitRepetitionWithSeparator = function (node) { };
    GAstVisitor.prototype.visitAlternation = function (node) { };
    GAstVisitor.prototype.visitTerminal = function (node) { };
    GAstVisitor.prototype.visitRule = function (node) { };
    return GAstVisitor;
}());

//# sourceMappingURL=gast_visitor_public.js.map

/***/ }),
/* 202 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IN", function() { return IN; });
// TODO: can this be removed? where is it used?
var IN = "_~IN~_";
//# sourceMappingURL=constants.js.map

/***/ }),
/* 203 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setNodeLocationOnlyOffset", function() { return setNodeLocationOnlyOffset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setNodeLocationFull", function() { return setNodeLocationFull; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addTerminalToCst", function() { return addTerminalToCst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addNoneTerminalToCst", function() { return addNoneTerminalToCst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NamedDSLMethodsCollectorVisitor", function() { return NamedDSLMethodsCollectorVisitor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expandAllNestedRuleNames", function() { return expandAllNestedRuleNames; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(204);
/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(190);
/* harmony import */ var _grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(201);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




/**
 * This nodeLocation tracking is not efficient and should only be used
 * when error recovery is enabled or the Token Vector contains virtual Tokens
 * (e.g, Python Indent/Outdent)
 * As it executes the calculation for every single terminal/nonTerminal
 * and does not rely on the fact the token vector is **sorted**
 */
function setNodeLocationOnlyOffset(currNodeLocation, newLocationInfo) {
    // First (valid) update for this cst node
    if (isNaN(currNodeLocation.startOffset) === true) {
        // assumption1: Token location information is either NaN or a valid number
        // assumption2: Token location information is fully valid if it exist
        // (both start/end offsets exist and are numbers).
        currNodeLocation.startOffset = newLocationInfo.startOffset;
        currNodeLocation.endOffset = newLocationInfo.endOffset;
    }
    // Once the startOffset has been updated with a valid number it should never receive
    // any farther updates as the Token vector is sorted.
    // We still have to check this this condition for every new possible location info
    // because with error recovery enabled we may encounter invalid tokens (NaN location props)
    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
        currNodeLocation.endOffset = newLocationInfo.endOffset;
    }
}
/**
 * This nodeLocation tracking is not efficient and should only be used
 * when error recovery is enabled or the Token Vector contains virtual Tokens
 * (e.g, Python Indent/Outdent)
 * As it executes the calculation for every single terminal/nonTerminal
 * and does not rely on the fact the token vector is **sorted**
 */
function setNodeLocationFull(currNodeLocation, newLocationInfo) {
    // First (valid) update for this cst node
    if (isNaN(currNodeLocation.startOffset) === true) {
        // assumption1: Token location information is either NaN or a valid number
        // assumption2: Token location information is fully valid if it exist
        // (all start/end props exist and are numbers).
        currNodeLocation.startOffset = newLocationInfo.startOffset;
        currNodeLocation.startColumn = newLocationInfo.startColumn;
        currNodeLocation.startLine = newLocationInfo.startLine;
        currNodeLocation.endOffset = newLocationInfo.endOffset;
        currNodeLocation.endColumn = newLocationInfo.endColumn;
        currNodeLocation.endLine = newLocationInfo.endLine;
    }
    // Once the start props has been updated with a valid number it should never receive
    // any farther updates as the Token vector is sorted.
    // We still have to check this this condition for every new possible location info
    // because with error recovery enabled we may encounter invalid tokens (NaN location props)
    else if (currNodeLocation.endOffset < newLocationInfo.endOffset === true) {
        currNodeLocation.endOffset = newLocationInfo.endOffset;
        currNodeLocation.endColumn = newLocationInfo.endColumn;
        currNodeLocation.endLine = newLocationInfo.endLine;
    }
}
function addTerminalToCst(node, token, tokenTypeName) {
    if (node.children[tokenTypeName] === undefined) {
        node.children[tokenTypeName] = [token];
    }
    else {
        node.children[tokenTypeName].push(token);
    }
}
function addNoneTerminalToCst(node, ruleName, ruleResult) {
    if (node.children[ruleName] === undefined) {
        node.children[ruleName] = [ruleResult];
    }
    else {
        node.children[ruleName].push(ruleResult);
    }
}
var NamedDSLMethodsCollectorVisitor = /** @class */ (function (_super) {
    __extends(NamedDSLMethodsCollectorVisitor, _super);
    function NamedDSLMethodsCollectorVisitor(ruleIdx) {
        var _this = _super.call(this) || this;
        _this.result = [];
        _this.ruleIdx = ruleIdx;
        return _this;
    }
    NamedDSLMethodsCollectorVisitor.prototype.collectNamedDSLMethod = function (node, newNodeConstructor, methodIdx) {
        // TODO: better hack to copy what we need here...
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(node.name)) {
            // copy without name so this will indeed be processed later.
            var nameLessNode 
            /* istanbul ignore else */
            = void 0;
            /* istanbul ignore else */
            if (node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Option"] ||
                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Repetition"] ||
                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionMandatory"] ||
                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Alternation"]) {
                nameLessNode = new newNodeConstructor({
                    definition: node.definition,
                    idx: node.idx
                });
            }
            else if (node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionMandatoryWithSeparator"] ||
                node instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionWithSeparator"]) {
                nameLessNode = new newNodeConstructor({
                    definition: node.definition,
                    idx: node.idx,
                    separator: node.separator
                });
            }
            else {
                throw Error("non exhaustive match");
            }
            var def = [nameLessNode];
            var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["getKeyForAutomaticLookahead"])(this.ruleIdx, methodIdx, node.idx);
            this.result.push({ def: def, key: key, name: node.name, orgProd: node });
        }
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitOption = function (node) {
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Option"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OPTION_IDX"]);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetition = function (node) {
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Repetition"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_IDX"]);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatory = function (node) {
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionMandatory"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_IDX"]);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionMandatoryWithSeparator"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_SEP_IDX"]);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitRepetitionWithSeparator = function (node) {
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["RepetitionWithSeparator"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_SEP_IDX"]);
    };
    NamedDSLMethodsCollectorVisitor.prototype.visitAlternation = function (node) {
        var _this = this;
        this.collectNamedDSLMethod(node, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Alternation"], _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OR_IDX"]);
        var hasMoreThanOneAlternative = node.definition.length > 1;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(node.definition, function (currFlatAlt, altIdx) {
            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(currFlatAlt.name)) {
                var def = currFlatAlt.definition;
                if (hasMoreThanOneAlternative) {
                    def = [new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Option"]({ definition: currFlatAlt.definition })];
                }
                else {
                    // mandatory
                    def = currFlatAlt.definition;
                }
                var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["getKeyForAltIndex"])(_this.ruleIdx, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OR_IDX"], node.idx, altIdx);
                _this.result.push({
                    def: def,
                    key: key,
                    name: currFlatAlt.name,
                    orgProd: currFlatAlt
                });
            }
        });
    };
    return NamedDSLMethodsCollectorVisitor;
}(_grammar_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_3__["GAstVisitor"]));

function expandAllNestedRuleNames(topRules, fullToShortName) {
    var result = {
        allRuleNames: []
    };
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(topRules, function (currTopRule) {
        var currTopRuleShortName = fullToShortName[currTopRule.name];
        result.allRuleNames.push(currTopRule.name);
        var namedCollectorVisitor = new NamedDSLMethodsCollectorVisitor(currTopRuleShortName);
        currTopRule.accept(namedCollectorVisitor);
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(namedCollectorVisitor.result, function (_a) {
            var def = _a.def, key = _a.key, name = _a.name;
            result.allRuleNames.push(currTopRule.name + name);
        });
    });
    return result;
}
//# sourceMappingURL=cst.js.map

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS_FOR_METHOD_TYPE", function() { return BITS_FOR_METHOD_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS_FOR_OCCURRENCE_IDX", function() { return BITS_FOR_OCCURRENCE_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS_FOR_RULE_IDX", function() { return BITS_FOR_RULE_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BITS_FOR_ALT_IDX", function() { return BITS_FOR_ALT_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OR_IDX", function() { return OR_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OPTION_IDX", function() { return OPTION_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MANY_IDX", function() { return MANY_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AT_LEAST_ONE_IDX", function() { return AT_LEAST_ONE_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MANY_SEP_IDX", function() { return MANY_SEP_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AT_LEAST_ONE_SEP_IDX", function() { return AT_LEAST_ONE_SEP_IDX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeyForAutomaticLookahead", function() { return getKeyForAutomaticLookahead; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getKeyForAltIndex", function() { return getKeyForAltIndex; });
// Lookahead keys are 32Bit integers in the form
// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX
// XXXX -> Occurrence Index bitmap.
// YYYY -> DSL Method Type bitmap.
// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.
// TTTTTTTTT -> alternation alternative index bitmap
var BITS_FOR_METHOD_TYPE = 4;
var BITS_FOR_OCCURRENCE_IDX = 8;
var BITS_FOR_RULE_IDX = 12;
// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.
var BITS_FOR_ALT_IDX = 8;
// short string used as part of mapping keys.
// being short improves the performance when composing KEYS for maps out of these
// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)
/* tslint:disable */
var OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;
var OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;
var MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;
var AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;
var MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;
var AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;
/* tslint:enable */
// this actually returns a number, but it is always used as a string (object prop key)
function getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) {
    /* tslint:disable */
    return occurrence | dslMethodIdx | ruleIdx;
    /* tslint:enable */
}
var BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;
function getKeyForAltIndex(ruleIdx, dslMethodIdx, occurrence, altIdx) {
    /* tslint:disable */
    // alternative indices are zero based, thus must always add one (turn on one bit) to guarantee uniqueness.
    var altIdxBitMap = (altIdx + 1) << BITS_START_FOR_ALT_IDX;
    return (getKeyForAutomaticLookahead(ruleIdx, dslMethodIdx, occurrence) |
        altIdxBitMap);
    /* tslint:enable */
}
//# sourceMappingURL=keys.js.map

/***/ }),
/* 205 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultParserErrorProvider", function() { return defaultParserErrorProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultGrammarResolverErrorProvider", function() { return defaultGrammarResolverErrorProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultGrammarValidatorErrorProvider", function() { return defaultGrammarValidatorErrorProvider; });
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(191);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(190);
/* harmony import */ var _grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(200);
/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(206);






var defaultParserErrorProvider = {
    buildMismatchTokenMessage: function (_a) {
        var expected = _a.expected, actual = _a.actual, previous = _a.previous, ruleName = _a.ruleName;
        var hasLabel = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["hasTokenLabel"])(expected);
        var expectedMsg = hasLabel
            ? "--> " + Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["tokenLabel"])(expected) + " <--"
            : "token of type --> " + expected.name + " <--";
        var msg = "Expecting " + expectedMsg + " but found --> '" + actual.image + "' <--";
        return msg;
    },
    buildNotAllInputParsedMessage: function (_a) {
        var firstRedundant = _a.firstRedundant, ruleName = _a.ruleName;
        return ("Redundant input, expecting EOF but found: " + firstRedundant.image);
    },
    buildNoViableAltMessage: function (_a) {
        var expectedPathsPerAlt = _a.expectedPathsPerAlt, actual = _a.actual, previous = _a.previous, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var allLookAheadPaths = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["reduce"])(expectedPathsPerAlt, function (result, currAltPaths) { return result.concat(currAltPaths); }, []);
            var nextValidTokenSequences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(allLookAheadPaths, function (currPath) {
                return "[" + Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(currPath, function (currTokenType) {
                    return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["tokenLabel"])(currTokenType);
                }).join(", ") + "]";
            });
            var nextValidSequenceItems = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(nextValidTokenSequences, function (itemMsg, idx) { return "  " + (idx + 1) + ". " + itemMsg; });
            var calculatedDescription = "one of these possible Token sequences:\n" + nextValidSequenceItems.join("\n");
            return errPrefix + calculatedDescription + errSuffix;
        }
    },
    buildEarlyExitMessage: function (_a) {
        var expectedIterationPaths = _a.expectedIterationPaths, actual = _a.actual, customUserDescription = _a.customUserDescription, ruleName = _a.ruleName;
        var errPrefix = "Expecting: ";
        // TODO: issue: No Viable Alternative Error may have incomplete details. #502
        var actualText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(actual).image;
        var errSuffix = "\nbut found: '" + actualText + "'";
        if (customUserDescription) {
            return errPrefix + customUserDescription + errSuffix;
        }
        else {
            var nextValidTokenSequences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(expectedIterationPaths, function (currPath) {
                return "[" + Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(currPath, function (currTokenType) {
                    return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["tokenLabel"])(currTokenType);
                }).join(",") + "]";
            });
            var calculatedDescription = "expecting at least one iteration which starts with one of these possible Token sequences::\n  " +
                ("<" + nextValidTokenSequences.join(" ,") + ">");
            return errPrefix + calculatedDescription + errSuffix;
        }
    }
};
Object.freeze(defaultParserErrorProvider);
var defaultGrammarResolverErrorProvider = {
    buildRuleNotFoundError: function (topLevelRule, undefinedRule) {
        var msg = "Invalid grammar, reference to a rule which is not defined: ->" +
            undefinedRule.nonTerminalName +
            "<-\n" +
            "inside top level rule: ->" +
            topLevelRule.name +
            "<-";
        return msg;
    }
};
var defaultGrammarValidatorErrorProvider = {
    buildDuplicateFoundError: function (topLevelRule, duplicateProds) {
        function getExtraProductionArgument(prod) {
            if (prod instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Terminal"]) {
                return prod.terminalType.name;
            }
            else if (prod instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["NonTerminal"]) {
                return prod.nonTerminalName;
            }
            else {
                return "";
            }
        }
        var topLevelName = topLevelRule.name;
        var duplicateProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(duplicateProds);
        var index = duplicateProd.idx;
        var dslName = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__["getProductionDslName"])(duplicateProd);
        var extraArgument = getExtraProductionArgument(duplicateProd);
        var hasExplicitIndex = index > 0;
        var msg = "->" + dslName + (hasExplicitIndex ? index : "") + "<- " + (extraArgument ? "with argument: ->" + extraArgument + "<-" : "") + "\n                  appears more than once (" + duplicateProds.length + " times) in the top level rule: ->" + topLevelName + "<-.                  \n                  For further details see: https://sap.github.io/chevrotain/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  ";
        // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...
        msg = msg.replace(/[ \t]+/g, " ");
        msg = msg.replace(/\s\s+/g, "\n");
        return msg;
    },
    buildInvalidNestedRuleNameError: function (topLevelRule, nestedProd) {
        var msg = "Invalid nested rule name: ->" + nestedProd.name + "<- inside rule: ->" + topLevelRule.name + "<-\n" +
            ("it must match the pattern: ->" + _grammar_checks__WEBPACK_IMPORTED_MODULE_4__["validNestedRuleName"].toString() + "<-.\n") +
            "Note that this means a nested rule name must start with the '$'(dollar) sign.";
        return msg;
    },
    buildDuplicateNestedRuleNameError: function (topLevelRule, nestedProd) {
        var duplicateName = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(nestedProd).name;
        var errMsg = "Duplicate nested rule name: ->" + duplicateName + "<- inside rule: ->" + topLevelRule.name + "<-\n" +
            "A nested name must be unique in the scope of a top level grammar rule.";
        return errMsg;
    },
    buildNamespaceConflictError: function (rule) {
        var errMsg = "Namespace conflict found in grammar.\n" +
            ("The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <" + rule.name + ">.\n") +
            "To resolve this make sure each Terminal and Non-Terminal names are unique\n" +
            "This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\n" +
            "and Non-Terminal names start with a lower case letter.";
        return errMsg;
    },
    buildAlternationPrefixAmbiguityError: function (options) {
        var pathMsg = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(options.prefixPath, function (currTok) {
            return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["tokenLabel"])(currTok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var errMsg = "Ambiguous alternatives: <" + options.ambiguityIndices.join(" ,") + "> due to common lookahead prefix\n" +
            ("in <OR" + occurrence + "> inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n") +
            "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\n" +
            "For Further details.";
        return errMsg;
    },
    buildAlternationAmbiguityError: function (options) {
        var pathMsg = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(options.prefixPath, function (currtok) {
            return Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["tokenLabel"])(currtok);
        }).join(", ");
        var occurrence = options.alternation.idx === 0 ? "" : options.alternation.idx;
        var currMessage = "Ambiguous Alternatives Detected: <" + options.ambiguityIndices.join(" ,") + "> in <OR" + occurrence + ">" +
            (" inside <" + options.topLevelRule.name + "> Rule,\n") +
            ("<" + pathMsg + "> may appears as a prefix path in all these alternatives.\n");
        currMessage =
            currMessage +
                "See: https://sap.github.io/chevrotain/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\n" +
                "For Further details.";
        return currMessage;
    },
    buildEmptyRepetitionError: function (options) {
        var dslName = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_3__["getProductionDslName"])(options.repetition);
        if (options.repetition.idx !== 0) {
            dslName += options.repetition.idx;
        }
        var errMsg = "The repetition <" + dslName + "> within Rule <" + options.topLevelRule.name + "> can never consume any tokens.\n" +
            "This could lead to an infinite loop.";
        return errMsg;
    },
    buildTokenNameError: function (options) {
        var tokTypeName = options.tokenType.name;
        var errMsg = "Invalid Grammar Token name: ->" + tokTypeName + "<- it must match the pattern: ->" + options.expectedPattern.toString() + "<-";
        return errMsg;
    },
    buildEmptyAlternationError: function (options) {
        var errMsg = "Ambiguous empty alternative: <" + (options.emptyChoiceIdx + 1) + ">" +
            (" in <OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n") +
            "Only the last alternative may be an empty alternative.";
        return errMsg;
    },
    buildTooManyAlternativesError: function (options) {
        var errMsg = "An Alternation cannot have more than 256 alternatives:\n" +
            ("<OR" + options.alternation.idx + "> inside <" + options.topLevelRule.name + "> Rule.\n has " + (options.alternation.definition.length +
                1) + " alternatives.");
        return errMsg;
    },
    buildLeftRecursionError: function (options) {
        var ruleName = options.topLevelRule.name;
        var pathNames = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"](options.leftRecursionPath, function (currRule) { return currRule.name; });
        var leftRecursivePath = ruleName + " --> " + pathNames
            .concat([ruleName])
            .join(" --> ");
        var errMsg = "Left Recursion found in grammar.\n" +
            ("rule: <" + ruleName + "> can be invoked from itself (directly or indirectly)\n") +
            ("without consuming any Tokens. The grammar path that causes this is: \n " + leftRecursivePath + "\n") +
            " To fix this refactor your grammar to remove the left recursion.\n" +
            "see: https://en.wikipedia.org/wiki/LL_parser#Left_Factoring.";
        return errMsg;
    },
    buildInvalidRuleNameError: function (options) {
        var ruleName = options.topLevelRule.name;
        var expectedPatternString = options.expectedPattern.toString();
        var errMsg = "Invalid grammar rule name: ->" + ruleName + "<- it must match the pattern: ->" + expectedPatternString + "<-";
        return errMsg;
    },
    buildDuplicateRuleNameError: function (options) {
        var ruleName;
        if (options.topLevelRule instanceof _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_2__["Rule"]) {
            ruleName = options.topLevelRule.name;
        }
        else {
            ruleName = options.topLevelRule;
        }
        var errMsg = "Duplicate definition, rule: ->" + ruleName + "<- is already defined in the grammar: ->" + options.grammarName + "<-";
        return errMsg;
    }
};
//# sourceMappingURL=errors_public.js.map

/***/ }),
/* 206 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateGrammar", function() { return validateGrammar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identifyProductionForDuplicates", function() { return identifyProductionForDuplicates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OccurrenceValidationCollector", function() { return OccurrenceValidationCollector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validTermsPattern", function() { return validTermsPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validNestedRuleName", function() { return validNestedRuleName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateRuleName", function() { return validateRuleName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateNestedRuleName", function() { return validateNestedRuleName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateTokenName", function() { return validateTokenName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateRuleDoesNotAlreadyExist", function() { return validateRuleDoesNotAlreadyExist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateRuleIsOverridden", function() { return validateRuleIsOverridden; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateNoLeftRecursion", function() { return validateNoLeftRecursion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getFirstNoneTerminal", function() { return getFirstNoneTerminal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateEmptyOrAlternative", function() { return validateEmptyOrAlternative; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateAmbiguousAlternationAlternatives", function() { return validateAmbiguousAlternationAlternatives; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RepetionCollector", function() { return RepetionCollector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateTooManyAlts", function() { return validateTooManyAlts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateSomeNonEmptyLookaheadPath", function() { return validateSomeNonEmptyLookaheadPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "checkPrefixAlternativesAmbiguities", function() { return checkPrefixAlternativesAmbiguities; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(186);
/* harmony import */ var _gast_gast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(200);
/* harmony import */ var _lookahead__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(207);
/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(203);
/* harmony import */ var _interpreter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(208);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(190);
/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(201);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();









function validateGrammar(topLevels, globalMaxLookahead, tokenTypes, ignoredIssues, errMsgProvider, grammarName) {
    var duplicateErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](topLevels, function (currTopLevel) {
        return validateDuplicateProductions(currTopLevel, errMsgProvider);
    });
    var leftRecursionErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](topLevels, function (currTopRule) {
        return validateNoLeftRecursion(currTopRule, currTopRule, errMsgProvider);
    });
    var emptyAltErrors = [];
    var ambiguousAltsErrors = [];
    var emptyRepetitionErrors = [];
    // left recursion could cause infinite loops in the following validations.
    // It is safest to first have the user fix the left recursion errors first and only then examine Further issues.
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(leftRecursionErrors, _utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])) {
        emptyAltErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topLevels, function (currTopRule) {
            return validateEmptyOrAlternative(currTopRule, errMsgProvider);
        });
        ambiguousAltsErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topLevels, function (currTopRule) {
            return validateAmbiguousAlternationAlternatives(currTopRule, globalMaxLookahead, ignoredIssues, errMsgProvider);
        });
        emptyRepetitionErrors = validateSomeNonEmptyLookaheadPath(topLevels, globalMaxLookahead, errMsgProvider);
    }
    var termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider);
    var tokenNameErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](tokenTypes, function (currTokType) {
        return validateTokenName(currTokType, errMsgProvider);
    });
    var nestedRulesNameErrors = validateNestedRulesNames(topLevels, errMsgProvider);
    var nestedRulesDuplicateErrors = validateDuplicateNestedRules(topLevels, errMsgProvider);
    var tooManyAltsErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topLevels, function (curRule) {
        return validateTooManyAlts(curRule, errMsgProvider);
    });
    var ruleNameErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topLevels, function (curRule) {
        return validateRuleName(curRule, errMsgProvider);
    });
    var duplicateRulesError = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(topLevels, function (curRule) {
        return validateRuleDoesNotAlreadyExist(curRule, topLevels, grammarName, errMsgProvider);
    });
    return (_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"](duplicateErrors.concat(tokenNameErrors, nestedRulesNameErrors, nestedRulesDuplicateErrors, emptyRepetitionErrors, leftRecursionErrors, emptyAltErrors, ambiguousAltsErrors, termsNamespaceConflictErrors, tooManyAltsErrors, ruleNameErrors, duplicateRulesError)));
}
function validateNestedRulesNames(topLevels, errMsgProvider) {
    var result = [];
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(topLevels, function (curTopLevel) {
        var namedCollectorVisitor = new _cst_cst__WEBPACK_IMPORTED_MODULE_4__["NamedDSLMethodsCollectorVisitor"]("");
        curTopLevel.accept(namedCollectorVisitor);
        var nestedProds = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(namedCollectorVisitor.result, function (currItem) { return currItem.orgProd; });
        result.push(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(nestedProds, function (currNestedProd) {
            return validateNestedRuleName(curTopLevel, currNestedProd, errMsgProvider);
        }));
    });
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(result);
}
function validateDuplicateProductions(topLevelRule, errMsgProvider) {
    var collectorVisitor = new OccurrenceValidationCollector();
    topLevelRule.accept(collectorVisitor);
    var allRuleProductions = collectorVisitor.allProductions;
    var productionGroups = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["groupBy"](allRuleProductions, identifyProductionForDuplicates);
    var duplicates = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"](productionGroups, function (currGroup) {
        return currGroup.length > 1;
    });
    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"](duplicates), function (currDuplicates) {
        var firstProd = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["first"](currDuplicates);
        var msg = errMsgProvider.buildDuplicateFoundError(topLevelRule, currDuplicates);
        var dslName = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["getProductionDslName"])(firstProd);
        var defError = {
            message: msg,
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].DUPLICATE_PRODUCTIONS,
            ruleName: topLevelRule.name,
            dslName: dslName,
            occurrence: firstProd.idx
        };
        var param = getExtraProductionArgument(firstProd);
        if (param) {
            defError.parameter = param;
        }
        return defError;
    });
    return errors;
}
function identifyProductionForDuplicates(prod) {
    return Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["getProductionDslName"])(prod) + "_#_" + prod.idx + "_#_" + getExtraProductionArgument(prod);
}
function getExtraProductionArgument(prod) {
    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Terminal"]) {
        return prod.terminalType.name;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["NonTerminal"]) {
        return prod.nonTerminalName;
    }
    else {
        return "";
    }
}
var OccurrenceValidationCollector = /** @class */ (function (_super) {
    __extends(OccurrenceValidationCollector, _super);
    function OccurrenceValidationCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    OccurrenceValidationCollector.prototype.visitNonTerminal = function (subrule) {
        this.allProductions.push(subrule);
    };
    OccurrenceValidationCollector.prototype.visitOption = function (option) {
        this.allProductions.push(option);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    OccurrenceValidationCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    OccurrenceValidationCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    OccurrenceValidationCollector.prototype.visitAlternation = function (or) {
        this.allProductions.push(or);
    };
    OccurrenceValidationCollector.prototype.visitTerminal = function (terminal) {
        this.allProductions.push(terminal);
    };
    return OccurrenceValidationCollector;
}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__["GAstVisitor"]));

var validTermsPattern = /^[a-zA-Z_]\w*$/;
var validNestedRuleName = new RegExp(validTermsPattern.source.replace("^", "^\\$"));
// TODO: remove this limitation now that we use recorders
function validateRuleName(rule, errMsgProvider) {
    var errors = [];
    var ruleName = rule.name;
    if (!ruleName.match(validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildInvalidRuleNameError({
                topLevelRule: rule,
                expectedPattern: validTermsPattern
            }),
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].INVALID_RULE_NAME,
            ruleName: ruleName
        });
    }
    return errors;
}
// TODO: did the nested rule name regExp now change?
function validateNestedRuleName(topLevel, nestedProd, errMsgProvider) {
    var errors = [];
    var errMsg;
    if (!nestedProd.name.match(validNestedRuleName)) {
        errMsg = errMsgProvider.buildInvalidNestedRuleNameError(topLevel, nestedProd);
        errors.push({
            message: errMsg,
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].INVALID_NESTED_RULE_NAME,
            ruleName: topLevel.name
        });
    }
    return errors;
}
// TODO: remove this limitation now that we use recorders
function validateTokenName(tokenType, errMsgProvider) {
    var errors = [];
    var tokTypeName = tokenType.name;
    if (!tokTypeName.match(validTermsPattern)) {
        errors.push({
            message: errMsgProvider.buildTokenNameError({
                tokenType: tokenType,
                expectedPattern: validTermsPattern
            }),
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].INVALID_TOKEN_NAME
        });
    }
    return errors;
}
function validateRuleDoesNotAlreadyExist(rule, allRules, className, errMsgProvider) {
    var errors = [];
    var occurrences = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(allRules, function (result, curRule) {
        if (curRule.name === rule.name) {
            return result + 1;
        }
        return result;
    }, 0);
    if (occurrences > 1) {
        var errMsg = errMsgProvider.buildDuplicateRuleNameError({
            topLevelRule: rule,
            grammarName: className
        });
        errors.push({
            message: errMsg,
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].DUPLICATE_RULE_NAME,
            ruleName: rule.name
        });
    }
    return errors;
}
// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?
// This is not part of the IGrammarErrorProvider because the validation cannot be performed on
// The grammar structure, only at runtime.
function validateRuleIsOverridden(ruleName, definedRulesNames, className) {
    var errors = [];
    var errMsg;
    if (!_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"](definedRulesNames, ruleName)) {
        errMsg =
            "Invalid rule override, rule: ->" + ruleName + "<- cannot be overridden in the grammar: ->" + className + "<-" +
                "as it is not defined in any of the super grammars ";
        errors.push({
            message: errMsg,
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].INVALID_RULE_OVERRIDE,
            ruleName: ruleName
        });
    }
    return errors;
}
function validateNoLeftRecursion(topRule, currRule, errMsgProvider, path) {
    if (path === void 0) { path = []; }
    var errors = [];
    var nextNonTerminals = getFirstNoneTerminal(currRule.definition);
    if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"](nextNonTerminals)) {
        return [];
    }
    else {
        var ruleName = topRule.name;
        var foundLeftRecursion = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"](nextNonTerminals, topRule);
        if (foundLeftRecursion) {
            errors.push({
                message: errMsgProvider.buildLeftRecursionError({
                    topLevelRule: topRule,
                    leftRecursionPath: path
                }),
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].LEFT_RECURSION,
                ruleName: ruleName
            });
        }
        // we are only looking for cyclic paths leading back to the specific topRule
        // other cyclic paths are ignored, we still need this difference to avoid infinite loops...
        var validNextSteps = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["difference"](nextNonTerminals, path.concat([topRule]));
        var errorsFromNextSteps = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](validNextSteps, function (currRefRule) {
            var newPath = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneArr"](path);
            newPath.push(currRefRule);
            return validateNoLeftRecursion(topRule, currRefRule, errMsgProvider, newPath);
        });
        return errors.concat(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"](errorsFromNextSteps));
    }
}
function getFirstNoneTerminal(definition) {
    var result = [];
    if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"](definition)) {
        return result;
    }
    var firstProd = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["first"](definition);
    /* istanbul ignore else */
    if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["NonTerminal"]) {
        result.push(firstProd.referencedRule);
    }
    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Flat"] ||
        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Option"] ||
        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["RepetitionMandatory"] ||
        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["RepetitionMandatoryWithSeparator"] ||
        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["RepetitionWithSeparator"] ||
        firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Repetition"]) {
        result = result.concat(getFirstNoneTerminal(firstProd.definition));
    }
    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Alternation"]) {
        // each sub definition in alternation is a FLAT
        result = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"](_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](firstProd.definition, function (currSubDef) {
            return getFirstNoneTerminal(currSubDef.definition);
        }));
    }
    else if (firstProd instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_6__["Terminal"]) {
        // nothing to see, move along
    }
    else {
        throw Error("non exhaustive match");
    }
    var isFirstOptional = Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["isOptionalProd"])(firstProd);
    var hasMore = definition.length > 1;
    if (isFirstOptional && hasMore) {
        var rest = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["drop"](definition);
        return result.concat(getFirstNoneTerminal(rest));
    }
    else {
        return result;
    }
}
var OrCollector = /** @class */ (function (_super) {
    __extends(OrCollector, _super);
    function OrCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.alternations = [];
        return _this;
    }
    OrCollector.prototype.visitAlternation = function (node) {
        this.alternations.push(node);
    };
    return OrCollector;
}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__["GAstVisitor"]));
function validateEmptyOrAlternative(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"](ors, function (errors, currOr) {
        var exceptLast = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["dropRight"](currOr.definition);
        var currErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](exceptLast, function (currAlternative, currAltIdx) {
            var possibleFirstInAlt = Object(_interpreter__WEBPACK_IMPORTED_MODULE_5__["nextPossibleTokensAfter"])([currAlternative], [], null, 1);
            if (_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"](possibleFirstInAlt)) {
                return {
                    message: errMsgProvider.buildEmptyAlternationError({
                        topLevelRule: topLevelRule,
                        alternation: currOr,
                        emptyChoiceIdx: currAltIdx
                    }),
                    type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].NONE_LAST_EMPTY_ALT,
                    ruleName: topLevelRule.name,
                    occurrence: currOr.idx,
                    alternative: currAltIdx + 1
                };
            }
            else {
                return null;
            }
        });
        return errors.concat(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["compact"](currErrors));
    }, []);
    return errors;
}
function validateAmbiguousAlternationAlternatives(topLevelRule, globalMaxLookahead, ignoredIssues, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    // TODO: this filtering should be deprecated once we remove the ignoredIssues
    //  IParserConfig property
    var ignoredIssuesForCurrentRule = ignoredIssues[topLevelRule.name];
    if (ignoredIssuesForCurrentRule) {
        ors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reject"])(ors, function (currOr) {
            return ignoredIssuesForCurrentRule[Object(_gast_gast__WEBPACK_IMPORTED_MODULE_2__["getProductionDslName"])(currOr) +
                (currOr.idx === 0 ? "" : currOr.idx)];
        });
    }
    // New Handling of ignoring ambiguities
    // - https://github.com/SAP/chevrotain/issues/869
    ors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reject"])(ors, function (currOr) { return currOr.ignoreAmbiguities === true; });
    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"](ors, function (result, currOr) {
        var currOccurrence = currOr.idx;
        var actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;
        var alternatives = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["getLookaheadPathsForOr"])(currOccurrence, topLevelRule, actualMaxLookahead, currOr);
        var altsAmbiguityErrors = checkAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        var altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(alternatives, currOr, topLevelRule, errMsgProvider);
        return result.concat(altsAmbiguityErrors, altsPrefixAmbiguityErrors);
    }, []);
    return errors;
}
var RepetionCollector = /** @class */ (function (_super) {
    __extends(RepetionCollector, _super);
    function RepetionCollector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.allProductions = [];
        return _this;
    }
    RepetionCollector.prototype.visitRepetitionWithSeparator = function (manySep) {
        this.allProductions.push(manySep);
    };
    RepetionCollector.prototype.visitRepetitionMandatory = function (atLeastOne) {
        this.allProductions.push(atLeastOne);
    };
    RepetionCollector.prototype.visitRepetitionMandatoryWithSeparator = function (atLeastOneSep) {
        this.allProductions.push(atLeastOneSep);
    };
    RepetionCollector.prototype.visitRepetition = function (many) {
        this.allProductions.push(many);
    };
    return RepetionCollector;
}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_7__["GAstVisitor"]));

function validateTooManyAlts(topLevelRule, errMsgProvider) {
    var orCollector = new OrCollector();
    topLevelRule.accept(orCollector);
    var ors = orCollector.alternations;
    var errors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"](ors, function (errors, currOr) {
        if (currOr.definition.length > 255) {
            errors.push({
                message: errMsgProvider.buildTooManyAlternativesError({
                    topLevelRule: topLevelRule,
                    alternation: currOr
                }),
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].TOO_MANY_ALTS,
                ruleName: topLevelRule.name,
                occurrence: currOr.idx
            });
        }
        return errors;
    }, []);
    return errors;
}
function validateSomeNonEmptyLookaheadPath(topLevelRules, maxLookahead, errMsgProvider) {
    var errors = [];
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(topLevelRules, function (currTopRule) {
        var collectorVisitor = new RepetionCollector();
        currTopRule.accept(collectorVisitor);
        var allRuleProductions = collectorVisitor.allProductions;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(allRuleProductions, function (currProd) {
            var prodType = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["getProdType"])(currProd);
            var actualMaxLookahead = currProd.maxLookahead || maxLookahead;
            var currOccurrence = currProd.idx;
            var paths = Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["getLookaheadPathsForOptionalProd"])(currOccurrence, currTopRule, prodType, actualMaxLookahead);
            var pathsInsideProduction = paths[0];
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(pathsInsideProduction))) {
                var errMsg = errMsgProvider.buildEmptyRepetitionError({
                    topLevelRule: currTopRule,
                    repetition: currProd
                });
                errors.push({
                    message: errMsg,
                    type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].NO_NON_EMPTY_LOOKAHEAD,
                    ruleName: currTopRule.name
                });
            }
        });
    });
    return errors;
}
function checkAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var foundAmbiguousPaths = [];
    var identicalAmbiguities = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(alternatives, function (result, currAlt, currAltIdx) {
        // ignore (skip) ambiguities with this alternative
        if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {
            return result;
        }
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currAlt, function (currPath) {
            var altsCurrPathAppearsIn = [currAltIdx];
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(alternatives, function (currOtherAlt, currOtherAltIdx) {
                if (currAltIdx !== currOtherAltIdx &&
                    Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["containsPath"])(currOtherAlt, currPath) &&
                    // ignore (skip) ambiguities with this "other" alternative
                    alternation.definition[currOtherAltIdx]
                        .ignoreAmbiguities !== true) {
                    altsCurrPathAppearsIn.push(currOtherAltIdx);
                }
            });
            if (altsCurrPathAppearsIn.length > 1 &&
                !Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["containsPath"])(foundAmbiguousPaths, currPath)) {
                foundAmbiguousPaths.push(currPath);
                result.push({
                    alts: altsCurrPathAppearsIn,
                    path: currPath
                });
            }
        });
        return result;
    }, []);
    var currErrors = _utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"](identicalAmbiguities, function (currAmbDescriptor) {
        var ambgIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(currAmbDescriptor.alts, function (currAltIdx) { return currAltIdx + 1; });
        var currMessage = errMsgProvider.buildAlternationAmbiguityError({
            topLevelRule: rule,
            alternation: alternation,
            ambiguityIndices: ambgIndices,
            prefixPath: currAmbDescriptor.path
        });
        return {
            message: currMessage,
            type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].AMBIGUOUS_ALTS,
            ruleName: rule.name,
            occurrence: alternation.idx,
            alternatives: [currAmbDescriptor.alts]
        };
    });
    return currErrors;
}
function checkPrefixAlternativesAmbiguities(alternatives, alternation, rule, errMsgProvider) {
    var errors = [];
    // flatten
    var pathsAndIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(alternatives, function (result, currAlt, idx) {
        var currPathsAndIdx = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(currAlt, function (currPath) {
            return { idx: idx, path: currPath };
        });
        return result.concat(currPathsAndIdx);
    }, []);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(pathsAndIndices, function (currPathAndIdx) {
        var alternativeGast = alternation.definition[currPathAndIdx.idx];
        // ignore (skip) ambiguities with this alternative
        if (alternativeGast.ignoreAmbiguities === true) {
            return;
        }
        var targetIdx = currPathAndIdx.idx;
        var targetPath = currPathAndIdx.path;
        var prefixAmbiguitiesPathsAndIndices = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["findAll"])(pathsAndIndices, function (searchPathAndIdx) {
            // prefix ambiguity can only be created from lower idx (higher priority) path
            return (
            // ignore (skip) ambiguities with this "other" alternative
            alternation.definition[searchPathAndIdx.idx]
                .ignoreAmbiguities !== true &&
                searchPathAndIdx.idx < targetIdx &&
                // checking for strict prefix because identical lookaheads
                // will be be detected using a different validation.
                Object(_lookahead__WEBPACK_IMPORTED_MODULE_3__["isStrictPrefixOfPath"])(searchPathAndIdx.path, targetPath));
        });
        var currPathPrefixErrors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(prefixAmbiguitiesPathsAndIndices, function (currAmbPathAndIdx) {
            var ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];
            var occurrence = alternation.idx === 0 ? "" : alternation.idx;
            var message = errMsgProvider.buildAlternationPrefixAmbiguityError({
                topLevelRule: rule,
                alternation: alternation,
                ambiguityIndices: ambgIndices,
                prefixPath: currAmbPathAndIdx.path
            });
            return {
                message: message,
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].AMBIGUOUS_PREFIX_ALTS,
                ruleName: rule.name,
                occurrence: occurrence,
                alternatives: ambgIndices
            };
        });
        errors = errors.concat(currPathPrefixErrors);
    });
    return errors;
}
function checkTerminalAndNoneTerminalsNameSpace(topLevels, tokenTypes, errMsgProvider) {
    var errors = [];
    var tokenNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(tokenTypes, function (currToken) { return currToken.name; });
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(topLevels, function (currRule) {
        var currRuleName = currRule.name;
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(tokenNames, currRuleName)) {
            var errMsg = errMsgProvider.buildNamespaceConflictError(currRule);
            errors.push({
                message: errMsg,
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].CONFLICT_TOKENS_RULES_NAMESPACE,
                ruleName: currRuleName
            });
        }
    });
    return errors;
}
function validateDuplicateNestedRules(topLevelRules, errMsgProvider) {
    var errors = [];
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(topLevelRules, function (currTopRule) {
        var namedCollectorVisitor = new _cst_cst__WEBPACK_IMPORTED_MODULE_4__["NamedDSLMethodsCollectorVisitor"]("");
        currTopRule.accept(namedCollectorVisitor);
        var prodsByGroup = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["groupBy"])(namedCollectorVisitor.result, function (item) { return item.name; });
        var duplicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["pick"])(prodsByGroup, function (currGroup) {
            return currGroup.length > 1;
        });
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(duplicates), function (currDupGroup) {
            var currDupProds = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(currDupGroup, function (dupGroup) { return dupGroup.orgProd; });
            var errMsg = errMsgProvider.buildDuplicateNestedRuleNameError(currTopRule, currDupProds);
            errors.push({
                message: errMsg,
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_1__["ParserDefinitionErrorType"].DUPLICATE_NESTED_NAME,
                ruleName: currTopRule.name
            });
        });
    });
    return errors;
}
//# sourceMappingURL=checks.js.map

/***/ }),
/* 207 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PROD_TYPE", function() { return PROD_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getProdType", function() { return getProdType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildLookaheadFuncForOr", function() { return buildLookaheadFuncForOr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildLookaheadFuncForOptionalProd", function() { return buildLookaheadFuncForOptionalProd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildAlternativesLookAheadFunc", function() { return buildAlternativesLookAheadFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildSingleAlternativeLookaheadFunction", function() { return buildSingleAlternativeLookaheadFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lookAheadSequenceFromAlternatives", function() { return lookAheadSequenceFromAlternatives; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLookaheadPathsForOr", function() { return getLookaheadPathsForOr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLookaheadPathsForOptionalProd", function() { return getLookaheadPathsForOptionalProd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "containsPath", function() { return containsPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isStrictPrefixOfPath", function() { return isStrictPrefixOfPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "areTokenCategoriesNotUsed", function() { return areTokenCategoriesNotUsed; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _interpreter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(208);
/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(189);
/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(197);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(190);
/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(201);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();






var PROD_TYPE;
(function (PROD_TYPE) {
    PROD_TYPE[PROD_TYPE["OPTION"] = 0] = "OPTION";
    PROD_TYPE[PROD_TYPE["REPETITION"] = 1] = "REPETITION";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY"] = 2] = "REPETITION_MANDATORY";
    PROD_TYPE[PROD_TYPE["REPETITION_MANDATORY_WITH_SEPARATOR"] = 3] = "REPETITION_MANDATORY_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["REPETITION_WITH_SEPARATOR"] = 4] = "REPETITION_WITH_SEPARATOR";
    PROD_TYPE[PROD_TYPE["ALTERNATION"] = 5] = "ALTERNATION";
})(PROD_TYPE || (PROD_TYPE = {}));
function getProdType(prod) {
    /* istanbul ignore else */
    if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Option"]) {
        return PROD_TYPE.OPTION;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Repetition"]) {
        return PROD_TYPE.REPETITION;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["RepetitionMandatory"]) {
        return PROD_TYPE.REPETITION_MANDATORY;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["RepetitionMandatoryWithSeparator"]) {
        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["RepetitionWithSeparator"]) {
        return PROD_TYPE.REPETITION_WITH_SEPARATOR;
    }
    else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Alternation"]) {
        return PROD_TYPE.ALTERNATION;
    }
    else {
        throw Error("non exhaustive match");
    }
}
function buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {
    var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? _scan_tokens__WEBPACK_IMPORTED_MODULE_3__["tokenStructuredMatcherNoCategories"]
        : _scan_tokens__WEBPACK_IMPORTED_MODULE_3__["tokenStructuredMatcher"];
    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);
}
/**
 *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare
 *  the lookahead "inside" the production and the lookahead immediately "after" it in the same top level rule (context free).
 *
 *  Example: given a production:
 *  ABC(DE)?DF
 *
 *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two
 *  alternatives.
 *
 *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.
 */
function buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {
    var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);
    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)
        ? _scan_tokens__WEBPACK_IMPORTED_MODULE_3__["tokenStructuredMatcherNoCategories"]
        : _scan_tokens__WEBPACK_IMPORTED_MODULE_3__["tokenStructuredMatcher"];
    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);
}
function buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
    var numOfAlts = alts.length;
    var areAllOneTokenLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(alts, function (currAlt) {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(currAlt, function (currPath) {
            return currPath.length === 1;
        });
    });
    // This version takes into account the predicates as well.
    if (hasPredicates) {
        /**
         * @returns {number} - The chosen alternative index
         */
        return function (orAlts) {
            // unfortunately the predicates must be extracted every single time
            // as they cannot be cached due to references to parameters(vars) which are no longer valid.
            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)
            var predicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(orAlts, function (currAlt) { return currAlt.GATE; });
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                var currPredicate = predicates[t];
                if (currPredicate !== undefined &&
                    currPredicate.call(this) === false) {
                    // if the predicate does not match there is no point in checking the paths
                    continue;
                }
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        // optimized (common) case of all the lookaheads paths requiring only
        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.
        var singleTokenAlts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(alts, function (currAlt) {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(currAlt);
        });
        var choiceToAlt_1 = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(singleTokenAlts, function (result, currAlt, idx) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currAlt, function (currTokType) {
                if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(result, currTokType.tokenTypeIdx)) {
                    result[currTokType.tokenTypeIdx] = idx;
                }
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currTokType.categoryMatches, function (currExtendingType) {
                    if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(result, currExtendingType)) {
                        result[currExtendingType] = idx;
                    }
                });
            });
            return result;
        }, []);
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            var nextToken = this.LA(1);
            return choiceToAlt_1[nextToken.tokenTypeIdx];
        };
    }
    else {
        // optimized lookahead without needing to check the predicates at all.
        // this causes code duplication which is intentional to improve performance.
        /**
         * @returns {number} - The chosen alternative index
         */
        return function () {
            for (var t = 0; t < numOfAlts; t++) {
                var currAlt = alts[t];
                var currNumOfPaths = currAlt.length;
                nextPath: for (var j = 0; j < currNumOfPaths; j++) {
                    var currPath = currAlt[j];
                    var currPathLength = currPath.length;
                    for (var i = 0; i < currPathLength; i++) {
                        var nextToken = this.LA(i + 1);
                        if (tokenMatcher(nextToken, currPath[i]) === false) {
                            // mismatch in current path
                            // try the next pth
                            continue nextPath;
                        }
                    }
                    // found a full path that matches.
                    // this will also work for an empty ALT as the loop will be skipped
                    return t;
                }
                // none of the paths for the current alternative matched
                // try the next alternative
            }
            // none of the alternatives could be matched
            return undefined;
        };
    }
}
function buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {
    var areAllOneTokenLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(alt, function (currPath) {
        return currPath.length === 1;
    });
    var numOfPaths = alt.length;
    // optimized (common) case of all the lookaheads paths requiring only
    // a single token lookahead.
    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {
        var singleTokensTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(alt);
        if (singleTokensTypes.length === 1 &&
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(singleTokensTypes[0].categoryMatches)) {
            var expectedTokenType = singleTokensTypes[0];
            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;
            return function () {
                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;
            };
        }
        else {
            var choiceToAlt_2 = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(singleTokensTypes, function (result, currTokType, idx) {
                result[currTokType.tokenTypeIdx] = true;
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currTokType.categoryMatches, function (currExtendingType) {
                    result[currExtendingType] = true;
                });
                return result;
            }, []);
            return function () {
                var nextToken = this.LA(1);
                return choiceToAlt_2[nextToken.tokenTypeIdx] === true;
            };
        }
    }
    else {
        return function () {
            nextPath: for (var j = 0; j < numOfPaths; j++) {
                var currPath = alt[j];
                var currPathLength = currPath.length;
                for (var i = 0; i < currPathLength; i++) {
                    var nextToken = this.LA(i + 1);
                    if (tokenMatcher(nextToken, currPath[i]) === false) {
                        // mismatch in current path
                        // try the next pth
                        continue nextPath;
                    }
                }
                // found a full path that matches.
                return true;
            }
            // none of the paths matched
            return false;
        };
    }
}
var RestDefinitionFinderWalker = /** @class */ (function (_super) {
    __extends(RestDefinitionFinderWalker, _super);
    function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        return _this;
    }
    RestDefinitionFinderWalker.prototype.startWalking = function () {
        this.walk(this.topProd);
        return this.restDef;
    };
    RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdType) {
            this.restDef = currRest.concat(prevRest);
            return true;
        }
        // performance optimization, do not iterate over the entire Grammar ast after we have found the target
        return false;
    };
    RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {
        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {
        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);
        }
    };
    RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {
            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);
        }
    };
    return RestDefinitionFinderWalker;
}(_rest__WEBPACK_IMPORTED_MODULE_2__["RestWalker"]));
/**
 * Returns the definition of a target production in a top level level rule.
 */
var InsideDefinitionFinderVisitor = /** @class */ (function (_super) {
    __extends(InsideDefinitionFinderVisitor, _super);
    function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {
        var _this = _super.call(this) || this;
        _this.targetOccurrence = targetOccurrence;
        _this.targetProdType = targetProdType;
        _this.targetRef = targetRef;
        _this.result = [];
        return _this;
    }
    InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {
        if (node.idx === this.targetOccurrence &&
            this.targetProdType === expectedProdName &&
            (this.targetRef === undefined || node === this.targetRef)) {
            this.result = node.definition;
        }
    };
    InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {
        this.checkIsTarget(node, PROD_TYPE.OPTION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {
        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);
    };
    InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {
        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);
    };
    return InsideDefinitionFinderVisitor;
}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_5__["GAstVisitor"]));
function initializeArrayOfArrays(size) {
    var result = new Array(size);
    for (var i = 0; i < size; i++) {
        result[i] = [];
    }
    return result;
}
/**
 * A sort of hash function between a Path in the grammar and a string.
 * Note that this returns multiple "hashes" to support the scenario of token categories.
 * -  A single path with categories may match multiple **actual** paths.
 */
function pathToHashKeys(path) {
    var keys = [""];
    for (var i = 0; i < path.length; i++) {
        var tokType = path[i];
        var longerKeys = [];
        for (var j = 0; j < keys.length; j++) {
            var currShorterKey = keys[j];
            longerKeys.push(currShorterKey + "_" + tokType.tokenTypeIdx);
            for (var t = 0; t < tokType.categoryMatches.length; t++) {
                var categoriesKeySuffix = "_" + tokType.categoryMatches[t];
                longerKeys.push(currShorterKey + categoriesKeySuffix);
            }
        }
        keys = longerKeys;
    }
    return keys;
}
/**
 * Imperative style due to being called from a hot spot
 */
function isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {
    for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {
        // We only want to test vs the other alternatives
        if (currAltIdx === idx) {
            continue;
        }
        var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];
        for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {
            var searchKey = searchPathKeys[searchIdx];
            if (otherAltKnownPathsKeys[searchKey] === true) {
                return false;
            }
        }
    }
    // None of the SearchPathKeys were found in any of the other alternatives
    return true;
}
function lookAheadSequenceFromAlternatives(altsDefs, k) {
    var partialAlts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(altsDefs, function (currAlt) { return Object(_interpreter__WEBPACK_IMPORTED_MODULE_1__["possiblePathsFrom"])([currAlt], 1); });
    var finalResult = initializeArrayOfArrays(partialAlts.length);
    var altsHashes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(partialAlts, function (currAltPaths) {
        var dict = {};
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(currAltPaths, function (item) {
            var keys = pathToHashKeys(item.partialPath);
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(keys, function (currKey) {
                dict[currKey] = true;
            });
        });
        return dict;
    });
    var newData = partialAlts;
    // maxLookahead loop
    for (var pathLength = 1; pathLength <= k; pathLength++) {
        var currDataset = newData;
        newData = initializeArrayOfArrays(currDataset.length);
        var _loop_1 = function (altIdx) {
            var currAltPathsAndSuffixes = currDataset[altIdx];
            // paths in current alternative loop
            for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {
                var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;
                var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;
                var prefixKeys = pathToHashKeys(currPathPrefix);
                var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);
                // End of the line for this path.
                if (isUnique ||
                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(suffixDef) ||
                    currPathPrefix.length === k) {
                    var currAltResult = finalResult[altIdx];
                    // TODO: Can we implement a containsPath using Maps/Dictionaries?
                    if (containsPath(currAltResult, currPathPrefix) === false) {
                        currAltResult.push(currPathPrefix);
                        // Update all new  keys for the current path.
                        for (var j = 0; j < prefixKeys.length; j++) {
                            var currKey = prefixKeys[j];
                            altsHashes[altIdx][currKey] = true;
                        }
                    }
                }
                // Expand longer paths
                else {
                    var newPartialPathsAndSuffixes = Object(_interpreter__WEBPACK_IMPORTED_MODULE_1__["possiblePathsFrom"])(suffixDef, pathLength + 1, currPathPrefix);
                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);
                    // Update keys for new known paths
                    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(newPartialPathsAndSuffixes, function (item) {
                        var prefixKeys = pathToHashKeys(item.partialPath);
                        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(prefixKeys, function (key) {
                            altsHashes[altIdx][key] = true;
                        });
                    });
                }
            }
        };
        // alternatives loop
        for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {
            _loop_1(altIdx);
        }
    }
    return finalResult;
}
function getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {
    var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);
    ruleGrammar.accept(visitor);
    return lookAheadSequenceFromAlternatives(visitor.result, k);
}
function getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {
    var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);
    ruleGrammar.accept(insideDefVisitor);
    var insideDef = insideDefVisitor.result;
    var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);
    var afterDef = afterDefWalker.startWalking();
    var insideFlat = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Flat"]({ definition: insideDef });
    var afterFlat = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_4__["Flat"]({ definition: afterDef });
    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);
}
function containsPath(alternative, searchPath) {
    compareOtherPath: for (var i = 0; i < alternative.length; i++) {
        var otherPath = alternative[i];
        if (otherPath.length !== searchPath.length) {
            continue;
        }
        for (var j = 0; j < otherPath.length; j++) {
            var searchTok = searchPath[j];
            var otherTok = otherPath[j];
            var matchingTokens = searchTok === otherTok ||
                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !==
                    undefined;
            if (matchingTokens === false) {
                continue compareOtherPath;
            }
        }
        return true;
    }
    return false;
}
function isStrictPrefixOfPath(prefix, other) {
    return (prefix.length < other.length &&
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(prefix, function (tokType, idx) {
            var otherTokType = other[idx];
            return (tokType === otherTokType ||
                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);
        }));
}
function areTokenCategoriesNotUsed(lookAheadPaths) {
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(lookAheadPaths, function (singleAltPaths) {
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(singleAltPaths, function (singlePath) {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(singlePath, function (token) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(token.categoryMatches); });
        });
    });
}
//# sourceMappingURL=lookahead.js.map

/***/ }),
/* 208 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractNextPossibleTokensWalker", function() { return AbstractNextPossibleTokensWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextAfterTokenWalker", function() { return NextAfterTokenWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AbstractNextTerminalAfterProductionWalker", function() { return AbstractNextTerminalAfterProductionWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextTerminalAfterManyWalker", function() { return NextTerminalAfterManyWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextTerminalAfterManySepWalker", function() { return NextTerminalAfterManySepWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextTerminalAfterAtLeastOneWalker", function() { return NextTerminalAfterAtLeastOneWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NextTerminalAfterAtLeastOneSepWalker", function() { return NextTerminalAfterAtLeastOneSepWalker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "possiblePathsFrom", function() { return possiblePathsFrom; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nextPossibleTokensAfter", function() { return nextPossibleTokensAfter; });
/* harmony import */ var _rest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(189);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _first__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(199);
/* harmony import */ var _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(190);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var AbstractNextPossibleTokensWalker = /** @class */ (function (_super) {
    __extends(AbstractNextPossibleTokensWalker, _super);
    function AbstractNextPossibleTokensWalker(topProd, path) {
        var _this = _super.call(this) || this;
        _this.topProd = topProd;
        _this.path = path;
        _this.possibleTokTypes = [];
        _this.nextProductionName = "";
        _this.nextProductionOccurrence = 0;
        _this.found = false;
        _this.isAtEndOfPath = false;
        return _this;
    }
    AbstractNextPossibleTokensWalker.prototype.startWalking = function () {
        this.found = false;
        if (this.path.ruleStack[0] !== this.topProd.name) {
            throw Error("The path does not start with the walker's top Rule!");
        }
        // immutable for the win
        this.ruleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(this.path.ruleStack).reverse(); // intelij bug requires assertion
        this.occurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(this.path.occurrenceStack).reverse(); // intelij bug requires assertion
        // already verified that the first production is valid, we now seek the 2nd production
        this.ruleStack.pop();
        this.occurrenceStack.pop();
        this.updateExpectedNext();
        this.walk(this.topProd);
        return this.possibleTokTypes;
    };
    AbstractNextPossibleTokensWalker.prototype.walk = function (prod, prevRest) {
        if (prevRest === void 0) { prevRest = []; }
        // stop scanning once we found the path
        if (!this.found) {
            _super.prototype.walk.call(this, prod, prevRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.walkProdRef = function (refProd, currRest, prevRest) {
        // found the next production, need to keep walking in it
        if (refProd.referencedRule.name === this.nextProductionName &&
            refProd.idx === this.nextProductionOccurrence) {
            var fullRest = currRest.concat(prevRest);
            this.updateExpectedNext();
            this.walk(refProd.referencedRule, fullRest);
        }
    };
    AbstractNextPossibleTokensWalker.prototype.updateExpectedNext = function () {
        // need to consume the Terminal
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(this.ruleStack)) {
            // must reset nextProductionXXX to avoid walking down another Top Level production while what we are
            // really seeking is the last Terminal...
            this.nextProductionName = "";
            this.nextProductionOccurrence = 0;
            this.isAtEndOfPath = true;
        }
        else {
            this.nextProductionName = this.ruleStack.pop();
            this.nextProductionOccurrence = this.occurrenceStack.pop();
        }
    };
    return AbstractNextPossibleTokensWalker;
}(_rest__WEBPACK_IMPORTED_MODULE_0__["RestWalker"]));

var NextAfterTokenWalker = /** @class */ (function (_super) {
    __extends(NextAfterTokenWalker, _super);
    function NextAfterTokenWalker(topProd, path) {
        var _this = _super.call(this, topProd, path) || this;
        _this.path = path;
        _this.nextTerminalName = "";
        _this.nextTerminalOccurrence = 0;
        _this.nextTerminalName = _this.path.lastTok.name;
        _this.nextTerminalOccurrence = _this.path.lastTokOccurrence;
        return _this;
    }
    NextAfterTokenWalker.prototype.walkTerminal = function (terminal, currRest, prevRest) {
        if (this.isAtEndOfPath &&
            terminal.terminalType.name === this.nextTerminalName &&
            terminal.idx === this.nextTerminalOccurrence &&
            !this.found) {
            var fullRest = currRest.concat(prevRest);
            var restProd = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Flat"]({ definition: fullRest });
            this.possibleTokTypes = Object(_first__WEBPACK_IMPORTED_MODULE_2__["first"])(restProd);
            this.found = true;
        }
    };
    return NextAfterTokenWalker;
}(AbstractNextPossibleTokensWalker));

/**
 * This walker only "walks" a single "TOP" level in the Grammar Ast, this means
 * it never "follows" production refs
 */
var AbstractNextTerminalAfterProductionWalker = /** @class */ (function (_super) {
    __extends(AbstractNextTerminalAfterProductionWalker, _super);
    function AbstractNextTerminalAfterProductionWalker(topRule, occurrence) {
        var _this = _super.call(this) || this;
        _this.topRule = topRule;
        _this.occurrence = occurrence;
        _this.result = {
            token: undefined,
            occurrence: undefined,
            isEndOfRule: undefined
        };
        return _this;
    }
    AbstractNextTerminalAfterProductionWalker.prototype.startWalking = function () {
        this.walk(this.topRule);
        return this.result;
    };
    return AbstractNextTerminalAfterProductionWalker;
}(_rest__WEBPACK_IMPORTED_MODULE_0__["RestWalker"]));

var NextTerminalAfterManyWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManyWalker, _super);
    function NextTerminalAfterManyWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NextTerminalAfterManyWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {
        if (manyProd.idx === this.occurrence) {
            var firstAfterMany = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterMany === undefined;
            if (firstAfterMany instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
                this.result.token = firstAfterMany.terminalType;
                this.result.occurrence = firstAfterMany.idx;
            }
        }
        else {
            _super.prototype.walkMany.call(this, manyProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManyWalker;
}(AbstractNextTerminalAfterProductionWalker));

var NextTerminalAfterManySepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterManySepWalker, _super);
    function NextTerminalAfterManySepWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NextTerminalAfterManySepWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {
        if (manySepProd.idx === this.occurrence) {
            var firstAfterManySep = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterManySep === undefined;
            if (firstAfterManySep instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
                this.result.token = firstAfterManySep.terminalType;
                this.result.occurrence = firstAfterManySep.idx;
            }
        }
        else {
            _super.prototype.walkManySep.call(this, manySepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterManySepWalker;
}(AbstractNextTerminalAfterProductionWalker));

var NextTerminalAfterAtLeastOneWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneWalker, _super);
    function NextTerminalAfterAtLeastOneWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NextTerminalAfterAtLeastOneWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {
        if (atLeastOneProd.idx === this.occurrence) {
            var firstAfterAtLeastOne = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(currRest.concat(prevRest));
            this.result.isEndOfRule = firstAfterAtLeastOne === undefined;
            if (firstAfterAtLeastOne instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
                this.result.token = firstAfterAtLeastOne.terminalType;
                this.result.occurrence = firstAfterAtLeastOne.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOne.call(this, atLeastOneProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneWalker;
}(AbstractNextTerminalAfterProductionWalker));

// TODO: reduce code duplication in the AfterWalkers
var NextTerminalAfterAtLeastOneSepWalker = /** @class */ (function (_super) {
    __extends(NextTerminalAfterAtLeastOneSepWalker, _super);
    function NextTerminalAfterAtLeastOneSepWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NextTerminalAfterAtLeastOneSepWalker.prototype.walkAtLeastOneSep = function (atleastOneSepProd, currRest, prevRest) {
        if (atleastOneSepProd.idx === this.occurrence) {
            var firstAfterfirstAfterAtLeastOneSep = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(currRest.concat(prevRest));
            this.result.isEndOfRule =
                firstAfterfirstAfterAtLeastOneSep === undefined;
            if (firstAfterfirstAfterAtLeastOneSep instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
                this.result.token =
                    firstAfterfirstAfterAtLeastOneSep.terminalType;
                this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;
            }
        }
        else {
            _super.prototype.walkAtLeastOneSep.call(this, atleastOneSepProd, currRest, prevRest);
        }
    };
    return NextTerminalAfterAtLeastOneSepWalker;
}(AbstractNextTerminalAfterProductionWalker));

function possiblePathsFrom(targetDef, maxLength, currPath) {
    if (currPath === void 0) { currPath = []; }
    // avoid side effects
    currPath = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(currPath);
    var result = [];
    var i = 0;
    // TODO: avoid inner funcs
    function remainingPathWith(nextDef) {
        return nextDef.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(targetDef, i + 1));
    }
    // TODO: avoid inner funcs
    function getAlternativesForProd(definition) {
        var alternatives = possiblePathsFrom(remainingPathWith(definition), maxLength, currPath);
        return result.concat(alternatives);
    }
    /**
     * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the
     * following (rest) of the targetDef.
     *
     * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the
     * the optional production.
     */
    while (currPath.length < maxLength && i < targetDef.length) {
        var prod = targetDef[i];
        /* istanbul ignore else */
        if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Flat"]) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["NonTerminal"]) {
            return getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Option"]) {
            result = getAlternativesForProd(prod.definition);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionMandatory"]) {
            var newDef = prod.definition.concat([
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                    definition: prod.definition
                })
            ]);
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionMandatoryWithSeparator"]) {
            var newDef = [
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Flat"]({ definition: prod.definition }),
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                    definition: [
                        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]({ terminalType: prod.separator })
                    ].concat(prod.definition)
                })
            ];
            return getAlternativesForProd(newDef);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionWithSeparator"]) {
            var newDef = prod.definition.concat([
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                    definition: [
                        new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]({ terminalType: prod.separator })
                    ].concat(prod.definition)
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]) {
            var newDef = prod.definition.concat([
                new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                    definition: prod.definition
                })
            ]);
            result = getAlternativesForProd(newDef);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Alternation"]) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(prod.definition, function (currAlt) {
                result = getAlternativesForProd(currAlt.definition);
            });
            return result;
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
            currPath.push(prod.terminalType);
        }
        else {
            throw Error("non exhaustive match");
        }
        i++;
    }
    result.push({
        partialPath: currPath,
        suffixDef: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(targetDef, i)
    });
    return result;
}
function nextPossibleTokensAfter(initialDef, tokenVector, tokMatcher, maxLookAhead) {
    var EXIT_NON_TERMINAL = "EXIT_NONE_TERMINAL";
    // to avoid creating a new Array each time.
    var EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];
    var EXIT_ALTERNATIVE = "EXIT_ALTERNATIVE";
    var foundCompletePath = false;
    var tokenVectorLength = tokenVector.length;
    var minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;
    var result = [];
    var possiblePaths = [];
    possiblePaths.push({
        idx: -1,
        def: initialDef,
        ruleStack: [],
        occurrenceStack: []
    });
    while (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(possiblePaths)) {
        var currPath = possiblePaths.pop();
        // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)
        if (currPath === EXIT_ALTERNATIVE) {
            if (foundCompletePath &&
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["last"])(possiblePaths).idx <= minimalAlternativesIndex) {
                // remove irrelevant alternative
                possiblePaths.pop();
            }
            continue;
        }
        var currDef = currPath.def;
        var currIdx = currPath.idx;
        var currRuleStack = currPath.ruleStack;
        var currOccurrenceStack = currPath.occurrenceStack;
        // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(currDef)) {
            continue;
        }
        var prod = currDef[0];
        /* istanbul ignore else */
        if (prod === EXIT_NON_TERMINAL) {
            var nextPath = {
                idx: currIdx,
                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef),
                ruleStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["dropRight"])(currRuleStack),
                occurrenceStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["dropRight"])(currOccurrenceStack)
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]) {
            /* istanbul ignore else */
            if (currIdx < tokenVectorLength - 1) {
                var nextIdx = currIdx + 1;
                var actualToken = tokenVector[nextIdx];
                if (tokMatcher(actualToken, prod.terminalType)) {
                    var nextPath = {
                        idx: nextIdx,
                        def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef),
                        ruleStack: currRuleStack,
                        occurrenceStack: currOccurrenceStack
                    };
                    possiblePaths.push(nextPath);
                }
                // end of the line
            }
            else if (currIdx === tokenVectorLength - 1) {
                // IGNORE ABOVE ELSE
                result.push({
                    nextTokenType: prod.terminalType,
                    nextTokenOccurrence: prod.idx,
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                });
                foundCompletePath = true;
            }
            else {
                throw Error("non exhaustive match");
            }
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["NonTerminal"]) {
            var newRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(currRuleStack);
            newRuleStack.push(prod.nonTerminalName);
            var newOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(currOccurrenceStack);
            newOccurrenceStack.push(prod.idx);
            var nextPath = {
                idx: currIdx,
                def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef)),
                ruleStack: newRuleStack,
                occurrenceStack: newOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Option"]) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var nextPathWith = {
                idx: currIdx,
                def: prod.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionMandatory"]) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var secondIteration = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionMandatoryWithSeparator"]) {
            // TODO:(THE NEW operators here take a while...) (convert once?)
            var separatorGast = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]({
                terminalType: prod.separator
            });
            var secondIteration = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([secondIteration], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef));
            var nextPath = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPath);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["RepetitionWithSeparator"]) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            var separatorGast = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Terminal"]({
                terminalType: prod.separator
            });
            var nthRepetition = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                definition: [separatorGast].concat(prod.definition),
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            var nextPathWithout = {
                idx: currIdx,
                def: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWithout);
            // required marker to avoid backtracking paths whose higher priority alternatives already matched
            possiblePaths.push(EXIT_ALTERNATIVE);
            // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?
            var nthRepetition = new _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Repetition"]({
                definition: prod.definition,
                idx: prod.idx
            });
            var nextDef = prod.definition.concat([nthRepetition], Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef));
            var nextPathWith = {
                idx: currIdx,
                def: nextDef,
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            };
            possiblePaths.push(nextPathWith);
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Alternation"]) {
            // the order of alternatives is meaningful, FILO (Last path will be traversed first).
            for (var i = prod.definition.length - 1; i >= 0; i--) {
                var currAlt = prod.definition[i];
                var currAltPath = {
                    idx: currIdx,
                    def: currAlt.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef)),
                    ruleStack: currRuleStack,
                    occurrenceStack: currOccurrenceStack
                };
                possiblePaths.push(currAltPath);
                possiblePaths.push(EXIT_ALTERNATIVE);
            }
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Flat"]) {
            possiblePaths.push({
                idx: currIdx,
                def: prod.definition.concat(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["drop"])(currDef)),
                ruleStack: currRuleStack,
                occurrenceStack: currOccurrenceStack
            });
        }
        else if (prod instanceof _gast_gast_public__WEBPACK_IMPORTED_MODULE_3__["Rule"]) {
            // last because we should only encounter at most a single one of these per invocation.
            possiblePaths.push(expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack));
        }
        else {
            throw Error("non exhaustive match");
        }
    }
    return result;
}
function expandTopLevelRule(topRule, currIdx, currRuleStack, currOccurrenceStack) {
    var newRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(currRuleStack);
    newRuleStack.push(topRule.name);
    var newCurrOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(currOccurrenceStack);
    // top rule is always assumed to have been called with occurrence index 1
    newCurrOccurrenceStack.push(1);
    return {
        idx: currIdx,
        def: topRule.definition,
        ruleStack: newRuleStack,
        occurrenceStack: newCurrOccurrenceStack
    };
}
//# sourceMappingURL=interpreter.js.map

/***/ }),
/* 209 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveGrammar", function() { return resolveGrammar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateGrammar", function() { return validateGrammar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assignOccurrenceIndices", function() { return assignOccurrenceIndices; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _resolver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(210);
/* harmony import */ var _checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(206);
/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(205);
/* harmony import */ var _gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(200);





function resolveGrammar(options) {
    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, {
        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_3__["defaultGrammarResolverErrorProvider"]
    });
    var topRulesTable = {};
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(options.rules, function (rule) {
        topRulesTable[rule.name] = rule;
    });
    return Object(_resolver__WEBPACK_IMPORTED_MODULE_1__["resolveGrammar"])(topRulesTable, options.errMsgProvider);
}
function validateGrammar(options) {
    options = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["defaults"])(options, {
        errMsgProvider: _errors_public__WEBPACK_IMPORTED_MODULE_3__["defaultGrammarValidatorErrorProvider"],
        ignoredIssues: {}
    });
    return Object(_checks__WEBPACK_IMPORTED_MODULE_2__["validateGrammar"])(options.rules, options.maxLookahead, options.tokenTypes, options.ignoredIssues, options.errMsgProvider, options.grammarName);
}
function assignOccurrenceIndices(options) {
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(options.rules, function (currRule) {
        var methodsCollector = new _gast__WEBPACK_IMPORTED_MODULE_4__["DslMethodsCollectorVisitor"]();
        currRule.accept(methodsCollector);
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(methodsCollector.dslMethods, function (methods) {
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(methods, function (currMethod, arrIdx) {
                currMethod.idx = arrIdx + 1;
            });
        });
    });
}
//# sourceMappingURL=gast_resolver_public.js.map

/***/ }),
/* 210 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveGrammar", function() { return resolveGrammar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GastRefResolverVisitor", function() { return GastRefResolverVisitor; });
/* harmony import */ var _parser_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(186);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(201);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



function resolveGrammar(topLevels, errMsgProvider) {
    var refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);
    refResolver.resolveRefs();
    return refResolver.errors;
}
var GastRefResolverVisitor = /** @class */ (function (_super) {
    __extends(GastRefResolverVisitor, _super);
    function GastRefResolverVisitor(nameToTopRule, errMsgProvider) {
        var _this = _super.call(this) || this;
        _this.nameToTopRule = nameToTopRule;
        _this.errMsgProvider = errMsgProvider;
        _this.errors = [];
        return _this;
    }
    GastRefResolverVisitor.prototype.resolveRefs = function () {
        var _this = this;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["values"])(this.nameToTopRule), function (prod) {
            _this.currTopLevel = prod;
            prod.accept(_this);
        });
    };
    GastRefResolverVisitor.prototype.visitNonTerminal = function (node) {
        var ref = this.nameToTopRule[node.nonTerminalName];
        if (!ref) {
            var msg = this.errMsgProvider.buildRuleNotFoundError(this.currTopLevel, node);
            this.errors.push({
                message: msg,
                type: _parser_parser__WEBPACK_IMPORTED_MODULE_0__["ParserDefinitionErrorType"].UNRESOLVED_SUBRULE_REF,
                ruleName: this.currTopLevel.name,
                unresolvedRefName: node.nonTerminalName
            });
        }
        else {
            node.referencedRule = ref;
        }
    };
    return GastRefResolverVisitor;
}(_gast_gast_visitor_public__WEBPACK_IMPORTED_MODULE_2__["GAstVisitor"]));

//# sourceMappingURL=resolver.js.map

/***/ }),
/* 211 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EOF_FOLLOW_KEY", function() { return EOF_FOLLOW_KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IN_RULE_RECOVERY_EXCEPTION", function() { return IN_RULE_RECOVERY_EXCEPTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InRuleRecoveryException", function() { return InRuleRecoveryException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Recoverable", function() { return Recoverable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "attemptInRepetitionRecovery", function() { return attemptInRepetitionRecovery; });
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(191);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(212);
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(202);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(186);





var EOF_FOLLOW_KEY = {};
var IN_RULE_RECOVERY_EXCEPTION = "InRuleRecoveryException";
function InRuleRecoveryException(message) {
    this.name = IN_RULE_RECOVERY_EXCEPTION;
    this.message = message;
}
InRuleRecoveryException.prototype = Error.prototype;
/**
 * This trait is responsible for the error recovery and fault tolerant logic
 */
var Recoverable = /** @class */ (function () {
    function Recoverable() {
    }
    Recoverable.prototype.initRecoverable = function (config) {
        this.firstAfterRepMap = {};
        this.resyncFollows = {};
        this.recoveryEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["has"])(config, "recoveryEnabled")
            ? config.recoveryEnabled
            : _parser__WEBPACK_IMPORTED_MODULE_4__["DEFAULT_PARSER_CONFIG"].recoveryEnabled;
        // performance optimization, NOOP will be inlined which
        // effectively means that this optional feature does not exist
        // when not used.
        if (this.recoveryEnabled) {
            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;
        }
    };
    Recoverable.prototype.getTokenToInsert = function (tokType) {
        var tokToInsert = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["createTokenInstance"])(tokType, "", NaN, NaN, NaN, NaN, NaN, NaN);
        tokToInsert.isInsertedInRecovery = true;
        return tokToInsert;
    };
    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {
        return true;
    };
    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {
        var _this = this;
        // TODO: can the resyncTokenType be cached?
        var reSyncTokType = this.findReSyncTokenType();
        var savedLexerState = this.exportLexerState();
        var resyncedTokens = [];
        var passedResyncPoint = false;
        var nextTokenWithoutResync = this.LA(1);
        var currToken = this.LA(1);
        var generateErrorMessage = function () {
            var previousToken = _this.LA(0);
            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce
            // the error that would have been thrown
            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({
                expected: expectedTokType,
                actual: nextTokenWithoutResync,
                previous: previousToken,
                ruleName: _this.getCurrRuleFullName()
            });
            var error = new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__["MismatchedTokenException"](msg, nextTokenWithoutResync, _this.LA(0));
            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.
            error.resyncedTokens = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["dropRight"])(resyncedTokens);
            _this.SAVE_ERROR(error);
        };
        while (!passedResyncPoint) {
            // re-synced to a point where we can safely exit the repetition/
            if (this.tokenMatcher(currToken, expectedTokType)) {
                generateErrorMessage();
                return; // must return here to avoid reverting the inputIdx
            }
            else if (lookAheadFunc.call(this)) {
                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule
                generateErrorMessage();
                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule
                grammarRule.apply(this, grammarRuleArgs);
                return; // must return here to avoid reverting the inputIdx
            }
            else if (this.tokenMatcher(currToken, reSyncTokType)) {
                passedResyncPoint = true;
            }
            else {
                currToken = this.SKIP_TOKEN();
                this.addToResyncTokens(currToken, resyncedTokens);
            }
        }
        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.
        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by
        // "between rules" resync recovery later in the flow.
        this.importLexerState(savedLexerState);
    };
    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {
        // Edge case of arriving from a MANY repetition which is stuck
        // Attempting recovery in this case could cause an infinite loop
        if (notStuck === false) {
            return false;
        }
        // arguments to try and perform resync into the next iteration of the many are missing
        if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {
            return false;
        }
        // no need to recover, next token is what we expect...
        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {
            return false;
        }
        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path
        // and prefer some backtracking path that includes recovered errors.
        if (this.isBackTracking()) {
            return false;
        }
        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm
        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)
        //noinspection RedundantIfStatementJS
        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {
            return false;
        }
        return true;
    };
    // Error Recovery functionality
    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {
        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);
        var follows = this.getNextPossibleTokenTypes(grammarPath);
        return follows;
    };
    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {
        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {
            var tokToInsert = this.getTokenToInsert(expectedTokType);
            return tokToInsert;
        }
        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {
            var nextTok = this.SKIP_TOKEN();
            this.consumeToken();
            return nextTok;
        }
        throw new InRuleRecoveryException("sad sad panda");
    };
    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {
        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||
            this.canRecoverWithSingleTokenDeletion(expectedToken));
    };
    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {
        var _this = this;
        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {
            return false;
        }
        // must know the possible following tokens to perform single token insertion
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(follows)) {
            return false;
        }
        var mismatchedTok = this.LA(1);
        var isMisMatchedTokInFollows = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["find"])(follows, function (possibleFollowsTokType) {
            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);
        }) !== undefined;
        return isMisMatchedTokInFollows;
    };
    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {
        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);
        return isNextTokenWhatIsExpected;
    };
    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {
        var followKey = this.getCurrFollowKey();
        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["contains"])(currentRuleReSyncSet, tokenTypeIdx);
    };
    Recoverable.prototype.findReSyncTokenType = function () {
        var allPossibleReSyncTokTypes = this.flattenFollowSet();
        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input
        var nextToken = this.LA(1);
        var k = 2;
        while (true) {
            var nextTokenType = nextToken.tokenType;
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["contains"])(allPossibleReSyncTokTypes, nextTokenType)) {
                return nextTokenType;
            }
            nextToken = this.LA(k);
            k++;
        }
    };
    Recoverable.prototype.getCurrFollowKey = function () {
        // the length is at least one as we always add the ruleName to the stack before invoking the rule.
        if (this.RULE_STACK.length === 1) {
            return EOF_FOLLOW_KEY;
        }
        var currRuleShortName = this.getLastExplicitRuleShortName();
        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();
        var prevRuleShortName = this.getPreviousExplicitRuleShortName();
        return {
            ruleName: this.shortRuleNameToFullName(currRuleShortName),
            idxInCallingRule: currRuleIdx,
            inRule: this.shortRuleNameToFullName(prevRuleShortName)
        };
    };
    Recoverable.prototype.buildFullFollowKeyStack = function () {
        var _this = this;
        var explicitRuleStack = this.RULE_STACK;
        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(this.LAST_EXPLICIT_RULE_STACK)) {
            explicitRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_STACK[idx]; });
            explicitOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.LAST_EXPLICIT_RULE_STACK, function (idx) { return _this.RULE_OCCURRENCE_STACK[idx]; });
        }
        // TODO: only iterate over explicit rules here
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(explicitRuleStack, function (ruleName, idx) {
            if (idx === 0) {
                return EOF_FOLLOW_KEY;
            }
            return {
                ruleName: _this.shortRuleNameToFullName(ruleName),
                idxInCallingRule: explicitOccurrenceStack[idx],
                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])
            };
        });
    };
    Recoverable.prototype.flattenFollowSet = function () {
        var _this = this;
        var followStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.buildFullFollowKeyStack(), function (currKey) {
            return _this.getFollowSetFromFollowKey(currKey);
        });
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["flatten"])(followStack);
    };
    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {
        if (followKey === EOF_FOLLOW_KEY) {
            return [_scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["EOF"]];
        }
        var followName = followKey.ruleName +
            followKey.idxInCallingRule +
            _constants__WEBPACK_IMPORTED_MODULE_3__["IN"] +
            followKey.inRule;
        return this.resyncFollows[followName];
    };
    // It does not make any sense to include a virtual EOF token in the list of resynced tokens
    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)
    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {
        if (!this.tokenMatcher(token, _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["EOF"])) {
            resyncTokens.push(token);
        }
        return resyncTokens;
    };
    Recoverable.prototype.reSyncTo = function (tokType) {
        var resyncedTokens = [];
        var nextTok = this.LA(1);
        while (this.tokenMatcher(nextTok, tokType) === false) {
            nextTok = this.SKIP_TOKEN();
            this.addToResyncTokens(nextTok, resyncedTokens);
        }
        // the last token is not part of the error.
        return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["dropRight"])(resyncedTokens);
    };
    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
        // by default this is a NO-OP
        // The actual implementation is with the function(not method) below
    };
    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {
        var pathRuleStack = this.getHumanReadableRuleStack();
        var pathOccurrenceStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(this.RULE_OCCURRENCE_STACK);
        var grammarPath = {
            ruleStack: pathRuleStack,
            occurrenceStack: pathOccurrenceStack,
            lastTok: tokType,
            lastTokOccurrence: tokIdxInRule
        };
        return grammarPath;
    };
    Recoverable.prototype.getHumanReadableRuleStack = function () {
        var _this = this;
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isEmpty"])(this.LAST_EXPLICIT_RULE_STACK)) {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.LAST_EXPLICIT_RULE_STACK, function (currIdx) {
                return _this.shortRuleNameToFullName(_this.RULE_STACK[currIdx]);
            });
        }
        else {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["map"])(this.RULE_STACK, function (currShortName) {
                return _this.shortRuleNameToFullName(currShortName);
            });
        }
    };
    return Recoverable;
}());

function attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {
    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);
    var firstAfterRepInfo = this.firstAfterRepMap[key];
    if (firstAfterRepInfo === undefined) {
        var currRuleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[currRuleName];
        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);
        firstAfterRepInfo = walker.startWalking();
        this.firstAfterRepMap[key] = firstAfterRepInfo;
    }
    var expectTokAfterLastMatch = firstAfterRepInfo.token;
    var nextTokIdx = firstAfterRepInfo.occurrence;
    var isEndOfRule = firstAfterRepInfo.isEndOfRule;
    // special edge case of a TOP most repetition after which the input should END.
    // this will force an attempt for inRule recovery in that scenario.
    if (this.RULE_STACK.length === 1 &&
        isEndOfRule &&
        expectTokAfterLastMatch === undefined) {
        expectTokAfterLastMatch = _scan_tokens_public__WEBPACK_IMPORTED_MODULE_0__["EOF"];
        nextTokIdx = 1;
    }
    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {
        // TODO: performance optimization: instead of passing the original args here, we modify
        // the args param (or create a new one) and make sure the lookahead func is explicitly provided
        // to avoid searching the cache for it once more.
        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);
    }
}
//# sourceMappingURL=recoverable.js.map

/***/ }),
/* 212 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isRecognitionException", function() { return isRecognitionException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MismatchedTokenException", function() { return MismatchedTokenException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoViableAltException", function() { return NoViableAltException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotAllInputParsedException", function() { return NotAllInputParsedException; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EarlyExitException", function() { return EarlyExitException; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);

var MISMATCHED_TOKEN_EXCEPTION = "MismatchedTokenException";
var NO_VIABLE_ALT_EXCEPTION = "NoViableAltException";
var EARLY_EXIT_EXCEPTION = "EarlyExitException";
var NOT_ALL_INPUT_PARSED_EXCEPTION = "NotAllInputParsedException";
var RECOGNITION_EXCEPTION_NAMES = [
    MISMATCHED_TOKEN_EXCEPTION,
    NO_VIABLE_ALT_EXCEPTION,
    EARLY_EXIT_EXCEPTION,
    NOT_ALL_INPUT_PARSED_EXCEPTION
];
Object.freeze(RECOGNITION_EXCEPTION_NAMES);
// hacks to bypass no support for custom Errors in javascript/typescript
function isRecognitionException(error) {
    // can't do instanceof on hacked custom js exceptions
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(RECOGNITION_EXCEPTION_NAMES, error.name);
}
function MismatchedTokenException(message, token, previousToken) {
    this.name = MISMATCHED_TOKEN_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
// must use the "Error.prototype" instead of "new Error"
// because the stack trace points to where "new Error" was invoked"
MismatchedTokenException.prototype = Error.prototype;
function NoViableAltException(message, token, previousToken) {
    this.name = NO_VIABLE_ALT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
NoViableAltException.prototype = Error.prototype;
function NotAllInputParsedException(message, token) {
    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;
    this.message = message;
    this.token = token;
    this.resyncedTokens = [];
}
NotAllInputParsedException.prototype = Error.prototype;
function EarlyExitException(message, token, previousToken) {
    this.name = EARLY_EXIT_EXCEPTION;
    this.message = message;
    this.token = token;
    this.previousToken = previousToken;
    this.resyncedTokens = [];
}
EarlyExitException.prototype = Error.prototype;
//# sourceMappingURL=exceptions_public.js.map

/***/ }),
/* 213 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LooksAhead", function() { return LooksAhead; });
/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(207);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(186);
/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(204);
/* harmony import */ var _grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(200);





/**
 * Trait responsible for the lookahead related utilities and optimizations.
 */
var LooksAhead = /** @class */ (function () {
    function LooksAhead() {
    }
    LooksAhead.prototype.initLooksAhead = function (config) {
        this.dynamicTokensEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["has"])(config, "dynamicTokensEnabled")
            ? config.dynamicTokensEnabled
            : _parser__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_PARSER_CONFIG"].dynamicTokensEnabled;
        this.maxLookahead = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["has"])(config, "maxLookahead")
            ? config.maxLookahead
            : _parser__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_PARSER_CONFIG"].maxLookahead;
        /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
        this.lookAheadFuncsCache = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isES2015MapSupported"])() ? new Map() : [];
        // Performance optimization on newer engines that support ES6 Map
        // For larger Maps this is slightly faster than using a plain object (array in our case).
        /* istanbul ignore else - The else branch will be tested on older node.js versions and IE11 */
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isES2015MapSupported"])()) {
            this.getLaFuncFromCache = this.getLaFuncFromMap;
            this.setLaFuncCache = this.setLaFuncCacheUsingMap;
        }
        else {
            this.getLaFuncFromCache = this.getLaFuncFromObj;
            this.setLaFuncCache = this.setLaFuncUsingObj;
        }
    };
    LooksAhead.prototype.preComputeLookaheadFunctions = function (rules) {
        var _this = this;
        Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(rules, function (currRule) {
            _this.TRACE_INIT(currRule.name + " Rule Lookahead", function () {
                var _a = Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["collectMethods"])(currRule), alternation = _a.alternation, repetition = _a.repetition, option = _a.option, repetitionMandatory = _a.repetitionMandatory, repetitionMandatoryWithSeparator = _a.repetitionMandatoryWithSeparator, repetitionWithSeparator = _a.repetitionWithSeparator;
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(alternation, function (currProd) {
                    var prodIdx = currProd.idx === 0 ? "" : currProd.idx;
                    _this.TRACE_INIT("" + Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd) + prodIdx, function () {
                        var laFunc = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["buildLookaheadFuncForOr"])(currProd.idx, currRule, currProd.maxLookahead || _this.maxLookahead, currProd.hasPredicates, _this.dynamicTokensEnabled, _this.lookAheadBuilderForAlternatives);
                        var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__["getKeyForAutomaticLookahead"])(_this.fullRuleNameToShort[currRule.name], _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["OR_IDX"], currProd.idx);
                        _this.setLaFuncCache(key, laFunc);
                    });
                });
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(repetition, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["MANY_IDX"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["PROD_TYPE"].REPETITION, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd));
                });
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(option, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["OPTION_IDX"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["PROD_TYPE"].OPTION, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd));
                });
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(repetitionMandatory, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["AT_LEAST_ONE_IDX"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["PROD_TYPE"].REPETITION_MANDATORY, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd));
                });
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(repetitionMandatoryWithSeparator, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["AT_LEAST_ONE_SEP_IDX"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["PROD_TYPE"].REPETITION_MANDATORY_WITH_SEPARATOR, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd));
                });
                Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["forEach"])(repetitionWithSeparator, function (currProd) {
                    _this.computeLookaheadFunc(currRule, currProd.idx, _grammar_keys__WEBPACK_IMPORTED_MODULE_3__["MANY_SEP_IDX"], _grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["PROD_TYPE"].REPETITION_WITH_SEPARATOR, currProd.maxLookahead, Object(_grammar_gast_gast__WEBPACK_IMPORTED_MODULE_4__["getProductionDslName"])(currProd));
                });
            });
        });
    };
    LooksAhead.prototype.computeLookaheadFunc = function (rule, prodOccurrence, prodKey, prodType, prodMaxLookahead, dslMethodName) {
        var _this = this;
        this.TRACE_INIT("" + dslMethodName + (prodOccurrence === 0 ? "" : prodOccurrence), function () {
            var laFunc = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["buildLookaheadFuncForOptionalProd"])(prodOccurrence, rule, prodMaxLookahead || _this.maxLookahead, _this.dynamicTokensEnabled, prodType, _this.lookAheadBuilderForOptional);
            var key = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__["getKeyForAutomaticLookahead"])(_this.fullRuleNameToShort[rule.name], prodKey, prodOccurrence);
            _this.setLaFuncCache(key, laFunc);
        });
    };
    LooksAhead.prototype.lookAheadBuilderForOptional = function (alt, tokenMatcher, dynamicTokensEnabled) {
        return Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["buildSingleAlternativeLookaheadFunction"])(alt, tokenMatcher, dynamicTokensEnabled);
    };
    LooksAhead.prototype.lookAheadBuilderForAlternatives = function (alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {
        return Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_0__["buildAlternativesLookAheadFunc"])(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled);
    };
    // this actually returns a number, but it is always used as a string (object prop key)
    LooksAhead.prototype.getKeyForAutomaticLookahead = function (dslMethodIdx, occurrence) {
        var currRuleShortName = this.getLastExplicitRuleShortName();
        return Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__["getKeyForAutomaticLookahead"])(currRuleShortName, dslMethodIdx, occurrence);
    };
    /* istanbul ignore next */
    LooksAhead.prototype.getLaFuncFromCache = function (key) {
        return undefined;
    };
    LooksAhead.prototype.getLaFuncFromMap = function (key) {
        return this.lookAheadFuncsCache.get(key);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.getLaFuncFromObj = function (key) {
        return this.lookAheadFuncsCache[key];
    };
    /* istanbul ignore next */
    LooksAhead.prototype.setLaFuncCache = function (key, value) { };
    LooksAhead.prototype.setLaFuncCacheUsingMap = function (key, value) {
        this.lookAheadFuncsCache.set(key, value);
    };
    /* istanbul ignore next - Using plain array as dictionary will be tested on older node.js versions and IE11 */
    LooksAhead.prototype.setLaFuncUsingObj = function (key, value) {
        this.lookAheadFuncsCache[key] = value;
    };
    return LooksAhead;
}());

//# sourceMappingURL=looksahead.js.map

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeBuilder", function() { return TreeBuilder; });
/* harmony import */ var _cst_cst__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(203);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(215);
/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(204);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(186);





/**
 * This trait is responsible for the CST building logic.
 */
var TreeBuilder = /** @class */ (function () {
    function TreeBuilder() {
    }
    TreeBuilder.prototype.initTreeBuilder = function (config) {
        this.LAST_EXPLICIT_RULE_STACK = [];
        this.CST_STACK = [];
        this.outputCst = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["has"])(config, "outputCst")
            ? config.outputCst
            : _parser__WEBPACK_IMPORTED_MODULE_4__["DEFAULT_PARSER_CONFIG"].outputCst;
        this.nodeLocationTracking = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["has"])(config, "nodeLocationTracking")
            ? config.nodeLocationTracking
            : _parser__WEBPACK_IMPORTED_MODULE_4__["DEFAULT_PARSER_CONFIG"].nodeLocationTracking;
        if (!this.outputCst) {
            this.cstInvocationStateUpdate = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            this.cstFinallyStateUpdate = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            this.cstPostTerminal = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            this.cstPostNonTerminal = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            this.getLastExplicitRuleShortName = this.getLastExplicitRuleShortNameNoCst;
            this.getPreviousExplicitRuleShortName = this.getPreviousExplicitRuleShortNameNoCst;
            this.getLastExplicitRuleOccurrenceIndex = this.getLastExplicitRuleOccurrenceIndexNoCst;
            this.manyInternal = this.manyInternalNoCst;
            this.orInternal = this.orInternalNoCst;
            this.optionInternal = this.optionInternalNoCst;
            this.atLeastOneInternal = this.atLeastOneInternalNoCst;
            this.manySepFirstInternal = this.manySepFirstInternalNoCst;
            this.atLeastOneSepFirstInternal = this.atLeastOneSepFirstInternalNoCst;
        }
        else {
            if (/full/i.test(this.nodeLocationTracking)) {
                if (this.recoveryEnabled) {
                    this.setNodeLocationFromToken = _cst_cst__WEBPACK_IMPORTED_MODULE_0__["setNodeLocationFull"];
                    this.setNodeLocationFromNode = _cst_cst__WEBPACK_IMPORTED_MODULE_0__["setNodeLocationFull"];
                    this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;
                }
                else {
                    this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.cstPostRule = this.cstPostRuleFull;
                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;
                }
            }
            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {
                if (this.recoveryEnabled) {
                    this.setNodeLocationFromToken = (_cst_cst__WEBPACK_IMPORTED_MODULE_0__["setNodeLocationOnlyOffset"]);
                    this.setNodeLocationFromNode = (_cst_cst__WEBPACK_IMPORTED_MODULE_0__["setNodeLocationOnlyOffset"]);
                    this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;
                }
                else {
                    this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                    this.cstPostRule = this.cstPostRuleOnlyOffset;
                    this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;
                }
            }
            else if (/none/i.test(this.nodeLocationTracking)) {
                this.setNodeLocationFromToken = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                this.setNodeLocationFromNode = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                this.cstPostRule = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
                this.setInitialNodeLocation = _utils_utils__WEBPACK_IMPORTED_MODULE_1__["NOOP"];
            }
            else {
                throw Error("Invalid <nodeLocationTracking> config option: \"" + config.nodeLocationTracking + "\"");
            }
        }
    };
    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {
        cstNode.location = {
            startOffset: NaN,
            endOffset: NaN
        };
    };
    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {
        cstNode.location = {
            // without error recovery the starting Location of a new CstNode is guaranteed
            // To be the next Token's startOffset (for valid inputs).
            // For invalid inputs there won't be any CSTOutput so this potential
            // inaccuracy does not matter
            startOffset: this.LA(1).startOffset,
            endOffset: NaN
        };
    };
    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {
        cstNode.location = {
            startOffset: NaN,
            startLine: NaN,
            startColumn: NaN,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN
        };
    };
    /**
     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work

     * @param cstNode
     */
    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {
        var nextToken = this.LA(1);
        cstNode.location = {
            startOffset: nextToken.startOffset,
            startLine: nextToken.startLine,
            startColumn: nextToken.startColumn,
            endOffset: NaN,
            endLine: NaN,
            endColumn: NaN
        };
    };
    // CST
    TreeBuilder.prototype.cstNestedInvocationStateUpdate = function (nestedName, shortName) {
        var cstNode = {
            name: nestedName,
            fullName: this.shortRuleNameToFull[this.getLastExplicitRuleShortName()] +
                nestedName,
            children: {}
        };
        this.setInitialNodeLocation(cstNode);
        this.CST_STACK.push(cstNode);
    };
    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName, shortName) {
        this.LAST_EXPLICIT_RULE_STACK.push(this.RULE_STACK.length - 1);
        var cstNode = {
            name: fullRuleName,
            children: {}
        };
        this.setInitialNodeLocation(cstNode);
        this.CST_STACK.push(cstNode);
    };
    TreeBuilder.prototype.cstFinallyStateUpdate = function () {
        this.LAST_EXPLICIT_RULE_STACK.pop();
        this.CST_STACK.pop();
    };
    TreeBuilder.prototype.cstNestedFinallyStateUpdate = function () {
        var lastCstNode = this.CST_STACK.pop();
        // TODO: the naming is bad, this should go directly to the
        //       (correct) cstLocation update method
        //       e.g if we put other logic in postRule...
        this.cstPostRule(lastCstNode);
    };
    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        // If this condition is true it means we consumed at least one Token
        // In this CstNode or its nested children.
        if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
            loc.endLine = prevToken.endLine;
            loc.endColumn = prevToken.endColumn;
        }
        // "empty" CstNode edge case
        else {
            loc.startOffset = NaN;
            loc.startLine = NaN;
            loc.startColumn = NaN;
        }
    };
    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {
        var prevToken = this.LA(0);
        var loc = ruleCstNode.location;
        // If this condition is true it means we consumed at least one Token
        // In this CstNode or its nested children.
        if (loc.startOffset <= prevToken.startOffset === true) {
            loc.endOffset = prevToken.endOffset;
        }
        // "empty" CstNode edge case
        else {
            loc.startOffset = NaN;
        }
    };
    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {
        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];
        Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__["addTerminalToCst"])(rootCst, consumedToken, key);
        // This is only used when **both** error recovery and CST Output are enabled.
        this.setNodeLocationFromToken(rootCst.location, consumedToken);
    };
    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {
        // Avoid side effects due to back tracking
        // TODO: This costs a 2-3% in performance, A flag on IParserConfig
        //   could be used to get rid of this conditional, but not sure its worth the effort
        //   and API complexity.
        if (this.isBackTracking() !== true) {
            var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];
            Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__["addNoneTerminalToCst"])(preCstNode, ruleName, ruleCstResult);
            // This is only used when **both** error recovery and CST Output are enabled.
            this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);
        }
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(this.baseCstVisitorConstructor)) {
            var newBaseCstVisitorConstructor = Object(_cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__["createBaseSemanticVisitorConstructor"])(this.className, this.allRuleNames);
            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;
            return newBaseCstVisitorConstructor;
        }
        return this.baseCstVisitorConstructor;
    };
    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(this.baseCstVisitorWithDefaultsConstructor)) {
            var newConstructor = Object(_cst_cst_visitor__WEBPACK_IMPORTED_MODULE_2__["createBaseVisitorConstructorWithDefaults"])(this.className, this.allRuleNames, this.getBaseCstVisitorConstructor());
            this.baseCstVisitorWithDefaultsConstructor = newConstructor;
            return newConstructor;
        }
        return this.baseCstVisitorWithDefaultsConstructor;
    };
    TreeBuilder.prototype.nestedRuleBeforeClause = function (methodOpts, laKey) {
        var nestedName;
        if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, laKey);
            return nestedName;
        }
        else {
            return undefined;
        }
    };
    TreeBuilder.prototype.nestedAltBeforeClause = function (methodOpts, occurrence, methodKeyIdx, altIdx) {
        var ruleIdx = this.getLastExplicitRuleShortName();
        var shortName = Object(_grammar_keys__WEBPACK_IMPORTED_MODULE_3__["getKeyForAltIndex"])(ruleIdx, methodKeyIdx, occurrence, altIdx);
        var nestedName;
        if (methodOpts.NAME !== undefined) {
            nestedName = methodOpts.NAME;
            this.nestedRuleInvocationStateUpdate(nestedName, shortName);
            return {
                shortName: shortName,
                nestedName: nestedName
            };
        }
        else {
            return undefined;
        }
    };
    TreeBuilder.prototype.nestedRuleFinallyClause = function (laKey, nestedName) {
        var cstStack = this.CST_STACK;
        var nestedRuleCst = cstStack[cstStack.length - 1];
        this.nestedRuleFinallyStateUpdate();
        // this return a different result than the previous invocation because "nestedRuleFinallyStateUpdate" pops the cst stack
        var parentCstNode = cstStack[cstStack.length - 1];
        Object(_cst_cst__WEBPACK_IMPORTED_MODULE_0__["addNoneTerminalToCst"])(parentCstNode, nestedName, nestedRuleCst);
        this.setNodeLocationFromNode(parentCstNode.location, nestedRuleCst.location);
    };
    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {
        var lastExplictIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];
        return this.RULE_STACK[lastExplictIndex];
    };
    TreeBuilder.prototype.getLastExplicitRuleShortNameNoCst = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 1];
    };
    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {
        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 2];
        return this.RULE_STACK[lastExplicitIndex];
    };
    TreeBuilder.prototype.getPreviousExplicitRuleShortNameNoCst = function () {
        var ruleStack = this.RULE_STACK;
        return ruleStack[ruleStack.length - 2];
    };
    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {
        var lastExplicitIndex = this.LAST_EXPLICIT_RULE_STACK[this.LAST_EXPLICIT_RULE_STACK.length - 1];
        return this.RULE_OCCURRENCE_STACK[lastExplicitIndex];
    };
    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndexNoCst = function () {
        var occurrenceStack = this.RULE_OCCURRENCE_STACK;
        return occurrenceStack[occurrenceStack.length - 1];
    };
    TreeBuilder.prototype.nestedRuleInvocationStateUpdate = function (nestedRuleName, shortNameKey) {
        this.RULE_OCCURRENCE_STACK.push(1);
        this.RULE_STACK.push(shortNameKey);
        this.cstNestedInvocationStateUpdate(nestedRuleName, shortNameKey);
    };
    TreeBuilder.prototype.nestedRuleFinallyStateUpdate = function () {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        // NOOP when cst is disabled
        this.cstNestedFinallyStateUpdate();
    };
    return TreeBuilder;
}());

//# sourceMappingURL=tree_builder.js.map

/***/ }),
/* 215 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultVisit", function() { return defaultVisit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBaseSemanticVisitorConstructor", function() { return createBaseSemanticVisitorConstructor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBaseVisitorConstructorWithDefaults", function() { return createBaseVisitorConstructorWithDefaults; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CstVisitorDefinitionError", function() { return CstVisitorDefinitionError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateVisitor", function() { return validateVisitor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateMissingCstMethods", function() { return validateMissingCstMethods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateRedundantMethods", function() { return validateRedundantMethods; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(216);
/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(206);



function defaultVisit(ctx, param) {
    var childrenNames = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["keys"])(ctx);
    var childrenNamesLength = childrenNames.length;
    for (var i = 0; i < childrenNamesLength; i++) {
        var currChildName = childrenNames[i];
        var currChildArray = ctx[currChildName];
        var currChildArrayLength = currChildArray.length;
        for (var j = 0; j < currChildArrayLength; j++) {
            var currChild = currChildArray[j];
            // distinction between Tokens Children and CstNode children
            if (currChild.tokenTypeIdx === undefined) {
                if (currChild.fullName !== undefined) {
                    this[currChild.fullName](currChild.children, param);
                }
                else {
                    this[currChild.name](currChild.children, param);
                }
            }
        }
    }
    // defaultVisit does not support generic out param
    return undefined;
}
function createBaseSemanticVisitorConstructor(grammarName, ruleNames) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__["defineNameProp"])(derivedConstructor, grammarName + "BaseSemantics");
    var semanticProto = {
        visit: function (cstNode, param) {
            // enables writing more concise visitor methods when CstNode has only a single child
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(cstNode)) {
                // A CST Node's children dictionary can never have empty arrays as values
                // If a key is defined there will be at least one element in the corresponding value array.
                cstNode = cstNode[0];
            }
            // enables passing optional CstNodes concisely.
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(cstNode)) {
                return undefined;
            }
            if (cstNode.fullName !== undefined) {
                return this[cstNode.fullName](cstNode.children, param);
            }
            else {
                return this[cstNode.name](cstNode.children, param);
            }
        },
        validateVisitor: function () {
            var semanticDefinitionErrors = validateVisitor(this, ruleNames);
            if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(semanticDefinitionErrors)) {
                var errorMessages = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(semanticDefinitionErrors, function (currDefError) { return currDefError.msg; });
                throw Error("Errors Detected in CST Visitor <" + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__["functionName"])(this.constructor) + ">:\n\t" +
                    ("" + errorMessages.join("\n\n").replace(/\n/g, "\n\t")));
            }
        }
    };
    derivedConstructor.prototype = semanticProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    derivedConstructor._RULE_NAMES = ruleNames;
    return derivedConstructor;
}
function createBaseVisitorConstructorWithDefaults(grammarName, ruleNames, baseConstructor) {
    var derivedConstructor = function () { };
    // can be overwritten according to:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/
    // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname
    Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__["defineNameProp"])(derivedConstructor, grammarName + "BaseSemanticsWithDefaults");
    var withDefaultsProto = Object.create(baseConstructor.prototype);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(ruleNames, function (ruleName) {
        withDefaultsProto[ruleName] = defaultVisit;
    });
    derivedConstructor.prototype = withDefaultsProto;
    derivedConstructor.prototype.constructor = derivedConstructor;
    return derivedConstructor;
}
var CstVisitorDefinitionError;
(function (CstVisitorDefinitionError) {
    CstVisitorDefinitionError[CstVisitorDefinitionError["REDUNDANT_METHOD"] = 0] = "REDUNDANT_METHOD";
    CstVisitorDefinitionError[CstVisitorDefinitionError["MISSING_METHOD"] = 1] = "MISSING_METHOD";
})(CstVisitorDefinitionError || (CstVisitorDefinitionError = {}));
function validateVisitor(visitorInstance, ruleNames) {
    var missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);
    var redundantErrors = validateRedundantMethods(visitorInstance, ruleNames);
    return missingErrors.concat(redundantErrors);
}
function validateMissingCstMethods(visitorInstance, ruleNames) {
    var errors = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(ruleNames, function (currRuleName) {
        if (!Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(visitorInstance[currRuleName])) {
            return {
                msg: "Missing visitor method: <" + currRuleName + "> on " + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__["functionName"])(visitorInstance.constructor) + " CST Visitor.",
                type: CstVisitorDefinitionError.MISSING_METHOD,
                methodName: currRuleName
            };
        }
    });
    return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["compact"])(errors);
}
var VALID_PROP_NAMES = ["constructor", "visit", "validateVisitor"];
function validateRedundantMethods(visitorInstance, ruleNames) {
    var errors = [];
    for (var prop in visitorInstance) {
        if (_grammar_checks__WEBPACK_IMPORTED_MODULE_2__["validTermsPattern"].test(prop) &&
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(visitorInstance[prop]) &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(VALID_PROP_NAMES, prop) &&
            !Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(ruleNames, prop)) {
            errors.push({
                msg: "Redundant visitor method: <" + prop + "> on " + Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_1__["functionName"])(visitorInstance.constructor) + " CST Visitor\n" +
                    "There is no Grammar Rule corresponding to this method's name.\n" +
                    ("For utility methods on visitor classes use methods names that do not match /" + _grammar_checks__WEBPACK_IMPORTED_MODULE_2__["validTermsPattern"].source + "/."),
                type: CstVisitorDefinitionError.REDUNDANT_METHOD,
                methodName: prop
            });
        }
    }
    return errors;
}
//# sourceMappingURL=cst_visitor.js.map

/***/ }),
/* 216 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classNameFromInstance", function() { return classNameFromInstance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "functionName", function() { return functionName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defineNameProp", function() { return defineNameProp; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);

function classNameFromInstance(instance) {
    return functionName(instance.constructor);
}
var FUNC_NAME_REGEXP = /^\s*function\s*(\S*)\s*\(/;
var NAME = "name";
/* istanbul ignore next too many hacks for IE/old versions of node.js here*/
function functionName(func) {
    // Engines that support Function.prototype.name OR the nth (n>1) time after
    // the name has been computed in the following else block.
    var existingNameProp = func.name;
    if (existingNameProp) {
        return existingNameProp;
    }
    // hack for IE and engines that do not support Object.defineProperty on function.name (Node.js 0.10 && 0.12)
    var computedName = func.toString().match(FUNC_NAME_REGEXP)[1];
    return computedName;
}
/**
 * @returns {boolean} - has the property been successfully defined
 */
function defineNameProp(obj, nameValue) {
    var namePropDescriptor = Object.getOwnPropertyDescriptor(obj, NAME);
    /* istanbul ignore else -> will only run in old versions of node.js */
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(namePropDescriptor) || namePropDescriptor.configurable) {
        Object.defineProperty(obj, NAME, {
            enumerable: false,
            configurable: true,
            writable: false,
            value: nameValue
        });
        return true;
    }
    /* istanbul ignore next -> will only run in old versions of node.js */
    return false;
}
//# sourceMappingURL=lang_extensions.js.map

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LexerAdapter", function() { return LexerAdapter; });
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(186);

/**
 * Trait responsible abstracting over the interaction with Lexer output (Token vector).
 *
 * This could be generalized to support other kinds of lexers, e.g.
 * - Just in Time Lexing / Lexer-Less parsing.
 * - Streaming Lexer.
 */
var LexerAdapter = /** @class */ (function () {
    function LexerAdapter() {
    }
    LexerAdapter.prototype.initLexerAdapter = function () {
        this.tokVector = [];
        this.tokVectorLength = 0;
        this.currIdx = -1;
    };
    Object.defineProperty(LexerAdapter.prototype, "input", {
        get: function () {
            return this.tokVector;
        },
        set: function (newInput) {
            if (this.selfAnalysisDone !== true) {
                throw Error("Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.");
            }
            this.reset();
            this.tokVector = newInput;
            this.tokVectorLength = newInput.length;
        },
        enumerable: true,
        configurable: true
    });
    // skips a token and returns the next token
    LexerAdapter.prototype.SKIP_TOKEN = function () {
        if (this.currIdx <= this.tokVector.length - 2) {
            this.consumeToken();
            return this.LA(1);
        }
        else {
            return _parser__WEBPACK_IMPORTED_MODULE_0__["END_OF_FILE"];
        }
    };
    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers
    // or lexers dependent on parser context.
    LexerAdapter.prototype.LA = function (howMuch) {
        var soughtIdx = this.currIdx + howMuch;
        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {
            return _parser__WEBPACK_IMPORTED_MODULE_0__["END_OF_FILE"];
        }
        else {
            return this.tokVector[soughtIdx];
        }
    };
    LexerAdapter.prototype.consumeToken = function () {
        this.currIdx++;
    };
    LexerAdapter.prototype.exportLexerState = function () {
        return this.currIdx;
    };
    LexerAdapter.prototype.importLexerState = function (newState) {
        this.currIdx = newState;
    };
    LexerAdapter.prototype.resetLexerState = function () {
        this.currIdx = -1;
    };
    LexerAdapter.prototype.moveToTerminatedState = function () {
        this.currIdx = this.tokVector.length - 1;
    };
    LexerAdapter.prototype.getLexerPosition = function () {
        return this.exportLexerState();
    };
    return LexerAdapter;
}());

//# sourceMappingURL=lexer_adapter.js.map

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognizerApi", function() { return RecognizerApi; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(212);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(186);
/* harmony import */ var _errors_public__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(205);
/* harmony import */ var _grammar_checks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(206);
/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(190);






/**
 * This trait is responsible for implementing the public API
 * for defining Chevrotain parsers, i.e:
 * - CONSUME
 * - RULE
 * - OPTION
 * - ...
 */
var RecognizerApi = /** @class */ (function () {
    function RecognizerApi() {
    }
    RecognizerApi.prototype.ACTION = function (impl) {
        return impl.call(this);
    };
    RecognizerApi.prototype.consume = function (idx, tokType, options) {
        return this.consumeInternal(tokType, idx, options);
    };
    RecognizerApi.prototype.subrule = function (idx, ruleToCall, options) {
        return this.subruleInternal(ruleToCall, idx, options);
    };
    RecognizerApi.prototype.option = function (idx, actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, idx);
    };
    RecognizerApi.prototype.or = function (idx, altsOrOpts) {
        return this.orInternal(altsOrOpts, idx);
    };
    RecognizerApi.prototype.many = function (idx, actionORMethodDef) {
        return this.manyInternal(idx, actionORMethodDef);
    };
    RecognizerApi.prototype.atLeastOne = function (idx, actionORMethodDef) {
        return this.atLeastOneInternal(idx, actionORMethodDef);
    };
    RecognizerApi.prototype.CONSUME = function (tokType, options) {
        return this.consumeInternal(tokType, 0, options);
    };
    RecognizerApi.prototype.CONSUME1 = function (tokType, options) {
        return this.consumeInternal(tokType, 1, options);
    };
    RecognizerApi.prototype.CONSUME2 = function (tokType, options) {
        return this.consumeInternal(tokType, 2, options);
    };
    RecognizerApi.prototype.CONSUME3 = function (tokType, options) {
        return this.consumeInternal(tokType, 3, options);
    };
    RecognizerApi.prototype.CONSUME4 = function (tokType, options) {
        return this.consumeInternal(tokType, 4, options);
    };
    RecognizerApi.prototype.CONSUME5 = function (tokType, options) {
        return this.consumeInternal(tokType, 5, options);
    };
    RecognizerApi.prototype.CONSUME6 = function (tokType, options) {
        return this.consumeInternal(tokType, 6, options);
    };
    RecognizerApi.prototype.CONSUME7 = function (tokType, options) {
        return this.consumeInternal(tokType, 7, options);
    };
    RecognizerApi.prototype.CONSUME8 = function (tokType, options) {
        return this.consumeInternal(tokType, 8, options);
    };
    RecognizerApi.prototype.CONSUME9 = function (tokType, options) {
        return this.consumeInternal(tokType, 9, options);
    };
    RecognizerApi.prototype.SUBRULE = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 0, options);
    };
    RecognizerApi.prototype.SUBRULE1 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 1, options);
    };
    RecognizerApi.prototype.SUBRULE2 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 2, options);
    };
    RecognizerApi.prototype.SUBRULE3 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 3, options);
    };
    RecognizerApi.prototype.SUBRULE4 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 4, options);
    };
    RecognizerApi.prototype.SUBRULE5 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 5, options);
    };
    RecognizerApi.prototype.SUBRULE6 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 6, options);
    };
    RecognizerApi.prototype.SUBRULE7 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 7, options);
    };
    RecognizerApi.prototype.SUBRULE8 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 8, options);
    };
    RecognizerApi.prototype.SUBRULE9 = function (ruleToCall, options) {
        return this.subruleInternal(ruleToCall, 9, options);
    };
    RecognizerApi.prototype.OPTION = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 0);
    };
    RecognizerApi.prototype.OPTION1 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 1);
    };
    RecognizerApi.prototype.OPTION2 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 2);
    };
    RecognizerApi.prototype.OPTION3 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 3);
    };
    RecognizerApi.prototype.OPTION4 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 4);
    };
    RecognizerApi.prototype.OPTION5 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 5);
    };
    RecognizerApi.prototype.OPTION6 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 6);
    };
    RecognizerApi.prototype.OPTION7 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 7);
    };
    RecognizerApi.prototype.OPTION8 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 8);
    };
    RecognizerApi.prototype.OPTION9 = function (actionORMethodDef) {
        return this.optionInternal(actionORMethodDef, 9);
    };
    RecognizerApi.prototype.OR = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 0);
    };
    RecognizerApi.prototype.OR1 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 1);
    };
    RecognizerApi.prototype.OR2 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 2);
    };
    RecognizerApi.prototype.OR3 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 3);
    };
    RecognizerApi.prototype.OR4 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 4);
    };
    RecognizerApi.prototype.OR5 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 5);
    };
    RecognizerApi.prototype.OR6 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 6);
    };
    RecognizerApi.prototype.OR7 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 7);
    };
    RecognizerApi.prototype.OR8 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 8);
    };
    RecognizerApi.prototype.OR9 = function (altsOrOpts) {
        return this.orInternal(altsOrOpts, 9);
    };
    RecognizerApi.prototype.MANY = function (actionORMethodDef) {
        this.manyInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY1 = function (actionORMethodDef) {
        this.manyInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY2 = function (actionORMethodDef) {
        this.manyInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY3 = function (actionORMethodDef) {
        this.manyInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY4 = function (actionORMethodDef) {
        this.manyInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY5 = function (actionORMethodDef) {
        this.manyInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY6 = function (actionORMethodDef) {
        this.manyInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY7 = function (actionORMethodDef) {
        this.manyInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY8 = function (actionORMethodDef) {
        this.manyInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY9 = function (actionORMethodDef) {
        this.manyInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.MANY_SEP = function (options) {
        this.manySepFirstInternal(0, options);
    };
    RecognizerApi.prototype.MANY_SEP1 = function (options) {
        this.manySepFirstInternal(1, options);
    };
    RecognizerApi.prototype.MANY_SEP2 = function (options) {
        this.manySepFirstInternal(2, options);
    };
    RecognizerApi.prototype.MANY_SEP3 = function (options) {
        this.manySepFirstInternal(3, options);
    };
    RecognizerApi.prototype.MANY_SEP4 = function (options) {
        this.manySepFirstInternal(4, options);
    };
    RecognizerApi.prototype.MANY_SEP5 = function (options) {
        this.manySepFirstInternal(5, options);
    };
    RecognizerApi.prototype.MANY_SEP6 = function (options) {
        this.manySepFirstInternal(6, options);
    };
    RecognizerApi.prototype.MANY_SEP7 = function (options) {
        this.manySepFirstInternal(7, options);
    };
    RecognizerApi.prototype.MANY_SEP8 = function (options) {
        this.manySepFirstInternal(8, options);
    };
    RecognizerApi.prototype.MANY_SEP9 = function (options) {
        this.manySepFirstInternal(9, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE = function (actionORMethodDef) {
        this.atLeastOneInternal(0, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE1 = function (actionORMethodDef) {
        return this.atLeastOneInternal(1, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE2 = function (actionORMethodDef) {
        this.atLeastOneInternal(2, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE3 = function (actionORMethodDef) {
        this.atLeastOneInternal(3, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE4 = function (actionORMethodDef) {
        this.atLeastOneInternal(4, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE5 = function (actionORMethodDef) {
        this.atLeastOneInternal(5, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE6 = function (actionORMethodDef) {
        this.atLeastOneInternal(6, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE7 = function (actionORMethodDef) {
        this.atLeastOneInternal(7, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE8 = function (actionORMethodDef) {
        this.atLeastOneInternal(8, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE9 = function (actionORMethodDef) {
        this.atLeastOneInternal(9, actionORMethodDef);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP = function (options) {
        this.atLeastOneSepFirstInternal(0, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP1 = function (options) {
        this.atLeastOneSepFirstInternal(1, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP2 = function (options) {
        this.atLeastOneSepFirstInternal(2, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP3 = function (options) {
        this.atLeastOneSepFirstInternal(3, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP4 = function (options) {
        this.atLeastOneSepFirstInternal(4, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP5 = function (options) {
        this.atLeastOneSepFirstInternal(5, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP6 = function (options) {
        this.atLeastOneSepFirstInternal(6, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP7 = function (options) {
        this.atLeastOneSepFirstInternal(7, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP8 = function (options) {
        this.atLeastOneSepFirstInternal(8, options);
    };
    RecognizerApi.prototype.AT_LEAST_ONE_SEP9 = function (options) {
        this.atLeastOneSepFirstInternal(9, options);
    };
    RecognizerApi.prototype.RULE = function (name, implementation, config) {
        if (config === void 0) { config = _parser__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_RULE_CONFIG"]; }
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["contains"])(this.definedRulesNames, name)) {
            var errMsg = _errors_public__WEBPACK_IMPORTED_MODULE_3__["defaultGrammarValidatorErrorProvider"].buildDuplicateRuleNameError({
                topLevelRule: name,
                grammarName: this.className
            });
            var error = {
                message: errMsg,
                type: _parser__WEBPACK_IMPORTED_MODULE_2__["ParserDefinitionErrorType"].DUPLICATE_RULE_NAME,
                ruleName: name
            };
            this.definitionErrors.push(error);
        }
        this.definedRulesNames.push(name);
        var ruleImplementation = this.defineRule(name, implementation, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.OVERRIDE_RULE = function (name, impl, config) {
        if (config === void 0) { config = _parser__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_RULE_CONFIG"]; }
        var ruleErrors = [];
        ruleErrors = ruleErrors.concat(Object(_grammar_checks__WEBPACK_IMPORTED_MODULE_4__["validateRuleIsOverridden"])(name, this.definedRulesNames, this.className));
        this.definitionErrors.push.apply(this.definitionErrors, ruleErrors); // mutability for the win
        var ruleImplementation = this.defineRule(name, impl, config);
        this[name] = ruleImplementation;
        return ruleImplementation;
    };
    RecognizerApi.prototype.BACKTRACK = function (grammarRule, args) {
        return function () {
            // save org state
            this.isBackTrackingStack.push(1);
            var orgState = this.saveRecogState();
            try {
                grammarRule.apply(this, args);
                // if no exception was thrown we have succeed parsing the rule.
                return true;
            }
            catch (e) {
                if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_1__["isRecognitionException"])(e)) {
                    return false;
                }
                else {
                    throw e;
                }
            }
            finally {
                this.reloadRecogState(orgState);
                this.isBackTrackingStack.pop();
            }
        };
    };
    // GAST export APIs
    RecognizerApi.prototype.getGAstProductions = function () {
        return this.gastProductionsCache;
    };
    RecognizerApi.prototype.getSerializedGastProductions = function () {
        return Object(_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_5__["serializeGrammar"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(this.gastProductionsCache));
    };
    return RecognizerApi;
}());

//# sourceMappingURL=recognizer_api.js.map

/***/ }),
/* 219 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RecognizerEngine", function() { return RecognizerEngine; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(204);
/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(212);
/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(207);
/* harmony import */ var _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(208);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(186);
/* harmony import */ var _recoverable__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(211);
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(191);
/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(197);
/* harmony import */ var _lang_lang_extensions__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(216);










/**
 * This trait is responsible for the runtime parsing engine
 * Used by the official API (recognizer_api.ts)
 */
var RecognizerEngine = /** @class */ (function () {
    function RecognizerEngine() {
    }
    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {
        this.className = Object(_lang_lang_extensions__WEBPACK_IMPORTED_MODULE_9__["classNameFromInstance"])(this);
        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)
        this.shortRuleNameToFull = {};
        this.fullRuleNameToShort = {};
        this.ruleShortNameIdx = 256;
        this.tokenMatcher = _scan_tokens__WEBPACK_IMPORTED_MODULE_8__["tokenStructuredMatcherNoCategories"];
        this.definedRulesNames = [];
        this.tokensMap = {};
        this.allRuleNames = [];
        this.isBackTrackingStack = [];
        this.RULE_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
        this.gastProductionsCache = {};
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "serializedGrammar")) {
            throw Error("The Parser's configuration can no longer contain a <serializedGrammar> property.\n" +
                "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_6-0-0\n" +
                "\tFor Further details.");
        }
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(tokenVocabulary)) {
            // This only checks for Token vocabularies provided as arrays.
            // That is good enough because the main objective is to detect users of pre-V4.0 APIs
            // rather than all edge cases of empty Token vocabularies.
            if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(tokenVocabulary)) {
                throw Error("A Token Vocabulary cannot be empty.\n" +
                    "\tNote that the first argument for the parser constructor\n" +
                    "\tis no longer a Token vector (since v4.0).");
            }
            if (typeof tokenVocabulary[0].startOffset === "number") {
                throw Error("The Parser constructor no longer accepts a token vector as the first argument.\n" +
                    "\tSee: https://sap.github.io/chevrotain/docs/changes/BREAKING_CHANGES.html#_4-0-0\n" +
                    "\tFor Further details.");
            }
        }
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(tokenVocabulary)) {
            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(tokenVocabulary, function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
            }, {});
        }
        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(tokenVocabulary, "modes") &&
            Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(tokenVocabulary.modes)), _scan_tokens__WEBPACK_IMPORTED_MODULE_8__["isTokenType"])) {
            var allTokenTypes = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["flatten"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(tokenVocabulary.modes));
            var uniqueTokens = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["uniq"])(allTokenTypes);
            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["reduce"])(uniqueTokens, function (acc, tokType) {
                acc[tokType.name] = tokType;
                return acc;
            }, {});
        }
        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isObject"])(tokenVocabulary)) {
            this.tokensMap = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneObj"])(tokenVocabulary);
        }
        else {
            throw new Error("<tokensDictionary> argument must be An Array of Token constructors," +
                " A dictionary of Token constructors or an IMultiModeLexerDefinition");
        }
        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been
        // parsed with a clear error message ("expecting EOF but found ...")
        /* tslint:disable */
        this.tokensMap["EOF"] = _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__["EOF"];
        // TODO: This check may not be accurate for multi mode lexers
        var noTokenCategoriesUsed = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["every"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(tokenVocabulary), function (tokenConstructor) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isEmpty"])(tokenConstructor.categoryMatches); });
        this.tokenMatcher = noTokenCategoriesUsed
            ? _scan_tokens__WEBPACK_IMPORTED_MODULE_8__["tokenStructuredMatcherNoCategories"]
            : _scan_tokens__WEBPACK_IMPORTED_MODULE_8__["tokenStructuredMatcher"];
        // Because ES2015+ syntax should be supported for creating Token classes
        // We cannot assume that the Token classes were created using the "extendToken" utilities
        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization
        Object(_scan_tokens__WEBPACK_IMPORTED_MODULE_8__["augmentTokenTypes"])(Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["values"])(this.tokensMap));
    };
    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {
        if (this.selfAnalysisDone) {
            throw Error("Grammar rule <" + ruleName + "> may not be defined after the 'performSelfAnalysis' method has been called'\n" +
                "Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.");
        }
        var resyncEnabled = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "resyncEnabled")
            ? config.resyncEnabled
            : _parser__WEBPACK_IMPORTED_MODULE_5__["DEFAULT_RULE_CONFIG"].resyncEnabled;
        var recoveryValueFunc = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "recoveryValueFunc")
            ? config.recoveryValueFunc
            : _parser__WEBPACK_IMPORTED_MODULE_5__["DEFAULT_RULE_CONFIG"].recoveryValueFunc;
        // performance optimization: Use small integers as keys for the longer human readable "full" rule names.
        // this greatly improves Map access time (as much as 8% for some performance benchmarks).
        /* tslint:disable */
        var shortName = this.ruleShortNameIdx <<
            (_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["BITS_FOR_METHOD_TYPE"] + _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["BITS_FOR_OCCURRENCE_IDX"]);
        /* tslint:enable */
        this.ruleShortNameIdx++;
        this.shortRuleNameToFull[shortName] = ruleName;
        this.fullRuleNameToShort[ruleName] = shortName;
        function invokeRuleWithTry(args) {
            try {
                if (this.outputCst === true) {
                    impl.apply(this, args);
                    var cst = this.CST_STACK[this.CST_STACK.length - 1];
                    this.cstPostRule(cst);
                    return cst;
                }
                else {
                    return impl.apply(this, args);
                }
            }
            catch (e) {
                return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);
            }
            finally {
                this.ruleFinallyStateUpdate();
            }
        }
        var wrappedGrammarRule;
        wrappedGrammarRule = function (idxInCallingRule, args) {
            if (idxInCallingRule === void 0) { idxInCallingRule = 0; }
            this.ruleInvocationStateUpdate(shortName, ruleName, idxInCallingRule);
            return invokeRuleWithTry.call(this, args);
        };
        var ruleNamePropName = "ruleName";
        wrappedGrammarRule[ruleNamePropName] = ruleName;
        wrappedGrammarRule["originalGrammarAction"] = impl;
        return wrappedGrammarRule;
    };
    RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {
        var isFirstInvokedRule = this.RULE_STACK.length === 1;
        // note the reSync is always enabled for the first rule invocation, because we must always be able to
        // reSync with EOF and just output some INVALID ParseTree
        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking
        // path is really the most valid one
        var reSyncEnabled = resyncEnabledConfig &&
            !this.isBackTracking() &&
            this.recoveryEnabled;
        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_2__["isRecognitionException"])(e)) {
            var recogError = e;
            if (reSyncEnabled) {
                var reSyncTokType = this.findReSyncTokenType();
                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {
                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);
                    if (this.outputCst) {
                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                        partialCstResult.recoveredNode = true;
                        return partialCstResult;
                    }
                    else {
                        return recoveryValueFunc();
                    }
                }
                else {
                    if (this.outputCst) {
                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];
                        partialCstResult.recoveredNode = true;
                        recogError.partialCstResult = partialCstResult;
                    }
                    // to be handled Further up the call stack
                    throw recogError;
                }
            }
            else if (isFirstInvokedRule) {
                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case
                this.moveToTerminatedState();
                // the parser should never throw one of its own errors outside its flow.
                // even if error recovery is disabled
                return recoveryValueFunc();
            }
            else {
                // to be recovered Further up the call stack
                throw recogError;
            }
        }
        else {
            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)
            throw e;
        }
    };
    // Implementation of parsing DSL
    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OPTION_IDX"], occurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, key);
        try {
            return this.optionInternalLogic(actionORMethodDef, occurrence, key);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(key, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.optionInternalNoCst = function (actionORMethodDef, occurrence) {
        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OPTION_IDX"], occurrence);
        return this.optionInternalLogic(actionORMethodDef, occurrence, key);
    };
    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_1 = lookAheadFunc;
                lookAheadFunc = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_1.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            return action.call(this);
        }
        return undefined;
    };
    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_IDX"], prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);
        try {
            return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.atLeastOneInternalNoCst = function (prodOccurrence, actionORMethodDef) {
        var key = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_IDX"], prodOccurrence);
        this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, key);
    };
    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookAheadFunc = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_2 = lookAheadFunc;
                lookAheadFunc = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_2.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        if (lookAheadFunc.call(this) === true) {
            var notStuck = this.doSingleRepetition(action);
            while (lookAheadFunc.call(this) === true &&
                notStuck === true) {
                notStuck = this.doSingleRepetition(action);
            }
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__["PROD_TYPE"].REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);
        }
        // note that while it may seem that this can cause an error because by using a recursive call to
        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call
        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_IDX"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterAtLeastOneWalker"]);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_SEP_IDX"], prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(options, laKey);
        try {
            this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternalNoCst = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_SEP_IDX"], prodOccurrence);
        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);
        // 1st iteration
        if (firstIterationLookaheadFunc.call(this) === true) {
            ;
            action.call(this);
            //  TODO: Optimization can move this function construction into "attemptInRepetitionRecovery"
            //  because it is only needed in error recovery scenarios.
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterAtLeastOneSepWalker"]
            ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_SEP_IDX"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterAtLeastOneSepWalker"]);
        }
        else {
            throw this.raiseEarlyExitException(prodOccurrence, _grammar_lookahead__WEBPACK_IMPORTED_MODULE_3__["PROD_TYPE"].REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);
        }
    };
    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_IDX"], prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(actionORMethodDef, laKey);
        try {
            return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.manyInternalNoCst = function (prodOccurrence, actionORMethodDef) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_IDX"], prodOccurrence);
        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);
    };
    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {
        var _this = this;
        var lookaheadFunction = this.getLaFuncFromCache(key);
        var action;
        var predicate;
        if (actionORMethodDef.DEF !== undefined) {
            action = actionORMethodDef.DEF;
            predicate = actionORMethodDef.GATE;
            // predicate present
            if (predicate !== undefined) {
                var orgLookaheadFunction_3 = lookaheadFunction;
                lookaheadFunction = function () {
                    return (predicate.call(_this) && orgLookaheadFunction_3.call(_this));
                };
            }
        }
        else {
            action = actionORMethodDef;
        }
        var notStuck = true;
        while (lookaheadFunction.call(this) === true && notStuck === true) {
            notStuck = this.doSingleRepetition(action);
        }
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_IDX"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterManyWalker"], 
        // The notStuck parameter is only relevant when "attemptInRepetitionRecovery"
        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]
        // An infinite loop cannot occur as:
        // - Either the lookahead is guaranteed to consume something (Single Token Separator)
        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).
        notStuck);
    };
    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_SEP_IDX"], prodOccurrence);
        var nestedName = this.nestedRuleBeforeClause(options, laKey);
        try {
            this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.manySepFirstInternalNoCst = function (prodOccurrence, options) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_SEP_IDX"], prodOccurrence);
        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);
    };
    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {
        var _this = this;
        var action = options.DEF;
        var separator = options.SEP;
        var firstIterationLaFunc = this.getLaFuncFromCache(key);
        // 1st iteration
        if (firstIterationLaFunc.call(this) === true) {
            action.call(this);
            var separatorLookAheadFunc = function () {
                return _this.tokenMatcher(_this.LA(1), separator);
            };
            // 2nd..nth iterations
            while (this.tokenMatcher(this.LA(1), separator) === true) {
                // note that this CONSUME will never enter recovery because
                // the separatorLookAheadFunc checks that the separator really does exist.
                this.CONSUME(separator);
                // No need for checking infinite loop here due to consuming the separator.
                action.call(this);
            }
            // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
                prodOccurrence,
                separator,
                separatorLookAheadFunc,
                action,
                _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterManySepWalker"]
            ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["MANY_SEP_IDX"], prodOccurrence, _grammar_interpreter__WEBPACK_IMPORTED_MODULE_4__["NextTerminalAfterManySepWalker"]);
        }
    };
    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {
        while (separatorLookAheadFunc()) {
            // note that this CONSUME will never enter recovery because
            // the separatorLookAheadFunc checks that the separator really does exist.
            this.CONSUME(separator);
            action.call(this);
        }
        // we can only arrive to this function after an error
        // has occurred (hence the name 'second') so the following
        // IF will always be entered, its possible to remove it...
        // however it is kept to avoid confusion and be consistent.
        // Performance optimization: "attemptInRepetitionRecovery" will be defined as NOOP unless recovery is enabled
        /* istanbul ignore else */
        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [
            prodOccurrence,
            separator,
            separatorLookAheadFunc,
            action,
            nextTerminalAfterWalker
        ], separatorLookAheadFunc, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["AT_LEAST_ONE_SEP_IDX"], prodOccurrence, nextTerminalAfterWalker);
    };
    RecognizerEngine.prototype.doSingleRepetition = function (action) {
        var beforeIteration = this.getLexerPosition();
        action.call(this);
        var afterIteration = this.getLexerPosition();
        // This boolean will indicate if this repetition progressed
        // or if we are "stuck" (potential infinite loop in the repetition).
        return afterIteration > beforeIteration;
    };
    RecognizerEngine.prototype.orInternalNoCst = function (altsOrOpts, occurrence) {
        var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(altsOrOpts)
            ? altsOrOpts
            : altsOrOpts.DEF;
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OR_IDX"], occurrence);
        var laFunc = this.getLaFuncFromCache(laKey);
        var altIdxToTake = laFunc.call(this, alts);
        if (altIdxToTake !== undefined) {
            var chosenAlternative = alts[altIdxToTake];
            return chosenAlternative.ALT.call(this);
        }
        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
    };
    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {
        var laKey = this.getKeyForAutomaticLookahead(_grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OR_IDX"], occurrence);
        var nestedName = this.nestedRuleBeforeClause(altsOrOpts, laKey);
        try {
            var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(altsOrOpts)
                ? altsOrOpts
                : altsOrOpts.DEF;
            var laFunc = this.getLaFuncFromCache(laKey);
            var altIdxToTake = laFunc.call(this, alts);
            if (altIdxToTake !== undefined) {
                var chosenAlternative = alts[altIdxToTake];
                var nestedAltBeforeClauseResult = this.nestedAltBeforeClause(chosenAlternative, occurrence, _grammar_keys__WEBPACK_IMPORTED_MODULE_1__["OR_IDX"], altIdxToTake);
                try {
                    return chosenAlternative.ALT.call(this);
                }
                finally {
                    if (nestedAltBeforeClauseResult !== undefined) {
                        this.nestedRuleFinallyClause(nestedAltBeforeClauseResult.shortName, nestedAltBeforeClauseResult.nestedName);
                    }
                }
            }
            this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);
        }
        finally {
            if (nestedName !== undefined) {
                this.nestedRuleFinallyClause(laKey, nestedName);
            }
        }
    };
    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {
        this.RULE_STACK.pop();
        this.RULE_OCCURRENCE_STACK.pop();
        // NOOP when cst is disabled
        this.cstFinallyStateUpdate();
        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {
            var firstRedundantTok = this.LA(1);
            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({
                firstRedundant: firstRedundantTok,
                ruleName: this.getCurrRuleFullName()
            });
            this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__["NotAllInputParsedException"](errMsg, firstRedundantTok));
        }
    };
    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {
        var ruleResult;
        try {
            var args = options !== undefined ? options.ARGS : undefined;
            ruleResult = ruleToCall.call(this, idx, args);
            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleToCall.ruleName);
            return ruleResult;
        }
        catch (e) {
            this.subruleInternalError(e, options, ruleToCall.ruleName);
        }
    };
    RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {
        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_2__["isRecognitionException"])(e) && e.partialCstResult !== undefined) {
            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined
                ? options.LABEL
                : ruleName);
            delete e.partialCstResult;
        }
        throw e;
    };
    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {
        var consumedToken;
        try {
            var nextToken = this.LA(1);
            if (this.tokenMatcher(nextToken, tokType) === true) {
                this.consumeToken();
                consumedToken = nextToken;
            }
            else {
                this.consumeInternalError(tokType, nextToken, options);
            }
        }
        catch (eFromConsumption) {
            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);
        }
        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined
            ? options.LABEL
            : tokType.name, consumedToken);
        return consumedToken;
    };
    RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {
        var msg;
        var previousToken = this.LA(0);
        if (options !== undefined && options.ERR_MSG) {
            msg = options.ERR_MSG;
        }
        else {
            msg = this.errorMessageProvider.buildMismatchTokenMessage({
                expected: tokType,
                actual: nextToken,
                previous: previousToken,
                ruleName: this.getCurrRuleFullName()
            });
        }
        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_2__["MismatchedTokenException"](msg, nextToken, previousToken));
    };
    RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {
        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it
        // but the original syntax could have been parsed successfully without any backtracking + recovery
        if (this.recoveryEnabled &&
            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?
            eFromConsumption.name === "MismatchedTokenException" &&
            !this.isBackTracking()) {
            var follows = this.getFollowsForInRuleRecovery(tokType, idx);
            try {
                return this.tryInRuleRecovery(tokType, follows);
            }
            catch (eFromInRuleRecovery) {
                if (eFromInRuleRecovery.name === _recoverable__WEBPACK_IMPORTED_MODULE_6__["IN_RULE_RECOVERY_EXCEPTION"]) {
                    // failed in RuleRecovery.
                    // throw the original error in order to trigger reSync error recovery
                    throw eFromConsumption;
                }
                else {
                    throw eFromInRuleRecovery;
                }
            }
        }
        else {
            throw eFromConsumption;
        }
    };
    RecognizerEngine.prototype.saveRecogState = function () {
        // errors is a getter which will clone the errors array
        var savedErrors = this.errors;
        var savedRuleStack = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["cloneArr"])(this.RULE_STACK);
        return {
            errors: savedErrors,
            lexerState: this.exportLexerState(),
            RULE_STACK: savedRuleStack,
            CST_STACK: this.CST_STACK,
            LAST_EXPLICIT_RULE_STACK: this.LAST_EXPLICIT_RULE_STACK
        };
    };
    RecognizerEngine.prototype.reloadRecogState = function (newState) {
        this.errors = newState.errors;
        this.importLexerState(newState.lexerState);
        this.RULE_STACK = newState.RULE_STACK;
    };
    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {
        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);
        this.RULE_STACK.push(shortName);
        // NOOP when cst is disabled
        this.cstInvocationStateUpdate(fullName, shortName);
    };
    RecognizerEngine.prototype.isBackTracking = function () {
        return this.isBackTrackingStack.length !== 0;
    };
    RecognizerEngine.prototype.getCurrRuleFullName = function () {
        var shortName = this.getLastExplicitRuleShortName();
        return this.shortRuleNameToFull[shortName];
    };
    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {
        return this.shortRuleNameToFull[shortName];
    };
    RecognizerEngine.prototype.isAtEndOfInput = function () {
        return this.tokenMatcher(this.LA(1), _scan_tokens_public__WEBPACK_IMPORTED_MODULE_7__["EOF"]);
    };
    RecognizerEngine.prototype.reset = function () {
        this.resetLexerState();
        this.isBackTrackingStack = [];
        this.errors = [];
        this.RULE_STACK = [];
        this.LAST_EXPLICIT_RULE_STACK = [];
        // TODO: extract a specific rest for TreeBuilder trait
        this.CST_STACK = [];
        this.RULE_OCCURRENCE_STACK = [];
    };
    return RecognizerEngine;
}());

//# sourceMappingURL=recognizer_engine.js.map

/***/ }),
/* 220 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorHandler", function() { return ErrorHandler; });
/* harmony import */ var _exceptions_public__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(212);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);
/* harmony import */ var _grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(207);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(186);




/**
 * Trait responsible for runtime parsing errors.
 */
var ErrorHandler = /** @class */ (function () {
    function ErrorHandler() {
    }
    ErrorHandler.prototype.initErrorHandler = function (config) {
        this._errors = [];
        this.errorMessageProvider = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["defaults"])(config.errorMessageProvider, _parser__WEBPACK_IMPORTED_MODULE_3__["DEFAULT_PARSER_CONFIG"].errorMessageProvider);
    };
    ErrorHandler.prototype.SAVE_ERROR = function (error) {
        if (Object(_exceptions_public__WEBPACK_IMPORTED_MODULE_0__["isRecognitionException"])(error)) {
            error.context = {
                ruleStack: this.getHumanReadableRuleStack(),
                ruleOccurrenceStack: Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(this.RULE_OCCURRENCE_STACK)
            };
            this._errors.push(error);
            return error;
        }
        else {
            throw Error("Trying to save an Error which is not a RecognitionException");
        }
    };
    Object.defineProperty(ErrorHandler.prototype, "errors", {
        // TODO: extract these methods to ErrorHandler Trait?
        get: function () {
            return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["cloneArr"])(this._errors);
        },
        set: function (newErrors) {
            this._errors = newErrors;
        },
        enumerable: true,
        configurable: true
    });
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseEarlyExitException = function (occurrence, prodType, userDefinedErrMsg) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        var lookAheadPathsPerAlternative = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__["getLookaheadPathsForOptionalProd"])(occurrence, ruleGrammar, prodType, this.maxLookahead);
        var insideProdPaths = lookAheadPathsPerAlternative[0];
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var msg = this.errorMessageProvider.buildEarlyExitMessage({
            expectedIterationPaths: insideProdPaths,
            actual: actualTokens,
            previous: this.LA(0),
            customUserDescription: userDefinedErrMsg,
            ruleName: ruleName
        });
        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_0__["EarlyExitException"](msg, this.LA(1), this.LA(0)));
    };
    // TODO: consider caching the error message computed information
    ErrorHandler.prototype.raiseNoAltException = function (occurrence, errMsgTypes) {
        var ruleName = this.getCurrRuleFullName();
        var ruleGrammar = this.getGAstProductions()[ruleName];
        // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?
        var lookAheadPathsPerAlternative = Object(_grammar_lookahead__WEBPACK_IMPORTED_MODULE_2__["getLookaheadPathsForOr"])(occurrence, ruleGrammar, this.maxLookahead);
        var actualTokens = [];
        for (var i = 1; i <= this.maxLookahead; i++) {
            actualTokens.push(this.LA(i));
        }
        var previousToken = this.LA(0);
        var errMsg = this.errorMessageProvider.buildNoViableAltMessage({
            expectedPathsPerAlt: lookAheadPathsPerAlternative,
            actual: actualTokens,
            previous: previousToken,
            customUserDescription: errMsgTypes,
            ruleName: this.getCurrRuleFullName()
        });
        throw this.SAVE_ERROR(new _exceptions_public__WEBPACK_IMPORTED_MODULE_0__["NoViableAltException"](errMsg, this.LA(1), previousToken));
    };
    return ErrorHandler;
}());

//# sourceMappingURL=error_handler.js.map

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentAssist", function() { return ContentAssist; });
/* harmony import */ var _grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(208);
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(187);


var ContentAssist = /** @class */ (function () {
    function ContentAssist() {
    }
    ContentAssist.prototype.initContentAssist = function () { };
    ContentAssist.prototype.computeContentAssist = function (startRuleName, precedingInput) {
        var startRuleGast = this.gastProductionsCache[startRuleName];
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["isUndefined"])(startRuleGast)) {
            throw Error("Rule ->" + startRuleName + "<- does not exist in this grammar.");
        }
        return Object(_grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__["nextPossibleTokensAfter"])([startRuleGast], precedingInput, this.tokenMatcher, this.maxLookahead);
    };
    // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...
    // TODO: should this be more explicitly part of the public API?
    ContentAssist.prototype.getNextPossibleTokenTypes = function (grammarPath) {
        var topRuleName = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_1__["first"])(grammarPath.ruleStack);
        var gastProductions = this.getGAstProductions();
        var topProduction = gastProductions[topRuleName];
        var nextPossibleTokenTypes = new _grammar_interpreter__WEBPACK_IMPORTED_MODULE_0__["NextAfterTokenWalker"](topProduction, grammarPath).startWalking();
        return nextPossibleTokenTypes;
    };
    return ContentAssist;
}());

//# sourceMappingURL=context_assist.js.map

/***/ }),
/* 222 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GastRecorder", function() { return GastRecorder; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(190);
/* harmony import */ var _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(192);
/* harmony import */ var _scan_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(197);
/* harmony import */ var _scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(191);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(186);
/* harmony import */ var _grammar_keys__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(204);







var RECORDING_NULL_OBJECT = {
    description: "This Object indicates the Parser is during Recording Phase"
};
Object.freeze(RECORDING_NULL_OBJECT);
var HANDLE_SEPARATOR = true;
var MAX_METHOD_IDX = Math.pow(2, _grammar_keys__WEBPACK_IMPORTED_MODULE_6__["BITS_FOR_OCCURRENCE_IDX"]) - 1;
var RFT = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__["createToken"])({ name: "RECORDING_PHASE_TOKEN", pattern: _scan_lexer_public__WEBPACK_IMPORTED_MODULE_2__["Lexer"].NA });
Object(_scan_tokens__WEBPACK_IMPORTED_MODULE_3__["augmentTokenTypes"])([RFT]);
var RECORDING_PHASE_TOKEN = Object(_scan_tokens_public__WEBPACK_IMPORTED_MODULE_4__["createTokenInstance"])(RFT, "This IToken indicates the Parser is in Recording Phase\n\t" +
    "" +
    "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details", 
// Using "-1" instead of NaN (as in EOF) because an actual number is less likely to
// cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.
-1, -1, -1, -1, -1, -1);
Object.freeze(RECORDING_PHASE_TOKEN);
var RECORDING_PHASE_CSTNODE = {
    name: "This CSTNode indicates the Parser is in Recording Phase\n\t" +
        "See: https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording for details",
    children: {}
};
/**
 * This trait handles the creation of the GAST structure for Chevrotain Grammars
 */
var GastRecorder = /** @class */ (function () {
    function GastRecorder() {
    }
    GastRecorder.prototype.initGastRecorder = function (config) {
        this.recordingProdStack = [];
        this.RECORDING_PHASE = false;
    };
    GastRecorder.prototype.enableRecording = function () {
        var _this = this;
        this.RECORDING_PHASE = true;
        this.TRACE_INIT("Enable Recording", function () {
            var _loop_1 = function (i) {
                var idx = i > 0 ? i : "";
                _this["CONSUME" + idx] = function (arg1, arg2) {
                    return this.consumeInternalRecord(arg1, i, arg2);
                };
                _this["SUBRULE" + idx] = function (arg1, arg2) {
                    return this.subruleInternalRecord(arg1, i, arg2);
                };
                _this["OPTION" + idx] = function (arg1) {
                    return this.optionInternalRecord(arg1, i);
                };
                _this["OR" + idx] = function (arg1) {
                    return this.orInternalRecord(arg1, i);
                };
                _this["MANY" + idx] = function (arg1) {
                    this.manyInternalRecord(i, arg1);
                };
                _this["MANY_SEP" + idx] = function (arg1) {
                    this.manySepFirstInternalRecord(i, arg1);
                };
                _this["AT_LEAST_ONE" + idx] = function (arg1) {
                    this.atLeastOneInternalRecord(i, arg1);
                };
                _this["AT_LEAST_ONE_SEP" + idx] = function (arg1) {
                    this.atLeastOneSepFirstInternalRecord(i, arg1);
                };
            };
            /**
             * Warning Dark Voodoo Magic upcoming!
             * We are "replacing" the public parsing DSL methods API
             * With **new** alternative implementations on the Parser **instance**
             *
             * So far this is the only way I've found to avoid performance regressions during parsing time.
             * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the "internal"
             *   implementations directly instead.
             */
            for (var i = 0; i < 10; i++) {
                _loop_1(i);
            }
            // DSL methods with the idx(suffix) as an argument
            _this["consume"] = function (idx, arg1, arg2) {
                return this.consumeInternalRecord(arg1, idx, arg2);
            };
            _this["subrule"] = function (idx, arg1, arg2) {
                return this.subruleInternalRecord(arg1, idx, arg2);
            };
            _this["option"] = function (idx, arg1) {
                return this.optionInternalRecord(arg1, idx);
            };
            _this["or"] = function (idx, arg1) {
                return this.orInternalRecord(arg1, idx);
            };
            _this["many"] = function (idx, arg1) {
                this.manyInternalRecord(idx, arg1);
            };
            _this["atLeastOne"] = function (idx, arg1) {
                this.atLeastOneInternalRecord(idx, arg1);
            };
            _this.ACTION = _this.ACTION_RECORD;
            _this.BACKTRACK = _this.BACKTRACK_RECORD;
            _this.LA = _this.LA_RECORD;
        });
    };
    GastRecorder.prototype.disableRecording = function () {
        var _this = this;
        this.RECORDING_PHASE = false;
        // By deleting these **instance** properties, any future invocation
        // will be deferred to the original methods on the **prototype** object
        // This seems to get rid of any incorrect optimizations that V8 may
        // do during the recording phase.
        this.TRACE_INIT("Deleting Recording methods", function () {
            for (var i = 0; i < 10; i++) {
                var idx = i > 0 ? i : "";
                delete _this["CONSUME" + idx];
                delete _this["SUBRULE" + idx];
                delete _this["OPTION" + idx];
                delete _this["OR" + idx];
                delete _this["MANY" + idx];
                delete _this["MANY_SEP" + idx];
                delete _this["AT_LEAST_ONE" + idx];
                delete _this["AT_LEAST_ONE_SEP" + idx];
            }
            delete _this["consume"];
            delete _this["subrule"];
            delete _this["option"];
            delete _this["or"];
            delete _this["many"];
            delete _this["atLeastOne"];
            delete _this.ACTION;
            delete _this.BACKTRACK;
            delete _this.LA;
        });
    };
    // TODO: is there any way to use this method to check no
    //   Parser methods are called inside an ACTION?
    //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?
    GastRecorder.prototype.ACTION_RECORD = function (impl) {
        // NO-OP during recording
        return;
    };
    // Executing backtracking logic will break our recording logic assumptions
    GastRecorder.prototype.BACKTRACK_RECORD = function (grammarRule, args) {
        return function () { return true; };
    };
    // LA is part of the official API and may be used for custom lookahead logic
    // by end users who may forget to wrap it in ACTION or inside a GATE
    GastRecorder.prototype.LA_RECORD = function (howMuch) {
        // We cannot use the RECORD_PHASE_TOKEN here because someone may depend
        // On LA return EOF at the end of the input so an infinite loop may occur.
        return _parser__WEBPACK_IMPORTED_MODULE_5__["END_OF_FILE"];
    };
    GastRecorder.prototype.topLevelRuleRecord = function (name, def) {
        try {
            var newTopLevelRule = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Rule"]({ definition: [], name: name });
            newTopLevelRule.name = name;
            this.recordingProdStack.push(newTopLevelRule);
            def.call(this);
            this.recordingProdStack.pop();
            return newTopLevelRule;
        }
        catch (originalError) {
            if (originalError.KNOWN_RECORDER_ERROR !== true) {
                try {
                    originalError.message =
                        originalError.message +
                            '\n\t This error was thrown during the "grammar recording phase" For more info see:\n\t' +
                            "https://sap.github.io/chevrotain/docs/guide/internals.html#grammar-recording";
                }
                catch (mutabilityError) {
                    // We may not be able to modify the original error object
                    throw originalError;
                }
            }
            throw originalError;
        }
    };
    // Implementation of parsing DSL
    GastRecorder.prototype.optionInternalRecord = function (actionORMethodDef, occurrence) {
        return recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"], actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.atLeastOneInternalRecord = function (occurrence, actionORMethodDef) {
        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatory"], actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.atLeastOneSepFirstInternalRecord = function (occurrence, options) {
        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatoryWithSeparator"], options, occurrence, HANDLE_SEPARATOR);
    };
    GastRecorder.prototype.manyInternalRecord = function (occurrence, actionORMethodDef) {
        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"], actionORMethodDef, occurrence);
    };
    GastRecorder.prototype.manySepFirstInternalRecord = function (occurrence, options) {
        recordProd.call(this, _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"], options, occurrence, HANDLE_SEPARATOR);
    };
    GastRecorder.prototype.orInternalRecord = function (altsOrOpts, occurrence) {
        return recordOrProd.call(this, altsOrOpts, occurrence);
    };
    GastRecorder.prototype.subruleInternalRecord = function (ruleToCall, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!ruleToCall || Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(ruleToCall, "ruleName") === false) {
            var error = new Error("<SUBRULE" + getIdxSuffix(occurrence) + "> argument is invalid" +
                (" expecting a Parser method reference but got: <" + JSON.stringify(ruleToCall) + ">") +
                ("\n inside top level rule: <" + this.recordingProdStack[0].name + ">"));
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
        }
        var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["peek"])(this.recordingProdStack);
        var ruleName = ruleToCall["ruleName"];
        var newNoneTerminal = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]({
            idx: occurrence,
            nonTerminalName: ruleName,
            // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created
            referencedRule: undefined
        });
        prevProd.definition.push(newNoneTerminal);
        return this.outputCst
            ? RECORDING_PHASE_CSTNODE
            : RECORDING_NULL_OBJECT;
    };
    GastRecorder.prototype.consumeInternalRecord = function (tokType, occurrence, options) {
        assertMethodIdxIsValid(occurrence);
        if (!Object(_scan_tokens__WEBPACK_IMPORTED_MODULE_3__["hasShortKeyProperty"])(tokType)) {
            var error = new Error("<CONSUME" + getIdxSuffix(occurrence) + "> argument is invalid" +
                (" expecting a TokenType reference but got: <" + JSON.stringify(tokType) + ">") +
                ("\n inside top level rule: <" + this.recordingProdStack[0].name + ">"));
            error.KNOWN_RECORDER_ERROR = true;
            throw error;
        }
        var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["peek"])(this.recordingProdStack);
        var newNoneTerminal = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]({
            idx: occurrence,
            terminalType: tokType
        });
        prevProd.definition.push(newNoneTerminal);
        return RECORDING_PHASE_TOKEN;
    };
    return GastRecorder;
}());

function recordProd(prodConstructor, mainProdArg, occurrence, handleSep) {
    if (handleSep === void 0) { handleSep = false; }
    assertMethodIdxIsValid(occurrence);
    var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["peek"])(this.recordingProdStack);
    var grammarAction = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(mainProdArg)
        ? mainProdArg
        : mainProdArg.DEF;
    var newProd = new prodConstructor({ definition: [], idx: occurrence });
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(mainProdArg, "NAME")) {
        newProd.name = mainProdArg.NAME;
    }
    if (handleSep) {
        newProd.separator = mainProdArg.SEP;
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(mainProdArg, "MAX_LOOKAHEAD")) {
        newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    this.recordingProdStack.push(newProd);
    grammarAction.call(this);
    prevProd.definition.push(newProd);
    this.recordingProdStack.pop();
    return RECORDING_NULL_OBJECT;
}
function recordOrProd(mainProdArg, occurrence) {
    var _this = this;
    assertMethodIdxIsValid(occurrence);
    var prevProd = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["peek"])(this.recordingProdStack);
    // Only an array of alternatives
    var hasOptions = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isArray"])(mainProdArg) === false;
    var alts = hasOptions === false ? mainProdArg : mainProdArg.DEF;
    var newOrProd = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"]({
        definition: [],
        idx: occurrence,
        ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true
    });
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(mainProdArg, "NAME")) {
        newOrProd.name = mainProdArg.NAME;
    }
    if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(mainProdArg, "MAX_LOOKAHEAD")) {
        newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;
    }
    var hasPredicates = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["some"])(alts, function (currAlt) { return Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(currAlt.GATE); });
    newOrProd.hasPredicates = hasPredicates;
    prevProd.definition.push(newOrProd);
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(alts, function (currAlt) {
        var currAltFlat = new _grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Flat"]({ definition: [] });
        newOrProd.definition.push(currAltFlat);
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(currAlt, "NAME")) {
            currAltFlat.name = currAlt.NAME;
        }
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(currAlt, "IGNORE_AMBIGUITIES")) {
            currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES;
        }
        // **implicit** ignoreAmbiguities due to usage of gate
        else if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(currAlt, "GATE")) {
            currAltFlat.ignoreAmbiguities = true;
        }
        _this.recordingProdStack.push(currAltFlat);
        currAlt.ALT.call(_this);
        _this.recordingProdStack.pop();
    });
    return RECORDING_NULL_OBJECT;
}
function getIdxSuffix(idx) {
    return idx === 0 ? "" : "" + idx;
}
function assertMethodIdxIsValid(idx) {
    if (idx < 0 || idx > MAX_METHOD_IDX) {
        var error = new Error(
        // The stack trace will contain all the needed details
        "Invalid DSL Method idx value: <" + idx + ">\n\t" +
            ("Idx value must be a none negative value smaller than " + (MAX_METHOD_IDX +
                1)));
        error.KNOWN_RECORDER_ERROR = true;
        throw error;
    }
}
//# sourceMappingURL=gast_recorder.js.map

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PerformanceTracer", function() { return PerformanceTracer; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(186);


/**
 * Trait responsible for runtime parsing errors.
 */
var PerformanceTracer = /** @class */ (function () {
    function PerformanceTracer() {
    }
    PerformanceTracer.prototype.initPerformanceTracer = function (config) {
        if (Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["has"])(config, "traceInitPerf")) {
            var userTraceInitPerf = config.traceInitPerf;
            var traceIsNumber = typeof userTraceInitPerf === "number";
            this.traceInitMaxIdent = traceIsNumber
                ? userTraceInitPerf
                : Infinity;
            this.traceInitPerf = traceIsNumber
                ? userTraceInitPerf > 0
                : userTraceInitPerf;
        }
        else {
            this.traceInitMaxIdent = 0;
            this.traceInitPerf = _parser__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_PARSER_CONFIG"].traceInitPerf;
        }
        this.traceInitIndent = -1;
    };
    PerformanceTracer.prototype.TRACE_INIT = function (phaseDesc, phaseImpl) {
        // No need to optimize this using NOOP pattern because
        // It is not called in a hot spot...
        if (this.traceInitPerf === true) {
            this.traceInitIndent++;
            var indent = new Array(this.traceInitIndent + 1).join("\t");
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                console.log(indent + "--> <" + phaseDesc + ">");
            }
            var _a = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["timer"])(phaseImpl), time = _a.time, value = _a.value;
            /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */
            var traceMethod = time > 10 ? console.warn : console.log;
            if (this.traceInitIndent < this.traceInitMaxIdent) {
                traceMethod(indent + "<-- <" + phaseDesc + "> time: " + time + "ms");
            }
            this.traceInitIndent--;
            return value;
        }
        else {
            return phaseImpl();
        }
    };
    return PerformanceTracer;
}());

//# sourceMappingURL=perf_tracer.js.map

/***/ }),
/* 224 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createSyntaxDiagramsCode", function() { return createSyntaxDiagramsCode; });
/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(185);

function createSyntaxDiagramsCode(grammar, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.resourceBase, resourceBase = _c === void 0 ? "https://unpkg.com/chevrotain@" + _version__WEBPACK_IMPORTED_MODULE_0__["VERSION"] + "/diagrams/" : _c, _d = _b.css, css = _d === void 0 ? "https://unpkg.com/chevrotain@" + _version__WEBPACK_IMPORTED_MODULE_0__["VERSION"] + "/diagrams/diagrams.css" : _d;
    var header = "\n<!-- This is a generated file -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<style>\n  body {\n    background-color: hsl(30, 20%, 95%)\n  }\n</style>\n\n";
    var cssHtml = "\n<link rel='stylesheet' href='" + css + "'>\n";
    var scripts = "\n<script src='" + resourceBase + "vendor/railroad-diagrams.js'></script>\n<script src='" + resourceBase + "src/diagrams_builder.js'></script>\n<script src='" + resourceBase + "src/diagrams_behavior.js'></script>\n<script src='" + resourceBase + "src/main.js'></script>\n";
    var diagramsDiv = "\n<div id=\"diagrams\" align=\"center\"></div>    \n";
    var serializedGrammar = "\n<script>\n    window.serializedGrammar = " + JSON.stringify(grammar, null, "  ") + ";\n</script>\n";
    var initLogic = "\n<script>\n    var diagramsDiv = document.getElementById(\"diagrams\");\n    main.drawDiagramsFromSerializedGrammar(serializedGrammar, diagramsDiv);\n</script>\n";
    return (header + cssHtml + scripts + diagramsDiv + serializedGrammar + initLogic);
}
//# sourceMappingURL=render_public.js.map

/***/ }),
/* 225 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateParserFactory", function() { return generateParserFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generateParserModule", function() { return generateParserModule; });
/* harmony import */ var _generate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(226);

function generateParserFactory(options) {
    var wrapperText = Object(_generate__WEBPACK_IMPORTED_MODULE_0__["genWrapperFunction"])({
        name: options.name,
        rules: options.rules
    });
    var constructorWrapper = new Function("tokenVocabulary", "config", "chevrotain", wrapperText);
    return function (config) {
        return constructorWrapper(options.tokenVocabulary, config, 
        // TODO: check how the require is transpiled/webpacked
        __webpack_require__(184));
    };
}
function generateParserModule(options) {
    return Object(_generate__WEBPACK_IMPORTED_MODULE_0__["genUmdModule"])({ name: options.name, rules: options.rules });
}
//# sourceMappingURL=generate_public.js.map

/***/ }),
/* 226 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genUmdModule", function() { return genUmdModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genWrapperFunction", function() { return genWrapperFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genClass", function() { return genClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genAllRules", function() { return genAllRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genRule", function() { return genRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genTerminal", function() { return genTerminal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genNonTerminal", function() { return genNonTerminal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genAlternation", function() { return genAlternation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "genSingleAlt", function() { return genSingleAlt; });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(187);
/* harmony import */ var _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(190);


/**
 * Missing features
 * 1. Rule arguments
 * 2. Gates
 * 3. embedded actions
 */
var NL = "\n";
function genUmdModule(options) {
    return "\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['chevrotain'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require('chevrotain'));\n    } else {\n        // Browser globals (root is window)\n        root.returnExports = factory(root.b);\n    }\n}(typeof self !== 'undefined' ? self : this, function (chevrotain) {\n\n" + genClass(options) + "\n    \nreturn {\n    " + options.name + ": " + options.name + " \n}\n}));\n";
}
function genWrapperFunction(options) {
    return "    \n" + genClass(options) + "\nreturn new " + options.name + "(tokenVocabulary, config)    \n";
}
function genClass(options) {
    // TODO: how to pass the token vocabulary? Constructor? other?
    var result = "\nfunction " + options.name + "(tokenVocabulary, config) {\n    // invoke super constructor\n    // No support for embedded actions currently, so we can 'hardcode'\n    // The use of CstParser.\n    chevrotain.CstParser.call(this, tokenVocabulary, config)\n\n    const $ = this\n\n    " + genAllRules(options.rules) + "\n\n    // very important to call this after all the rules have been defined.\n    // otherwise the parser may not work correctly as it will lack information\n    // derived during the self analysis phase.\n    this.performSelfAnalysis(this)\n}\n\n// inheritance as implemented in javascript in the previous decade... :(\n" + options.name + ".prototype = Object.create(chevrotain.CstParser.prototype)\n" + options.name + ".prototype.constructor = " + options.name + "    \n    ";
    return result;
}
function genAllRules(rules) {
    var rulesText = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(rules, function (currRule) {
        return genRule(currRule, 1);
    });
    return rulesText.join("\n");
}
function genRule(prod, n) {
    var result = indent(n, "$.RULE(\"" + prod.name + "\", function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "})") + NL;
    return result;
}
function genTerminal(prod, n) {
    var name = prod.terminalType.name;
    // TODO: potential performance optimization, avoid tokenMap Dictionary access
    return indent(n, "$.CONSUME" + prod.idx + "(this.tokensMap." + name + ")" + NL);
}
function genNonTerminal(prod, n) {
    return indent(n, "$.SUBRULE" + prod.idx + "($." + prod.nonTerminalName + ")" + NL);
}
function genAlternation(prod, n) {
    var result = indent(n, "$.OR" + prod.idx + "([") + NL;
    var alts = Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["map"])(prod.definition, function (altDef) { return genSingleAlt(altDef, n + 1); });
    result += alts.join("," + NL);
    result += NL + indent(n, "])" + NL);
    return result;
}
function genSingleAlt(prod, n) {
    var result = indent(n, "{") + NL;
    if (prod.name) {
        result += indent(n + 1, "NAME: \"" + prod.name + "\",") + NL;
    }
    result += indent(n + 1, "ALT: function() {") + NL;
    result += genDefinition(prod.definition, n + 1);
    result += indent(n + 1, "}") + NL;
    result += indent(n, "}");
    return result;
}
function genProd(prod, n) {
    /* istanbul ignore else */
    if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["NonTerminal"]) {
        return genNonTerminal(prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Option"]) {
        return genDSLRule("OPTION", prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatory"]) {
        return genDSLRule("AT_LEAST_ONE", prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionMandatoryWithSeparator"]) {
        return genDSLRule("AT_LEAST_ONE_SEP", prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["RepetitionWithSeparator"]) {
        return genDSLRule("MANY_SEP", prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Repetition"]) {
        return genDSLRule("MANY", prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Alternation"]) {
        return genAlternation(prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Terminal"]) {
        return genTerminal(prod, n);
    }
    else if (prod instanceof _parse_grammar_gast_gast_public__WEBPACK_IMPORTED_MODULE_1__["Flat"]) {
        return genDefinition(prod.definition, n);
    }
    else {
        throw Error("non exhaustive match");
    }
}
function genDSLRule(dslName, prod, n) {
    var result = indent(n, "$." + (dslName + prod.idx) + "(");
    if (prod.name || prod.separator) {
        result += "{" + NL;
        if (prod.name) {
            result += indent(n + 1, "NAME: \"" + prod.name + "\"") + "," + NL;
        }
        if (prod.separator) {
            result +=
                indent(n + 1, "SEP: this.tokensMap." + prod.separator.name) +
                    "," +
                    NL;
        }
        result += "DEF: " + genDefFunction(prod.definition, n + 2) + NL;
        result += indent(n, "}") + NL;
    }
    else {
        result += genDefFunction(prod.definition, n + 1);
    }
    result += indent(n, ")") + NL;
    return result;
}
function genDefFunction(definition, n) {
    var def = "function() {" + NL;
    def += genDefinition(definition, n);
    def += indent(n, "}") + NL;
    return def;
}
function genDefinition(def, n) {
    var result = "";
    Object(_utils_utils__WEBPACK_IMPORTED_MODULE_0__["forEach"])(def, function (prod) {
        result += genProd(prod, n + 1);
    });
    return result;
}
function indent(howMuch, text) {
    var spaces = Array(howMuch * 4 + 1).join(" ");
    return spaces + text;
}
//# sourceMappingURL=generate.js.map

/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RowAddress = void 0;

__webpack_require__(146);

var _Cell = __webpack_require__(143);

var _ColumnAddress = __webpack_require__(182);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var RowAddress = /*#__PURE__*/function () {
  function RowAddress(type, row, sheet) {
    _classCallCheck(this, RowAddress);

    this.type = type;
    this.row = row;
    this.sheet = sheet;
  }

  _createClass(RowAddress, [{
    key: "isRowAbsolute",
    value: function isRowAbsolute() {
      return this.type === _ColumnAddress.ReferenceType.ABSOLUTE;
    }
  }, {
    key: "isRowRelative",
    value: function isRowRelative() {
      return this.type === _ColumnAddress.ReferenceType.RELATIVE;
    }
  }, {
    key: "isAbsolute",
    value: function isAbsolute() {
      return this.type === _ColumnAddress.ReferenceType.ABSOLUTE && this.sheet !== undefined;
    }
  }, {
    key: "moved",
    value: function moved(toSheet, toRight, toBottom) {
      var newSheet = this.sheet === undefined ? undefined : toSheet;
      return new RowAddress(this.type, this.row + toBottom, newSheet);
    }
  }, {
    key: "shiftedByRows",
    value: function shiftedByRows(numberOfColumns) {
      return new RowAddress(this.type, this.row + numberOfColumns, this.sheet);
    }
  }, {
    key: "toSimpleRowAddress",
    value: function toSimpleRowAddress(baseAddress) {
      var sheet = (0, _Cell.absoluteSheetReference)(this, baseAddress);
      var row = this.row;

      if (this.isRowRelative()) {
        row = baseAddress.row + this.row;
      }

      return (0, _Cell.simpleRowAddress)(sheet, row);
    }
  }, {
    key: "shiftRelativeDimensions",
    value: function shiftRelativeDimensions(toRight, toBottom) {
      var row = this.isRowRelative() ? this.row + toBottom : this.row;
      return new RowAddress(this.type, row, this.sheet);
    }
  }, {
    key: "shiftAbsoluteDimensions",
    value: function shiftAbsoluteDimensions(toRight, toBottom) {
      var row = this.isRowAbsolute() ? this.row + toBottom : this.row;
      return new RowAddress(this.type, row, this.sheet);
    }
  }, {
    key: "withAbsoluteSheet",
    value: function withAbsoluteSheet(sheet) {
      return new RowAddress(this.type, this.row, sheet);
    }
  }, {
    key: "isInvalid",
    value: function isInvalid(baseAddress) {
      return this.toSimpleRowAddress(baseAddress).row < 0;
    }
  }, {
    key: "hash",
    value: function hash(withSheet) {
      var sheetPart = withSheet && this.sheet !== undefined ? "#".concat(this.sheet) : '';

      switch (this.type) {
        case _ColumnAddress.ReferenceType.RELATIVE:
          {
            return "".concat(sheetPart, "#ROWR").concat(this.row);
          }

        case _ColumnAddress.ReferenceType.ABSOLUTE:
          {
            return "".concat(sheetPart, "#ROWA").concat(this.row);
          }
      }
    }
  }, {
    key: "unparse",
    value: function unparse(baseAddress) {
      var simpleAddress = this.toSimpleRowAddress(baseAddress);

      if ((0, _Cell.invalidSimpleRowAddress)(simpleAddress)) {
        return undefined;
      }

      var dollar = this.type === _ColumnAddress.ReferenceType.ABSOLUTE ? '$' : '';
      return "".concat(dollar).concat(simpleAddress.row + 1);
    }
  }, {
    key: "exceedsSheetSizeLimits",
    value: function exceedsSheetSizeLimits(maxRows) {
      return this.row >= maxRows;
    }
  }], [{
    key: "absolute",
    value: function absolute(row, sheet) {
      return new RowAddress(_ColumnAddress.ReferenceType.ABSOLUTE, row, sheet);
    }
  }, {
    key: "relative",
    value: function relative(row, sheet) {
      return new RowAddress(_ColumnAddress.ReferenceType.RELATIVE, row, sheet);
    }
  }]);

  return RowAddress;
}();

exports.RowAddress = RowAddress;

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.ParserWithCaching = void 0;
exports.bindWhitespacesToTokens = bindWhitespacesToTokens;

__webpack_require__(150);

__webpack_require__(144);

__webpack_require__(146);

__webpack_require__(77);

__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(229);

var _chevrotain = __webpack_require__(184);

var _Cell = __webpack_require__(143);

var _ = __webpack_require__(169);

var _addressRepresentationConverters = __webpack_require__(170);

var _Ast = __webpack_require__(230);

var _binaryOpTokenMap = __webpack_require__(231);

var _Cache = __webpack_require__(232);

var _FormulaParser = __webpack_require__(233);

var _LexerConfig = __webpack_require__(183);

var _Unparser = __webpack_require__(239);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Parses formula using caching if feasible.
 */
var ParserWithCaching = /*#__PURE__*/function () {
  function ParserWithCaching(config, functionRegistry, sheetMapping) {
    _classCallCheck(this, ParserWithCaching);

    this.config = config;
    this.functionRegistry = functionRegistry;
    this.sheetMapping = sheetMapping;
    this.statsCacheUsed = 0;
    this.lexerConfig = (0, _LexerConfig.buildLexerConfig)(config);
    this.lexer = new _FormulaParser.FormulaLexer(this.lexerConfig);
    this.formulaParser = new _FormulaParser.FormulaParser(this.lexerConfig, this.sheetMapping);
    this.cache = new _Cache.Cache(this.functionRegistry);
  }
  /**
   * Parses a formula.
   *
   * @param text - formula to parse
   * @param formulaAddress - address with regard to which formula should be parsed. Impacts computed addresses in R0C0 format.
   */


  _createClass(ParserWithCaching, [{
    key: "parse",
    value: function parse(text, formulaAddress) {
      var lexerResult = this.lexer.tokenizeFormula(text);

      if (lexerResult.errors.length > 0) {
        var errors = lexerResult.errors.map(function (e) {
          return {
            type: _Ast.ParsingErrorType.LexingError,
            message: e.message
          };
        });
        return {
          ast: (0, _.buildParsingErrorAst)(),
          errors: errors,
          hasVolatileFunction: false,
          hasStructuralChangeFunction: false,
          dependencies: []
        };
      }

      var hash = this.computeHashFromTokens(lexerResult.tokens, formulaAddress);
      var cacheResult = this.cache.get(hash);

      if (cacheResult !== undefined) {
        ++this.statsCacheUsed;
      } else {
        var processedTokens = bindWhitespacesToTokens(lexerResult.tokens);
        var parsingResult = this.formulaParser.parseFromTokens(processedTokens, formulaAddress);

        if (parsingResult.errors.length > 0) {
          return Object.assign(Object.assign({}, parsingResult), {
            hasVolatileFunction: false,
            hasStructuralChangeFunction: false,
            dependencies: []
          });
        } else {
          cacheResult = this.cache.set(hash, parsingResult.ast);
        }
      }

      var _cacheResult = cacheResult,
          ast = _cacheResult.ast,
          hasVolatileFunction = _cacheResult.hasVolatileFunction,
          hasStructuralChangeFunction = _cacheResult.hasStructuralChangeFunction,
          relativeDependencies = _cacheResult.relativeDependencies;
      return {
        ast: ast,
        errors: [],
        hasVolatileFunction: hasVolatileFunction,
        hasStructuralChangeFunction: hasStructuralChangeFunction,
        dependencies: relativeDependencies
      };
    }
  }, {
    key: "fetchCachedResultForAst",
    value: function fetchCachedResultForAst(ast) {
      var hash = this.computeHashFromAst(ast);
      return this.fetchCachedResult(hash);
    }
  }, {
    key: "fetchCachedResult",
    value: function fetchCachedResult(hash) {
      var cacheResult = this.cache.get(hash);

      if (cacheResult === undefined) {
        throw new Error('There is no AST with such key in the cache');
      } else {
        var ast = cacheResult.ast,
            hasVolatileFunction = cacheResult.hasVolatileFunction,
            hasStructuralChangeFunction = cacheResult.hasStructuralChangeFunction,
            relativeDependencies = cacheResult.relativeDependencies;
        return {
          ast: ast,
          errors: [],
          hasVolatileFunction: hasVolatileFunction,
          hasStructuralChangeFunction: hasStructuralChangeFunction,
          dependencies: relativeDependencies
        };
      }
    }
  }, {
    key: "computeHashFromTokens",
    value: function computeHashFromTokens(tokens, baseAddress) {
      var _a;

      var hash = '';
      var idx = 0;

      while (idx < tokens.length) {
        var token = tokens[idx];

        if ((0, _chevrotain.tokenMatcher)(token, _LexerConfig.CellReference)) {
          var cellAddress = (0, _addressRepresentationConverters.cellAddressFromString)(this.sheetMapping, token.image, baseAddress);

          if (cellAddress === undefined) {
            hash = hash.concat(token.image);
          } else {
            hash = hash.concat(cellAddress.hash(true));
          }
        } else if ((0, _chevrotain.tokenMatcher)(token, _LexerConfig.ProcedureName)) {
          var procedureName = token.image.toUpperCase().slice(0, -1);
          var canonicalProcedureName = (_a = this.lexerConfig.functionMapping[procedureName]) !== null && _a !== void 0 ? _a : procedureName;
          hash = hash.concat(canonicalProcedureName, '(');
        } else if ((0, _chevrotain.tokenMatcher)(token, _LexerConfig.ColumnRange)) {
          var _token$image$split = token.image.split(':'),
              _token$image$split2 = _slicedToArray(_token$image$split, 2),
              start = _token$image$split2[0],
              end = _token$image$split2[1];

          var startAddress = (0, _addressRepresentationConverters.columnAddressFromString)(this.sheetMapping, start, baseAddress);
          var endAddress = (0, _addressRepresentationConverters.columnAddressFromString)(this.sheetMapping, end, baseAddress);

          if (startAddress === undefined || endAddress === undefined) {
            hash = hash.concat('!REF');
          } else {
            hash = hash.concat(startAddress.hash(true), ':', endAddress.hash(true));
          }
        } else if ((0, _chevrotain.tokenMatcher)(token, _LexerConfig.RowRange)) {
          var _token$image$split3 = token.image.split(':'),
              _token$image$split4 = _slicedToArray(_token$image$split3, 2),
              _start = _token$image$split4[0],
              _end = _token$image$split4[1];

          var _startAddress = (0, _addressRepresentationConverters.rowAddressFromString)(this.sheetMapping, _start, baseAddress);

          var _endAddress = (0, _addressRepresentationConverters.rowAddressFromString)(this.sheetMapping, _end, baseAddress);

          if (_startAddress === undefined || _endAddress === undefined) {
            hash = hash.concat('!REF');
          } else {
            hash = hash.concat(_startAddress.hash(true), ':', _endAddress.hash(true));
          }
        } else {
          hash = hash.concat(token.image);
        }

        idx++;
      }

      return hash;
    }
  }, {
    key: "rememberNewAst",
    value: function rememberNewAst(ast) {
      var hash = this.computeHashFromAst(ast);
      return this.cache.maybeSetAndThenGet(hash, ast);
    }
  }, {
    key: "computeHashFromAst",
    value: function computeHashFromAst(ast) {
      return '=' + this.computeHashOfAstNode(ast);
    }
  }, {
    key: "computeHashOfAstNode",
    value: function computeHashOfAstNode(ast) {
      var _this = this;

      switch (ast.type) {
        case _.AstNodeType.EMPTY:
          {
            return ast.leadingWhitespace || '';
          }

        case _.AstNodeType.NUMBER:
          {
            return (0, _Ast.imageWithWhitespace)((0, _Unparser.formatNumber)(ast.value, this.config.decimalSeparator), ast.leadingWhitespace);
          }

        case _.AstNodeType.STRING:
          {
            return (0, _Ast.imageWithWhitespace)('"' + ast.value + '"', ast.leadingWhitespace);
          }

        case _.AstNodeType.NAMED_EXPRESSION:
          {
            return (0, _Ast.imageWithWhitespace)(ast.expressionName, ast.leadingWhitespace);
          }

        case _.AstNodeType.FUNCTION_CALL:
          {
            var args = ast.args.map(function (arg) {
              return _this.computeHashOfAstNode(arg);
            }).join(this.config.functionArgSeparator);
            var rightPart = ast.procedureName + '(' + args + (0, _Ast.imageWithWhitespace)(')', ast.internalWhitespace);
            return (0, _Ast.imageWithWhitespace)(rightPart, ast.leadingWhitespace);
          }

        case _.AstNodeType.CELL_REFERENCE:
          {
            return (0, _Ast.imageWithWhitespace)(ast.reference.hash(true), ast.leadingWhitespace);
          }

        case _.AstNodeType.COLUMN_RANGE:
        case _.AstNodeType.ROW_RANGE:
        case _.AstNodeType.CELL_RANGE:
          {
            var start = ast.start.hash(ast.sheetReferenceType !== _Ast.RangeSheetReferenceType.RELATIVE);
            var end = ast.end.hash(ast.sheetReferenceType === _Ast.RangeSheetReferenceType.BOTH_ABSOLUTE);
            return (0, _Ast.imageWithWhitespace)(start + ':' + end, ast.leadingWhitespace);
          }

        case _.AstNodeType.MINUS_UNARY_OP:
          {
            return (0, _Ast.imageWithWhitespace)('-' + this.computeHashOfAstNode(ast.value), ast.leadingWhitespace);
          }

        case _.AstNodeType.PLUS_UNARY_OP:
          {
            return (0, _Ast.imageWithWhitespace)('+' + this.computeHashOfAstNode(ast.value), ast.leadingWhitespace);
          }

        case _.AstNodeType.PERCENT_OP:
          {
            return this.computeHashOfAstNode(ast.value) + (0, _Ast.imageWithWhitespace)('%', ast.leadingWhitespace);
          }

        case _.AstNodeType.ERROR:
          {
            var image = this.config.translationPackage.getErrorTranslation(ast.error ? ast.error.type : _Cell.ErrorType.ERROR);
            return (0, _Ast.imageWithWhitespace)(image, ast.leadingWhitespace);
          }

        case _.AstNodeType.ERROR_WITH_RAW_INPUT:
          {
            return (0, _Ast.imageWithWhitespace)(ast.rawInput, ast.leadingWhitespace);
          }

        case _.AstNodeType.ARRAY:
          {
            var _args = ast.args.map(function (row) {
              return row.map(function (val) {
                return _this.computeHashOfAstNode(val);
              }).join(',');
            }).join(';');

            return (0, _Ast.imageWithWhitespace)('{' + _args + (0, _Ast.imageWithWhitespace)('}', ast.internalWhitespace), ast.leadingWhitespace);
          }

        case _.AstNodeType.PARENTHESIS:
          {
            var expression = this.computeHashOfAstNode(ast.expression);

            var _rightPart = '(' + expression + (0, _Ast.imageWithWhitespace)(')', ast.internalWhitespace);

            return (0, _Ast.imageWithWhitespace)(_rightPart, ast.leadingWhitespace);
          }

        default:
          {
            return this.computeHashOfAstNode(ast.left) + (0, _Ast.imageWithWhitespace)(_binaryOpTokenMap.binaryOpTokenMap[ast.type], ast.leadingWhitespace) + this.computeHashOfAstNode(ast.right);
          }
      }
    }
  }]);

  return ParserWithCaching;
}();

exports.ParserWithCaching = ParserWithCaching;

function bindWhitespacesToTokens(tokens) {
  var processedTokens = [];
  var first = tokens[0];

  if (!(0, _chevrotain.tokenMatcher)(first, _LexerConfig.WhiteSpace)) {
    processedTokens.push(first);
  }

  for (var i = 1; i < tokens.length; ++i) {
    var current = tokens[i];

    if ((0, _chevrotain.tokenMatcher)(current, _LexerConfig.WhiteSpace)) {
      continue;
    }

    var previous = tokens[i - 1];

    if ((0, _chevrotain.tokenMatcher)(previous, _LexerConfig.WhiteSpace)) {
      current.leadingWhitespace = previous;
    }

    processedTokens.push(current);
  }

  return processedTokens;
}

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var IndexedObject = __webpack_require__(55);
var toIndexedObject = __webpack_require__(54);
var arrayMethodIsStrict = __webpack_require__(156);

var un$Join = uncurryThis([].join);

var ES3_STRINGS = IndexedObject != Object;
var STRICT_METHOD = arrayMethodIsStrict('join', ',');

// `Array.prototype.join` method
// https://tc39.es/ecma262/#sec-array.prototype.join
$({ target: 'Array', proto: true, forced: ES3_STRINGS || !STRICT_METHOD }, {
  join: function join(separator) {
    return un$Join(toIndexedObject(this), separator === undefined ? ',' : separator);
  }
});


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.buildTimesOpAst = exports.buildStringAst = exports.buildRowRangeAst = exports.buildProcedureAst = exports.buildPowerOpAst = exports.buildPlusUnaryOpAst = exports.buildPlusOpAst = exports.buildPercentOpAst = exports.buildParsingErrorAst = exports.buildParenthesisAst = exports.buildNumberAst = exports.buildNotEqualOpAst = exports.buildNamedExpressionAst = exports.buildMinusUnaryOpAst = exports.buildMinusOpAst = exports.buildLessThanOrEqualOpAst = exports.buildLessThanOpAst = exports.buildGreaterThanOrEqualOpAst = exports.buildGreaterThanOpAst = exports.buildErrorWithRawInputAst = exports.buildEqualsOpAst = exports.buildEmptyArgAst = exports.buildDivOpAst = exports.buildConcatenateOpAst = exports.buildColumnRangeAst = exports.buildCellReferenceAst = exports.buildCellRangeAst = exports.buildCellErrorAst = exports.buildArrayAst = exports.RangeSheetReferenceType = exports.ParsingErrorType = exports.AstNodeType = void 0;
exports.imageWithWhitespace = imageWithWhitespace;
exports.parsingError = void 0;

__webpack_require__(77);

var _Cell = __webpack_require__(143);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var parsingError = function parsingError(type, message) {
  return {
    type: type,
    message: message
  };
};

exports.parsingError = parsingError;
var ParsingErrorType;
exports.ParsingErrorType = ParsingErrorType;

(function (ParsingErrorType) {
  ParsingErrorType["LexingError"] = "LexingError";
  ParsingErrorType["ParserError"] = "ParsingError";
  ParsingErrorType["StaticOffsetError"] = "StaticOffsetError";
  ParsingErrorType["StaticOffsetOutOfRangeError"] = "StaticOffsetOutOfRangeError";
  ParsingErrorType["RangeOffsetNotAllowed"] = "RangeOffsetNotAllowed";
})(ParsingErrorType || (exports.ParsingErrorType = ParsingErrorType = {}));

var AstNodeType;
exports.AstNodeType = AstNodeType;

(function (AstNodeType) {
  AstNodeType["EMPTY"] = "EMPTY";
  AstNodeType["NUMBER"] = "NUMBER";
  AstNodeType["STRING"] = "STRING";
  AstNodeType["MINUS_UNARY_OP"] = "MINUS_UNARY_OP";
  AstNodeType["PLUS_UNARY_OP"] = "PLUS_UNARY_OP";
  AstNodeType["PERCENT_OP"] = "PERCENT_OP";
  AstNodeType["CONCATENATE_OP"] = "CONCATENATE_OP";
  AstNodeType["EQUALS_OP"] = "EQUALS_OP";
  AstNodeType["NOT_EQUAL_OP"] = "NOT_EQUAL_OP";
  AstNodeType["GREATER_THAN_OP"] = "GREATER_THAN_OP";
  AstNodeType["LESS_THAN_OP"] = "LESS_THAN_OP";
  AstNodeType["GREATER_THAN_OR_EQUAL_OP"] = "GREATER_THAN_OR_EQUAL_OP";
  AstNodeType["LESS_THAN_OR_EQUAL_OP"] = "LESS_THAN_OR_EQUAL_OP";
  AstNodeType["PLUS_OP"] = "PLUS_OP";
  AstNodeType["MINUS_OP"] = "MINUS_OP";
  AstNodeType["TIMES_OP"] = "TIMES_OP";
  AstNodeType["DIV_OP"] = "DIV_OP";
  AstNodeType["POWER_OP"] = "POWER_OP";
  AstNodeType["FUNCTION_CALL"] = "FUNCTION_CALL";
  AstNodeType["NAMED_EXPRESSION"] = "NAMED_EXPRESSION";
  AstNodeType["PARENTHESIS"] = "PARENTHESES";
  AstNodeType["CELL_REFERENCE"] = "CELL_REFERENCE";
  AstNodeType["CELL_RANGE"] = "CELL_RANGE";
  AstNodeType["COLUMN_RANGE"] = "COLUMN_RANGE";
  AstNodeType["ROW_RANGE"] = "ROW_RANGE";
  AstNodeType["ERROR"] = "ERROR";
  AstNodeType["ERROR_WITH_RAW_INPUT"] = "ERROR_WITH_RAW_INPUT";
  AstNodeType["ARRAY"] = "ARRAY";
})(AstNodeType || (exports.AstNodeType = AstNodeType = {}));

var RangeSheetReferenceType;
exports.RangeSheetReferenceType = RangeSheetReferenceType;

(function (RangeSheetReferenceType) {
  RangeSheetReferenceType[RangeSheetReferenceType["RELATIVE"] = 0] = "RELATIVE";
  RangeSheetReferenceType[RangeSheetReferenceType["START_ABSOLUTE"] = 1] = "START_ABSOLUTE";
  RangeSheetReferenceType[RangeSheetReferenceType["BOTH_ABSOLUTE"] = 2] = "BOTH_ABSOLUTE";
})(RangeSheetReferenceType || (exports.RangeSheetReferenceType = RangeSheetReferenceType = {}));

var buildEmptyArgAst = function buildEmptyArgAst(leadingWhitespace) {
  return {
    type: AstNodeType.EMPTY,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildEmptyArgAst = buildEmptyArgAst;

var buildNumberAst = function buildNumberAst(value, leadingWhitespace) {
  return {
    type: AstNodeType.NUMBER,
    value: value,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildNumberAst = buildNumberAst;

var buildStringAst = function buildStringAst(token) {
  var _a;

  return {
    type: AstNodeType.STRING,
    value: token.image.slice(1, -1),
    leadingWhitespace: (_a = token.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image
  };
};

exports.buildStringAst = buildStringAst;

var buildCellReferenceAst = function buildCellReferenceAst(reference, leadingWhitespace) {
  return {
    type: AstNodeType.CELL_REFERENCE,
    reference: reference,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildCellReferenceAst = buildCellReferenceAst;

var buildCellRangeAst = function buildCellRangeAst(start, end, sheetReferenceType, leadingWhitespace) {
  assertRangeConsistency(start, end, sheetReferenceType);
  return {
    type: AstNodeType.CELL_RANGE,
    start: start,
    end: end,
    sheetReferenceType: sheetReferenceType,
    leadingWhitespace: leadingWhitespace
  };
};

exports.buildCellRangeAst = buildCellRangeAst;

var buildColumnRangeAst = function buildColumnRangeAst(start, end, sheetReferenceType, leadingWhitespace) {
  assertRangeConsistency(start, end, sheetReferenceType);
  return {
    type: AstNodeType.COLUMN_RANGE,
    start: start,
    end: end,
    sheetReferenceType: sheetReferenceType,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildColumnRangeAst = buildColumnRangeAst;

var buildRowRangeAst = function buildRowRangeAst(start, end, sheetReferenceType, leadingWhitespace) {
  assertRangeConsistency(start, end, sheetReferenceType);
  return {
    type: AstNodeType.ROW_RANGE,
    start: start,
    end: end,
    sheetReferenceType: sheetReferenceType,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildRowRangeAst = buildRowRangeAst;

var buildConcatenateOpAst = function buildConcatenateOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.CONCATENATE_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildConcatenateOpAst = buildConcatenateOpAst;

var buildEqualsOpAst = function buildEqualsOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.EQUALS_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildEqualsOpAst = buildEqualsOpAst;

var buildNotEqualOpAst = function buildNotEqualOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.NOT_EQUAL_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildNotEqualOpAst = buildNotEqualOpAst;

var buildGreaterThanOpAst = function buildGreaterThanOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.GREATER_THAN_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildGreaterThanOpAst = buildGreaterThanOpAst;

var buildLessThanOpAst = function buildLessThanOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.LESS_THAN_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildLessThanOpAst = buildLessThanOpAst;

var buildGreaterThanOrEqualOpAst = function buildGreaterThanOrEqualOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.GREATER_THAN_OR_EQUAL_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildGreaterThanOrEqualOpAst = buildGreaterThanOrEqualOpAst;

var buildLessThanOrEqualOpAst = function buildLessThanOrEqualOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.LESS_THAN_OR_EQUAL_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildLessThanOrEqualOpAst = buildLessThanOrEqualOpAst;

var buildPlusOpAst = function buildPlusOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.PLUS_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildPlusOpAst = buildPlusOpAst;

var buildMinusOpAst = function buildMinusOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.MINUS_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildMinusOpAst = buildMinusOpAst;

var buildTimesOpAst = function buildTimesOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.TIMES_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildTimesOpAst = buildTimesOpAst;

var buildDivOpAst = function buildDivOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.DIV_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildDivOpAst = buildDivOpAst;

var buildPowerOpAst = function buildPowerOpAst(left, right, leadingWhitespace) {
  return {
    type: AstNodeType.POWER_OP,
    left: left,
    right: right,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildPowerOpAst = buildPowerOpAst;

var buildMinusUnaryOpAst = function buildMinusUnaryOpAst(value, leadingWhitespace) {
  return {
    type: AstNodeType.MINUS_UNARY_OP,
    value: value,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildMinusUnaryOpAst = buildMinusUnaryOpAst;

var buildPlusUnaryOpAst = function buildPlusUnaryOpAst(value, leadingWhitespace) {
  return {
    type: AstNodeType.PLUS_UNARY_OP,
    value: value,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildPlusUnaryOpAst = buildPlusUnaryOpAst;

var buildPercentOpAst = function buildPercentOpAst(value, leadingWhitespace) {
  return {
    type: AstNodeType.PERCENT_OP,
    value: value,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildPercentOpAst = buildPercentOpAst;

var buildProcedureAst = function buildProcedureAst(procedureName, args, leadingWhitespace, internalWhitespace) {
  return {
    type: AstNodeType.FUNCTION_CALL,
    procedureName: procedureName,
    args: args,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,
    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image
  };
};

exports.buildProcedureAst = buildProcedureAst;

var buildArrayAst = function buildArrayAst(args, leadingWhitespace, internalWhitespace) {
  return {
    type: AstNodeType.ARRAY,
    args: args,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,
    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image
  };
};

exports.buildArrayAst = buildArrayAst;

var buildNamedExpressionAst = function buildNamedExpressionAst(expressionName, leadingWhitespace) {
  return {
    type: AstNodeType.NAMED_EXPRESSION,
    expressionName: expressionName,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildNamedExpressionAst = buildNamedExpressionAst;

var buildParenthesisAst = function buildParenthesisAst(expression, leadingWhitespace, internalWhitespace) {
  return {
    type: AstNodeType.PARENTHESIS,
    expression: expression,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image,
    internalWhitespace: internalWhitespace === null || internalWhitespace === void 0 ? void 0 : internalWhitespace.image
  };
};

exports.buildParenthesisAst = buildParenthesisAst;

var buildCellErrorAst = function buildCellErrorAst(error, leadingWhitespace) {
  return {
    type: AstNodeType.ERROR,
    error: error,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildCellErrorAst = buildCellErrorAst;

var buildErrorWithRawInputAst = function buildErrorWithRawInputAst(rawInput, error, leadingWhitespace) {
  return {
    type: AstNodeType.ERROR_WITH_RAW_INPUT,
    error: error,
    rawInput: rawInput,
    leadingWhitespace: leadingWhitespace === null || leadingWhitespace === void 0 ? void 0 : leadingWhitespace.image
  };
};

exports.buildErrorWithRawInputAst = buildErrorWithRawInputAst;

var buildParsingErrorAst = function buildParsingErrorAst() {
  return {
    type: AstNodeType.ERROR,
    error: _Cell.CellError.parsingError()
  };
};

exports.buildParsingErrorAst = buildParsingErrorAst;

function assertRangeConsistency(start, end, sheetReferenceType) {
  if (start.sheet !== undefined && end.sheet === undefined || start.sheet === undefined && end.sheet !== undefined) {
    throw new Error('Start address inconsistent with end address');
  }

  if (start.sheet === undefined && sheetReferenceType !== RangeSheetReferenceType.RELATIVE || start.sheet !== undefined && sheetReferenceType === RangeSheetReferenceType.RELATIVE) {
    throw new Error('Sheet address inconsistent with sheet reference type');
  }
}

function imageWithWhitespace(image, leadingWhitespace) {
  return (leadingWhitespace !== null && leadingWhitespace !== void 0 ? leadingWhitespace : '') + image;
}

/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.binaryOpTokenMap = void 0;

var _Ast = __webpack_require__(230);

var _binaryOpTokenMap;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var binaryOpTokenMap = (_binaryOpTokenMap = {}, _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.PLUS_OP, '+'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.MINUS_OP, '-'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.TIMES_OP, '*'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.DIV_OP, '/'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.CONCATENATE_OP, '&'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.POWER_OP, '^'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.EQUALS_OP, '='), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.NOT_EQUAL_OP, '<>'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.GREATER_THAN_OP, '>'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.GREATER_THAN_OR_EQUAL_OP, '>='), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.LESS_THAN_OP, '<'), _defineProperty(_binaryOpTokenMap, _Ast.AstNodeType.LESS_THAN_OR_EQUAL_OP, '<='), _binaryOpTokenMap);
exports.binaryOpTokenMap = binaryOpTokenMap;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.doesContainFunctions = exports.Cache = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

var _ = __webpack_require__(169);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var buildCacheEntry = function buildCacheEntry(ast, relativeDependencies, hasVolatileFunction, hasStructuralChangeFunction) {
  return {
    ast: ast,
    relativeDependencies: relativeDependencies,
    hasVolatileFunction: hasVolatileFunction,
    hasStructuralChangeFunction: hasStructuralChangeFunction
  };
};

var Cache = /*#__PURE__*/function () {
  function Cache(functionRegistry) {
    _classCallCheck(this, Cache);

    this.functionRegistry = functionRegistry;
    this.cache = new Map();
  }

  _createClass(Cache, [{
    key: "set",
    value: function set(hash, ast) {
      var astRelativeDependencies = (0, _.collectDependencies)(ast, this.functionRegistry);
      var cacheEntry = buildCacheEntry(ast, astRelativeDependencies, doesContainFunctions(ast, this.functionRegistry.isFunctionVolatile), doesContainFunctions(ast, this.functionRegistry.isFunctionDependentOnSheetStructureChange));
      this.cache.set(hash, cacheEntry);
      return cacheEntry;
    }
  }, {
    key: "get",
    value: function get(hash) {
      return this.cache.get(hash);
    }
  }, {
    key: "maybeSetAndThenGet",
    value: function maybeSetAndThenGet(hash, ast) {
      var entryFromCache = this.cache.get(hash);

      if (entryFromCache !== undefined) {
        return entryFromCache.ast;
      } else {
        this.set(hash, ast);
        return ast;
      }
    }
  }]);

  return Cache;
}();

exports.Cache = Cache;

var doesContainFunctions = function doesContainFunctions(ast, functionCriterion) {
  switch (ast.type) {
    case _.AstNodeType.EMPTY:
    case _.AstNodeType.NUMBER:
    case _.AstNodeType.STRING:
    case _.AstNodeType.ERROR:
    case _.AstNodeType.ERROR_WITH_RAW_INPUT:
    case _.AstNodeType.CELL_REFERENCE:
    case _.AstNodeType.CELL_RANGE:
    case _.AstNodeType.COLUMN_RANGE:
    case _.AstNodeType.ROW_RANGE:
    case _.AstNodeType.NAMED_EXPRESSION:
      return false;

    case _.AstNodeType.PERCENT_OP:
    case _.AstNodeType.PLUS_UNARY_OP:
    case _.AstNodeType.MINUS_UNARY_OP:
      {
        return doesContainFunctions(ast.value, functionCriterion);
      }

    case _.AstNodeType.CONCATENATE_OP:
    case _.AstNodeType.EQUALS_OP:
    case _.AstNodeType.NOT_EQUAL_OP:
    case _.AstNodeType.LESS_THAN_OP:
    case _.AstNodeType.GREATER_THAN_OP:
    case _.AstNodeType.LESS_THAN_OR_EQUAL_OP:
    case _.AstNodeType.GREATER_THAN_OR_EQUAL_OP:
    case _.AstNodeType.MINUS_OP:
    case _.AstNodeType.PLUS_OP:
    case _.AstNodeType.TIMES_OP:
    case _.AstNodeType.DIV_OP:
    case _.AstNodeType.POWER_OP:
      return doesContainFunctions(ast.left, functionCriterion) || doesContainFunctions(ast.right, functionCriterion);

    case _.AstNodeType.PARENTHESIS:
      return doesContainFunctions(ast.expression, functionCriterion);

    case _.AstNodeType.FUNCTION_CALL:
      {
        if (functionCriterion(ast.procedureName)) {
          return true;
        }

        return ast.args.some(function (arg) {
          return doesContainFunctions(arg, functionCriterion);
        });
      }

    case _.AstNodeType.ARRAY:
      {
        return ast.args.some(function (row) {
          return row.some(function (arg) {
            return doesContainFunctions(arg, functionCriterion);
          });
        });
      }
  }
};

exports.doesContainFunctions = doesContainFunctions;

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(234);

__webpack_require__(136);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.FormulaParser = exports.FormulaLexer = void 0;

__webpack_require__(77);

__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(146);

__webpack_require__(179);

__webpack_require__(161);

__webpack_require__(150);

__webpack_require__(236);

__webpack_require__(137);

var _chevrotain = __webpack_require__(184);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _addressRepresentationConverters = __webpack_require__(170);

var _Ast = __webpack_require__(230);

var _CellAddress = __webpack_require__(181);

var _LexerConfig = __webpack_require__(183);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * LL(k) formula parser described using Chevrotain DSL
 *
 * It is equivalent to the grammar below:
 *
 * F -> '=' E <br/>
 * B -> K < B | K >= B ... | K <br/>
 * K -> E & K | E <br/>
 * E -> M + E | M - E | M <br/>
 * M -> W * M | W / M | W <br/>
 * W -> C * W | C <br/>
 * C -> N | R | O | A | P | num <br/>
 * N -> '(' E ')' <br/>
 * R -> A:OFFSET(..) | A:A <br/>
 * O -> OFFSET(..) | OFFSET(..):A | OFFSET(..):OFFSET(..) <br/>
 * A -> A1 | $A1 | A$1 | $A$1 <br/>
 * P -> SUM(..) <br/>
 */
var FormulaParser = /*#__PURE__*/function (_EmbeddedActionsParse) {
  _inherits(FormulaParser, _EmbeddedActionsParse);

  var _super = _createSuper(FormulaParser);

  function FormulaParser(lexerConfig, sheetMapping) {
    var _this;

    _classCallCheck(this, FormulaParser);

    _this = _super.call(this, lexerConfig.allTokens, {
      outputCst: false,
      maxLookahead: 7
    });
    _this.booleanExpressionOrEmpty = _this.RULE('booleanExpressionOrEmpty', function () {
      return _this.OR([{
        ALT: function ALT() {
          return _this.SUBRULE(_this.booleanExpression);
        }
      }, {
        ALT: (0, _chevrotain.EMPTY_ALT)((0, _Ast.buildEmptyArgAst)())
      }]);
    });
    /**
     * Rule for procedure expressions: SUM(1,A1)
     */

    _this.procedureExpression = _this.RULE('procedureExpression', function () {
      var _a;

      var procedureNameToken = _this.CONSUME(_LexerConfig.ProcedureName);

      var procedureName = procedureNameToken.image.toUpperCase().slice(0, -1);
      var canonicalProcedureName = (_a = _this.lexerConfig.functionMapping[procedureName]) !== null && _a !== void 0 ? _a : procedureName;
      var args = [];

      var argument = _this.SUBRULE(_this.booleanExpressionOrEmpty);

      _this.MANY(function () {
        var _a;

        var separator = _this.CONSUME(_this.lexerConfig.ArgSeparator);

        if (argument.type === _Ast.AstNodeType.EMPTY) {
          argument.leadingWhitespace = (_a = separator.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image;
        }

        args.push(argument);
        argument = _this.SUBRULE2(_this.booleanExpressionOrEmpty);
      });

      args.push(argument);

      if (args.length === 1 && args[0].type === _Ast.AstNodeType.EMPTY) {
        args.length = 0;
      }

      var rParenToken = _this.CONSUME(_LexerConfig.RParen);

      return (0, _Ast.buildProcedureAst)(canonicalProcedureName, args, procedureNameToken.leadingWhitespace, rParenToken.leadingWhitespace);
    });
    _this.namedExpressionExpression = _this.RULE('namedExpressionExpression', function () {
      var name = _this.CONSUME(_LexerConfig.NamedExpression);

      return (0, _Ast.buildNamedExpressionAst)(name.image, name.leadingWhitespace);
    });
    /**
     * Rule for OFFSET() function expression
     */

    _this.offsetProcedureExpression = _this.RULE('offsetProcedureExpression', function () {
      var args = [];

      _this.CONSUME(_this.lexerConfig.OffsetProcedureName);

      _this.CONSUME(_LexerConfig.LParen);

      _this.MANY_SEP({
        SEP: _this.lexerConfig.ArgSeparator,
        DEF: function DEF() {
          args.push(_this.SUBRULE(_this.booleanExpression));
        }
      });

      _this.CONSUME(_LexerConfig.RParen);

      return _this.handleOffsetHeuristic(args);
    });
    /**
     * Rule for column range, e.g. A:B, Sheet1!A:B, Sheet1!A:Sheet1!B
     */

    _this.columnRangeExpression = _this.RULE('columnRangeExpression', function () {
      var range = _this.CONSUME(_LexerConfig.ColumnRange);

      var _range$image$split = range.image.split(':'),
          _range$image$split2 = _slicedToArray(_range$image$split, 2),
          startImage = _range$image$split2[0],
          endImage = _range$image$split2[1];

      var start = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.columnAddressFromString)(_this.sheetMapping, startImage, _this.formulaAddress);
      });

      var end = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.columnAddressFromString)(_this.sheetMapping, endImage, _this.formulaAddress);
      });

      if (start === undefined || end === undefined) {
        return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      }

      if (start.exceedsSheetSizeLimits(_this.lexerConfig.maxColumns) || end.exceedsSheetSizeLimits(_this.lexerConfig.maxColumns)) {
        return (0, _Ast.buildErrorWithRawInputAst)(range.image, new _Cell.CellError(_Cell.ErrorType.NAME), range.leadingWhitespace);
      }

      if (start.sheet === undefined && end.sheet !== undefined) {
        return _this.parsingError(_Ast.ParsingErrorType.ParserError, 'Malformed range expression');
      }

      var sheetReferenceType = _this.rangeSheetReferenceType(start.sheet, end.sheet);

      if (start.sheet !== undefined && end.sheet === undefined) {
        end = end.withAbsoluteSheet(start.sheet);
      }

      return (0, _Ast.buildColumnRangeAst)(start, end, sheetReferenceType, range.leadingWhitespace);
    });
    /**
     * Rule for row range, e.g. 1:2, Sheet1!1:2, Sheet1!1:Sheet1!2
     */

    _this.rowRangeExpression = _this.RULE('rowRangeExpression', function () {
      var range = _this.CONSUME(_LexerConfig.RowRange);

      var _range$image$split3 = range.image.split(':'),
          _range$image$split4 = _slicedToArray(_range$image$split3, 2),
          startImage = _range$image$split4[0],
          endImage = _range$image$split4[1];

      var start = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.rowAddressFromString)(_this.sheetMapping, startImage, _this.formulaAddress);
      });

      var end = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.rowAddressFromString)(_this.sheetMapping, endImage, _this.formulaAddress);
      });

      if (start === undefined || end === undefined) {
        return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      }

      if (start.exceedsSheetSizeLimits(_this.lexerConfig.maxRows) || end.exceedsSheetSizeLimits(_this.lexerConfig.maxRows)) {
        return (0, _Ast.buildErrorWithRawInputAst)(range.image, new _Cell.CellError(_Cell.ErrorType.NAME), range.leadingWhitespace);
      }

      if (start.sheet === undefined && end.sheet !== undefined) {
        return _this.parsingError(_Ast.ParsingErrorType.ParserError, 'Malformed range expression');
      }

      var sheetReferenceType = _this.rangeSheetReferenceType(start.sheet, end.sheet);

      if (start.sheet !== undefined && end.sheet === undefined) {
        end = end.withAbsoluteSheet(start.sheet);
      }

      return (0, _Ast.buildRowRangeAst)(start, end, sheetReferenceType, range.leadingWhitespace);
    });
    /**
     * Rule for cell reference expression (e.g. A1, $A1, A$1, $A$1, $Sheet42!A$17)
     */

    _this.cellReference = _this.RULE('cellReference', function () {
      var cell = _this.CONSUME(_LexerConfig.CellReference);

      var address = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.cellAddressFromString)(_this.sheetMapping, cell.image, _this.formulaAddress);
      });

      if (address === undefined) {
        return (0, _Ast.buildErrorWithRawInputAst)(cell.image, new _Cell.CellError(_Cell.ErrorType.REF), cell.leadingWhitespace);
      } else if (address.exceedsSheetSizeLimits(_this.lexerConfig.maxColumns, _this.lexerConfig.maxRows)) {
        return (0, _Ast.buildErrorWithRawInputAst)(cell.image, new _Cell.CellError(_Cell.ErrorType.NAME), cell.leadingWhitespace);
      } else {
        return (0, _Ast.buildCellReferenceAst)(address, cell.leadingWhitespace);
      }
    });
    /**
     * Rule for end range reference expression with additional checks considering range start
     */

    _this.endRangeReference = _this.RULE('endRangeReference', function (start) {
      var _a;

      var end = _this.CONSUME(_LexerConfig.CellReference);

      var startAddress = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.cellAddressFromString)(_this.sheetMapping, start.image, _this.formulaAddress);
      });

      var endAddress = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.cellAddressFromString)(_this.sheetMapping, end.image, _this.formulaAddress);
      });

      if (startAddress === undefined || endAddress === undefined) {
        return _this.ACTION(function () {
          return (0, _Ast.buildErrorWithRawInputAst)("".concat(start.image, ":").concat(end.image), new _Cell.CellError(_Cell.ErrorType.REF), start.leadingWhitespace);
        });
      } else if (startAddress.exceedsSheetSizeLimits(_this.lexerConfig.maxColumns, _this.lexerConfig.maxRows) || endAddress.exceedsSheetSizeLimits(_this.lexerConfig.maxColumns, _this.lexerConfig.maxRows)) {
        return _this.ACTION(function () {
          return (0, _Ast.buildErrorWithRawInputAst)("".concat(start.image, ":").concat(end.image), new _Cell.CellError(_Cell.ErrorType.NAME), start.leadingWhitespace);
        });
      }

      return _this.buildCellRange(startAddress, endAddress, (_a = start.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image);
    });
    /**
     * Rule for end of range expression
     *
     * End of range may be a cell reference or OFFSET() function call
     */

    _this.endOfRangeExpression = _this.RULE('endOfRangeExpression', function (start) {
      return _this.OR([{
        ALT: function ALT() {
          return _this.SUBRULE(_this.endRangeReference, {
            ARGS: [start]
          });
        }
      }, {
        ALT: function ALT() {
          var _a;

          var offsetProcedure = _this.SUBRULE(_this.offsetProcedureExpression);

          var startAddress = _this.ACTION(function () {
            return (0, _addressRepresentationConverters.cellAddressFromString)(_this.sheetMapping, start.image, _this.formulaAddress);
          });

          if (startAddress === undefined) {
            return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
          }

          if (offsetProcedure.type === _Ast.AstNodeType.CELL_REFERENCE) {
            var end = offsetProcedure.reference;
            var sheetReferenceType = _Ast.RangeSheetReferenceType.RELATIVE;

            if (startAddress.sheet !== undefined) {
              sheetReferenceType = _Ast.RangeSheetReferenceType.START_ABSOLUTE;
              end = end.withAbsoluteSheet(startAddress.sheet);
            }

            return (0, _Ast.buildCellRangeAst)(startAddress, end, sheetReferenceType, (_a = start.leadingWhitespace) === null || _a === void 0 ? void 0 : _a.image);
          } else {
            return _this.parsingError(_Ast.ParsingErrorType.RangeOffsetNotAllowed, 'Range offset not allowed here');
          }
        }
      }]);
    });
    /**
     * Rule for cell ranges (e.g. A1:B$3, A1:OFFSET())
     */

    _this.cellRangeExpression = _this.RULE('cellRangeExpression', function () {
      var start = _this.CONSUME(_LexerConfig.CellReference);

      _this.CONSUME2(_LexerConfig.RangeSeparator);

      return _this.SUBRULE(_this.endOfRangeExpression, {
        ARGS: [start]
      });
    });
    /**
     * Rule for end range reference expression starting with offset procedure with additional checks considering range start
     */

    _this.endRangeWithOffsetStartReference = _this.RULE('endRangeWithOffsetStartReference', function (start) {
      var end = _this.CONSUME(_LexerConfig.CellReference);

      var endAddress = _this.ACTION(function () {
        return (0, _addressRepresentationConverters.cellAddressFromString)(_this.sheetMapping, end.image, _this.formulaAddress);
      });

      if (endAddress === undefined) {
        return _this.ACTION(function () {
          return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
        });
      }

      return _this.buildCellRange(start.reference, endAddress, start.leadingWhitespace);
    });
    /**
     * Rule for end of range expression
     *
     * End of range may be a cell reference or OFFSET() function call
     */

    _this.endOfRangeWithOffsetStartExpression = _this.RULE('endOfRangeWithOffsetStartExpression', function (start) {
      return _this.OR([{
        ALT: function ALT() {
          return _this.SUBRULE(_this.endRangeWithOffsetStartReference, {
            ARGS: [start]
          });
        }
      }, {
        ALT: function ALT() {
          var offsetProcedure = _this.SUBRULE(_this.offsetProcedureExpression);

          if (offsetProcedure.type === _Ast.AstNodeType.CELL_REFERENCE) {
            var end = offsetProcedure.reference;
            var sheetReferenceType = _Ast.RangeSheetReferenceType.RELATIVE;

            if (start.reference.sheet !== undefined) {
              sheetReferenceType = _Ast.RangeSheetReferenceType.START_ABSOLUTE;
              end = end.withAbsoluteSheet(start.reference.sheet);
            }

            return (0, _Ast.buildCellRangeAst)(start.reference, end, sheetReferenceType, start.leadingWhitespace);
          } else {
            return _this.parsingError(_Ast.ParsingErrorType.RangeOffsetNotAllowed, 'Range offset not allowed here');
          }
        }
      }]);
    });
    /**
     * Rule for expressions that start with OFFSET() function
     *
     * OFFSET() function can occur as cell reference or part of cell range.
     * In order to preserve LL(k) properties, expressions that starts with OFFSET() functions needs to have separate rule.
     *
     * Proper {@link Ast} node type is built depending on the presence of {@link RangeSeparator}
     */

    _this.offsetExpression = _this.RULE('offsetExpression', function () {
      var offsetProcedure = _this.SUBRULE(_this.offsetProcedureExpression);

      var end;

      _this.OPTION(function () {
        _this.CONSUME(_LexerConfig.RangeSeparator);

        if (offsetProcedure.type === _Ast.AstNodeType.CELL_RANGE) {
          end = _this.parsingError(_Ast.ParsingErrorType.RangeOffsetNotAllowed, 'Range offset not allowed here');
        } else {
          end = _this.SUBRULE(_this.endOfRangeWithOffsetStartExpression, {
            ARGS: [offsetProcedure]
          });
        }
      });

      if (end !== undefined) {
        return end;
      }

      return offsetProcedure;
    });
    _this.insideArrayExpression = _this.RULE('insideArrayExpression', function () {
      var ret = [[]];
      ret[ret.length - 1].push(_this.SUBRULE(_this.booleanExpression));

      _this.MANY(function () {
        _this.OR([{
          ALT: function ALT() {
            _this.CONSUME(_this.lexerConfig.ArrayColSeparator);

            ret[ret.length - 1].push(_this.SUBRULE2(_this.booleanExpression));
          }
        }, {
          ALT: function ALT() {
            _this.CONSUME(_this.lexerConfig.ArrayRowSeparator);

            ret.push([]);
            ret[ret.length - 1].push(_this.SUBRULE3(_this.booleanExpression));
          }
        }]);
      });

      return (0, _Ast.buildArrayAst)(ret);
    });
    /**
     * Rule for parenthesis expression
     */

    _this.parenthesisExpression = _this.RULE('parenthesisExpression', function () {
      var lParenToken = _this.CONSUME(_LexerConfig.LParen);

      var expression = _this.SUBRULE(_this.booleanExpression);

      var rParenToken = _this.CONSUME(_LexerConfig.RParen);

      return (0, _Ast.buildParenthesisAst)(expression, lParenToken.leadingWhitespace, rParenToken.leadingWhitespace);
    });
    _this.arrayExpression = _this.RULE('arrayExpression', function () {
      return _this.OR([{
        ALT: function ALT() {
          var ltoken = _this.CONSUME(_LexerConfig.ArrayLParen);

          var ret = _this.SUBRULE(_this.insideArrayExpression);

          var rtoken = _this.CONSUME(_LexerConfig.ArrayRParen);

          return (0, _Ast.buildArrayAst)(ret.args, ltoken.leadingWhitespace, rtoken.leadingWhitespace);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.parenthesisExpression);
        }
      }]);
    });

    _this.numericStringToNumber = function (input) {
      var normalized = input.replace(_this.lexerConfig.decimalSeparator, '.');
      return Number(normalized);
    };
    /**
     * Rule for positive atomic expressions
     */


    _this.positiveAtomicExpression = _this.RULE('positiveAtomicExpression', function () {
      var _a;

      return _this.OR((_a = _this.atomicExpCache) !== null && _a !== void 0 ? _a : _this.atomicExpCache = [{
        ALT: function ALT() {
          return _this.SUBRULE(_this.arrayExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.cellRangeExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.columnRangeExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.rowRangeExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.offsetExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.cellReference);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.procedureExpression);
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE(_this.namedExpressionExpression);
        }
      }, {
        ALT: function ALT() {
          var number = _this.CONSUME(_this.lexerConfig.NumberLiteral);

          return (0, _Ast.buildNumberAst)(_this.numericStringToNumber(number.image), number.leadingWhitespace);
        }
      }, {
        ALT: function ALT() {
          var str = _this.CONSUME(_LexerConfig.StringLiteral);

          return (0, _Ast.buildStringAst)(str);
        }
      }, {
        ALT: function ALT() {
          var token = _this.CONSUME(_LexerConfig.ErrorLiteral);

          var errString = token.image.toUpperCase();
          var errorType = _this.lexerConfig.errorMapping[errString];

          if (errorType) {
            return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(errorType), token.leadingWhitespace);
          } else {
            return _this.parsingError(_Ast.ParsingErrorType.ParserError, 'Unknown error literal');
          }
        }
      }]);
    });
    _this.rightUnaryOpAtomicExpression = _this.RULE('rightUnaryOpAtomicExpression', function () {
      var positiveAtomicExpression = _this.SUBRULE(_this.positiveAtomicExpression);

      var percentage = _this.OPTION(function () {
        return _this.CONSUME(_LexerConfig.PercentOp);
      });

      if (percentage) {
        return (0, _Ast.buildPercentOpAst)(positiveAtomicExpression, percentage.leadingWhitespace);
      }

      return positiveAtomicExpression;
    });
    /**
     * Rule for atomic expressions, which is positive atomic expression or negation of it
     */

    _this.atomicExpression = _this.RULE('atomicExpression', function () {
      return _this.OR([{
        ALT: function ALT() {
          var op = _this.CONSUME(_LexerConfig.AdditionOp);

          var value = _this.SUBRULE(_this.atomicExpression);

          if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.PlusOp)) {
            return (0, _Ast.buildPlusUnaryOpAst)(value, op.leadingWhitespace);
          } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.MinusOp)) {
            return (0, _Ast.buildMinusUnaryOpAst)(value, op.leadingWhitespace);
          } else {
            _this.customParsingError = (0, _Ast.parsingError)(_Ast.ParsingErrorType.ParserError, 'Mismatched token type');
            return _this.customParsingError;
          }
        }
      }, {
        ALT: function ALT() {
          return _this.SUBRULE2(_this.rightUnaryOpAtomicExpression);
        }
      }]);
    });
    /**
     * Rule for power expression
     */

    _this.powerExpression = _this.RULE('powerExpression', function () {
      var lhs = _this.SUBRULE(_this.atomicExpression);

      _this.MANY(function () {
        var op = _this.CONSUME(_LexerConfig.PowerOp);

        var rhs = _this.SUBRULE2(_this.atomicExpression);

        if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.PowerOp)) {
          lhs = (0, _Ast.buildPowerOpAst)(lhs, rhs, op.leadingWhitespace);
        } else {
          _this.ACTION(function () {
            throw Error('Operator not supported');
          });
        }
      });

      return lhs;
    });
    /**
     * Rule for multiplication category operators (e.g. 1 * A1, 1 / A1)
     */

    _this.multiplicationExpression = _this.RULE('multiplicationExpression', function () {
      var lhs = _this.SUBRULE(_this.powerExpression);

      _this.MANY(function () {
        var op = _this.CONSUME(_LexerConfig.MultiplicationOp);

        var rhs = _this.SUBRULE2(_this.powerExpression);

        if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.TimesOp)) {
          lhs = (0, _Ast.buildTimesOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.DivOp)) {
          lhs = (0, _Ast.buildDivOpAst)(lhs, rhs, op.leadingWhitespace);
        } else {
          _this.ACTION(function () {
            throw Error('Operator not supported');
          });
        }
      });

      return lhs;
    });
    /**
     * Rule for addition category operators (e.g. 1 + A1, 1 - A1)
     */

    _this.additionExpression = _this.RULE('additionExpression', function () {
      var lhs = _this.SUBRULE(_this.multiplicationExpression);

      _this.MANY(function () {
        var op = _this.CONSUME(_LexerConfig.AdditionOp);

        var rhs = _this.SUBRULE2(_this.multiplicationExpression);

        if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.PlusOp)) {
          lhs = (0, _Ast.buildPlusOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.MinusOp)) {
          lhs = (0, _Ast.buildMinusOpAst)(lhs, rhs, op.leadingWhitespace);
        } else {
          _this.ACTION(function () {
            throw Error('Operator not supported');
          });
        }
      });

      return lhs;
    });
    /**
     * Rule for concatenation operator expression (e.g. "=" & A1)
     */

    _this.concatenateExpression = _this.RULE('concatenateExpression', function () {
      var lhs = _this.SUBRULE(_this.additionExpression);

      _this.MANY(function () {
        var op = _this.CONSUME(_LexerConfig.ConcatenateOp);

        var rhs = _this.SUBRULE2(_this.additionExpression);

        lhs = (0, _Ast.buildConcatenateOpAst)(lhs, rhs, op.leadingWhitespace);
      });

      return lhs;
    });
    /**
     * Rule for boolean expression (e.g. 1 <= A1)
     */

    _this.booleanExpression = _this.RULE('booleanExpression', function () {
      var lhs = _this.SUBRULE(_this.concatenateExpression);

      _this.MANY(function () {
        var op = _this.CONSUME(_LexerConfig.BooleanOp);

        var rhs = _this.SUBRULE2(_this.concatenateExpression);

        if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.EqualsOp)) {
          lhs = (0, _Ast.buildEqualsOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.NotEqualOp)) {
          lhs = (0, _Ast.buildNotEqualOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.GreaterThanOp)) {
          lhs = (0, _Ast.buildGreaterThanOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.LessThanOp)) {
          lhs = (0, _Ast.buildLessThanOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.GreaterThanOrEqualOp)) {
          lhs = (0, _Ast.buildGreaterThanOrEqualOpAst)(lhs, rhs, op.leadingWhitespace);
        } else if ((0, _chevrotain.tokenMatcher)(op, _LexerConfig.LessThanOrEqualOp)) {
          lhs = (0, _Ast.buildLessThanOrEqualOpAst)(lhs, rhs, op.leadingWhitespace);
        } else {
          _this.ACTION(function () {
            throw Error('Operator not supported');
          });
        }
      });

      return lhs;
    });
    /**
     * Entry rule
     */

    _this.formula = _this.RULE('formula', function () {
      _this.CONSUME(_LexerConfig.EqualsOp);

      return _this.SUBRULE(_this.booleanExpression);
    });
    _this.lexerConfig = lexerConfig;
    _this.sheetMapping = sheetMapping;
    _this.formulaAddress = (0, _Cell.simpleCellAddress)(0, 0, 0);

    _this.performSelfAnalysis();

    return _this;
  }
  /**
   * Parses tokenized formula and builds abstract syntax tree
   *
   * @param tokens - tokenized formula
   * @param formulaAddress - address of the cell in which formula is located
   */


  _createClass(FormulaParser, [{
    key: "parseFromTokens",
    value: function parseFromTokens(tokens, formulaAddress) {
      this.input = tokens;
      var ast = this.formulaWithContext(formulaAddress);
      var errors = [];

      if (this.customParsingError) {
        errors.push(this.customParsingError);
      }

      errors = errors.concat(this.errors.map(function (e) {
        return {
          type: _Ast.ParsingErrorType.ParserError,
          message: e.message
        };
      }));

      if (errors.length > 0) {
        ast = (0, _Ast.buildParsingErrorAst)();
      }

      return {
        ast: ast,
        errors: errors
      };
    }
  }, {
    key: "reset",
    value: function reset() {
      _get(_getPrototypeOf(FormulaParser.prototype), "reset", this).call(this);

      this.customParsingError = undefined;
    }
    /**
     * Entry rule wrapper that sets formula address
     *
     * @param address - address of the cell in which formula is located
     */

  }, {
    key: "formulaWithContext",
    value: function formulaWithContext(address) {
      this.formulaAddress = address;
      return this.formula();
    }
  }, {
    key: "buildCellRange",
    value: function buildCellRange(startAddress, endAddress, leadingWhitespace) {
      if (startAddress.sheet === undefined && endAddress.sheet !== undefined) {
        return this.parsingError(_Ast.ParsingErrorType.ParserError, 'Malformed range expression');
      }

      var sheetReferenceType = this.rangeSheetReferenceType(startAddress.sheet, endAddress.sheet);

      if (startAddress.sheet !== undefined && endAddress.sheet === undefined) {
        endAddress = endAddress.withAbsoluteSheet(startAddress.sheet);
      }

      return (0, _Ast.buildCellRangeAst)(startAddress, endAddress, sheetReferenceType, leadingWhitespace);
    }
    /**
     * Returns {@link CellReferenceAst} or {@link CellRangeAst} based on OFFSET function arguments
     *
     * @param args - OFFSET function arguments
     */

  }, {
    key: "handleOffsetHeuristic",
    value: function handleOffsetHeuristic(args) {
      var cellArg = args[0];

      if (cellArg.type !== _Ast.AstNodeType.CELL_REFERENCE) {
        return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'First argument to OFFSET is not a reference');
      }

      var rowsArg = args[1];
      var rowShift;

      if (rowsArg.type === _Ast.AstNodeType.NUMBER && Number.isInteger(rowsArg.value)) {
        rowShift = rowsArg.value;
      } else if (rowsArg.type === _Ast.AstNodeType.PLUS_UNARY_OP && rowsArg.value.type === _Ast.AstNodeType.NUMBER && Number.isInteger(rowsArg.value.value)) {
        rowShift = rowsArg.value.value;
      } else if (rowsArg.type === _Ast.AstNodeType.MINUS_UNARY_OP && rowsArg.value.type === _Ast.AstNodeType.NUMBER && Number.isInteger(rowsArg.value.value)) {
        rowShift = -rowsArg.value.value;
      } else {
        return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Second argument to OFFSET is not a static number');
      }

      var columnsArg = args[2];
      var colShift;

      if (columnsArg.type === _Ast.AstNodeType.NUMBER && Number.isInteger(columnsArg.value)) {
        colShift = columnsArg.value;
      } else if (columnsArg.type === _Ast.AstNodeType.PLUS_UNARY_OP && columnsArg.value.type === _Ast.AstNodeType.NUMBER && Number.isInteger(columnsArg.value.value)) {
        colShift = columnsArg.value.value;
      } else if (columnsArg.type === _Ast.AstNodeType.MINUS_UNARY_OP && columnsArg.value.type === _Ast.AstNodeType.NUMBER && Number.isInteger(columnsArg.value.value)) {
        colShift = -columnsArg.value.value;
      } else {
        return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Third argument to OFFSET is not a static number');
      }

      var heightArg = args[3];
      var height;

      if (heightArg === undefined) {
        height = 1;
      } else if (heightArg.type === _Ast.AstNodeType.NUMBER) {
        height = heightArg.value;

        if (height < 1) {
          return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fourth argument to OFFSET is too small number');
        } else if (!Number.isInteger(height)) {
          return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fourth argument to OFFSET is not integer');
        }
      } else {
        return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fourth argument to OFFSET is not a static number');
      }

      var widthArg = args[4];
      var width;

      if (widthArg === undefined) {
        width = 1;
      } else if (widthArg.type === _Ast.AstNodeType.NUMBER) {
        width = widthArg.value;

        if (width < 1) {
          return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fifth argument to OFFSET is too small number');
        } else if (!Number.isInteger(width)) {
          return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fifth argument to OFFSET is not integer');
        }
      } else {
        return this.parsingError(_Ast.ParsingErrorType.StaticOffsetError, 'Fifth argument to OFFSET is not a static number');
      }

      var topLeftCorner = new _CellAddress.CellAddress(cellArg.reference.col + colShift, cellArg.reference.row + rowShift, cellArg.reference.type);
      var absoluteCol = topLeftCorner.col;
      var absoluteRow = topLeftCorner.row;

      if (cellArg.reference.type === _CellAddress.CellReferenceType.CELL_REFERENCE_RELATIVE || cellArg.reference.type === _CellAddress.CellReferenceType.CELL_REFERENCE_ABSOLUTE_COL) {
        absoluteRow = absoluteRow + this.formulaAddress.row;
      }

      if (cellArg.reference.type === _CellAddress.CellReferenceType.CELL_REFERENCE_RELATIVE || cellArg.reference.type === _CellAddress.CellReferenceType.CELL_REFERENCE_ABSOLUTE_ROW) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        absoluteCol = absoluteCol + this.formulaAddress.col;
      }

      if (absoluteCol < 0 || absoluteRow < 0) {
        return (0, _Ast.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.OutOfSheet));
      }

      if (width === 1 && height === 1) {
        return (0, _Ast.buildCellReferenceAst)(topLeftCorner);
      } else {
        var bottomRightCorner = new _CellAddress.CellAddress(topLeftCorner.col + width - 1, topLeftCorner.row + height - 1, topLeftCorner.type);
        return (0, _Ast.buildCellRangeAst)(topLeftCorner, bottomRightCorner, _Ast.RangeSheetReferenceType.RELATIVE);
      }
    }
  }, {
    key: "parsingError",
    value: function parsingError(type, message) {
      this.customParsingError = (0, _Ast.parsingError)(type, message);
      return (0, _Ast.buildParsingErrorAst)();
    }
  }, {
    key: "rangeSheetReferenceType",
    value: function rangeSheetReferenceType(start, end) {
      if (start === undefined) {
        return _Ast.RangeSheetReferenceType.RELATIVE;
      } else if (end === undefined) {
        return _Ast.RangeSheetReferenceType.START_ABSOLUTE;
      } else {
        return _Ast.RangeSheetReferenceType.BOTH_ABSOLUTE;
      }
    }
  }]);

  return FormulaParser;
}(_chevrotain.EmbeddedActionsParser);

exports.FormulaParser = FormulaParser;

var FormulaLexer = /*#__PURE__*/function () {
  function FormulaLexer(lexerConfig) {
    _classCallCheck(this, FormulaLexer);

    this.lexerConfig = lexerConfig;
    this.lexer = new _chevrotain.Lexer(lexerConfig.allTokens, {
      ensureOptimizations: true
    });
  }
  /**
   * Returns Lexer tokens from formula string
   *
   * @param text - string representation of a formula
   */


  _createClass(FormulaLexer, [{
    key: "tokenizeFormula",
    value: function tokenizeFormula(text) {
      var lexingResult = this.lexer.tokenize(text);
      var tokens = lexingResult.tokens;
      tokens = this.trimTrailingWhitespaces(tokens);
      tokens = this.skipWhitespacesInsideRanges(tokens);
      tokens = this.skipWhitespacesBeforeArgSeparators(tokens);
      lexingResult.tokens = tokens;
      return lexingResult;
    }
  }, {
    key: "skipWhitespacesInsideRanges",
    value: function skipWhitespacesInsideRanges(tokens) {
      return this.filterTokensByNeighbors(tokens, function (previous, current, next) {
        return ((0, _chevrotain.tokenMatcher)(previous, _LexerConfig.CellReference) || (0, _chevrotain.tokenMatcher)(previous, _LexerConfig.RangeSeparator)) && (0, _chevrotain.tokenMatcher)(current, _LexerConfig.WhiteSpace) && ((0, _chevrotain.tokenMatcher)(next, _LexerConfig.CellReference) || (0, _chevrotain.tokenMatcher)(next, _LexerConfig.RangeSeparator));
      });
    }
  }, {
    key: "skipWhitespacesBeforeArgSeparators",
    value: function skipWhitespacesBeforeArgSeparators(tokens) {
      var _this2 = this;

      return this.filterTokensByNeighbors(tokens, function (previous, current, next) {
        return !(0, _chevrotain.tokenMatcher)(previous, _this2.lexerConfig.ArgSeparator) && (0, _chevrotain.tokenMatcher)(current, _LexerConfig.WhiteSpace) && (0, _chevrotain.tokenMatcher)(next, _this2.lexerConfig.ArgSeparator);
      });
    }
  }, {
    key: "filterTokensByNeighbors",
    value: function filterTokensByNeighbors(tokens, shouldBeSkipped) {
      if (tokens.length < 3) {
        return tokens;
      }

      var i = 0;
      var filteredTokens = [tokens[i++]];

      while (i < tokens.length - 1) {
        if (!shouldBeSkipped(tokens[i - 1], tokens[i], tokens[i + 1])) {
          filteredTokens.push(tokens[i]);
        }

        ++i;
      }

      filteredTokens.push(tokens[i]);
      return filteredTokens;
    }
  }, {
    key: "trimTrailingWhitespaces",
    value: function trimTrailingWhitespaces(tokens) {
      if (tokens.length > 0 && (0, _chevrotain.tokenMatcher)(tokens[tokens.length - 1], _LexerConfig.WhiteSpace)) {
        tokens.pop();
      }

      return tokens;
    }
  }]);

  return FormulaLexer;
}();

exports.FormulaLexer = FormulaLexer;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var call = __webpack_require__(33);
var isObject = __webpack_require__(28);
var anObject = __webpack_require__(30);
var isDataDescriptor = __webpack_require__(235);
var getOwnPropertyDescriptorModule = __webpack_require__(52);
var getPrototypeOf = __webpack_require__(98);

// `Reflect.get` method
// https://tc39.es/ecma262/#sec-reflect.get
function get(target, propertyKey /* , receiver */) {
  var receiver = arguments.length < 3 ? target : arguments[2];
  var descriptor, prototype;
  if (anObject(target) === receiver) return target[propertyKey];
  descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey);
  if (descriptor) return isDataDescriptor(descriptor)
    ? descriptor.value
    : descriptor.get === undefined ? undefined : call(descriptor.get, receiver);
  if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
}

$({ target: 'Reflect', stat: true }, {
  get: get
});


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var hasOwn = __webpack_require__(10);

module.exports = function (descriptor) {
  return descriptor !== undefined && (hasOwn(descriptor, 'value') || hasOwn(descriptor, 'writable'));
};


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var isIntegralNumber = __webpack_require__(237);

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isIntegralNumber
});


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(28);

var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ErrorMessage = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/**
 * This is a class for detailed error messages across HyperFormula.
 */
var ErrorMessage = /*#__PURE__*/_createClass(function ErrorMessage() {
  _classCallCheck(this, ErrorMessage);
});

exports.ErrorMessage = ErrorMessage;
ErrorMessage.DistinctSigns = 'Distinct signs.';
ErrorMessage.WrongArgNumber = 'Wrong number of arguments.';
ErrorMessage.EmptyArg = 'Empty function argument.';
ErrorMessage.EmptyArray = 'Empty array not allowed.';
ErrorMessage.ArrayDimensions = 'Array dimensions are not compatible.';
ErrorMessage.NoSpaceForArrayResult = 'No space for array result.';
ErrorMessage.ValueSmall = 'Value too small.';
ErrorMessage.ValueLarge = 'Value too large.';
ErrorMessage.BadCriterion = 'Incorrect criterion.';
ErrorMessage.RangeManySheets = 'Range spans more than one sheet.';
ErrorMessage.CellRangeExpected = 'Cell range expected.';
ErrorMessage.WrongDimension = 'Wrong range dimension.';
ErrorMessage.ScalarExpected = 'Cell range not allowed.';
ErrorMessage.NumberCoercion = 'Value cannot be coerced to number.';
ErrorMessage.NumberExpected = 'Number argument expected.';
ErrorMessage.IntegerExpected = 'Value needs to be an integer.';
ErrorMessage.BadMode = 'Mode not recognized.';
ErrorMessage.DateBounds = 'Date outside of bounds.';
ErrorMessage.OutOfSheet = 'Resulting reference is out of the sheet.';
ErrorMessage.WrongType = 'Wrong type of argument.';
ErrorMessage.NaN = 'NaN or infinite value encountered.';
ErrorMessage.EqualLength = 'Ranges need to be of equal length.';
ErrorMessage.Negative = 'Value cannot be negative.';
ErrorMessage.NotBinary = 'String does not represent a binary number.';
ErrorMessage.NotOctal = 'String does not represent an octal number.';
ErrorMessage.NotHex = 'String does not represent a hexadecimal number.';
ErrorMessage.EndStartPeriod = 'End period needs to be at least start period.';
ErrorMessage.CellRefExpected = 'Cell reference expected.';
ErrorMessage.EmptyRange = 'Empty range not allowed.';
ErrorMessage.BadRef = 'Address is not correct.';
ErrorMessage.NumberRange = 'Number-only range expected.';
ErrorMessage.ValueNotFound = 'Value not found.';
ErrorMessage.ValueBaseLarge = 'Value in base too large.';
ErrorMessage.ValueBaseSmall = 'Value in base too small.';
ErrorMessage.ValueBaseLong = 'Value in base too long.';
ErrorMessage.NegativeLength = 'Length cannot be negative.';
ErrorMessage.PatternNotFound = 'Pattern not found.';
ErrorMessage.OneValue = 'Needs at least one value.';
ErrorMessage.TwoValues = 'Range needs to contain at least two elements.';
ErrorMessage.ThreeValues = 'Range needs to contain at least three elements.';
ErrorMessage.IndexBounds = 'Index out of bounds.';
ErrorMessage.IndexLarge = 'Index too large.';
ErrorMessage.Formula = 'Expected formula.';
ErrorMessage.NegativeCount = 'Count cannot be negative.';
ErrorMessage.ParseError = 'Parsing error.';
ErrorMessage.SheetRef = 'Sheet does not exist.';
ErrorMessage.PeriodLong = 'Period number cannot exceed life length.';
ErrorMessage.InvalidDate = 'Invalid date.';
ErrorMessage.BitshiftLong = 'Result of bitshift is too long.';
ErrorMessage.EmptyString = 'Empty-string argument not allowed.';
ErrorMessage.LengthBounds = 'Length out of bounds.';
ErrorMessage.NegativeTime = 'Time cannot be negative.';
ErrorMessage.NoDefault = 'No default option.';
ErrorMessage.Selector = 'Selector cannot exceed the number of arguments.';
ErrorMessage.StartEndDate = 'Start date needs to be earlier than end date.';
ErrorMessage.IncorrectDateTime = 'String does not represent correct DateTime.';
ErrorMessage.CharacterCodeBounds = 'Character code out of bounds.';
ErrorMessage.NonZero = 'Argument cannot be 0.';
ErrorMessage.LessThanOne = 'Argument cannot be less than 1.';
ErrorMessage.WeekendString = 'Incorrect weekend bitmask string.';
ErrorMessage.InvalidRoman = 'Invalid roman numeral.';
ErrorMessage.WrongOrder = 'Wrong order of values.';
ErrorMessage.ComplexNumberExpected = 'Complex number expected.';
ErrorMessage.ShouldBeIorJ = 'Should be \'i\' or \'j\'.';
ErrorMessage.SizeMismatch = 'Array dimensions mismatched.';

ErrorMessage.FunctionName = function (arg) {
  return "Function name ".concat(arg, " not recognized.");
};

ErrorMessage.NamedExpressionName = function (arg) {
  return "Named expression ".concat(arg, " not recognized.");
};

ErrorMessage.LicenseKey = function (arg) {
  return "License key is ".concat(arg, ".");
};

/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Unparser = void 0;
exports.formatNumber = formatNumber;

__webpack_require__(229);

__webpack_require__(150);

__webpack_require__(146);

__webpack_require__(1);

__webpack_require__(167);

__webpack_require__(103);

__webpack_require__(179);

var _Cell = __webpack_require__(143);

var _index = __webpack_require__(0);

var _addressRepresentationConverters = __webpack_require__(170);

var _Ast = __webpack_require__(230);

var _binaryOpTokenMap = __webpack_require__(231);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Unparser = /*#__PURE__*/function () {
  function Unparser(config, lexerConfig, sheetMappingFn, namedExpressions) {
    _classCallCheck(this, Unparser);

    this.config = config;
    this.lexerConfig = lexerConfig;
    this.sheetMappingFn = sheetMappingFn;
    this.namedExpressions = namedExpressions;
  }

  _createClass(Unparser, [{
    key: "unparse",
    value: function unparse(ast, address) {
      return '=' + this.unparseAst(ast, address);
    }
  }, {
    key: "unparseAst",
    value: function unparseAst(ast, address) {
      var _this = this;

      var _a, _b;

      switch (ast.type) {
        case _Ast.AstNodeType.EMPTY:
          {
            return (0, _Ast.imageWithWhitespace)('', ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.NUMBER:
          {
            return (0, _Ast.imageWithWhitespace)(formatNumber(ast.value, this.config.decimalSeparator), ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.STRING:
          {
            return (0, _Ast.imageWithWhitespace)('"' + ast.value + '"', ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.FUNCTION_CALL:
          {
            var args = ast.args.map(function (arg) {
              return arg !== undefined ? _this.unparseAst(arg, address) : '';
            }).join(this.config.functionArgSeparator);
            var procedureName = this.config.translationPackage.isFunctionTranslated(ast.procedureName) ? this.config.translationPackage.getFunctionTranslation(ast.procedureName) : ast.procedureName;
            var rightPart = procedureName + '(' + args + (0, _Ast.imageWithWhitespace)(')', ast.internalWhitespace);
            return (0, _Ast.imageWithWhitespace)(rightPart, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.NAMED_EXPRESSION:
          {
            var originalNamedExpressionName = (_a = this.namedExpressions.nearestNamedExpression(ast.expressionName, address.sheet)) === null || _a === void 0 ? void 0 : _a.displayName;
            return (0, _Ast.imageWithWhitespace)(originalNamedExpressionName || ast.expressionName, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.CELL_REFERENCE:
          {
            var image;

            if (ast.reference.sheet !== undefined) {
              image = this.unparseSheetName(ast.reference.sheet) + '!';
            } else {
              image = '';
            }

            image += (_b = ast.reference.unparse(address)) !== null && _b !== void 0 ? _b : this.config.translationPackage.getErrorTranslation(_Cell.ErrorType.REF);
            return (0, _Ast.imageWithWhitespace)(image, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.COLUMN_RANGE:
        case _Ast.AstNodeType.ROW_RANGE:
        case _Ast.AstNodeType.CELL_RANGE:
          {
            return (0, _Ast.imageWithWhitespace)(this.formatRange(ast, address), ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.PLUS_UNARY_OP:
          {
            var unparsedExpr = this.unparseAst(ast.value, address);
            return (0, _Ast.imageWithWhitespace)('+', ast.leadingWhitespace) + unparsedExpr;
          }

        case _Ast.AstNodeType.MINUS_UNARY_OP:
          {
            var _unparsedExpr = this.unparseAst(ast.value, address);

            return (0, _Ast.imageWithWhitespace)('-', ast.leadingWhitespace) + _unparsedExpr;
          }

        case _Ast.AstNodeType.PERCENT_OP:
          {
            return this.unparseAst(ast.value, address) + (0, _Ast.imageWithWhitespace)('%', ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.ERROR:
          {
            var _image = this.config.translationPackage.getErrorTranslation(ast.error ? ast.error.type : _Cell.ErrorType.ERROR);

            return (0, _Ast.imageWithWhitespace)(_image, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.ERROR_WITH_RAW_INPUT:
          {
            return (0, _Ast.imageWithWhitespace)(ast.rawInput, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.PARENTHESIS:
          {
            var expression = this.unparseAst(ast.expression, address);

            var _rightPart = '(' + expression + (0, _Ast.imageWithWhitespace)(')', ast.internalWhitespace);

            return (0, _Ast.imageWithWhitespace)(_rightPart, ast.leadingWhitespace);
          }

        case _Ast.AstNodeType.ARRAY:
          {
            var ret = '{' + ast.args.map(function (row) {
              return row.map(function (val) {
                return _this.unparseAst(val, address);
              }).join(_this.config.arrayColumnSeparator);
            }).join(this.config.arrayRowSeparator) + (0, _Ast.imageWithWhitespace)('}', ast.internalWhitespace);
            return (0, _Ast.imageWithWhitespace)(ret, ast.leadingWhitespace);
          }

        default:
          {
            var left = this.unparseAst(ast.left, address);
            var right = this.unparseAst(ast.right, address);
            return left + (0, _Ast.imageWithWhitespace)(_binaryOpTokenMap.binaryOpTokenMap[ast.type], ast.leadingWhitespace) + right;
          }
      }
    }
  }, {
    key: "unparseSheetName",
    value: function unparseSheetName(sheetId) {
      var sheetName = (0, _addressRepresentationConverters.sheetIndexToString)(sheetId, this.sheetMappingFn);

      if (sheetName === undefined) {
        throw new _index.NoSheetWithIdError(sheetId);
      }

      return sheetName;
    }
  }, {
    key: "formatRange",
    value: function formatRange(ast, baseAddress) {
      var startSheeet = '';
      var endSheet = '';

      if (ast.start.sheet !== undefined && ast.sheetReferenceType !== _Ast.RangeSheetReferenceType.RELATIVE) {
        startSheeet = this.unparseSheetName(ast.start.sheet) + '!';
      }

      if (ast.end.sheet !== undefined && ast.sheetReferenceType === _Ast.RangeSheetReferenceType.BOTH_ABSOLUTE) {
        endSheet = this.unparseSheetName(ast.end.sheet) + '!';
      }

      var unparsedStart = ast.start.unparse(baseAddress);
      var unparsedEnd = ast.end.unparse(baseAddress);

      if (unparsedStart === undefined || unparsedEnd === undefined) {
        return this.config.translationPackage.getErrorTranslation(_Cell.ErrorType.REF);
      }

      return "".concat(startSheeet).concat(unparsedStart, ":").concat(endSheet).concat(unparsedEnd);
    }
  }]);

  return Unparser;
}();

exports.Unparser = Unparser;

function formatNumber(number, decimalSeparator) {
  var numericString = number.toString();
  return numericString.replace('.', decimalSeparator);
}

/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.collectDependencies = void 0;

__webpack_require__(1);

__webpack_require__(154);

var _ = __webpack_require__(169);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var collectDependenciesFn = function collectDependenciesFn(ast, functionRegistry, dependenciesSet, needArgument) {
  switch (ast.type) {
    case _.AstNodeType.EMPTY:
    case _.AstNodeType.NUMBER:
    case _.AstNodeType.STRING:
    case _.AstNodeType.ERROR:
      return;

    case _.AstNodeType.NAMED_EXPRESSION:
      {
        if (needArgument) {
          dependenciesSet.push(new _.NamedExpressionDependency(ast.expressionName));
        }

        return;
      }

    case _.AstNodeType.CELL_REFERENCE:
      {
        if (needArgument) {
          dependenciesSet.push(new _.AddressDependency(ast.reference));
        }

        return;
      }

    case _.AstNodeType.CELL_RANGE:
      {
        if (needArgument && ast.start.sheet === ast.end.sheet) {
          dependenciesSet.push(new _.CellRangeDependency(ast.start, ast.end));
        }

        return;
      }

    case _.AstNodeType.COLUMN_RANGE:
      {
        if (needArgument && ast.start.sheet === ast.end.sheet) {
          dependenciesSet.push(new _.ColumnRangeDependency(ast.start, ast.end));
        }

        return;
      }

    case _.AstNodeType.ROW_RANGE:
      {
        if (needArgument && ast.start.sheet === ast.end.sheet) {
          dependenciesSet.push(new _.RowRangeDependency(ast.start, ast.end));
        }

        return;
      }

    case _.AstNodeType.PERCENT_OP:
    case _.AstNodeType.PLUS_UNARY_OP:
    case _.AstNodeType.MINUS_UNARY_OP:
      {
        collectDependenciesFn(ast.value, functionRegistry, dependenciesSet, true);
        return;
      }

    case _.AstNodeType.CONCATENATE_OP:
    case _.AstNodeType.EQUALS_OP:
    case _.AstNodeType.NOT_EQUAL_OP:
    case _.AstNodeType.LESS_THAN_OP:
    case _.AstNodeType.GREATER_THAN_OP:
    case _.AstNodeType.LESS_THAN_OR_EQUAL_OP:
    case _.AstNodeType.GREATER_THAN_OR_EQUAL_OP:
    case _.AstNodeType.MINUS_OP:
    case _.AstNodeType.PLUS_OP:
    case _.AstNodeType.TIMES_OP:
    case _.AstNodeType.DIV_OP:
    case _.AstNodeType.POWER_OP:
      collectDependenciesFn(ast.left, functionRegistry, dependenciesSet, true);
      collectDependenciesFn(ast.right, functionRegistry, dependenciesSet, true);
      return;

    case _.AstNodeType.PARENTHESIS:
      collectDependenciesFn(ast.expression, functionRegistry, dependenciesSet, needArgument);
      return;

    case _.AstNodeType.FUNCTION_CALL:
      {
        var functionNeedArgument = !functionRegistry.doesFunctionNeedArgumentToBeComputed(ast.procedureName);
        ast.args.forEach(function (argAst) {
          return collectDependenciesFn(argAst, functionRegistry, dependenciesSet, functionNeedArgument);
        });
        return;
      }
  }
};

var collectDependencies = function collectDependencies(ast, functionRegistry) {
  var result = new Array();
  collectDependenciesFn(ast, functionRegistry, result, true);
  return result;
};

exports.collectDependencies = collectDependencies;

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RowRangeDependency = exports.NamedExpressionDependency = exports.ColumnRangeDependency = exports.CellRangeDependency = exports.AddressDependency = void 0;

__webpack_require__(81);

var _AbsoluteCellRange = __webpack_require__(158);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var AddressDependency = /*#__PURE__*/function () {
  function AddressDependency(dependency) {
    _classCallCheck(this, AddressDependency);

    this.dependency = dependency;
  }

  _createClass(AddressDependency, [{
    key: "absolutize",
    value: function absolutize(baseAddress) {
      return this.dependency.toSimpleCellAddress(baseAddress);
    }
  }]);

  return AddressDependency;
}();

exports.AddressDependency = AddressDependency;

var CellRangeDependency = /*#__PURE__*/function () {
  function CellRangeDependency(start, end) {
    _classCallCheck(this, CellRangeDependency);

    this.start = start;
    this.end = end;
  }

  _createClass(CellRangeDependency, [{
    key: "absolutize",
    value: function absolutize(baseAddress) {
      return new _AbsoluteCellRange.AbsoluteCellRange(this.start.toSimpleCellAddress(baseAddress), this.end.toSimpleCellAddress(baseAddress));
    }
  }]);

  return CellRangeDependency;
}();

exports.CellRangeDependency = CellRangeDependency;

var ColumnRangeDependency = /*#__PURE__*/function () {
  function ColumnRangeDependency(start, end) {
    _classCallCheck(this, ColumnRangeDependency);

    this.start = start;
    this.end = end;
  }

  _createClass(ColumnRangeDependency, [{
    key: "absolutize",
    value: function absolutize(baseAddress) {
      var start = this.start.toSimpleColumnAddress(baseAddress);
      var end = this.end.toSimpleColumnAddress(baseAddress);
      return new _AbsoluteCellRange.AbsoluteColumnRange(start.sheet, start.col, end.col);
    }
  }]);

  return ColumnRangeDependency;
}();

exports.ColumnRangeDependency = ColumnRangeDependency;

var RowRangeDependency = /*#__PURE__*/function () {
  function RowRangeDependency(start, end) {
    _classCallCheck(this, RowRangeDependency);

    this.start = start;
    this.end = end;
  }

  _createClass(RowRangeDependency, [{
    key: "absolutize",
    value: function absolutize(baseAddress) {
      var start = this.start.toSimpleRowAddress(baseAddress);
      var end = this.end.toSimpleRowAddress(baseAddress);
      return new _AbsoluteCellRange.AbsoluteRowRange(start.sheet, start.row, end.row);
    }
  }]);

  return RowRangeDependency;
}();

exports.RowRangeDependency = RowRangeDependency;

var NamedExpressionDependency = /*#__PURE__*/function () {
  function NamedExpressionDependency(name) {
    _classCallCheck(this, NamedExpressionDependency);

    this.name = name;
  }

  _createClass(NamedExpressionDependency, [{
    key: "absolutize",
    value: function absolutize(_baseAddress) {
      return this;
    }
  }]);

  return NamedExpressionDependency;
}();

exports.NamedExpressionDependency = NamedExpressionDependency;

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RowsSpan = exports.ColumnsSpan = void 0;

__webpack_require__(149);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/*
 * A class representing a set of rows in specific sheet
 */
var RowsSpan = /*#__PURE__*/function () {
  function RowsSpan(sheet, rowStart, rowEnd) {
    _classCallCheck(this, RowsSpan);

    this.sheet = sheet;
    this.rowStart = rowStart;
    this.rowEnd = rowEnd;

    if (rowStart < 0) {
      throw Error('Starting row cant be less than 0');
    }

    if (rowEnd < rowStart) {
      throw Error('Row span cant end before start');
    }
  }

  _createClass(RowsSpan, [{
    key: "numberOfRows",
    get: function get() {
      return this.rowEnd - this.rowStart + 1;
    }
  }, {
    key: "start",
    get: function get() {
      return this.rowStart;
    }
  }, {
    key: "end",
    get: function get() {
      return this.rowEnd;
    }
  }, {
    key: "rows",
    value: /*#__PURE__*/regeneratorRuntime.mark(function rows() {
      var col;
      return regeneratorRuntime.wrap(function rows$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              col = this.rowStart;

            case 1:
              if (!(col <= this.rowEnd)) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return col;

            case 4:
              ++col;
              _context.next = 1;
              break;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, rows, this);
    })
  }, {
    key: "intersect",
    value: function intersect(otherSpan) {
      if (this.sheet !== otherSpan.sheet) {
        throw Error('Can\'t intersect spans from different sheets');
      }

      var start = Math.max(this.rowStart, otherSpan.rowStart);
      var end = Math.min(this.rowEnd, otherSpan.rowEnd);

      if (start > end) {
        return null;
      }

      return new RowsSpan(this.sheet, start, end);
    }
  }, {
    key: "firstRow",
    value: function firstRow() {
      return new RowsSpan(this.sheet, this.rowStart, this.rowStart);
    }
  }], [{
    key: "fromNumberOfRows",
    value: function fromNumberOfRows(sheet, rowStart, numberOfRows) {
      return new RowsSpan(sheet, rowStart, rowStart + numberOfRows - 1);
    }
  }, {
    key: "fromRowStartAndEnd",
    value: function fromRowStartAndEnd(sheet, rowStart, rowEnd) {
      return new RowsSpan(sheet, rowStart, rowEnd);
    }
  }]);

  return RowsSpan;
}();
/*
 * A class representing a set of columns in specific sheet
 */


exports.RowsSpan = RowsSpan;

var ColumnsSpan = /*#__PURE__*/function () {
  function ColumnsSpan(sheet, columnStart, columnEnd) {
    _classCallCheck(this, ColumnsSpan);

    this.sheet = sheet;
    this.columnStart = columnStart;
    this.columnEnd = columnEnd;

    if (columnStart < 0) {
      throw Error('Starting column cant be less than 0');
    }

    if (columnEnd < columnStart) {
      throw Error('Column span cant end before start');
    }
  }

  _createClass(ColumnsSpan, [{
    key: "numberOfColumns",
    get: function get() {
      return this.columnEnd - this.columnStart + 1;
    }
  }, {
    key: "start",
    get: function get() {
      return this.columnStart;
    }
  }, {
    key: "end",
    get: function get() {
      return this.columnEnd;
    }
  }, {
    key: "columns",
    value: /*#__PURE__*/regeneratorRuntime.mark(function columns() {
      var col;
      return regeneratorRuntime.wrap(function columns$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              col = this.columnStart;

            case 1:
              if (!(col <= this.columnEnd)) {
                _context2.next = 7;
                break;
              }

              _context2.next = 4;
              return col;

            case 4:
              ++col;
              _context2.next = 1;
              break;

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, columns, this);
    })
  }, {
    key: "intersect",
    value: function intersect(otherSpan) {
      if (this.sheet !== otherSpan.sheet) {
        throw Error('Can\'t intersect spans from different sheets');
      }

      var start = Math.max(this.columnStart, otherSpan.columnStart);
      var end = Math.min(this.columnEnd, otherSpan.columnEnd);

      if (start > end) {
        return null;
      }

      return new ColumnsSpan(this.sheet, start, end);
    }
  }, {
    key: "firstColumn",
    value: function firstColumn() {
      return new ColumnsSpan(this.sheet, this.columnStart, this.columnStart);
    }
  }], [{
    key: "fromNumberOfColumns",
    value: function fromNumberOfColumns(sheet, columnStart, numberOfColumns) {
      return new ColumnsSpan(sheet, columnStart, columnStart + numberOfColumns - 1);
    }
  }, {
    key: "fromColumnStartAndEnd",
    value: function fromColumnStartAndEnd(sheet, columnStart, columnEnd) {
      return new ColumnsSpan(sheet, columnStart, columnEnd);
    }
  }]);

  return ColumnsSpan;
}();

exports.ColumnsSpan = ColumnsSpan;

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.filterDependenciesOutOfScope = exports.absolutizeDependencies = void 0;

__webpack_require__(150);

__webpack_require__(157);

__webpack_require__(1);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _parser = __webpack_require__(169);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/**
 * Converts dependencies from maybe relative addressing to absolute addressing.
 *
 * @param deps - list of addresses in R0C0 format
 * @param baseAddress - base address with regard to which make a convertion
 */
var absolutizeDependencies = function absolutizeDependencies(deps, baseAddress) {
  return deps.map(function (dep) {
    return dep.absolutize(baseAddress);
  });
};

exports.absolutizeDependencies = absolutizeDependencies;

var filterDependenciesOutOfScope = function filterDependenciesOutOfScope(deps) {
  return deps.filter(function (dep) {
    if (dep instanceof _parser.NamedExpressionDependency) {
      return true;
    }

    if (dep instanceof _AbsoluteCellRange.AbsoluteCellRange) {
      return !((0, _Cell.invalidSimpleCellAddress)(dep.start) || (0, _Cell.invalidSimpleCellAddress)(dep.end));
    } else {
      return !(0, _Cell.invalidSimpleCellAddress)(dep);
    }
  });
};

exports.filterDependenciesOutOfScope = filterDependenciesOutOfScope;

/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.ContentChanges = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(154);

__webpack_require__(146);

__webpack_require__(82);

var _Cell = __webpack_require__(143);

var _SimpleRangeValue = __webpack_require__(245);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ContentChanges = /*#__PURE__*/function () {
  function ContentChanges() {
    _classCallCheck(this, ContentChanges);

    this.changes = new Map();
  }

  _createClass(ContentChanges, [{
    key: "addAll",
    value: function addAll(other) {
      var _iterator = _createForOfIteratorHelper(other.changes.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var change = _step.value;
          this.add(change.address, change);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this;
    }
  }, {
    key: "addChange",
    value: function addChange(newValue, address, oldValue) {
      this.addInterpreterValue(newValue, address, oldValue);
    }
  }, {
    key: "exportChanges",
    value: function exportChanges(exporter) {
      var ret = [];
      this.changes.forEach(function (e) {
        var change = exporter.exportChange(e);

        if (Array.isArray(change)) {
          ret = ret.concat(change);
        } else {
          ret.push(change);
        }
      });
      return ret;
    }
  }, {
    key: "getChanges",
    value: function getChanges() {
      return Array.from(this.changes.values());
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.changes.size === 0;
    }
  }, {
    key: "add",
    value: function add(address, change) {
      var value = change.value;

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        var _iterator2 = _createForOfIteratorHelper(value.effectiveAddressesFromData(address)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var cellAddress = _step2.value;
            this.changes.delete("".concat(cellAddress.sheet, ",").concat(cellAddress.col, ",").concat(cellAddress.row));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      this.changes.set((0, _Cell.addressKey)(address), change);
    }
  }, {
    key: "addInterpreterValue",
    value: function addInterpreterValue(value, address, oldValue) {
      this.add(address, {
        address: address,
        value: value,
        oldValue: oldValue
      });
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new ContentChanges();
    }
  }]);

  return ContentChanges;
}();

exports.ContentChanges = ContentChanges;

/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(1);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.SimpleRangeValue = void 0;

__webpack_require__(92);

__webpack_require__(120);

__webpack_require__(122);

__webpack_require__(149);

var _ArraySize = __webpack_require__(246);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var SimpleRangeValue = /*#__PURE__*/function () {
  function SimpleRangeValue(_data, range, dependencyGraph, _hasOnlyNumbers) {
    _classCallCheck(this, SimpleRangeValue);

    this._data = _data;
    this.range = range;
    this.dependencyGraph = dependencyGraph;
    this._hasOnlyNumbers = _hasOnlyNumbers;

    if (_data === undefined) {
      this.size = new _ArraySize.ArraySize(range.effectiveWidth(dependencyGraph), range.effectiveHeight(dependencyGraph));
    } else {
      this.size = new _ArraySize.ArraySize(_data[0].length, _data.length);
    }
  }

  _createClass(SimpleRangeValue, [{
    key: "data",
    get: function get() {
      this.ensureThatComputed();
      return this._data;
    }
  }, {
    key: "isAdHoc",
    value: function isAdHoc() {
      return this.range === undefined;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width; //should be equal to this.data[0].length
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height; //should be equal to this.data.length
    }
  }, {
    key: "valuesFromTopLeftCorner",
    value: function valuesFromTopLeftCorner() {
      this.ensureThatComputed();
      var ret = [];

      for (var i = 0; i < this._data.length; i++) {
        for (var j = 0; j < this._data[0].length; j++) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          ret.push(this._data[i][j]);
        }
      }

      return ret;
    }
  }, {
    key: "effectiveAddressesFromData",
    value: /*#__PURE__*/regeneratorRuntime.mark(function effectiveAddressesFromData(leftCorner) {
      var row, rowData, col;
      return regeneratorRuntime.wrap(function effectiveAddressesFromData$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              row = 0;

            case 1:
              if (!(row < this.data.length)) {
                _context.next = 13;
                break;
              }

              rowData = this.data[row];
              col = 0;

            case 4:
              if (!(col < rowData.length)) {
                _context.next = 10;
                break;
              }

              _context.next = 7;
              return (0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + col, leftCorner.row + row);

            case 7:
              ++col;
              _context.next = 4;
              break;

            case 10:
              ++row;
              _context.next = 1;
              break;

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, effectiveAddressesFromData, this);
    })
  }, {
    key: "entriesFromTopLeftCorner",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromTopLeftCorner(leftCorner) {
      var row, col;
      return regeneratorRuntime.wrap(function entriesFromTopLeftCorner$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.ensureThatComputed();
              row = 0;

            case 2:
              if (!(row < this.size.height)) {
                _context2.next = 13;
                break;
              }

              col = 0;

            case 4:
              if (!(col < this.size.width)) {
                _context2.next = 10;
                break;
              }

              _context2.next = 7;
              return [this._data[row][col], (0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + col, leftCorner.row + row)];

            case 7:
              ++col;
              _context2.next = 4;
              break;

            case 10:
              ++row;
              _context2.next = 2;
              break;

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, entriesFromTopLeftCorner, this);
    })
  }, {
    key: "iterateValuesFromTopLeftCorner",
    value: /*#__PURE__*/regeneratorRuntime.mark(function iterateValuesFromTopLeftCorner() {
      return regeneratorRuntime.wrap(function iterateValuesFromTopLeftCorner$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.delegateYield(this.valuesFromTopLeftCorner(), "t0", 1);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, iterateValuesFromTopLeftCorner, this);
    })
  }, {
    key: "numberOfElements",
    value: function numberOfElements() {
      return this.size.width * this.size.height;
    }
  }, {
    key: "hasOnlyNumbers",
    value: function hasOnlyNumbers() {
      if (this._hasOnlyNumbers === undefined) {
        this._hasOnlyNumbers = true;

        var _iterator = _createForOfIteratorHelper(this.data),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var row = _step.value;

            var _iterator2 = _createForOfIteratorHelper(row),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var v = _step2.value;

                if (typeof v !== 'number') {
                  this._hasOnlyNumbers = false;
                  return false;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return this._hasOnlyNumbers;
    }
  }, {
    key: "rawNumbers",
    value: function rawNumbers() {
      return this._data;
    }
  }, {
    key: "rawData",
    value: function rawData() {
      var _a;

      this.ensureThatComputed();
      return (_a = this._data) !== null && _a !== void 0 ? _a : [];
    }
  }, {
    key: "sameDimensionsAs",
    value: function sameDimensionsAs(other) {
      return this.width() === other.width() && this.height() === other.height();
    }
  }, {
    key: "ensureThatComputed",
    value: function ensureThatComputed() {
      var _this = this;

      if (this._data !== undefined) {
        return;
      }

      this._hasOnlyNumbers = true;
      this._data = this.range.addressesArrayMap(this.dependencyGraph, function (cellFromRange) {
        var value = _this.dependencyGraph.getCellValue(cellFromRange);

        if (value instanceof SimpleRangeValue) {
          _this._hasOnlyNumbers = false;
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
        } else if ((0, _InterpreterValue.isExtendedNumber)(value)) {
          return value;
        } else {
          _this._hasOnlyNumbers = false;
          return value;
        }
      });
    }
  }], [{
    key: "fromRange",
    value: function fromRange(data, range, dependencyGraph) {
      return new SimpleRangeValue(data, range, dependencyGraph, true);
    }
  }, {
    key: "onlyNumbers",
    value: function onlyNumbers(data) {
      return new SimpleRangeValue(data, undefined, undefined, true);
    }
  }, {
    key: "onlyValues",
    value: function onlyValues(data) {
      return new SimpleRangeValue(data, undefined, undefined, undefined);
    }
  }, {
    key: "onlyRange",
    value: function onlyRange(range, dependencyGraph) {
      return new SimpleRangeValue(undefined, range, dependencyGraph, undefined);
    }
  }, {
    key: "fromScalar",
    value: function fromScalar(scalar) {
      return new SimpleRangeValue([[scalar]], undefined, undefined, undefined);
    }
  }]);

  return SimpleRangeValue;
}();

exports.SimpleRangeValue = SimpleRangeValue;

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.ArraySizePredictor = exports.ArraySize = void 0;

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(150);

__webpack_require__(77);

var _AbsoluteCellRange = __webpack_require__(158);

var _InterpreterState = __webpack_require__(247);

var _FunctionPlugin = __webpack_require__(248);

var _parser = __webpack_require__(169);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ArraySize = /*#__PURE__*/function () {
  function ArraySize(width, height) {
    var isRef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    _classCallCheck(this, ArraySize);

    this.width = width;
    this.height = height;
    this.isRef = isRef;

    if (width <= 0 || height <= 0) {
      throw Error('Incorrect array size');
    }
  }

  _createClass(ArraySize, [{
    key: "isScalar",
    value: function isScalar() {
      return this.width <= 1 && this.height <= 1 || this.isRef;
    }
  }], [{
    key: "fromArray",
    value: function fromArray(array) {
      return new ArraySize(array.length > 0 ? array[0].length : 0, array.length);
    }
  }, {
    key: "error",
    value: function error() {
      return new ArraySize(1, 1, true);
    }
  }, {
    key: "scalar",
    value: function scalar() {
      return new ArraySize(1, 1, false);
    }
  }]);

  return ArraySize;
}();

exports.ArraySize = ArraySize;

function arraySizeForBinaryOp(leftArraySize, rightArraySize) {
  return new ArraySize(Math.max(leftArraySize.width, rightArraySize.width), Math.max(leftArraySize.height, rightArraySize.height));
}

function arraySizeForUnaryOp(arraySize) {
  return new ArraySize(arraySize.width, arraySize.height);
}

var ArraySizePredictor = /*#__PURE__*/function () {
  function ArraySizePredictor(config, functionRegistry) {
    _classCallCheck(this, ArraySizePredictor);

    this.config = config;
    this.functionRegistry = functionRegistry;
  }

  _createClass(ArraySizePredictor, [{
    key: "checkArraySize",
    value: function checkArraySize(ast, formulaAddress) {
      return this.checkArraySizeForAst(ast, {
        formulaAddress: formulaAddress,
        arraysFlag: this.config.useArrayArithmetic
      });
    }
  }, {
    key: "checkArraySizeForAst",
    value: function checkArraySizeForAst(ast, state) {
      var _this = this;

      switch (ast.type) {
        case _parser.AstNodeType.FUNCTION_CALL:
          {
            return this.checkArraySizeForFunction(ast, state);
          }

        case _parser.AstNodeType.COLUMN_RANGE:
        case _parser.AstNodeType.ROW_RANGE:
        case _parser.AstNodeType.CELL_RANGE:
          {
            var range = _AbsoluteCellRange.AbsoluteCellRange.fromAstOrUndef(ast, state.formulaAddress);

            if (range === undefined) {
              return ArraySize.error();
            } else {
              return new ArraySize(range.width(), range.height(), true);
            }
          }

        case _parser.AstNodeType.ARRAY:
          {
            var heights = [];
            var widths = [];

            var _iterator = _createForOfIteratorHelper(ast.args),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var row = _step.value;
                var sizes = row.map(function (ast) {
                  return _this.checkArraySizeForAst(ast, state);
                });
                var h = Math.min.apply(Math, _toConsumableArray(sizes.map(function (size) {
                  return size.height;
                })));
                var w = sizes.reduce(function (total, size) {
                  return total + size.width;
                }, 0);
                heights.push(h);
                widths.push(w);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            var height = heights.reduce(function (total, h) {
              return total + h;
            }, 0);
            var width = Math.min.apply(Math, widths);
            return new ArraySize(width, height);
          }

        case _parser.AstNodeType.STRING:
        case _parser.AstNodeType.NUMBER:
          return ArraySize.scalar();

        case _parser.AstNodeType.CELL_REFERENCE:
          return new ArraySize(1, 1, true);

        case _parser.AstNodeType.DIV_OP:
        case _parser.AstNodeType.CONCATENATE_OP:
        case _parser.AstNodeType.EQUALS_OP:
        case _parser.AstNodeType.GREATER_THAN_OP:
        case _parser.AstNodeType.GREATER_THAN_OR_EQUAL_OP:
        case _parser.AstNodeType.LESS_THAN_OP:
        case _parser.AstNodeType.LESS_THAN_OR_EQUAL_OP:
        case _parser.AstNodeType.MINUS_OP:
        case _parser.AstNodeType.NOT_EQUAL_OP:
        case _parser.AstNodeType.PLUS_OP:
        case _parser.AstNodeType.POWER_OP:
        case _parser.AstNodeType.TIMES_OP:
          {
            var left = this.checkArraySizeForAst(ast.left, state);
            var right = this.checkArraySizeForAst(ast.right, state);

            if (!state.arraysFlag && (left.height > 1 || left.width > 1 || right.height > 1 || right.width > 1)) {
              return ArraySize.error();
            }

            return arraySizeForBinaryOp(left, right);
          }

        case _parser.AstNodeType.MINUS_UNARY_OP:
        case _parser.AstNodeType.PLUS_UNARY_OP:
        case _parser.AstNodeType.PERCENT_OP:
          {
            var val = this.checkArraySizeForAst(ast.value, state);

            if (!state.arraysFlag && (val.height > 1 || val.width > 1)) {
              return ArraySize.error();
            }

            return arraySizeForUnaryOp(val);
          }

        case _parser.AstNodeType.PARENTHESIS:
          {
            return this.checkArraySizeForAst(ast.expression, state);
          }

        case _parser.AstNodeType.EMPTY:
          return ArraySize.error();

        default:
          return ArraySize.error();
      }
    }
  }, {
    key: "checkArraySizeForFunction",
    value: function checkArraySizeForFunction(ast, state) {
      var _this2 = this;

      var metadata = this.functionRegistry.getMetadata(ast.procedureName);
      var pluginArraySizeFunction = this.functionRegistry.getArraySizeFunction(ast.procedureName);

      if (pluginArraySizeFunction !== undefined) {
        return pluginArraySizeFunction(ast, state);
      }

      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this2.checkArraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });

      if (metadata === undefined || metadata.expandRanges || !state.arraysFlag || metadata.vectorizationForbidden || metadata.parameters === undefined) {
        return new ArraySize(1, 1);
      }

      var argumentDefinitions = _toConsumableArray(metadata.parameters);

      if (metadata.repeatLastArgs === undefined && argumentDefinitions.length < subChecks.length) {
        return ArraySize.error();
      }

      if (metadata.repeatLastArgs !== undefined && argumentDefinitions.length < subChecks.length && (subChecks.length - argumentDefinitions.length) % metadata.repeatLastArgs !== 0) {
        return ArraySize.error();
      }

      while (argumentDefinitions.length < subChecks.length) {
        argumentDefinitions.push.apply(argumentDefinitions, _toConsumableArray(argumentDefinitions.slice(argumentDefinitions.length - metadata.repeatLastArgs)));
      }

      var maxWidth = 1;
      var maxHeight = 1;

      for (var i = 0; i < subChecks.length; i++) {
        if (argumentDefinitions[i].argumentType !== _FunctionPlugin.ArgumentTypes.RANGE && argumentDefinitions[i].argumentType !== _FunctionPlugin.ArgumentTypes.ANY) {
          maxHeight = Math.max(maxHeight, subChecks[i].height);
          maxWidth = Math.max(maxWidth, subChecks[i].width);
        }
      }

      return new ArraySize(maxWidth, maxHeight);
    }
  }]);

  return ArraySizePredictor;
}();

exports.ArraySizePredictor = ArraySizePredictor;

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.InterpreterState = void 0;

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var InterpreterState = /*#__PURE__*/_createClass(function InterpreterState(formulaAddress, arraysFlag, formulaVertex) {
  _classCallCheck(this, InterpreterState);

  this.formulaAddress = formulaAddress;
  this.arraysFlag = arraysFlag;
  this.formulaVertex = formulaVertex;
});

exports.InterpreterState = InterpreterState;

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(82);

__webpack_require__(81);

__webpack_require__(103);

exports.__esModule = true;
exports.FunctionPlugin = exports.ArgumentTypes = void 0;

__webpack_require__(150);

__webpack_require__(77);

__webpack_require__(236);

__webpack_require__(161);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _parser = __webpack_require__(169);

var _ArithmeticHelper = __webpack_require__(249);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ArgumentTypes;
exports.ArgumentTypes = ArgumentTypes;

(function (ArgumentTypes) {
  /**
   * String type.
   */
  ArgumentTypes["STRING"] = "STRING";
  /**
   * Floating point type.
   */

  ArgumentTypes["NUMBER"] = "NUMBER";
  /**
   * Boolean type.
   */

  ArgumentTypes["BOOLEAN"] = "BOOLEAN";
  /**
   * Any non-range value.
   */

  ArgumentTypes["SCALAR"] = "SCALAR";
  /**
   * Any non-range, no-error type.
   */

  ArgumentTypes["NOERROR"] = "NOERROR";
  /**
   * Range type.
   */

  ArgumentTypes["RANGE"] = "RANGE";
  /**
   * Integer type.
   */

  ArgumentTypes["INTEGER"] = "INTEGER";
  /**
   * String representing complex number.
   */

  ArgumentTypes["COMPLEX"] = "COMPLEX";
  /**
   * Range or scalar.
   */

  ArgumentTypes["ANY"] = "ANY";
})(ArgumentTypes || (exports.ArgumentTypes = ArgumentTypes = {}));
/**
 * Abstract class representing interpreter function plugin.
 * Plugin may contain multiple functions. Each function should be of type {@link PluginFunctionType} and needs to be
 * included in {@link implementedFunctions}
 */


var FunctionPlugin = /*#__PURE__*/function () {
  function FunctionPlugin(interpreter) {
    var _this = this;

    _classCallCheck(this, FunctionPlugin);

    this.coerceScalarToNumberOrError = function (arg) {
      return _this.arithmeticHelper.coerceScalarToNumberOrError(arg);
    };

    this.runFunction = function (args, state, metadata, fn) {
      var _a, _b, _c, _d, _e;

      var argumentDefinitions = metadata.parameters;
      var argValues;

      if (metadata.expandRanges) {
        argValues = _this.listOfScalarValues(args, state);
      } else {
        argValues = args.map(function (ast) {
          return [_this.evaluateAst(ast, state), false];
        });
      }

      if (metadata.repeatLastArgs === undefined && argumentDefinitions.length < argValues.length) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      if (metadata.repeatLastArgs !== undefined && argumentDefinitions.length < argValues.length && (argValues.length - argumentDefinitions.length) % metadata.repeatLastArgs !== 0) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      argumentDefinitions = _toConsumableArray(argumentDefinitions);

      while (argumentDefinitions.length < argValues.length) {
        var _argumentDefinitions;

        (_argumentDefinitions = argumentDefinitions).push.apply(_argumentDefinitions, _toConsumableArray(argumentDefinitions.slice(argumentDefinitions.length - metadata.repeatLastArgs)));
      }

      var maxWidth = 1;
      var maxHeight = 1;

      if (!metadata.vectorizationForbidden && state.arraysFlag) {
        for (var i = 0; i < argValues.length; i++) {
          var _argValues$i = _slicedToArray(argValues[i], 1),
              val = _argValues$i[0];

          if (val instanceof _SimpleRangeValue.SimpleRangeValue && argumentDefinitions[i].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[i].argumentType !== ArgumentTypes.ANY) {
            maxHeight = Math.max(maxHeight, val.height());
            maxWidth = Math.max(maxWidth, val.width());
          }
        }
      }

      for (var _i2 = argValues.length; _i2 < argumentDefinitions.length; _i2++) {
        if (((_a = argumentDefinitions[_i2]) === null || _a === void 0 ? void 0 : _a.defaultValue) === undefined) {
          if (!((_b = argumentDefinitions[_i2]) === null || _b === void 0 ? void 0 : _b.optionalArg)) {
            //not enough values passed as arguments, and there was no default value and argument was not optional
            return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
          }
        }
      }

      var retArr = [];

      for (var row = 0; row < maxHeight; row++) {
        var rowArr = [];

        for (var col = 0; col < maxWidth; col++) {
          var argCoerceFailure = undefined;
          var coercedArguments = [];

          for (var _i3 = 0; _i3 < argumentDefinitions.length; _i3++) {
            // eslint-disable-next-line prefer-const
            var _ref = (_c = argValues[_i3]) !== null && _c !== void 0 ? _c : [undefined, undefined],
                _ref2 = _slicedToArray(_ref, 2),
                _val = _ref2[0],
                ignorable = _ref2[1];

            if (_val instanceof _SimpleRangeValue.SimpleRangeValue && argumentDefinitions[_i3].argumentType !== ArgumentTypes.RANGE && argumentDefinitions[_i3].argumentType !== ArgumentTypes.ANY) {
              if (!metadata.vectorizationForbidden && state.arraysFlag) {
                _val = (_d = _val.data[_val.height() !== 1 ? row : 0]) === null || _d === void 0 ? void 0 : _d[_val.width() !== 1 ? col : 0];
              }
            }

            var arg = _val !== null && _val !== void 0 ? _val : (_e = argumentDefinitions[_i3]) === null || _e === void 0 ? void 0 : _e.defaultValue;

            if (arg === undefined) {
              coercedArguments.push(undefined); //we verified in previous loop that this arg is optional
            } else {
              //we apply coerce only to non-default values
              var coercedArg = _val !== undefined ? _this.coerceToType(arg, argumentDefinitions[_i3], state) : arg;

              if (coercedArg !== undefined) {
                if (coercedArg instanceof _Cell.CellError && argumentDefinitions[_i3].argumentType !== ArgumentTypes.SCALAR) {
                  //if this is first error encountered, store it
                  argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : coercedArg;
                }

                coercedArguments.push(coercedArg);
              } else if (!ignorable) {
                //if this is first error encountered, store it
                argCoerceFailure = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
              }
            }
          }

          var ret = argCoerceFailure !== null && argCoerceFailure !== void 0 ? argCoerceFailure : _this.returnNumberWrapper(fn.apply(void 0, coercedArguments), metadata.returnNumberType);

          if (maxHeight === 1 && maxWidth === 1) {
            return ret;
          }

          if (ret instanceof _SimpleRangeValue.SimpleRangeValue) {
            throw 'Function returning array cannot be vectorized.';
          }

          rowArr.push(ret);
        }

        retArr.push(rowArr);
      }

      return _SimpleRangeValue.SimpleRangeValue.onlyValues(retArr);
    };

    this.runFunctionWithReferenceArgument = function (args, state, metadata, noArgCallback, referenceCallback) {
      var nonReferenceCallback = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.CellRefExpected);
      };

      if (args.length === 0) {
        return _this.returnNumberWrapper(noArgCallback(), metadata.returnNumberType);
      } else if (args.length > 1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      var arg = args[0];

      while (arg.type === _parser.AstNodeType.PARENTHESIS) {
        arg = arg.expression;
      }

      var cellReference;

      if (arg.type === _parser.AstNodeType.CELL_REFERENCE) {
        cellReference = arg.reference.toSimpleCellAddress(state.formulaAddress);
      } else if (arg.type === _parser.AstNodeType.CELL_RANGE || arg.type === _parser.AstNodeType.COLUMN_RANGE || arg.type === _parser.AstNodeType.ROW_RANGE) {
        try {
          cellReference = _AbsoluteCellRange.AbsoluteCellRange.fromAst(arg, state.formulaAddress).start;
        } catch (e) {
          return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.CellRefExpected);
        }
      }

      if (cellReference !== undefined) {
        return _this.returnNumberWrapper(referenceCallback(cellReference), metadata.returnNumberType);
      }

      return _this.runFunction(args, state, metadata, nonReferenceCallback);
    };

    this.interpreter = interpreter;
    this.dependencyGraph = interpreter.dependencyGraph;
    this.columnSearch = interpreter.columnSearch;
    this.config = interpreter.config;
    this.serialization = interpreter.serialization;
    this.arraySizePredictor = interpreter.arraySizePredictor;
    this.dateTimeHelper = interpreter.dateTimeHelper;
    this.arithmeticHelper = interpreter.arithmeticHelper;
  }

  _createClass(FunctionPlugin, [{
    key: "evaluateAst",
    value: function evaluateAst(ast, state) {
      return this.interpreter.evaluateAst(ast, state);
    }
  }, {
    key: "arraySizeForAst",
    value: function arraySizeForAst(ast, state) {
      return this.arraySizePredictor.checkArraySizeForAst(ast, state);
    }
  }, {
    key: "listOfScalarValues",
    value: function listOfScalarValues(asts, state) {
      var ret = [];

      var _iterator = _createForOfIteratorHelper(asts),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var argAst = _step.value;
          var value = this.evaluateAst(argAst, state);

          if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
            var _iterator2 = _createForOfIteratorHelper(value.valuesFromTopLeftCorner()),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var scalarValue = _step2.value;
                ret.push([scalarValue, true]);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          } else {
            ret.push([value, false]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return ret;
    }
  }, {
    key: "coerceToType",
    value: function coerceToType(arg, coercedType, state) {
      var ret;

      if (arg instanceof _SimpleRangeValue.SimpleRangeValue) {
        switch (coercedType.argumentType) {
          case ArgumentTypes.RANGE:
          case ArgumentTypes.ANY:
            ret = arg;
            break;

          default:
            {
              var coerce = (0, _ArithmeticHelper.coerceRangeToScalar)(arg, state);

              if (coerce === undefined) {
                return undefined;
              }

              arg = coerce;
            }
        }
      }

      if (!(arg instanceof _SimpleRangeValue.SimpleRangeValue)) {
        switch (coercedType.argumentType) {
          case ArgumentTypes.INTEGER:
          case ArgumentTypes.NUMBER:
            // eslint-disable-next-line no-case-declarations
            var coerced = this.coerceScalarToNumberOrError(arg);

            if (!(0, _InterpreterValue.isExtendedNumber)(coerced)) {
              ret = coerced;
              break;
            } // eslint-disable-next-line no-case-declarations


            var value = (0, _InterpreterValue.getRawValue)(coerced);

            if (coercedType.maxValue !== undefined && value > coercedType.maxValue) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
            }

            if (coercedType.minValue !== undefined && value < coercedType.minValue) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }

            if (coercedType.lessThan !== undefined && value >= coercedType.lessThan) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
            }

            if (coercedType.greaterThan !== undefined && value <= coercedType.greaterThan) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }

            if (coercedType.argumentType === ArgumentTypes.INTEGER && !Number.isInteger(value)) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.IntegerExpected);
            }

            ret = coerced;
            break;

          case ArgumentTypes.STRING:
            ret = (0, _ArithmeticHelper.coerceScalarToString)(arg);
            break;

          case ArgumentTypes.BOOLEAN:
            ret = (0, _ArithmeticHelper.coerceScalarToBoolean)(arg);
            break;

          case ArgumentTypes.SCALAR:
          case ArgumentTypes.NOERROR:
          case ArgumentTypes.ANY:
            ret = arg;
            break;

          case ArgumentTypes.RANGE:
            if (arg instanceof _Cell.CellError) {
              return arg;
            }

            ret = (0, _ArithmeticHelper.coerceToRange)(arg);
            break;

          case ArgumentTypes.COMPLEX:
            return this.arithmeticHelper.coerceScalarToComplex((0, _InterpreterValue.getRawValue)(arg));
        }
      }

      if (coercedType.passSubtype || ret === undefined) {
        return ret;
      } else {
        return (0, _InterpreterValue.getRawValue)(ret);
      }
    }
  }, {
    key: "metadata",
    value: function metadata(name) {
      var params = this.constructor.implementedFunctions[name];

      if (params !== undefined) {
        return params;
      }

      throw new Error("No metadata for function ".concat(name, "."));
    }
  }, {
    key: "returnNumberWrapper",
    value: function returnNumberWrapper(val, type, format) {
      if (type !== undefined && (0, _InterpreterValue.isExtendedNumber)(val)) {
        return this.arithmeticHelper.ExtendedNumberFactory((0, _InterpreterValue.getRawValue)(val), {
          type: type,
          format: format
        });
      } else {
        return val;
      }
    }
  }]);

  return FunctionPlugin;
}();

exports.FunctionPlugin = FunctionPlugin;

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.ArithmeticHelper = void 0;
exports.coerceBooleanToNumber = coerceBooleanToNumber;
exports.coerceComplexToString = coerceComplexToString;
exports.coerceEmptyToValue = coerceEmptyToValue;
exports.coerceRangeToScalar = coerceRangeToScalar;
exports.coerceScalarToBoolean = coerceScalarToBoolean;
exports.coerceScalarToString = coerceScalarToString;
exports.coerceToRange = coerceToRange;
exports.coerceToRangeNumbersOrError = coerceToRangeNumbersOrError;
exports.fixNegativeZero = fixNegativeZero;
exports.forceNormalizeString = forceNormalizeString;
exports.isNumberOverflow = isNumberOverflow;
exports.normalizeString = _normalizeString;
exports.numberCmp = numberCmp;
exports.zeroIfEmpty = zeroIfEmpty;

__webpack_require__(146);

__webpack_require__(103);

__webpack_require__(250);

__webpack_require__(161);

__webpack_require__(168);

__webpack_require__(167);

__webpack_require__(179);

__webpack_require__(1);

__webpack_require__(252);

var _unorm = _interopRequireDefault(__webpack_require__(253));

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _StringHelper = __webpack_require__(254);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var COMPLEX_NUMBER_SYMBOL = 'i';
var complexParsingRegexp = /^\s*([+-]?)\s*(([\d\.,]+(e[+-]?\d+)?)\s*([ij]?)|([ij]))\s*(([+-])\s*([+-]?)\s*(([\d\.,]+(e[+-]?\d+)?)\s*([ij]?)|([ij])))?$/;

var ArithmeticHelper = /*#__PURE__*/function () {
  function ArithmeticHelper(config, dateTimeHelper, numberLiteralsHelper) {
    var _this = this;

    _classCallCheck(this, ArithmeticHelper);

    this.config = config;
    this.dateTimeHelper = dateTimeHelper;
    this.numberLiteralsHelper = numberLiteralsHelper;

    this.lt = function (left, right) {
      return _this.compare(left, right) < 0;
    };

    this.leq = function (left, right) {
      return _this.compare(left, right) <= 0;
    };

    this.gt = function (left, right) {
      return _this.compare(left, right) > 0;
    };

    this.geq = function (left, right) {
      return _this.compare(left, right) >= 0;
    };

    this.eq = function (left, right) {
      return _this.compare(left, right) === 0;
    };

    this.neq = function (left, right) {
      return _this.compare(left, right) !== 0;
    };

    this.pow = function (left, right) {
      return Math.pow((0, _InterpreterValue.getRawValue)(left), (0, _InterpreterValue.getRawValue)(right));
    };

    this.addWithEpsilonRaw = function (left, right) {
      var ret = left + right;

      if (Math.abs(ret) < _this.actualEps * Math.abs(left)) {
        return 0;
      } else {
        return ret;
      }
    };

    this.addWithEpsilon = function (left, right) {
      var typeOfResult = inferExtendedNumberTypeAdditive(left, right);
      return _this.ExtendedNumberFactory(_this.addWithEpsilonRaw((0, _InterpreterValue.getRawValue)(left), (0, _InterpreterValue.getRawValue)(right)), typeOfResult);
    };

    this.unaryMinus = function (arg) {
      return (0, _InterpreterValue.cloneNumber)(arg, -(0, _InterpreterValue.getRawValue)(arg));
    };

    this.unaryPlus = function (arg) {
      return arg;
    };

    this.unaryPercent = function (arg) {
      return new _InterpreterValue.PercentNumber((0, _InterpreterValue.getRawValue)(arg) / 100);
    };

    this.concat = function (left, right) {
      return left.concat(right);
    };

    this.nonstrictadd = function (left, right) {
      if (left instanceof _Cell.CellError) {
        return left;
      } else if (right instanceof _Cell.CellError) {
        return right;
      } else if (typeof left === 'number') {
        if (typeof right === 'number') {
          return _this.addWithEpsilonRaw(left, right);
        } else {
          return left;
        }
      } else if (typeof right === 'number') {
        return right;
      } else {
        return 0;
      }
    };
    /**
     * Subtracts two numbers
     *
     * Implementation of subtracting which is used in interpreter.
     *
     * @param left - left operand of subtraction
     * @param right - right operand of subtraction
     * @param eps - precision of comparison
     */


    this.subtract = function (leftArg, rightArg) {
      var typeOfResult = inferExtendedNumberTypeAdditive(leftArg, rightArg);
      var left = (0, _InterpreterValue.getRawValue)(leftArg);
      var right = (0, _InterpreterValue.getRawValue)(rightArg);
      var ret = left - right;

      if (Math.abs(ret) < _this.actualEps * Math.abs(left)) {
        ret = 0;
      }

      return _this.ExtendedNumberFactory(ret, typeOfResult);
    };

    this.divide = function (leftArg, rightArg) {
      var left = (0, _InterpreterValue.getRawValue)(leftArg);
      var right = (0, _InterpreterValue.getRawValue)(rightArg);

      if (right === 0) {
        return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      } else {
        var typeOfResult = inferExtendedNumberTypeMultiplicative(leftArg, rightArg);
        return _this.ExtendedNumberFactory(left / right, typeOfResult);
      }
    };

    this.multiply = function (left, right) {
      var typeOfResult = inferExtendedNumberTypeMultiplicative(left, right);
      return _this.ExtendedNumberFactory((0, _InterpreterValue.getRawValue)(left) * (0, _InterpreterValue.getRawValue)(right), typeOfResult);
    };

    this.manyToExactComplex = function (args) {
      var ret = [];

      var _iterator = _createForOfIteratorHelper(args),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var arg = _step.value;

          if (arg instanceof _Cell.CellError) {
            return arg;
          } else if ((0, _InterpreterValue.isExtendedNumber)(arg) || typeof arg === 'string') {
            var coerced = _this.coerceScalarToComplex(arg);

            if (!(coerced instanceof _Cell.CellError)) {
              ret.push(coerced);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return ret;
    };

    this.coerceNumbersExactRanges = function (args) {
      return _this.manyToNumbers(args, _this.manyToExactNumbers);
    };

    this.coerceNumbersCoerceRangesDropNulls = function (args) {
      return _this.manyToNumbers(args, _this.manyToCoercedNumbersDropNulls);
    };

    this.manyToExactNumbers = function (args) {
      var ret = [];

      var _iterator2 = _createForOfIteratorHelper(args),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var arg = _step2.value;

          if (arg instanceof _Cell.CellError) {
            return arg;
          } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
            ret.push((0, _InterpreterValue.getRawValue)(arg));
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return ret;
    };

    this.manyToOnlyNumbersDropNulls = function (args) {
      var ret = [];

      var _iterator3 = _createForOfIteratorHelper(args),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var arg = _step3.value;

          if (arg instanceof _Cell.CellError) {
            return arg;
          } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
            ret.push((0, _InterpreterValue.getRawValue)(arg));
          } else if (arg !== _InterpreterValue.EmptyValue) {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberExpected);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return ret;
    };

    this.manyToCoercedNumbersDropNulls = function (args) {
      var ret = [];

      var _iterator4 = _createForOfIteratorHelper(args),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var arg = _step4.value;

          if (arg instanceof _Cell.CellError) {
            return arg;
          }

          if (arg === _InterpreterValue.EmptyValue) {
            continue;
          }

          var coerced = _this.coerceScalarToNumberOrError(arg);

          if ((0, _InterpreterValue.isExtendedNumber)(coerced)) {
            ret.push((0, _InterpreterValue.getRawValue)(coerced));
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return ret;
    };

    this.collator = (0, _StringHelper.collatorFromConfig)(config);
    this.actualEps = config.smartRounding ? config.precisionEpsilon : 0;
  }

  _createClass(ArithmeticHelper, [{
    key: "eqMatcherFunction",
    value: function eqMatcherFunction(pattern) {
      var _this2 = this;

      var regexp = this.buildRegex(pattern);
      return function (cellValue) {
        return typeof cellValue === 'string' && regexp.test(_this2.normalizeString(cellValue));
      };
    }
  }, {
    key: "neqMatcherFunction",
    value: function neqMatcherFunction(pattern) {
      var _this3 = this;

      var regexp = this.buildRegex(pattern);
      return function (cellValue) {
        return !(typeof cellValue === 'string') || !regexp.test(_this3.normalizeString(cellValue));
      };
    }
  }, {
    key: "searchString",
    value: function searchString(pattern, text) {
      var _a;

      var regexp = this.buildRegex(pattern, false);
      var result = regexp.exec(text);
      return (_a = result === null || result === void 0 ? void 0 : result.index) !== null && _a !== void 0 ? _a : -1;
    }
  }, {
    key: "requiresRegex",
    value: function requiresRegex(pattern) {
      if (!this.config.useRegularExpressions && !this.config.useWildcards) {
        return !this.config.matchWholeCell;
      }

      for (var i = 0; i < pattern.length; i++) {
        var c = pattern.charAt(i);

        if (isWildcard(c) || this.config.useRegularExpressions && needsEscape(c)) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "floatCmp",
    value: function floatCmp(leftArg, rightArg) {
      var left = (0, _InterpreterValue.getRawValue)(leftArg);
      var right = (0, _InterpreterValue.getRawValue)(rightArg);
      var mod = 1 + this.actualEps;

      if (right >= 0 && left * mod >= right && left <= right * mod) {
        return 0;
      } else if (right <= 0 && left * mod <= right && left >= right * mod) {
        return 0;
      } else if (left > right) {
        return 1;
      } else {
        return -1;
      }
    }
  }, {
    key: "coerceScalarToNumberOrError",
    value: function coerceScalarToNumberOrError(arg) {
      var _a;

      if (arg instanceof _Cell.CellError) {
        return arg;
      }

      return (_a = this.coerceToMaybeNumber(arg)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberCoercion);
    }
  }, {
    key: "coerceToMaybeNumber",
    value: function coerceToMaybeNumber(arg) {
      var _a;

      return (_a = this.coerceNonDateScalarToMaybeNumber(arg)) !== null && _a !== void 0 ? _a : typeof arg === 'string' ? this.dateTimeHelper.dateStringToDateNumber(arg) : undefined;
    }
  }, {
    key: "coerceNonDateScalarToMaybeNumber",
    value: function coerceNonDateScalarToMaybeNumber(arg) {
      if (arg === _InterpreterValue.EmptyValue) {
        return 0;
      } else if (typeof arg === 'string') {
        if (arg === '') {
          return 0;
        }

        return this.numberLiteralsHelper.numericStringToMaybeNumber(arg.trim());
      } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
        return arg;
      } else if (typeof arg === 'boolean') {
        return Number(arg);
      } else {
        return undefined;
      }
    }
  }, {
    key: "coerceComplexExactRanges",
    value: function coerceComplexExactRanges(args) {
      var vals = [];

      var _iterator5 = _createForOfIteratorHelper(args),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var arg = _step5.value;

          if (arg instanceof _SimpleRangeValue.SimpleRangeValue) {
            vals.push(arg);
          } else if (arg !== _InterpreterValue.EmptyValue) {
            var coerced = this.coerceScalarToComplex(arg);

            if (coerced instanceof _Cell.CellError) {
              return coerced;
            } else {
              vals.push(coerced);
            }
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      var expandedVals = [];

      for (var _i = 0, _vals = vals; _i < _vals.length; _i++) {
        var val = _vals[_i];

        if (val instanceof _SimpleRangeValue.SimpleRangeValue) {
          var arr = this.manyToExactComplex(val.valuesFromTopLeftCorner());

          if (arr instanceof _Cell.CellError) {
            return arr;
          } else {
            expandedVals.push.apply(expandedVals, _toConsumableArray(arr));
          }
        } else {
          expandedVals.push(val);
        }
      }

      return expandedVals;
    }
  }, {
    key: "coerceScalarToComplex",
    value: function coerceScalarToComplex(arg) {
      if (arg instanceof _Cell.CellError) {
        return arg;
      } else if (arg === _InterpreterValue.EmptyValue) {
        return [0, 0];
      } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
        return [(0, _InterpreterValue.getRawValue)(arg), 0];
      } else if (typeof arg === 'string') {
        return this.coerceStringToComplex(arg);
      } else {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ComplexNumberExpected);
      }
    }
  }, {
    key: "ExtendedNumberFactory",
    value: function ExtendedNumberFactory(value, typeFormat) {
      var type = typeFormat.type,
          format = typeFormat.format;

      switch (type) {
        case _InterpreterValue.NumberType.NUMBER_RAW:
          return value;

        case _InterpreterValue.NumberType.NUMBER_CURRENCY:
          {
            return new _InterpreterValue.CurrencyNumber(value, format !== null && format !== void 0 ? format : this.config.currencySymbol[0]);
          }

        case _InterpreterValue.NumberType.NUMBER_DATE:
          return new _InterpreterValue.DateNumber(value, format);

        case _InterpreterValue.NumberType.NUMBER_DATETIME:
          return new _InterpreterValue.DateTimeNumber(value, format);

        case _InterpreterValue.NumberType.NUMBER_TIME:
          return new _InterpreterValue.TimeNumber(value, format);

        case _InterpreterValue.NumberType.NUMBER_PERCENT:
          return new _InterpreterValue.PercentNumber(value, format);
      }
    }
  }, {
    key: "buildRegex",
    value: function buildRegex(pattern) {
      var matchWholeCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      pattern = this.normalizeString(pattern);
      var regexpStr;
      var useWildcards = this.config.useWildcards;
      var useRegularExpressions = this.config.useRegularExpressions;

      if (useRegularExpressions) {
        try {
          RegExp(pattern);
        } catch (e) {
          useRegularExpressions = false;
          useWildcards = false;
        }
      }

      if (useRegularExpressions) {
        regexpStr = escapeNoCharacters(pattern, this.config.caseSensitive);
      } else if (useWildcards) {
        regexpStr = escapeNonWildcards(pattern, this.config.caseSensitive);
      } else {
        regexpStr = escapeAllCharacters(pattern, this.config.caseSensitive);
      }

      if (this.config.matchWholeCell && matchWholeCell) {
        return RegExp('^(' + regexpStr + ')$');
      } else {
        return RegExp(regexpStr);
      }
    }
  }, {
    key: "normalizeString",
    value: function normalizeString(str) {
      if (!this.config.caseSensitive) {
        str = str.toLowerCase();
      }

      if (!this.config.accentSensitive) {
        str = _normalizeString(str, 'nfd').replace(/[\u0300-\u036f]/g, '');
      }

      return str;
    }
  }, {
    key: "compare",
    value: function compare(left, right) {
      if (typeof left === 'string' || typeof right === 'string') {
        var leftTmp = typeof left === 'string' ? this.dateTimeHelper.dateStringToDateNumber(left) : left;
        var rightTmp = typeof right === 'string' ? this.dateTimeHelper.dateStringToDateNumber(right) : right;

        if ((0, _InterpreterValue.isExtendedNumber)(leftTmp) && (0, _InterpreterValue.isExtendedNumber)(rightTmp)) {
          return this.floatCmp(leftTmp, rightTmp);
        }
      }

      if (left === _InterpreterValue.EmptyValue) {
        left = coerceEmptyToValue(right);
      } else if (right === _InterpreterValue.EmptyValue) {
        right = coerceEmptyToValue(left);
      }

      if (typeof left === 'string' && typeof right === 'string') {
        return this.stringCmp(left, right);
      } else if (typeof left === 'boolean' && typeof right === 'boolean') {
        return numberCmp(coerceBooleanToNumber(left), coerceBooleanToNumber(right));
      } else if ((0, _InterpreterValue.isExtendedNumber)(left) && (0, _InterpreterValue.isExtendedNumber)(right)) {
        return this.floatCmp(left, right);
      } else if (left === _InterpreterValue.EmptyValue && right === _InterpreterValue.EmptyValue) {
        return 0;
      } else {
        return numberCmp((0, _Cell.CellValueTypeOrd)((0, _Cell.getCellValueType)(left)), (0, _Cell.CellValueTypeOrd)((0, _Cell.getCellValueType)(right)));
      }
    }
  }, {
    key: "stringCmp",
    value: function stringCmp(left, right) {
      return this.collator.compare(left, right);
    }
  }, {
    key: "manyToNumbers",
    value: function manyToNumbers(args, rangeFn) {
      var vals = [];

      var _iterator6 = _createForOfIteratorHelper(args),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var arg = _step6.value;

          if (arg instanceof _SimpleRangeValue.SimpleRangeValue) {
            vals.push(arg);
          } else {
            var coerced = (0, _InterpreterValue.getRawValue)(this.coerceScalarToNumberOrError(arg));

            if (coerced instanceof _Cell.CellError) {
              return coerced;
            } else {
              vals.push(coerced);
            }
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var expandedVals = [];

      for (var _i2 = 0, _vals2 = vals; _i2 < _vals2.length; _i2++) {
        var val = _vals2[_i2];

        if (val instanceof _SimpleRangeValue.SimpleRangeValue) {
          var arr = rangeFn(val.valuesFromTopLeftCorner());

          if (arr instanceof _Cell.CellError) {
            return arr;
          } else {
            expandedVals.push.apply(expandedVals, _toConsumableArray(arr));
          }
        } else {
          expandedVals.push(val);
        }
      }

      return expandedVals;
    }
  }, {
    key: "coerceStringToComplex",
    value: function coerceStringToComplex(arg) {
      var match = complexParsingRegexp.exec(arg);

      if (match === null) {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ComplexNumberExpected);
      }

      var val1;

      if (match[6] !== undefined) {
        val1 = match[1] === '-' ? [0, -1] : [0, 1];
      } else {
        val1 = this.parseComplexToken(match[1] + match[3], match[5]);
      }

      if (val1 instanceof _Cell.CellError) {
        return val1;
      }

      if (match[8] === undefined) {
        return val1;
      }

      var val2;

      if (match[14] !== undefined) {
        val2 = match[9] === '-' ? [0, -1] : [0, 1];
      } else {
        val2 = this.parseComplexToken(match[9] + match[11], match[13]);
      }

      if (val2 instanceof _Cell.CellError) {
        return val2;
      }

      if (match[5] !== '' || match[13] === '') {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ComplexNumberExpected);
      }

      if (match[8] === '+') {
        return [val1[0] + val2[0], val1[1] + val2[1]];
      } else {
        return [val1[0] - val2[0], val1[1] - val2[1]];
      }
    }
  }, {
    key: "parseComplexToken",
    value: function parseComplexToken(arg, mod) {
      var val = (0, _InterpreterValue.getRawValue)(this.coerceNonDateScalarToMaybeNumber(arg));

      if (val === undefined) {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ComplexNumberExpected);
      }

      if (mod === '') {
        return [val, 0];
      } else {
        return [0, val];
      }
    }
  }]);

  return ArithmeticHelper;
}();

exports.ArithmeticHelper = ArithmeticHelper;

function coerceComplexToString(_ref, symb) {
  var _ref2 = _slicedToArray(_ref, 2),
      re = _ref2[0],
      im = _ref2[1];

  if (!isFinite(re) || !isFinite(im)) {
    return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NaN);
  }

  symb = symb !== null && symb !== void 0 ? symb : COMPLEX_NUMBER_SYMBOL;

  if (im === 0) {
    return "".concat(re);
  }

  var imStr = "".concat(im === -1 || im === 1 ? '' : Math.abs(im)).concat(symb);

  if (re === 0) {
    return "".concat(im < 0 ? '-' : '').concat(imStr);
  }

  return "".concat(re).concat(im < 0 ? '-' : '+').concat(imStr);
}

function coerceToRange(arg) {
  if (arg instanceof _SimpleRangeValue.SimpleRangeValue) {
    return arg;
  } else {
    return _SimpleRangeValue.SimpleRangeValue.fromScalar(arg);
  }
}

function coerceToRangeNumbersOrError(arg) {
  if (arg instanceof _SimpleRangeValue.SimpleRangeValue && arg.hasOnlyNumbers() || arg instanceof _Cell.CellError) {
    return arg;
  } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
    return _SimpleRangeValue.SimpleRangeValue.fromScalar(arg);
  } else {
    return null;
  }
}

function coerceBooleanToNumber(arg) {
  return Number(arg);
}

function coerceEmptyToValue(arg) {
  if (typeof arg === 'string') {
    return '';
  } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
    return 0;
  } else if (typeof arg === 'boolean') {
    return false;
  } else {
    return _InterpreterValue.EmptyValue;
  }
}
/**
 * Coerce scalar value to boolean if possible, or error if value is an error
 *
 * @param arg
 */


function coerceScalarToBoolean(arg) {
  if (arg instanceof _Cell.CellError || typeof arg === 'boolean') {
    return arg;
  } else if (arg === _InterpreterValue.EmptyValue) {
    return false;
  } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
    return (0, _InterpreterValue.getRawValue)(arg) !== 0;
  } else {
    var argUppered = arg.toUpperCase();

    if (argUppered === 'TRUE') {
      return true;
    } else if (argUppered === 'FALSE') {
      return false;
    } else if (argUppered === '') {
      return false;
    } else {
      return undefined;
    }
  }
}

function coerceScalarToString(arg) {
  if (arg instanceof _Cell.CellError || typeof arg === 'string') {
    return arg;
  } else if (arg === _InterpreterValue.EmptyValue) {
    return '';
  } else if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
    return (0, _InterpreterValue.getRawValue)(arg).toString();
  } else {
    return arg ? 'TRUE' : 'FALSE';
  }
}

function zeroIfEmpty(arg) {
  return arg === _InterpreterValue.EmptyValue ? 0 : arg;
}

function numberCmp(leftArg, rightArg) {
  var left = (0, _InterpreterValue.getRawValue)(leftArg);
  var right = (0, _InterpreterValue.getRawValue)(rightArg);

  if (left > right) {
    return 1;
  } else if (left < right) {
    return -1;
  } else {
    return 0;
  }
}

function isNumberOverflow(arg) {
  return isNaN(arg) || arg === Infinity || arg === -Infinity;
}

function fixNegativeZero(arg) {
  if (arg === 0) {
    return 0;
  } else {
    return arg;
  }
}

function isWildcard(c) {
  return ['*', '?'].includes(c);
}

var escapedCharacters = ['{', '}', '[', ']', '(', ')', '<', '>', '=', '.', '+', '-', ',', '\\', '$', '^', '!'];

function needsEscape(c) {
  return escapedCharacters.includes(c);
}

function escapeNonWildcards(pattern, caseSensitive) {
  var str = '';

  for (var i = 0; i < pattern.length; i++) {
    var c = pattern.charAt(i);

    if (c === '~') {
      if (i == pattern.length - 1) {
        str += '~';
        continue;
      }

      var d = pattern.charAt(i + 1);

      if (isWildcard(d) || needsEscape(d)) {
        str += '\\' + d;
        i++;
      } else {
        str += d;
        i++;
      }
    } else if (isWildcard(c)) {
      str += '.' + c;
    } else if (needsEscape(c)) {
      str += '\\' + c;
    } else if (caseSensitive) {
      str += c;
    } else {
      str += c.toLowerCase();
    }
  }

  return str;
}

function escapeAllCharacters(pattern, caseSensitive) {
  var str = '';

  for (var i = 0; i < pattern.length; i++) {
    var c = pattern.charAt(i);

    if (isWildcard(c) || needsEscape(c)) {
      str += '\\' + c;
    } else if (caseSensitive) {
      str += c;
    } else {
      str += c.toLowerCase();
    }
  }

  return str;
}

function escapeNoCharacters(pattern, caseSensitive) {
  var str = '';

  for (var i = 0; i < pattern.length; i++) {
    var c = pattern.charAt(i);

    if (isWildcard(c) || needsEscape(c)) {
      str += c;
    } else if (caseSensitive) {
      str += c;
    } else {
      str += c.toLowerCase();
    }
  }

  return str;
}

function inferExtendedNumberTypeAdditive(leftArg, rightArg) {
  var _getTypeFormatOfExten = (0, _InterpreterValue.getTypeFormatOfExtendedNumber)(leftArg),
      leftType = _getTypeFormatOfExten.type,
      leftFormat = _getTypeFormatOfExten.format;

  var _getTypeFormatOfExten2 = (0, _InterpreterValue.getTypeFormatOfExtendedNumber)(rightArg),
      rightType = _getTypeFormatOfExten2.type,
      rightFormat = _getTypeFormatOfExten2.format;

  if (leftType === _InterpreterValue.NumberType.NUMBER_RAW) {
    return {
      type: rightType,
      format: rightFormat
    };
  }

  if (rightType === _InterpreterValue.NumberType.NUMBER_RAW) {
    return {
      type: leftType,
      format: leftFormat
    };
  }

  if ((leftType === _InterpreterValue.NumberType.NUMBER_DATETIME || leftType === _InterpreterValue.NumberType.NUMBER_DATE) && (rightType === _InterpreterValue.NumberType.NUMBER_DATETIME || rightType === _InterpreterValue.NumberType.NUMBER_DATE)) {
    return {
      type: _InterpreterValue.NumberType.NUMBER_RAW
    };
  }

  if (leftType === _InterpreterValue.NumberType.NUMBER_TIME) {
    if (rightType === _InterpreterValue.NumberType.NUMBER_DATE) {
      return {
        type: _InterpreterValue.NumberType.NUMBER_DATETIME,
        format: rightFormat + ' ' + leftFormat
      };
    }

    if (rightType === _InterpreterValue.NumberType.NUMBER_DATETIME) {
      return {
        type: _InterpreterValue.NumberType.NUMBER_DATETIME,
        format: rightFormat
      };
    }
  }

  if (rightType === _InterpreterValue.NumberType.NUMBER_TIME) {
    if (leftType === _InterpreterValue.NumberType.NUMBER_DATE) {
      return {
        type: _InterpreterValue.NumberType.NUMBER_DATETIME,
        format: leftFormat + ' ' + rightFormat
      };
    }

    if (leftType === _InterpreterValue.NumberType.NUMBER_DATETIME) {
      return {
        type: _InterpreterValue.NumberType.NUMBER_DATETIME,
        format: leftFormat
      };
    }
  }

  return {
    type: leftType,
    format: leftFormat
  };
}

function inferExtendedNumberTypeMultiplicative(leftArg, rightArg) {
  var _getTypeFormatOfExten3 = (0, _InterpreterValue.getTypeFormatOfExtendedNumber)(leftArg),
      leftType = _getTypeFormatOfExten3.type,
      leftFormat = _getTypeFormatOfExten3.format;

  var _getTypeFormatOfExten4 = (0, _InterpreterValue.getTypeFormatOfExtendedNumber)(rightArg),
      rightType = _getTypeFormatOfExten4.type,
      rightFormat = _getTypeFormatOfExten4.format;

  if (leftType === _InterpreterValue.NumberType.NUMBER_PERCENT) {
    leftType = _InterpreterValue.NumberType.NUMBER_RAW;
    leftFormat = undefined;
  }

  if (rightType === _InterpreterValue.NumberType.NUMBER_PERCENT) {
    rightType = _InterpreterValue.NumberType.NUMBER_RAW;
    rightFormat = undefined;
  }

  if (leftType === _InterpreterValue.NumberType.NUMBER_RAW) {
    return {
      type: rightType,
      format: rightFormat
    };
  }

  if (rightType === _InterpreterValue.NumberType.NUMBER_RAW) {
    return {
      type: leftType,
      format: leftFormat
    };
  }

  return {
    type: _InterpreterValue.NumberType.NUMBER_RAW
  };
}

function forceNormalizeString(str) {
  return _normalizeString(str.toLowerCase(), 'nfd').replace(/[\u0300-\u036f]/g, '');
}

function coerceRangeToScalar(arg, state) {
  var _a;

  if (arg.isAdHoc()) {
    return (_a = arg.data[0]) === null || _a === void 0 ? void 0 : _a[0];
  }

  var range = arg.range;

  if (state.formulaAddress.sheet === range.sheet) {
    if (range.width() === 1) {
      var offset = state.formulaAddress.row - range.start.row;

      if (offset >= 0 && offset < range.height()) {
        return arg.data[offset][0];
      }
    } else if (range.height() === 1) {
      var _offset = state.formulaAddress.col - range.start.col;

      if (_offset >= 0 && _offset < range.width()) {
        return arg.data[0][_offset];
      }
    }
  }

  return undefined;
}

function _normalizeString(str, form) {
  return typeof str.normalize === 'function' ? str.normalize(form.toUpperCase()) : _unorm.default[form](str);
}

/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $trim = __webpack_require__(163).trim;
var forcedStringTrimMethod = __webpack_require__(251);

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

var PROPER_FUNCTION_NAME = __webpack_require__(46).PROPER;
var fails = __webpack_require__(20);
var whitespaces = __webpack_require__(164);

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
module.exports = function (METHOD_NAME) {
  return fails(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $includes = __webpack_require__(60).includes;
var addToUnscopables = __webpack_require__(121);

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$({ target: 'Array', proto: true }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

(function (root) {
   "use strict";

/***** unorm.js *****/

/*
 * UnicodeNormalizer 1.0.0
 * Copyright (c) 2008 Matsuza
 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
 * $Rev: 13309 $
 */

   var DEFAULT_FEATURE = [null, 0, {}];
   var CACHE_THRESHOLD = 10;
   var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
   var NCount = VCount * TCount; // 588
   var SCount = LCount * NCount; // 11172

   var UChar = function(cp, feature){
      this.codepoint = cp;
      this.feature = feature;
   };

   // Strategies
   var cache = {};
   var cacheCounter = [];
   for (var i = 0; i <= 0xFF; ++i){
      cacheCounter[i] = 0;
   }

   function fromCache(next, cp, needFeature){
      var ret = cache[cp];
      if(!ret){
         ret = next(cp, needFeature);
         if(!!ret.feature && ++cacheCounter[(cp >> 8) & 0xFF] > CACHE_THRESHOLD){
            cache[cp] = ret;
         }
      }
      return ret;
   }

   function fromData(next, cp, needFeature){
      var hash = cp & 0xFF00;
      var dunit = UChar.udata[hash] || {};
      var f = dunit[cp];
      return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
   }
   function fromCpOnly(next, cp, needFeature){
      return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
   }
   function fromRuleBasedJamo(next, cp, needFeature){
      var j;
      if(cp < LBase || (LBase + LCount <= cp && cp < SBase) || (SBase + SCount < cp)){
         return next(cp, needFeature);
      }
      if(LBase <= cp && cp < LBase + LCount){
         var c = {};
         var base = (cp - LBase) * VCount;
         for (j = 0; j < VCount; ++j){
            c[VBase + j] = SBase + TCount * (j + base);
         }
         return new UChar(cp, [,,c]);
      }

      var SIndex = cp - SBase;
      var TIndex = SIndex % TCount;
      var feature = [];
      if(TIndex !== 0){
         feature[0] = [SBase + SIndex - TIndex, TBase + TIndex];
      } else {
         feature[0] = [LBase + Math.floor(SIndex / NCount), VBase + Math.floor((SIndex % NCount) / TCount)];
         feature[2] = {};
         for (j = 1; j < TCount; ++j){
            feature[2][TBase + j] = cp + j;
         }
      }
      return new UChar(cp, feature);
   }
   function fromCpFilter(next, cp, needFeature){
      return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
   }

   var strategies = [fromCpFilter, fromCache, fromCpOnly, fromRuleBasedJamo, fromData];

   UChar.fromCharCode = strategies.reduceRight(function (next, strategy) {
      return function (cp, needFeature) {
         return strategy(next, cp, needFeature);
      };
   }, null);

   UChar.isHighSurrogate = function(cp){
      return cp >= 0xD800 && cp <= 0xDBFF;
   };
   UChar.isLowSurrogate = function(cp){
      return cp >= 0xDC00 && cp <= 0xDFFF;
   };

   UChar.prototype.prepFeature = function(){
      if(!this.feature){
         this.feature = UChar.fromCharCode(this.codepoint, true).feature;
      }
   };

   UChar.prototype.toString = function(){
      if(this.codepoint < 0x10000){
         return String.fromCharCode(this.codepoint);
      } else {
         var x = this.codepoint - 0x10000;
         return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
      }
   };

   UChar.prototype.getDecomp = function(){
      this.prepFeature();
      return this.feature[0] || null;
   };

   UChar.prototype.isCompatibility = function(){
      this.prepFeature();
      return !!this.feature[1] && (this.feature[1] & (1 << 8));
   };
   UChar.prototype.isExclude = function(){
      this.prepFeature();
      return !!this.feature[1] && (this.feature[1] & (1 << 9));
   };
   UChar.prototype.getCanonicalClass = function(){
      this.prepFeature();
      return !!this.feature[1] ? (this.feature[1] & 0xff) : 0;
   };
   UChar.prototype.getComposite = function(following){
      this.prepFeature();
      if(!this.feature[2]){
         return null;
      }
      var cp = this.feature[2][following.codepoint];
      return cp ? UChar.fromCharCode(cp) : null;
   };

   var UCharIterator = function(str){
      this.str = str;
      this.cursor = 0;
   };
   UCharIterator.prototype.next = function(){
      if(!!this.str && this.cursor < this.str.length){
         var cp = this.str.charCodeAt(this.cursor++);
         var d;
         if(UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate((d = this.str.charCodeAt(this.cursor)))){
            cp = (cp - 0xD800) * 0x400 + (d -0xDC00) + 0x10000;
            ++this.cursor;
         }
         return UChar.fromCharCode(cp);
      } else {
         this.str = null;
         return null;
      }
   };

   var RecursDecompIterator = function(it, cano){
      this.it = it;
      this.canonical = cano;
      this.resBuf = [];
   };

   RecursDecompIterator.prototype.next = function(){
      function recursiveDecomp(cano, uchar){
         var decomp = uchar.getDecomp();
         if(!!decomp && !(cano && uchar.isCompatibility())){
            var ret = [];
            for(var i = 0; i < decomp.length; ++i){
               var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                ret = ret.concat(a);
            }
            return ret;
         } else {
            return [uchar];
         }
      }
      if(this.resBuf.length === 0){
         var uchar = this.it.next();
         if(!uchar){
            return null;
         }
         this.resBuf = recursiveDecomp(this.canonical, uchar);
      }
      return this.resBuf.shift();
   };

   var DecompIterator = function(it){
      this.it = it;
      this.resBuf = [];
   };

   DecompIterator.prototype.next = function(){
      var cc;
      if(this.resBuf.length === 0){
         do{
            var uchar = this.it.next();
            if(!uchar){
               break;
            }
            cc = uchar.getCanonicalClass();
            var inspt = this.resBuf.length;
            if(cc !== 0){
               for(; inspt > 0; --inspt){
                  var uchar2 = this.resBuf[inspt - 1];
                  var cc2 = uchar2.getCanonicalClass();
                  if(cc2 <= cc){
                     break;
                  }
               }
            }
            this.resBuf.splice(inspt, 0, uchar);
         } while(cc !== 0);
      }
      return this.resBuf.shift();
   };

   var CompIterator = function(it){
      this.it = it;
      this.procBuf = [];
      this.resBuf = [];
      this.lastClass = null;
   };

   CompIterator.prototype.next = function(){
      while(this.resBuf.length === 0){
         var uchar = this.it.next();
         if(!uchar){
            this.resBuf = this.procBuf;
            this.procBuf = [];
            break;
         }
         if(this.procBuf.length === 0){
            this.lastClass = uchar.getCanonicalClass();
            this.procBuf.push(uchar);
         } else {
            var starter = this.procBuf[0];
            var composite = starter.getComposite(uchar);
            var cc = uchar.getCanonicalClass();
            if(!!composite && (this.lastClass < cc || this.lastClass === 0)){
               this.procBuf[0] = composite;
            } else {
               if(cc === 0){
                  this.resBuf = this.procBuf;
                  this.procBuf = [];
               }
               this.lastClass = cc;
               this.procBuf.push(uchar);
            }
         }
      }
      return this.resBuf.shift();
   };

   var createIterator = function(mode, str){
      switch(mode){
         case "NFD":
            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
         case "NFKD":
            return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
         case "NFC":
            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
         case "NFKC":
            return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
      }
      throw mode + " is invalid";
   };
   var normalize = function(mode, str){
      var it = createIterator(mode, str);
      var ret = "";
      var uchar;
      while(!!(uchar = it.next())){
         ret += uchar.toString();
      }
      return ret;
   };

   /* API functions */
   function nfd(str){
      return normalize("NFD", str);
   }

   function nfkd(str){
      return normalize("NFKD", str);
   }

   function nfc(str){
      return normalize("NFC", str);
   }

   function nfkc(str){
      return normalize("NFKC", str);
   }

/* Unicode data */
UChar.udata={
0:{60:[,,{824:8814}],61:[,,{824:8800}],62:[,,{824:8815}],65:[,,{768:192,769:193,770:194,771:195,772:256,774:258,775:550,776:196,777:7842,778:197,780:461,783:512,785:514,803:7840,805:7680,808:260}],66:[,,{775:7682,803:7684,817:7686}],67:[,,{769:262,770:264,775:266,780:268,807:199}],68:[,,{775:7690,780:270,803:7692,807:7696,813:7698,817:7694}],69:[,,{768:200,769:201,770:202,771:7868,772:274,774:276,775:278,776:203,777:7866,780:282,783:516,785:518,803:7864,807:552,808:280,813:7704,816:7706}],70:[,,{775:7710}],71:[,,{769:500,770:284,772:7712,774:286,775:288,780:486,807:290}],72:[,,{770:292,775:7714,776:7718,780:542,803:7716,807:7720,814:7722}],73:[,,{768:204,769:205,770:206,771:296,772:298,774:300,775:304,776:207,777:7880,780:463,783:520,785:522,803:7882,808:302,816:7724}],74:[,,{770:308}],75:[,,{769:7728,780:488,803:7730,807:310,817:7732}],76:[,,{769:313,780:317,803:7734,807:315,813:7740,817:7738}],77:[,,{769:7742,775:7744,803:7746}],78:[,,{768:504,769:323,771:209,775:7748,780:327,803:7750,807:325,813:7754,817:7752}],79:[,,{768:210,769:211,770:212,771:213,772:332,774:334,775:558,776:214,777:7886,779:336,780:465,783:524,785:526,795:416,803:7884,808:490}],80:[,,{769:7764,775:7766}],82:[,,{769:340,775:7768,780:344,783:528,785:530,803:7770,807:342,817:7774}],83:[,,{769:346,770:348,775:7776,780:352,803:7778,806:536,807:350}],84:[,,{775:7786,780:356,803:7788,806:538,807:354,813:7792,817:7790}],85:[,,{768:217,769:218,770:219,771:360,772:362,774:364,776:220,777:7910,778:366,779:368,780:467,783:532,785:534,795:431,803:7908,804:7794,808:370,813:7798,816:7796}],86:[,,{771:7804,803:7806}],87:[,,{768:7808,769:7810,770:372,775:7814,776:7812,803:7816}],88:[,,{775:7818,776:7820}],89:[,,{768:7922,769:221,770:374,771:7928,772:562,775:7822,776:376,777:7926,803:7924}],90:[,,{769:377,770:7824,775:379,780:381,803:7826,817:7828}],97:[,,{768:224,769:225,770:226,771:227,772:257,774:259,775:551,776:228,777:7843,778:229,780:462,783:513,785:515,803:7841,805:7681,808:261}],98:[,,{775:7683,803:7685,817:7687}],99:[,,{769:263,770:265,775:267,780:269,807:231}],100:[,,{775:7691,780:271,803:7693,807:7697,813:7699,817:7695}],101:[,,{768:232,769:233,770:234,771:7869,772:275,774:277,775:279,776:235,777:7867,780:283,783:517,785:519,803:7865,807:553,808:281,813:7705,816:7707}],102:[,,{775:7711}],103:[,,{769:501,770:285,772:7713,774:287,775:289,780:487,807:291}],104:[,,{770:293,775:7715,776:7719,780:543,803:7717,807:7721,814:7723,817:7830}],105:[,,{768:236,769:237,770:238,771:297,772:299,774:301,776:239,777:7881,780:464,783:521,785:523,803:7883,808:303,816:7725}],106:[,,{770:309,780:496}],107:[,,{769:7729,780:489,803:7731,807:311,817:7733}],108:[,,{769:314,780:318,803:7735,807:316,813:7741,817:7739}],109:[,,{769:7743,775:7745,803:7747}],110:[,,{768:505,769:324,771:241,775:7749,780:328,803:7751,807:326,813:7755,817:7753}],111:[,,{768:242,769:243,770:244,771:245,772:333,774:335,775:559,776:246,777:7887,779:337,780:466,783:525,785:527,795:417,803:7885,808:491}],112:[,,{769:7765,775:7767}],114:[,,{769:341,775:7769,780:345,783:529,785:531,803:7771,807:343,817:7775}],115:[,,{769:347,770:349,775:7777,780:353,803:7779,806:537,807:351}],116:[,,{775:7787,776:7831,780:357,803:7789,806:539,807:355,813:7793,817:7791}],117:[,,{768:249,769:250,770:251,771:361,772:363,774:365,776:252,777:7911,778:367,779:369,780:468,783:533,785:535,795:432,803:7909,804:7795,808:371,813:7799,816:7797}],118:[,,{771:7805,803:7807}],119:[,,{768:7809,769:7811,770:373,775:7815,776:7813,778:7832,803:7817}],120:[,,{775:7819,776:7821}],121:[,,{768:7923,769:253,770:375,771:7929,772:563,775:7823,776:255,777:7927,778:7833,803:7925}],122:[,,{769:378,770:7825,775:380,780:382,803:7827,817:7829}],160:[[32],256],168:[[32,776],256,{768:8173,769:901,834:8129}],170:[[97],256],175:[[32,772],256],178:[[50],256],179:[[51],256],180:[[32,769],256],181:[[956],256],184:[[32,807],256],185:[[49],256],186:[[111],256],188:[[49,8260,52],256],189:[[49,8260,50],256],190:[[51,8260,52],256],192:[[65,768]],193:[[65,769]],194:[[65,770],,{768:7846,769:7844,771:7850,777:7848}],195:[[65,771]],196:[[65,776],,{772:478}],197:[[65,778],,{769:506}],198:[,,{769:508,772:482}],199:[[67,807],,{769:7688}],200:[[69,768]],201:[[69,769]],202:[[69,770],,{768:7872,769:7870,771:7876,777:7874}],203:[[69,776]],204:[[73,768]],205:[[73,769]],206:[[73,770]],207:[[73,776],,{769:7726}],209:[[78,771]],210:[[79,768]],211:[[79,769]],212:[[79,770],,{768:7890,769:7888,771:7894,777:7892}],213:[[79,771],,{769:7756,772:556,776:7758}],214:[[79,776],,{772:554}],216:[,,{769:510}],217:[[85,768]],218:[[85,769]],219:[[85,770]],220:[[85,776],,{768:475,769:471,772:469,780:473}],221:[[89,769]],224:[[97,768]],225:[[97,769]],226:[[97,770],,{768:7847,769:7845,771:7851,777:7849}],227:[[97,771]],228:[[97,776],,{772:479}],229:[[97,778],,{769:507}],230:[,,{769:509,772:483}],231:[[99,807],,{769:7689}],232:[[101,768]],233:[[101,769]],234:[[101,770],,{768:7873,769:7871,771:7877,777:7875}],235:[[101,776]],236:[[105,768]],237:[[105,769]],238:[[105,770]],239:[[105,776],,{769:7727}],241:[[110,771]],242:[[111,768]],243:[[111,769]],244:[[111,770],,{768:7891,769:7889,771:7895,777:7893}],245:[[111,771],,{769:7757,772:557,776:7759}],246:[[111,776],,{772:555}],248:[,,{769:511}],249:[[117,768]],250:[[117,769]],251:[[117,770]],252:[[117,776],,{768:476,769:472,772:470,780:474}],253:[[121,769]],255:[[121,776]]},
256:{256:[[65,772]],257:[[97,772]],258:[[65,774],,{768:7856,769:7854,771:7860,777:7858}],259:[[97,774],,{768:7857,769:7855,771:7861,777:7859}],260:[[65,808]],261:[[97,808]],262:[[67,769]],263:[[99,769]],264:[[67,770]],265:[[99,770]],266:[[67,775]],267:[[99,775]],268:[[67,780]],269:[[99,780]],270:[[68,780]],271:[[100,780]],274:[[69,772],,{768:7700,769:7702}],275:[[101,772],,{768:7701,769:7703}],276:[[69,774]],277:[[101,774]],278:[[69,775]],279:[[101,775]],280:[[69,808]],281:[[101,808]],282:[[69,780]],283:[[101,780]],284:[[71,770]],285:[[103,770]],286:[[71,774]],287:[[103,774]],288:[[71,775]],289:[[103,775]],290:[[71,807]],291:[[103,807]],292:[[72,770]],293:[[104,770]],296:[[73,771]],297:[[105,771]],298:[[73,772]],299:[[105,772]],300:[[73,774]],301:[[105,774]],302:[[73,808]],303:[[105,808]],304:[[73,775]],306:[[73,74],256],307:[[105,106],256],308:[[74,770]],309:[[106,770]],310:[[75,807]],311:[[107,807]],313:[[76,769]],314:[[108,769]],315:[[76,807]],316:[[108,807]],317:[[76,780]],318:[[108,780]],319:[[76,183],256],320:[[108,183],256],323:[[78,769]],324:[[110,769]],325:[[78,807]],326:[[110,807]],327:[[78,780]],328:[[110,780]],329:[[700,110],256],332:[[79,772],,{768:7760,769:7762}],333:[[111,772],,{768:7761,769:7763}],334:[[79,774]],335:[[111,774]],336:[[79,779]],337:[[111,779]],340:[[82,769]],341:[[114,769]],342:[[82,807]],343:[[114,807]],344:[[82,780]],345:[[114,780]],346:[[83,769],,{775:7780}],347:[[115,769],,{775:7781}],348:[[83,770]],349:[[115,770]],350:[[83,807]],351:[[115,807]],352:[[83,780],,{775:7782}],353:[[115,780],,{775:7783}],354:[[84,807]],355:[[116,807]],356:[[84,780]],357:[[116,780]],360:[[85,771],,{769:7800}],361:[[117,771],,{769:7801}],362:[[85,772],,{776:7802}],363:[[117,772],,{776:7803}],364:[[85,774]],365:[[117,774]],366:[[85,778]],367:[[117,778]],368:[[85,779]],369:[[117,779]],370:[[85,808]],371:[[117,808]],372:[[87,770]],373:[[119,770]],374:[[89,770]],375:[[121,770]],376:[[89,776]],377:[[90,769]],378:[[122,769]],379:[[90,775]],380:[[122,775]],381:[[90,780]],382:[[122,780]],383:[[115],256,{775:7835}],416:[[79,795],,{768:7900,769:7898,771:7904,777:7902,803:7906}],417:[[111,795],,{768:7901,769:7899,771:7905,777:7903,803:7907}],431:[[85,795],,{768:7914,769:7912,771:7918,777:7916,803:7920}],432:[[117,795],,{768:7915,769:7913,771:7919,777:7917,803:7921}],439:[,,{780:494}],452:[[68,381],256],453:[[68,382],256],454:[[100,382],256],455:[[76,74],256],456:[[76,106],256],457:[[108,106],256],458:[[78,74],256],459:[[78,106],256],460:[[110,106],256],461:[[65,780]],462:[[97,780]],463:[[73,780]],464:[[105,780]],465:[[79,780]],466:[[111,780]],467:[[85,780]],468:[[117,780]],469:[[220,772]],470:[[252,772]],471:[[220,769]],472:[[252,769]],473:[[220,780]],474:[[252,780]],475:[[220,768]],476:[[252,768]],478:[[196,772]],479:[[228,772]],480:[[550,772]],481:[[551,772]],482:[[198,772]],483:[[230,772]],486:[[71,780]],487:[[103,780]],488:[[75,780]],489:[[107,780]],490:[[79,808],,{772:492}],491:[[111,808],,{772:493}],492:[[490,772]],493:[[491,772]],494:[[439,780]],495:[[658,780]],496:[[106,780]],497:[[68,90],256],498:[[68,122],256],499:[[100,122],256],500:[[71,769]],501:[[103,769]],504:[[78,768]],505:[[110,768]],506:[[197,769]],507:[[229,769]],508:[[198,769]],509:[[230,769]],510:[[216,769]],511:[[248,769]],66045:[,220]},
512:{512:[[65,783]],513:[[97,783]],514:[[65,785]],515:[[97,785]],516:[[69,783]],517:[[101,783]],518:[[69,785]],519:[[101,785]],520:[[73,783]],521:[[105,783]],522:[[73,785]],523:[[105,785]],524:[[79,783]],525:[[111,783]],526:[[79,785]],527:[[111,785]],528:[[82,783]],529:[[114,783]],530:[[82,785]],531:[[114,785]],532:[[85,783]],533:[[117,783]],534:[[85,785]],535:[[117,785]],536:[[83,806]],537:[[115,806]],538:[[84,806]],539:[[116,806]],542:[[72,780]],543:[[104,780]],550:[[65,775],,{772:480}],551:[[97,775],,{772:481}],552:[[69,807],,{774:7708}],553:[[101,807],,{774:7709}],554:[[214,772]],555:[[246,772]],556:[[213,772]],557:[[245,772]],558:[[79,775],,{772:560}],559:[[111,775],,{772:561}],560:[[558,772]],561:[[559,772]],562:[[89,772]],563:[[121,772]],658:[,,{780:495}],688:[[104],256],689:[[614],256],690:[[106],256],691:[[114],256],692:[[633],256],693:[[635],256],694:[[641],256],695:[[119],256],696:[[121],256],728:[[32,774],256],729:[[32,775],256],730:[[32,778],256],731:[[32,808],256],732:[[32,771],256],733:[[32,779],256],736:[[611],256],737:[[108],256],738:[[115],256],739:[[120],256],740:[[661],256],66272:[,220]},
768:{768:[,230],769:[,230],770:[,230],771:[,230],772:[,230],773:[,230],774:[,230],775:[,230],776:[,230,{769:836}],777:[,230],778:[,230],779:[,230],780:[,230],781:[,230],782:[,230],783:[,230],784:[,230],785:[,230],786:[,230],787:[,230],788:[,230],789:[,232],790:[,220],791:[,220],792:[,220],793:[,220],794:[,232],795:[,216],796:[,220],797:[,220],798:[,220],799:[,220],800:[,220],801:[,202],802:[,202],803:[,220],804:[,220],805:[,220],806:[,220],807:[,202],808:[,202],809:[,220],810:[,220],811:[,220],812:[,220],813:[,220],814:[,220],815:[,220],816:[,220],817:[,220],818:[,220],819:[,220],820:[,1],821:[,1],822:[,1],823:[,1],824:[,1],825:[,220],826:[,220],827:[,220],828:[,220],829:[,230],830:[,230],831:[,230],832:[[768],230],833:[[769],230],834:[,230],835:[[787],230],836:[[776,769],230],837:[,240],838:[,230],839:[,220],840:[,220],841:[,220],842:[,230],843:[,230],844:[,230],845:[,220],846:[,220],848:[,230],849:[,230],850:[,230],851:[,220],852:[,220],853:[,220],854:[,220],855:[,230],856:[,232],857:[,220],858:[,220],859:[,230],860:[,233],861:[,234],862:[,234],863:[,233],864:[,234],865:[,234],866:[,233],867:[,230],868:[,230],869:[,230],870:[,230],871:[,230],872:[,230],873:[,230],874:[,230],875:[,230],876:[,230],877:[,230],878:[,230],879:[,230],884:[[697]],890:[[32,837],256],894:[[59]],900:[[32,769],256],901:[[168,769]],902:[[913,769]],903:[[183]],904:[[917,769]],905:[[919,769]],906:[[921,769]],908:[[927,769]],910:[[933,769]],911:[[937,769]],912:[[970,769]],913:[,,{768:8122,769:902,772:8121,774:8120,787:7944,788:7945,837:8124}],917:[,,{768:8136,769:904,787:7960,788:7961}],919:[,,{768:8138,769:905,787:7976,788:7977,837:8140}],921:[,,{768:8154,769:906,772:8153,774:8152,776:938,787:7992,788:7993}],927:[,,{768:8184,769:908,787:8008,788:8009}],929:[,,{788:8172}],933:[,,{768:8170,769:910,772:8169,774:8168,776:939,788:8025}],937:[,,{768:8186,769:911,787:8040,788:8041,837:8188}],938:[[921,776]],939:[[933,776]],940:[[945,769],,{837:8116}],941:[[949,769]],942:[[951,769],,{837:8132}],943:[[953,769]],944:[[971,769]],945:[,,{768:8048,769:940,772:8113,774:8112,787:7936,788:7937,834:8118,837:8115}],949:[,,{768:8050,769:941,787:7952,788:7953}],951:[,,{768:8052,769:942,787:7968,788:7969,834:8134,837:8131}],953:[,,{768:8054,769:943,772:8145,774:8144,776:970,787:7984,788:7985,834:8150}],959:[,,{768:8056,769:972,787:8000,788:8001}],961:[,,{787:8164,788:8165}],965:[,,{768:8058,769:973,772:8161,774:8160,776:971,787:8016,788:8017,834:8166}],969:[,,{768:8060,769:974,787:8032,788:8033,834:8182,837:8179}],970:[[953,776],,{768:8146,769:912,834:8151}],971:[[965,776],,{768:8162,769:944,834:8167}],972:[[959,769]],973:[[965,769]],974:[[969,769],,{837:8180}],976:[[946],256],977:[[952],256],978:[[933],256,{769:979,776:980}],979:[[978,769]],980:[[978,776]],981:[[966],256],982:[[960],256],1008:[[954],256],1009:[[961],256],1010:[[962],256],1012:[[920],256],1013:[[949],256],1017:[[931],256],66422:[,230],66423:[,230],66424:[,230],66425:[,230],66426:[,230]},
1024:{1024:[[1045,768]],1025:[[1045,776]],1027:[[1043,769]],1030:[,,{776:1031}],1031:[[1030,776]],1036:[[1050,769]],1037:[[1048,768]],1038:[[1059,774]],1040:[,,{774:1232,776:1234}],1043:[,,{769:1027}],1045:[,,{768:1024,774:1238,776:1025}],1046:[,,{774:1217,776:1244}],1047:[,,{776:1246}],1048:[,,{768:1037,772:1250,774:1049,776:1252}],1049:[[1048,774]],1050:[,,{769:1036}],1054:[,,{776:1254}],1059:[,,{772:1262,774:1038,776:1264,779:1266}],1063:[,,{776:1268}],1067:[,,{776:1272}],1069:[,,{776:1260}],1072:[,,{774:1233,776:1235}],1075:[,,{769:1107}],1077:[,,{768:1104,774:1239,776:1105}],1078:[,,{774:1218,776:1245}],1079:[,,{776:1247}],1080:[,,{768:1117,772:1251,774:1081,776:1253}],1081:[[1080,774]],1082:[,,{769:1116}],1086:[,,{776:1255}],1091:[,,{772:1263,774:1118,776:1265,779:1267}],1095:[,,{776:1269}],1099:[,,{776:1273}],1101:[,,{776:1261}],1104:[[1077,768]],1105:[[1077,776]],1107:[[1075,769]],1110:[,,{776:1111}],1111:[[1110,776]],1116:[[1082,769]],1117:[[1080,768]],1118:[[1091,774]],1140:[,,{783:1142}],1141:[,,{783:1143}],1142:[[1140,783]],1143:[[1141,783]],1155:[,230],1156:[,230],1157:[,230],1158:[,230],1159:[,230],1217:[[1046,774]],1218:[[1078,774]],1232:[[1040,774]],1233:[[1072,774]],1234:[[1040,776]],1235:[[1072,776]],1238:[[1045,774]],1239:[[1077,774]],1240:[,,{776:1242}],1241:[,,{776:1243}],1242:[[1240,776]],1243:[[1241,776]],1244:[[1046,776]],1245:[[1078,776]],1246:[[1047,776]],1247:[[1079,776]],1250:[[1048,772]],1251:[[1080,772]],1252:[[1048,776]],1253:[[1080,776]],1254:[[1054,776]],1255:[[1086,776]],1256:[,,{776:1258}],1257:[,,{776:1259}],1258:[[1256,776]],1259:[[1257,776]],1260:[[1069,776]],1261:[[1101,776]],1262:[[1059,772]],1263:[[1091,772]],1264:[[1059,776]],1265:[[1091,776]],1266:[[1059,779]],1267:[[1091,779]],1268:[[1063,776]],1269:[[1095,776]],1272:[[1067,776]],1273:[[1099,776]]},
1280:{1415:[[1381,1410],256],1425:[,220],1426:[,230],1427:[,230],1428:[,230],1429:[,230],1430:[,220],1431:[,230],1432:[,230],1433:[,230],1434:[,222],1435:[,220],1436:[,230],1437:[,230],1438:[,230],1439:[,230],1440:[,230],1441:[,230],1442:[,220],1443:[,220],1444:[,220],1445:[,220],1446:[,220],1447:[,220],1448:[,230],1449:[,230],1450:[,220],1451:[,230],1452:[,230],1453:[,222],1454:[,228],1455:[,230],1456:[,10],1457:[,11],1458:[,12],1459:[,13],1460:[,14],1461:[,15],1462:[,16],1463:[,17],1464:[,18],1465:[,19],1466:[,19],1467:[,20],1468:[,21],1469:[,22],1471:[,23],1473:[,24],1474:[,25],1476:[,230],1477:[,220],1479:[,18]},
1536:{1552:[,230],1553:[,230],1554:[,230],1555:[,230],1556:[,230],1557:[,230],1558:[,230],1559:[,230],1560:[,30],1561:[,31],1562:[,32],1570:[[1575,1619]],1571:[[1575,1620]],1572:[[1608,1620]],1573:[[1575,1621]],1574:[[1610,1620]],1575:[,,{1619:1570,1620:1571,1621:1573}],1608:[,,{1620:1572}],1610:[,,{1620:1574}],1611:[,27],1612:[,28],1613:[,29],1614:[,30],1615:[,31],1616:[,32],1617:[,33],1618:[,34],1619:[,230],1620:[,230],1621:[,220],1622:[,220],1623:[,230],1624:[,230],1625:[,230],1626:[,230],1627:[,230],1628:[,220],1629:[,230],1630:[,230],1631:[,220],1648:[,35],1653:[[1575,1652],256],1654:[[1608,1652],256],1655:[[1735,1652],256],1656:[[1610,1652],256],1728:[[1749,1620]],1729:[,,{1620:1730}],1730:[[1729,1620]],1746:[,,{1620:1747}],1747:[[1746,1620]],1749:[,,{1620:1728}],1750:[,230],1751:[,230],1752:[,230],1753:[,230],1754:[,230],1755:[,230],1756:[,230],1759:[,230],1760:[,230],1761:[,230],1762:[,230],1763:[,220],1764:[,230],1767:[,230],1768:[,230],1770:[,220],1771:[,230],1772:[,230],1773:[,220]},
1792:{1809:[,36],1840:[,230],1841:[,220],1842:[,230],1843:[,230],1844:[,220],1845:[,230],1846:[,230],1847:[,220],1848:[,220],1849:[,220],1850:[,230],1851:[,220],1852:[,220],1853:[,230],1854:[,220],1855:[,230],1856:[,230],1857:[,230],1858:[,220],1859:[,230],1860:[,220],1861:[,230],1862:[,220],1863:[,230],1864:[,220],1865:[,230],1866:[,230],2027:[,230],2028:[,230],2029:[,230],2030:[,230],2031:[,230],2032:[,230],2033:[,230],2034:[,220],2035:[,230]},
2048:{2070:[,230],2071:[,230],2072:[,230],2073:[,230],2075:[,230],2076:[,230],2077:[,230],2078:[,230],2079:[,230],2080:[,230],2081:[,230],2082:[,230],2083:[,230],2085:[,230],2086:[,230],2087:[,230],2089:[,230],2090:[,230],2091:[,230],2092:[,230],2093:[,230],2137:[,220],2138:[,220],2139:[,220],2276:[,230],2277:[,230],2278:[,220],2279:[,230],2280:[,230],2281:[,220],2282:[,230],2283:[,230],2284:[,230],2285:[,220],2286:[,220],2287:[,220],2288:[,27],2289:[,28],2290:[,29],2291:[,230],2292:[,230],2293:[,230],2294:[,220],2295:[,230],2296:[,230],2297:[,220],2298:[,220],2299:[,230],2300:[,230],2301:[,230],2302:[,230],2303:[,230]},
2304:{2344:[,,{2364:2345}],2345:[[2344,2364]],2352:[,,{2364:2353}],2353:[[2352,2364]],2355:[,,{2364:2356}],2356:[[2355,2364]],2364:[,7],2381:[,9],2385:[,230],2386:[,220],2387:[,230],2388:[,230],2392:[[2325,2364],512],2393:[[2326,2364],512],2394:[[2327,2364],512],2395:[[2332,2364],512],2396:[[2337,2364],512],2397:[[2338,2364],512],2398:[[2347,2364],512],2399:[[2351,2364],512],2492:[,7],2503:[,,{2494:2507,2519:2508}],2507:[[2503,2494]],2508:[[2503,2519]],2509:[,9],2524:[[2465,2492],512],2525:[[2466,2492],512],2527:[[2479,2492],512]},
2560:{2611:[[2610,2620],512],2614:[[2616,2620],512],2620:[,7],2637:[,9],2649:[[2582,2620],512],2650:[[2583,2620],512],2651:[[2588,2620],512],2654:[[2603,2620],512],2748:[,7],2765:[,9],68109:[,220],68111:[,230],68152:[,230],68153:[,1],68154:[,220],68159:[,9],68325:[,230],68326:[,220]},
2816:{2876:[,7],2887:[,,{2878:2891,2902:2888,2903:2892}],2888:[[2887,2902]],2891:[[2887,2878]],2892:[[2887,2903]],2893:[,9],2908:[[2849,2876],512],2909:[[2850,2876],512],2962:[,,{3031:2964}],2964:[[2962,3031]],3014:[,,{3006:3018,3031:3020}],3015:[,,{3006:3019}],3018:[[3014,3006]],3019:[[3015,3006]],3020:[[3014,3031]],3021:[,9]},
3072:{3142:[,,{3158:3144}],3144:[[3142,3158]],3149:[,9],3157:[,84],3158:[,91],3260:[,7],3263:[,,{3285:3264}],3264:[[3263,3285]],3270:[,,{3266:3274,3285:3271,3286:3272}],3271:[[3270,3285]],3272:[[3270,3286]],3274:[[3270,3266],,{3285:3275}],3275:[[3274,3285]],3277:[,9]},
3328:{3398:[,,{3390:3402,3415:3404}],3399:[,,{3390:3403}],3402:[[3398,3390]],3403:[[3399,3390]],3404:[[3398,3415]],3405:[,9],3530:[,9],3545:[,,{3530:3546,3535:3548,3551:3550}],3546:[[3545,3530]],3548:[[3545,3535],,{3530:3549}],3549:[[3548,3530]],3550:[[3545,3551]]},
3584:{3635:[[3661,3634],256],3640:[,103],3641:[,103],3642:[,9],3656:[,107],3657:[,107],3658:[,107],3659:[,107],3763:[[3789,3762],256],3768:[,118],3769:[,118],3784:[,122],3785:[,122],3786:[,122],3787:[,122],3804:[[3755,3737],256],3805:[[3755,3745],256]},
3840:{3852:[[3851],256],3864:[,220],3865:[,220],3893:[,220],3895:[,220],3897:[,216],3907:[[3906,4023],512],3917:[[3916,4023],512],3922:[[3921,4023],512],3927:[[3926,4023],512],3932:[[3931,4023],512],3945:[[3904,4021],512],3953:[,129],3954:[,130],3955:[[3953,3954],512],3956:[,132],3957:[[3953,3956],512],3958:[[4018,3968],512],3959:[[4018,3969],256],3960:[[4019,3968],512],3961:[[4019,3969],256],3962:[,130],3963:[,130],3964:[,130],3965:[,130],3968:[,130],3969:[[3953,3968],512],3970:[,230],3971:[,230],3972:[,9],3974:[,230],3975:[,230],3987:[[3986,4023],512],3997:[[3996,4023],512],4002:[[4001,4023],512],4007:[[4006,4023],512],4012:[[4011,4023],512],4025:[[3984,4021],512],4038:[,220]},
4096:{4133:[,,{4142:4134}],4134:[[4133,4142]],4151:[,7],4153:[,9],4154:[,9],4237:[,220],4348:[[4316],256],69702:[,9],69759:[,9],69785:[,,{69818:69786}],69786:[[69785,69818]],69787:[,,{69818:69788}],69788:[[69787,69818]],69797:[,,{69818:69803}],69803:[[69797,69818]],69817:[,9],69818:[,7]},
4352:{69888:[,230],69889:[,230],69890:[,230],69934:[[69937,69927]],69935:[[69938,69927]],69937:[,,{69927:69934}],69938:[,,{69927:69935}],69939:[,9],69940:[,9],70003:[,7],70080:[,9]},
4608:{70197:[,9],70198:[,7],70377:[,7],70378:[,9]},
4864:{4957:[,230],4958:[,230],4959:[,230],70460:[,7],70471:[,,{70462:70475,70487:70476}],70475:[[70471,70462]],70476:[[70471,70487]],70477:[,9],70502:[,230],70503:[,230],70504:[,230],70505:[,230],70506:[,230],70507:[,230],70508:[,230],70512:[,230],70513:[,230],70514:[,230],70515:[,230],70516:[,230]},
5120:{70841:[,,{70832:70844,70842:70843,70845:70846}],70843:[[70841,70842]],70844:[[70841,70832]],70846:[[70841,70845]],70850:[,9],70851:[,7]},
5376:{71096:[,,{71087:71098}],71097:[,,{71087:71099}],71098:[[71096,71087]],71099:[[71097,71087]],71103:[,9],71104:[,7]},
5632:{71231:[,9],71350:[,9],71351:[,7]},
5888:{5908:[,9],5940:[,9],6098:[,9],6109:[,230]},
6144:{6313:[,228]},
6400:{6457:[,222],6458:[,230],6459:[,220]},
6656:{6679:[,230],6680:[,220],6752:[,9],6773:[,230],6774:[,230],6775:[,230],6776:[,230],6777:[,230],6778:[,230],6779:[,230],6780:[,230],6783:[,220],6832:[,230],6833:[,230],6834:[,230],6835:[,230],6836:[,230],6837:[,220],6838:[,220],6839:[,220],6840:[,220],6841:[,220],6842:[,220],6843:[,230],6844:[,230],6845:[,220]},
6912:{6917:[,,{6965:6918}],6918:[[6917,6965]],6919:[,,{6965:6920}],6920:[[6919,6965]],6921:[,,{6965:6922}],6922:[[6921,6965]],6923:[,,{6965:6924}],6924:[[6923,6965]],6925:[,,{6965:6926}],6926:[[6925,6965]],6929:[,,{6965:6930}],6930:[[6929,6965]],6964:[,7],6970:[,,{6965:6971}],6971:[[6970,6965]],6972:[,,{6965:6973}],6973:[[6972,6965]],6974:[,,{6965:6976}],6975:[,,{6965:6977}],6976:[[6974,6965]],6977:[[6975,6965]],6978:[,,{6965:6979}],6979:[[6978,6965]],6980:[,9],7019:[,230],7020:[,220],7021:[,230],7022:[,230],7023:[,230],7024:[,230],7025:[,230],7026:[,230],7027:[,230],7082:[,9],7083:[,9],7142:[,7],7154:[,9],7155:[,9]},
7168:{7223:[,7],7376:[,230],7377:[,230],7378:[,230],7380:[,1],7381:[,220],7382:[,220],7383:[,220],7384:[,220],7385:[,220],7386:[,230],7387:[,230],7388:[,220],7389:[,220],7390:[,220],7391:[,220],7392:[,230],7394:[,1],7395:[,1],7396:[,1],7397:[,1],7398:[,1],7399:[,1],7400:[,1],7405:[,220],7412:[,230],7416:[,230],7417:[,230]},
7424:{7468:[[65],256],7469:[[198],256],7470:[[66],256],7472:[[68],256],7473:[[69],256],7474:[[398],256],7475:[[71],256],7476:[[72],256],7477:[[73],256],7478:[[74],256],7479:[[75],256],7480:[[76],256],7481:[[77],256],7482:[[78],256],7484:[[79],256],7485:[[546],256],7486:[[80],256],7487:[[82],256],7488:[[84],256],7489:[[85],256],7490:[[87],256],7491:[[97],256],7492:[[592],256],7493:[[593],256],7494:[[7426],256],7495:[[98],256],7496:[[100],256],7497:[[101],256],7498:[[601],256],7499:[[603],256],7500:[[604],256],7501:[[103],256],7503:[[107],256],7504:[[109],256],7505:[[331],256],7506:[[111],256],7507:[[596],256],7508:[[7446],256],7509:[[7447],256],7510:[[112],256],7511:[[116],256],7512:[[117],256],7513:[[7453],256],7514:[[623],256],7515:[[118],256],7516:[[7461],256],7517:[[946],256],7518:[[947],256],7519:[[948],256],7520:[[966],256],7521:[[967],256],7522:[[105],256],7523:[[114],256],7524:[[117],256],7525:[[118],256],7526:[[946],256],7527:[[947],256],7528:[[961],256],7529:[[966],256],7530:[[967],256],7544:[[1085],256],7579:[[594],256],7580:[[99],256],7581:[[597],256],7582:[[240],256],7583:[[604],256],7584:[[102],256],7585:[[607],256],7586:[[609],256],7587:[[613],256],7588:[[616],256],7589:[[617],256],7590:[[618],256],7591:[[7547],256],7592:[[669],256],7593:[[621],256],7594:[[7557],256],7595:[[671],256],7596:[[625],256],7597:[[624],256],7598:[[626],256],7599:[[627],256],7600:[[628],256],7601:[[629],256],7602:[[632],256],7603:[[642],256],7604:[[643],256],7605:[[427],256],7606:[[649],256],7607:[[650],256],7608:[[7452],256],7609:[[651],256],7610:[[652],256],7611:[[122],256],7612:[[656],256],7613:[[657],256],7614:[[658],256],7615:[[952],256],7616:[,230],7617:[,230],7618:[,220],7619:[,230],7620:[,230],7621:[,230],7622:[,230],7623:[,230],7624:[,230],7625:[,230],7626:[,220],7627:[,230],7628:[,230],7629:[,234],7630:[,214],7631:[,220],7632:[,202],7633:[,230],7634:[,230],7635:[,230],7636:[,230],7637:[,230],7638:[,230],7639:[,230],7640:[,230],7641:[,230],7642:[,230],7643:[,230],7644:[,230],7645:[,230],7646:[,230],7647:[,230],7648:[,230],7649:[,230],7650:[,230],7651:[,230],7652:[,230],7653:[,230],7654:[,230],7655:[,230],7656:[,230],7657:[,230],7658:[,230],7659:[,230],7660:[,230],7661:[,230],7662:[,230],7663:[,230],7664:[,230],7665:[,230],7666:[,230],7667:[,230],7668:[,230],7669:[,230],7676:[,233],7677:[,220],7678:[,230],7679:[,220]},
7680:{7680:[[65,805]],7681:[[97,805]],7682:[[66,775]],7683:[[98,775]],7684:[[66,803]],7685:[[98,803]],7686:[[66,817]],7687:[[98,817]],7688:[[199,769]],7689:[[231,769]],7690:[[68,775]],7691:[[100,775]],7692:[[68,803]],7693:[[100,803]],7694:[[68,817]],7695:[[100,817]],7696:[[68,807]],7697:[[100,807]],7698:[[68,813]],7699:[[100,813]],7700:[[274,768]],7701:[[275,768]],7702:[[274,769]],7703:[[275,769]],7704:[[69,813]],7705:[[101,813]],7706:[[69,816]],7707:[[101,816]],7708:[[552,774]],7709:[[553,774]],7710:[[70,775]],7711:[[102,775]],7712:[[71,772]],7713:[[103,772]],7714:[[72,775]],7715:[[104,775]],7716:[[72,803]],7717:[[104,803]],7718:[[72,776]],7719:[[104,776]],7720:[[72,807]],7721:[[104,807]],7722:[[72,814]],7723:[[104,814]],7724:[[73,816]],7725:[[105,816]],7726:[[207,769]],7727:[[239,769]],7728:[[75,769]],7729:[[107,769]],7730:[[75,803]],7731:[[107,803]],7732:[[75,817]],7733:[[107,817]],7734:[[76,803],,{772:7736}],7735:[[108,803],,{772:7737}],7736:[[7734,772]],7737:[[7735,772]],7738:[[76,817]],7739:[[108,817]],7740:[[76,813]],7741:[[108,813]],7742:[[77,769]],7743:[[109,769]],7744:[[77,775]],7745:[[109,775]],7746:[[77,803]],7747:[[109,803]],7748:[[78,775]],7749:[[110,775]],7750:[[78,803]],7751:[[110,803]],7752:[[78,817]],7753:[[110,817]],7754:[[78,813]],7755:[[110,813]],7756:[[213,769]],7757:[[245,769]],7758:[[213,776]],7759:[[245,776]],7760:[[332,768]],7761:[[333,768]],7762:[[332,769]],7763:[[333,769]],7764:[[80,769]],7765:[[112,769]],7766:[[80,775]],7767:[[112,775]],7768:[[82,775]],7769:[[114,775]],7770:[[82,803],,{772:7772}],7771:[[114,803],,{772:7773}],7772:[[7770,772]],7773:[[7771,772]],7774:[[82,817]],7775:[[114,817]],7776:[[83,775]],7777:[[115,775]],7778:[[83,803],,{775:7784}],7779:[[115,803],,{775:7785}],7780:[[346,775]],7781:[[347,775]],7782:[[352,775]],7783:[[353,775]],7784:[[7778,775]],7785:[[7779,775]],7786:[[84,775]],7787:[[116,775]],7788:[[84,803]],7789:[[116,803]],7790:[[84,817]],7791:[[116,817]],7792:[[84,813]],7793:[[116,813]],7794:[[85,804]],7795:[[117,804]],7796:[[85,816]],7797:[[117,816]],7798:[[85,813]],7799:[[117,813]],7800:[[360,769]],7801:[[361,769]],7802:[[362,776]],7803:[[363,776]],7804:[[86,771]],7805:[[118,771]],7806:[[86,803]],7807:[[118,803]],7808:[[87,768]],7809:[[119,768]],7810:[[87,769]],7811:[[119,769]],7812:[[87,776]],7813:[[119,776]],7814:[[87,775]],7815:[[119,775]],7816:[[87,803]],7817:[[119,803]],7818:[[88,775]],7819:[[120,775]],7820:[[88,776]],7821:[[120,776]],7822:[[89,775]],7823:[[121,775]],7824:[[90,770]],7825:[[122,770]],7826:[[90,803]],7827:[[122,803]],7828:[[90,817]],7829:[[122,817]],7830:[[104,817]],7831:[[116,776]],7832:[[119,778]],7833:[[121,778]],7834:[[97,702],256],7835:[[383,775]],7840:[[65,803],,{770:7852,774:7862}],7841:[[97,803],,{770:7853,774:7863}],7842:[[65,777]],7843:[[97,777]],7844:[[194,769]],7845:[[226,769]],7846:[[194,768]],7847:[[226,768]],7848:[[194,777]],7849:[[226,777]],7850:[[194,771]],7851:[[226,771]],7852:[[7840,770]],7853:[[7841,770]],7854:[[258,769]],7855:[[259,769]],7856:[[258,768]],7857:[[259,768]],7858:[[258,777]],7859:[[259,777]],7860:[[258,771]],7861:[[259,771]],7862:[[7840,774]],7863:[[7841,774]],7864:[[69,803],,{770:7878}],7865:[[101,803],,{770:7879}],7866:[[69,777]],7867:[[101,777]],7868:[[69,771]],7869:[[101,771]],7870:[[202,769]],7871:[[234,769]],7872:[[202,768]],7873:[[234,768]],7874:[[202,777]],7875:[[234,777]],7876:[[202,771]],7877:[[234,771]],7878:[[7864,770]],7879:[[7865,770]],7880:[[73,777]],7881:[[105,777]],7882:[[73,803]],7883:[[105,803]],7884:[[79,803],,{770:7896}],7885:[[111,803],,{770:7897}],7886:[[79,777]],7887:[[111,777]],7888:[[212,769]],7889:[[244,769]],7890:[[212,768]],7891:[[244,768]],7892:[[212,777]],7893:[[244,777]],7894:[[212,771]],7895:[[244,771]],7896:[[7884,770]],7897:[[7885,770]],7898:[[416,769]],7899:[[417,769]],7900:[[416,768]],7901:[[417,768]],7902:[[416,777]],7903:[[417,777]],7904:[[416,771]],7905:[[417,771]],7906:[[416,803]],7907:[[417,803]],7908:[[85,803]],7909:[[117,803]],7910:[[85,777]],7911:[[117,777]],7912:[[431,769]],7913:[[432,769]],7914:[[431,768]],7915:[[432,768]],7916:[[431,777]],7917:[[432,777]],7918:[[431,771]],7919:[[432,771]],7920:[[431,803]],7921:[[432,803]],7922:[[89,768]],7923:[[121,768]],7924:[[89,803]],7925:[[121,803]],7926:[[89,777]],7927:[[121,777]],7928:[[89,771]],7929:[[121,771]]},
7936:{7936:[[945,787],,{768:7938,769:7940,834:7942,837:8064}],7937:[[945,788],,{768:7939,769:7941,834:7943,837:8065}],7938:[[7936,768],,{837:8066}],7939:[[7937,768],,{837:8067}],7940:[[7936,769],,{837:8068}],7941:[[7937,769],,{837:8069}],7942:[[7936,834],,{837:8070}],7943:[[7937,834],,{837:8071}],7944:[[913,787],,{768:7946,769:7948,834:7950,837:8072}],7945:[[913,788],,{768:7947,769:7949,834:7951,837:8073}],7946:[[7944,768],,{837:8074}],7947:[[7945,768],,{837:8075}],7948:[[7944,769],,{837:8076}],7949:[[7945,769],,{837:8077}],7950:[[7944,834],,{837:8078}],7951:[[7945,834],,{837:8079}],7952:[[949,787],,{768:7954,769:7956}],7953:[[949,788],,{768:7955,769:7957}],7954:[[7952,768]],7955:[[7953,768]],7956:[[7952,769]],7957:[[7953,769]],7960:[[917,787],,{768:7962,769:7964}],7961:[[917,788],,{768:7963,769:7965}],7962:[[7960,768]],7963:[[7961,768]],7964:[[7960,769]],7965:[[7961,769]],7968:[[951,787],,{768:7970,769:7972,834:7974,837:8080}],7969:[[951,788],,{768:7971,769:7973,834:7975,837:8081}],7970:[[7968,768],,{837:8082}],7971:[[7969,768],,{837:8083}],7972:[[7968,769],,{837:8084}],7973:[[7969,769],,{837:8085}],7974:[[7968,834],,{837:8086}],7975:[[7969,834],,{837:8087}],7976:[[919,787],,{768:7978,769:7980,834:7982,837:8088}],7977:[[919,788],,{768:7979,769:7981,834:7983,837:8089}],7978:[[7976,768],,{837:8090}],7979:[[7977,768],,{837:8091}],7980:[[7976,769],,{837:8092}],7981:[[7977,769],,{837:8093}],7982:[[7976,834],,{837:8094}],7983:[[7977,834],,{837:8095}],7984:[[953,787],,{768:7986,769:7988,834:7990}],7985:[[953,788],,{768:7987,769:7989,834:7991}],7986:[[7984,768]],7987:[[7985,768]],7988:[[7984,769]],7989:[[7985,769]],7990:[[7984,834]],7991:[[7985,834]],7992:[[921,787],,{768:7994,769:7996,834:7998}],7993:[[921,788],,{768:7995,769:7997,834:7999}],7994:[[7992,768]],7995:[[7993,768]],7996:[[7992,769]],7997:[[7993,769]],7998:[[7992,834]],7999:[[7993,834]],8000:[[959,787],,{768:8002,769:8004}],8001:[[959,788],,{768:8003,769:8005}],8002:[[8000,768]],8003:[[8001,768]],8004:[[8000,769]],8005:[[8001,769]],8008:[[927,787],,{768:8010,769:8012}],8009:[[927,788],,{768:8011,769:8013}],8010:[[8008,768]],8011:[[8009,768]],8012:[[8008,769]],8013:[[8009,769]],8016:[[965,787],,{768:8018,769:8020,834:8022}],8017:[[965,788],,{768:8019,769:8021,834:8023}],8018:[[8016,768]],8019:[[8017,768]],8020:[[8016,769]],8021:[[8017,769]],8022:[[8016,834]],8023:[[8017,834]],8025:[[933,788],,{768:8027,769:8029,834:8031}],8027:[[8025,768]],8029:[[8025,769]],8031:[[8025,834]],8032:[[969,787],,{768:8034,769:8036,834:8038,837:8096}],8033:[[969,788],,{768:8035,769:8037,834:8039,837:8097}],8034:[[8032,768],,{837:8098}],8035:[[8033,768],,{837:8099}],8036:[[8032,769],,{837:8100}],8037:[[8033,769],,{837:8101}],8038:[[8032,834],,{837:8102}],8039:[[8033,834],,{837:8103}],8040:[[937,787],,{768:8042,769:8044,834:8046,837:8104}],8041:[[937,788],,{768:8043,769:8045,834:8047,837:8105}],8042:[[8040,768],,{837:8106}],8043:[[8041,768],,{837:8107}],8044:[[8040,769],,{837:8108}],8045:[[8041,769],,{837:8109}],8046:[[8040,834],,{837:8110}],8047:[[8041,834],,{837:8111}],8048:[[945,768],,{837:8114}],8049:[[940]],8050:[[949,768]],8051:[[941]],8052:[[951,768],,{837:8130}],8053:[[942]],8054:[[953,768]],8055:[[943]],8056:[[959,768]],8057:[[972]],8058:[[965,768]],8059:[[973]],8060:[[969,768],,{837:8178}],8061:[[974]],8064:[[7936,837]],8065:[[7937,837]],8066:[[7938,837]],8067:[[7939,837]],8068:[[7940,837]],8069:[[7941,837]],8070:[[7942,837]],8071:[[7943,837]],8072:[[7944,837]],8073:[[7945,837]],8074:[[7946,837]],8075:[[7947,837]],8076:[[7948,837]],8077:[[7949,837]],8078:[[7950,837]],8079:[[7951,837]],8080:[[7968,837]],8081:[[7969,837]],8082:[[7970,837]],8083:[[7971,837]],8084:[[7972,837]],8085:[[7973,837]],8086:[[7974,837]],8087:[[7975,837]],8088:[[7976,837]],8089:[[7977,837]],8090:[[7978,837]],8091:[[7979,837]],8092:[[7980,837]],8093:[[7981,837]],8094:[[7982,837]],8095:[[7983,837]],8096:[[8032,837]],8097:[[8033,837]],8098:[[8034,837]],8099:[[8035,837]],8100:[[8036,837]],8101:[[8037,837]],8102:[[8038,837]],8103:[[8039,837]],8104:[[8040,837]],8105:[[8041,837]],8106:[[8042,837]],8107:[[8043,837]],8108:[[8044,837]],8109:[[8045,837]],8110:[[8046,837]],8111:[[8047,837]],8112:[[945,774]],8113:[[945,772]],8114:[[8048,837]],8115:[[945,837]],8116:[[940,837]],8118:[[945,834],,{837:8119}],8119:[[8118,837]],8120:[[913,774]],8121:[[913,772]],8122:[[913,768]],8123:[[902]],8124:[[913,837]],8125:[[32,787],256],8126:[[953]],8127:[[32,787],256,{768:8141,769:8142,834:8143}],8128:[[32,834],256],8129:[[168,834]],8130:[[8052,837]],8131:[[951,837]],8132:[[942,837]],8134:[[951,834],,{837:8135}],8135:[[8134,837]],8136:[[917,768]],8137:[[904]],8138:[[919,768]],8139:[[905]],8140:[[919,837]],8141:[[8127,768]],8142:[[8127,769]],8143:[[8127,834]],8144:[[953,774]],8145:[[953,772]],8146:[[970,768]],8147:[[912]],8150:[[953,834]],8151:[[970,834]],8152:[[921,774]],8153:[[921,772]],8154:[[921,768]],8155:[[906]],8157:[[8190,768]],8158:[[8190,769]],8159:[[8190,834]],8160:[[965,774]],8161:[[965,772]],8162:[[971,768]],8163:[[944]],8164:[[961,787]],8165:[[961,788]],8166:[[965,834]],8167:[[971,834]],8168:[[933,774]],8169:[[933,772]],8170:[[933,768]],8171:[[910]],8172:[[929,788]],8173:[[168,768]],8174:[[901]],8175:[[96]],8178:[[8060,837]],8179:[[969,837]],8180:[[974,837]],8182:[[969,834],,{837:8183}],8183:[[8182,837]],8184:[[927,768]],8185:[[908]],8186:[[937,768]],8187:[[911]],8188:[[937,837]],8189:[[180]],8190:[[32,788],256,{768:8157,769:8158,834:8159}]},
8192:{8192:[[8194]],8193:[[8195]],8194:[[32],256],8195:[[32],256],8196:[[32],256],8197:[[32],256],8198:[[32],256],8199:[[32],256],8200:[[32],256],8201:[[32],256],8202:[[32],256],8209:[[8208],256],8215:[[32,819],256],8228:[[46],256],8229:[[46,46],256],8230:[[46,46,46],256],8239:[[32],256],8243:[[8242,8242],256],8244:[[8242,8242,8242],256],8246:[[8245,8245],256],8247:[[8245,8245,8245],256],8252:[[33,33],256],8254:[[32,773],256],8263:[[63,63],256],8264:[[63,33],256],8265:[[33,63],256],8279:[[8242,8242,8242,8242],256],8287:[[32],256],8304:[[48],256],8305:[[105],256],8308:[[52],256],8309:[[53],256],8310:[[54],256],8311:[[55],256],8312:[[56],256],8313:[[57],256],8314:[[43],256],8315:[[8722],256],8316:[[61],256],8317:[[40],256],8318:[[41],256],8319:[[110],256],8320:[[48],256],8321:[[49],256],8322:[[50],256],8323:[[51],256],8324:[[52],256],8325:[[53],256],8326:[[54],256],8327:[[55],256],8328:[[56],256],8329:[[57],256],8330:[[43],256],8331:[[8722],256],8332:[[61],256],8333:[[40],256],8334:[[41],256],8336:[[97],256],8337:[[101],256],8338:[[111],256],8339:[[120],256],8340:[[601],256],8341:[[104],256],8342:[[107],256],8343:[[108],256],8344:[[109],256],8345:[[110],256],8346:[[112],256],8347:[[115],256],8348:[[116],256],8360:[[82,115],256],8400:[,230],8401:[,230],8402:[,1],8403:[,1],8404:[,230],8405:[,230],8406:[,230],8407:[,230],8408:[,1],8409:[,1],8410:[,1],8411:[,230],8412:[,230],8417:[,230],8421:[,1],8422:[,1],8423:[,230],8424:[,220],8425:[,230],8426:[,1],8427:[,1],8428:[,220],8429:[,220],8430:[,220],8431:[,220],8432:[,230]},
8448:{8448:[[97,47,99],256],8449:[[97,47,115],256],8450:[[67],256],8451:[[176,67],256],8453:[[99,47,111],256],8454:[[99,47,117],256],8455:[[400],256],8457:[[176,70],256],8458:[[103],256],8459:[[72],256],8460:[[72],256],8461:[[72],256],8462:[[104],256],8463:[[295],256],8464:[[73],256],8465:[[73],256],8466:[[76],256],8467:[[108],256],8469:[[78],256],8470:[[78,111],256],8473:[[80],256],8474:[[81],256],8475:[[82],256],8476:[[82],256],8477:[[82],256],8480:[[83,77],256],8481:[[84,69,76],256],8482:[[84,77],256],8484:[[90],256],8486:[[937]],8488:[[90],256],8490:[[75]],8491:[[197]],8492:[[66],256],8493:[[67],256],8495:[[101],256],8496:[[69],256],8497:[[70],256],8499:[[77],256],8500:[[111],256],8501:[[1488],256],8502:[[1489],256],8503:[[1490],256],8504:[[1491],256],8505:[[105],256],8507:[[70,65,88],256],8508:[[960],256],8509:[[947],256],8510:[[915],256],8511:[[928],256],8512:[[8721],256],8517:[[68],256],8518:[[100],256],8519:[[101],256],8520:[[105],256],8521:[[106],256],8528:[[49,8260,55],256],8529:[[49,8260,57],256],8530:[[49,8260,49,48],256],8531:[[49,8260,51],256],8532:[[50,8260,51],256],8533:[[49,8260,53],256],8534:[[50,8260,53],256],8535:[[51,8260,53],256],8536:[[52,8260,53],256],8537:[[49,8260,54],256],8538:[[53,8260,54],256],8539:[[49,8260,56],256],8540:[[51,8260,56],256],8541:[[53,8260,56],256],8542:[[55,8260,56],256],8543:[[49,8260],256],8544:[[73],256],8545:[[73,73],256],8546:[[73,73,73],256],8547:[[73,86],256],8548:[[86],256],8549:[[86,73],256],8550:[[86,73,73],256],8551:[[86,73,73,73],256],8552:[[73,88],256],8553:[[88],256],8554:[[88,73],256],8555:[[88,73,73],256],8556:[[76],256],8557:[[67],256],8558:[[68],256],8559:[[77],256],8560:[[105],256],8561:[[105,105],256],8562:[[105,105,105],256],8563:[[105,118],256],8564:[[118],256],8565:[[118,105],256],8566:[[118,105,105],256],8567:[[118,105,105,105],256],8568:[[105,120],256],8569:[[120],256],8570:[[120,105],256],8571:[[120,105,105],256],8572:[[108],256],8573:[[99],256],8574:[[100],256],8575:[[109],256],8585:[[48,8260,51],256],8592:[,,{824:8602}],8594:[,,{824:8603}],8596:[,,{824:8622}],8602:[[8592,824]],8603:[[8594,824]],8622:[[8596,824]],8653:[[8656,824]],8654:[[8660,824]],8655:[[8658,824]],8656:[,,{824:8653}],8658:[,,{824:8655}],8660:[,,{824:8654}]},
8704:{8707:[,,{824:8708}],8708:[[8707,824]],8712:[,,{824:8713}],8713:[[8712,824]],8715:[,,{824:8716}],8716:[[8715,824]],8739:[,,{824:8740}],8740:[[8739,824]],8741:[,,{824:8742}],8742:[[8741,824]],8748:[[8747,8747],256],8749:[[8747,8747,8747],256],8751:[[8750,8750],256],8752:[[8750,8750,8750],256],8764:[,,{824:8769}],8769:[[8764,824]],8771:[,,{824:8772}],8772:[[8771,824]],8773:[,,{824:8775}],8775:[[8773,824]],8776:[,,{824:8777}],8777:[[8776,824]],8781:[,,{824:8813}],8800:[[61,824]],8801:[,,{824:8802}],8802:[[8801,824]],8804:[,,{824:8816}],8805:[,,{824:8817}],8813:[[8781,824]],8814:[[60,824]],8815:[[62,824]],8816:[[8804,824]],8817:[[8805,824]],8818:[,,{824:8820}],8819:[,,{824:8821}],8820:[[8818,824]],8821:[[8819,824]],8822:[,,{824:8824}],8823:[,,{824:8825}],8824:[[8822,824]],8825:[[8823,824]],8826:[,,{824:8832}],8827:[,,{824:8833}],8828:[,,{824:8928}],8829:[,,{824:8929}],8832:[[8826,824]],8833:[[8827,824]],8834:[,,{824:8836}],8835:[,,{824:8837}],8836:[[8834,824]],8837:[[8835,824]],8838:[,,{824:8840}],8839:[,,{824:8841}],8840:[[8838,824]],8841:[[8839,824]],8849:[,,{824:8930}],8850:[,,{824:8931}],8866:[,,{824:8876}],8872:[,,{824:8877}],8873:[,,{824:8878}],8875:[,,{824:8879}],8876:[[8866,824]],8877:[[8872,824]],8878:[[8873,824]],8879:[[8875,824]],8882:[,,{824:8938}],8883:[,,{824:8939}],8884:[,,{824:8940}],8885:[,,{824:8941}],8928:[[8828,824]],8929:[[8829,824]],8930:[[8849,824]],8931:[[8850,824]],8938:[[8882,824]],8939:[[8883,824]],8940:[[8884,824]],8941:[[8885,824]]},
8960:{9001:[[12296]],9002:[[12297]]},
9216:{9312:[[49],256],9313:[[50],256],9314:[[51],256],9315:[[52],256],9316:[[53],256],9317:[[54],256],9318:[[55],256],9319:[[56],256],9320:[[57],256],9321:[[49,48],256],9322:[[49,49],256],9323:[[49,50],256],9324:[[49,51],256],9325:[[49,52],256],9326:[[49,53],256],9327:[[49,54],256],9328:[[49,55],256],9329:[[49,56],256],9330:[[49,57],256],9331:[[50,48],256],9332:[[40,49,41],256],9333:[[40,50,41],256],9334:[[40,51,41],256],9335:[[40,52,41],256],9336:[[40,53,41],256],9337:[[40,54,41],256],9338:[[40,55,41],256],9339:[[40,56,41],256],9340:[[40,57,41],256],9341:[[40,49,48,41],256],9342:[[40,49,49,41],256],9343:[[40,49,50,41],256],9344:[[40,49,51,41],256],9345:[[40,49,52,41],256],9346:[[40,49,53,41],256],9347:[[40,49,54,41],256],9348:[[40,49,55,41],256],9349:[[40,49,56,41],256],9350:[[40,49,57,41],256],9351:[[40,50,48,41],256],9352:[[49,46],256],9353:[[50,46],256],9354:[[51,46],256],9355:[[52,46],256],9356:[[53,46],256],9357:[[54,46],256],9358:[[55,46],256],9359:[[56,46],256],9360:[[57,46],256],9361:[[49,48,46],256],9362:[[49,49,46],256],9363:[[49,50,46],256],9364:[[49,51,46],256],9365:[[49,52,46],256],9366:[[49,53,46],256],9367:[[49,54,46],256],9368:[[49,55,46],256],9369:[[49,56,46],256],9370:[[49,57,46],256],9371:[[50,48,46],256],9372:[[40,97,41],256],9373:[[40,98,41],256],9374:[[40,99,41],256],9375:[[40,100,41],256],9376:[[40,101,41],256],9377:[[40,102,41],256],9378:[[40,103,41],256],9379:[[40,104,41],256],9380:[[40,105,41],256],9381:[[40,106,41],256],9382:[[40,107,41],256],9383:[[40,108,41],256],9384:[[40,109,41],256],9385:[[40,110,41],256],9386:[[40,111,41],256],9387:[[40,112,41],256],9388:[[40,113,41],256],9389:[[40,114,41],256],9390:[[40,115,41],256],9391:[[40,116,41],256],9392:[[40,117,41],256],9393:[[40,118,41],256],9394:[[40,119,41],256],9395:[[40,120,41],256],9396:[[40,121,41],256],9397:[[40,122,41],256],9398:[[65],256],9399:[[66],256],9400:[[67],256],9401:[[68],256],9402:[[69],256],9403:[[70],256],9404:[[71],256],9405:[[72],256],9406:[[73],256],9407:[[74],256],9408:[[75],256],9409:[[76],256],9410:[[77],256],9411:[[78],256],9412:[[79],256],9413:[[80],256],9414:[[81],256],9415:[[82],256],9416:[[83],256],9417:[[84],256],9418:[[85],256],9419:[[86],256],9420:[[87],256],9421:[[88],256],9422:[[89],256],9423:[[90],256],9424:[[97],256],9425:[[98],256],9426:[[99],256],9427:[[100],256],9428:[[101],256],9429:[[102],256],9430:[[103],256],9431:[[104],256],9432:[[105],256],9433:[[106],256],9434:[[107],256],9435:[[108],256],9436:[[109],256],9437:[[110],256],9438:[[111],256],9439:[[112],256],9440:[[113],256],9441:[[114],256],9442:[[115],256],9443:[[116],256],9444:[[117],256],9445:[[118],256],9446:[[119],256],9447:[[120],256],9448:[[121],256],9449:[[122],256],9450:[[48],256]},
10752:{10764:[[8747,8747,8747,8747],256],10868:[[58,58,61],256],10869:[[61,61],256],10870:[[61,61,61],256],10972:[[10973,824],512]},
11264:{11388:[[106],256],11389:[[86],256],11503:[,230],11504:[,230],11505:[,230]},
11520:{11631:[[11617],256],11647:[,9],11744:[,230],11745:[,230],11746:[,230],11747:[,230],11748:[,230],11749:[,230],11750:[,230],11751:[,230],11752:[,230],11753:[,230],11754:[,230],11755:[,230],11756:[,230],11757:[,230],11758:[,230],11759:[,230],11760:[,230],11761:[,230],11762:[,230],11763:[,230],11764:[,230],11765:[,230],11766:[,230],11767:[,230],11768:[,230],11769:[,230],11770:[,230],11771:[,230],11772:[,230],11773:[,230],11774:[,230],11775:[,230]},
11776:{11935:[[27597],256],12019:[[40863],256]},
12032:{12032:[[19968],256],12033:[[20008],256],12034:[[20022],256],12035:[[20031],256],12036:[[20057],256],12037:[[20101],256],12038:[[20108],256],12039:[[20128],256],12040:[[20154],256],12041:[[20799],256],12042:[[20837],256],12043:[[20843],256],12044:[[20866],256],12045:[[20886],256],12046:[[20907],256],12047:[[20960],256],12048:[[20981],256],12049:[[20992],256],12050:[[21147],256],12051:[[21241],256],12052:[[21269],256],12053:[[21274],256],12054:[[21304],256],12055:[[21313],256],12056:[[21340],256],12057:[[21353],256],12058:[[21378],256],12059:[[21430],256],12060:[[21448],256],12061:[[21475],256],12062:[[22231],256],12063:[[22303],256],12064:[[22763],256],12065:[[22786],256],12066:[[22794],256],12067:[[22805],256],12068:[[22823],256],12069:[[22899],256],12070:[[23376],256],12071:[[23424],256],12072:[[23544],256],12073:[[23567],256],12074:[[23586],256],12075:[[23608],256],12076:[[23662],256],12077:[[23665],256],12078:[[24027],256],12079:[[24037],256],12080:[[24049],256],12081:[[24062],256],12082:[[24178],256],12083:[[24186],256],12084:[[24191],256],12085:[[24308],256],12086:[[24318],256],12087:[[24331],256],12088:[[24339],256],12089:[[24400],256],12090:[[24417],256],12091:[[24435],256],12092:[[24515],256],12093:[[25096],256],12094:[[25142],256],12095:[[25163],256],12096:[[25903],256],12097:[[25908],256],12098:[[25991],256],12099:[[26007],256],12100:[[26020],256],12101:[[26041],256],12102:[[26080],256],12103:[[26085],256],12104:[[26352],256],12105:[[26376],256],12106:[[26408],256],12107:[[27424],256],12108:[[27490],256],12109:[[27513],256],12110:[[27571],256],12111:[[27595],256],12112:[[27604],256],12113:[[27611],256],12114:[[27663],256],12115:[[27668],256],12116:[[27700],256],12117:[[28779],256],12118:[[29226],256],12119:[[29238],256],12120:[[29243],256],12121:[[29247],256],12122:[[29255],256],12123:[[29273],256],12124:[[29275],256],12125:[[29356],256],12126:[[29572],256],12127:[[29577],256],12128:[[29916],256],12129:[[29926],256],12130:[[29976],256],12131:[[29983],256],12132:[[29992],256],12133:[[30000],256],12134:[[30091],256],12135:[[30098],256],12136:[[30326],256],12137:[[30333],256],12138:[[30382],256],12139:[[30399],256],12140:[[30446],256],12141:[[30683],256],12142:[[30690],256],12143:[[30707],256],12144:[[31034],256],12145:[[31160],256],12146:[[31166],256],12147:[[31348],256],12148:[[31435],256],12149:[[31481],256],12150:[[31859],256],12151:[[31992],256],12152:[[32566],256],12153:[[32593],256],12154:[[32650],256],12155:[[32701],256],12156:[[32769],256],12157:[[32780],256],12158:[[32786],256],12159:[[32819],256],12160:[[32895],256],12161:[[32905],256],12162:[[33251],256],12163:[[33258],256],12164:[[33267],256],12165:[[33276],256],12166:[[33292],256],12167:[[33307],256],12168:[[33311],256],12169:[[33390],256],12170:[[33394],256],12171:[[33400],256],12172:[[34381],256],12173:[[34411],256],12174:[[34880],256],12175:[[34892],256],12176:[[34915],256],12177:[[35198],256],12178:[[35211],256],12179:[[35282],256],12180:[[35328],256],12181:[[35895],256],12182:[[35910],256],12183:[[35925],256],12184:[[35960],256],12185:[[35997],256],12186:[[36196],256],12187:[[36208],256],12188:[[36275],256],12189:[[36523],256],12190:[[36554],256],12191:[[36763],256],12192:[[36784],256],12193:[[36789],256],12194:[[37009],256],12195:[[37193],256],12196:[[37318],256],12197:[[37324],256],12198:[[37329],256],12199:[[38263],256],12200:[[38272],256],12201:[[38428],256],12202:[[38582],256],12203:[[38585],256],12204:[[38632],256],12205:[[38737],256],12206:[[38750],256],12207:[[38754],256],12208:[[38761],256],12209:[[38859],256],12210:[[38893],256],12211:[[38899],256],12212:[[38913],256],12213:[[39080],256],12214:[[39131],256],12215:[[39135],256],12216:[[39318],256],12217:[[39321],256],12218:[[39340],256],12219:[[39592],256],12220:[[39640],256],12221:[[39647],256],12222:[[39717],256],12223:[[39727],256],12224:[[39730],256],12225:[[39740],256],12226:[[39770],256],12227:[[40165],256],12228:[[40565],256],12229:[[40575],256],12230:[[40613],256],12231:[[40635],256],12232:[[40643],256],12233:[[40653],256],12234:[[40657],256],12235:[[40697],256],12236:[[40701],256],12237:[[40718],256],12238:[[40723],256],12239:[[40736],256],12240:[[40763],256],12241:[[40778],256],12242:[[40786],256],12243:[[40845],256],12244:[[40860],256],12245:[[40864],256]},
12288:{12288:[[32],256],12330:[,218],12331:[,228],12332:[,232],12333:[,222],12334:[,224],12335:[,224],12342:[[12306],256],12344:[[21313],256],12345:[[21316],256],12346:[[21317],256],12358:[,,{12441:12436}],12363:[,,{12441:12364}],12364:[[12363,12441]],12365:[,,{12441:12366}],12366:[[12365,12441]],12367:[,,{12441:12368}],12368:[[12367,12441]],12369:[,,{12441:12370}],12370:[[12369,12441]],12371:[,,{12441:12372}],12372:[[12371,12441]],12373:[,,{12441:12374}],12374:[[12373,12441]],12375:[,,{12441:12376}],12376:[[12375,12441]],12377:[,,{12441:12378}],12378:[[12377,12441]],12379:[,,{12441:12380}],12380:[[12379,12441]],12381:[,,{12441:12382}],12382:[[12381,12441]],12383:[,,{12441:12384}],12384:[[12383,12441]],12385:[,,{12441:12386}],12386:[[12385,12441]],12388:[,,{12441:12389}],12389:[[12388,12441]],12390:[,,{12441:12391}],12391:[[12390,12441]],12392:[,,{12441:12393}],12393:[[12392,12441]],12399:[,,{12441:12400,12442:12401}],12400:[[12399,12441]],12401:[[12399,12442]],12402:[,,{12441:12403,12442:12404}],12403:[[12402,12441]],12404:[[12402,12442]],12405:[,,{12441:12406,12442:12407}],12406:[[12405,12441]],12407:[[12405,12442]],12408:[,,{12441:12409,12442:12410}],12409:[[12408,12441]],12410:[[12408,12442]],12411:[,,{12441:12412,12442:12413}],12412:[[12411,12441]],12413:[[12411,12442]],12436:[[12358,12441]],12441:[,8],12442:[,8],12443:[[32,12441],256],12444:[[32,12442],256],12445:[,,{12441:12446}],12446:[[12445,12441]],12447:[[12424,12426],256],12454:[,,{12441:12532}],12459:[,,{12441:12460}],12460:[[12459,12441]],12461:[,,{12441:12462}],12462:[[12461,12441]],12463:[,,{12441:12464}],12464:[[12463,12441]],12465:[,,{12441:12466}],12466:[[12465,12441]],12467:[,,{12441:12468}],12468:[[12467,12441]],12469:[,,{12441:12470}],12470:[[12469,12441]],12471:[,,{12441:12472}],12472:[[12471,12441]],12473:[,,{12441:12474}],12474:[[12473,12441]],12475:[,,{12441:12476}],12476:[[12475,12441]],12477:[,,{12441:12478}],12478:[[12477,12441]],12479:[,,{12441:12480}],12480:[[12479,12441]],12481:[,,{12441:12482}],12482:[[12481,12441]],12484:[,,{12441:12485}],12485:[[12484,12441]],12486:[,,{12441:12487}],12487:[[12486,12441]],12488:[,,{12441:12489}],12489:[[12488,12441]],12495:[,,{12441:12496,12442:12497}],12496:[[12495,12441]],12497:[[12495,12442]],12498:[,,{12441:12499,12442:12500}],12499:[[12498,12441]],12500:[[12498,12442]],12501:[,,{12441:12502,12442:12503}],12502:[[12501,12441]],12503:[[12501,12442]],12504:[,,{12441:12505,12442:12506}],12505:[[12504,12441]],12506:[[12504,12442]],12507:[,,{12441:12508,12442:12509}],12508:[[12507,12441]],12509:[[12507,12442]],12527:[,,{12441:12535}],12528:[,,{12441:12536}],12529:[,,{12441:12537}],12530:[,,{12441:12538}],12532:[[12454,12441]],12535:[[12527,12441]],12536:[[12528,12441]],12537:[[12529,12441]],12538:[[12530,12441]],12541:[,,{12441:12542}],12542:[[12541,12441]],12543:[[12467,12488],256]},
12544:{12593:[[4352],256],12594:[[4353],256],12595:[[4522],256],12596:[[4354],256],12597:[[4524],256],12598:[[4525],256],12599:[[4355],256],12600:[[4356],256],12601:[[4357],256],12602:[[4528],256],12603:[[4529],256],12604:[[4530],256],12605:[[4531],256],12606:[[4532],256],12607:[[4533],256],12608:[[4378],256],12609:[[4358],256],12610:[[4359],256],12611:[[4360],256],12612:[[4385],256],12613:[[4361],256],12614:[[4362],256],12615:[[4363],256],12616:[[4364],256],12617:[[4365],256],12618:[[4366],256],12619:[[4367],256],12620:[[4368],256],12621:[[4369],256],12622:[[4370],256],12623:[[4449],256],12624:[[4450],256],12625:[[4451],256],12626:[[4452],256],12627:[[4453],256],12628:[[4454],256],12629:[[4455],256],12630:[[4456],256],12631:[[4457],256],12632:[[4458],256],12633:[[4459],256],12634:[[4460],256],12635:[[4461],256],12636:[[4462],256],12637:[[4463],256],12638:[[4464],256],12639:[[4465],256],12640:[[4466],256],12641:[[4467],256],12642:[[4468],256],12643:[[4469],256],12644:[[4448],256],12645:[[4372],256],12646:[[4373],256],12647:[[4551],256],12648:[[4552],256],12649:[[4556],256],12650:[[4558],256],12651:[[4563],256],12652:[[4567],256],12653:[[4569],256],12654:[[4380],256],12655:[[4573],256],12656:[[4575],256],12657:[[4381],256],12658:[[4382],256],12659:[[4384],256],12660:[[4386],256],12661:[[4387],256],12662:[[4391],256],12663:[[4393],256],12664:[[4395],256],12665:[[4396],256],12666:[[4397],256],12667:[[4398],256],12668:[[4399],256],12669:[[4402],256],12670:[[4406],256],12671:[[4416],256],12672:[[4423],256],12673:[[4428],256],12674:[[4593],256],12675:[[4594],256],12676:[[4439],256],12677:[[4440],256],12678:[[4441],256],12679:[[4484],256],12680:[[4485],256],12681:[[4488],256],12682:[[4497],256],12683:[[4498],256],12684:[[4500],256],12685:[[4510],256],12686:[[4513],256],12690:[[19968],256],12691:[[20108],256],12692:[[19977],256],12693:[[22235],256],12694:[[19978],256],12695:[[20013],256],12696:[[19979],256],12697:[[30002],256],12698:[[20057],256],12699:[[19993],256],12700:[[19969],256],12701:[[22825],256],12702:[[22320],256],12703:[[20154],256]},
12800:{12800:[[40,4352,41],256],12801:[[40,4354,41],256],12802:[[40,4355,41],256],12803:[[40,4357,41],256],12804:[[40,4358,41],256],12805:[[40,4359,41],256],12806:[[40,4361,41],256],12807:[[40,4363,41],256],12808:[[40,4364,41],256],12809:[[40,4366,41],256],12810:[[40,4367,41],256],12811:[[40,4368,41],256],12812:[[40,4369,41],256],12813:[[40,4370,41],256],12814:[[40,4352,4449,41],256],12815:[[40,4354,4449,41],256],12816:[[40,4355,4449,41],256],12817:[[40,4357,4449,41],256],12818:[[40,4358,4449,41],256],12819:[[40,4359,4449,41],256],12820:[[40,4361,4449,41],256],12821:[[40,4363,4449,41],256],12822:[[40,4364,4449,41],256],12823:[[40,4366,4449,41],256],12824:[[40,4367,4449,41],256],12825:[[40,4368,4449,41],256],12826:[[40,4369,4449,41],256],12827:[[40,4370,4449,41],256],12828:[[40,4364,4462,41],256],12829:[[40,4363,4457,4364,4453,4523,41],256],12830:[[40,4363,4457,4370,4462,41],256],12832:[[40,19968,41],256],12833:[[40,20108,41],256],12834:[[40,19977,41],256],12835:[[40,22235,41],256],12836:[[40,20116,41],256],12837:[[40,20845,41],256],12838:[[40,19971,41],256],12839:[[40,20843,41],256],12840:[[40,20061,41],256],12841:[[40,21313,41],256],12842:[[40,26376,41],256],12843:[[40,28779,41],256],12844:[[40,27700,41],256],12845:[[40,26408,41],256],12846:[[40,37329,41],256],12847:[[40,22303,41],256],12848:[[40,26085,41],256],12849:[[40,26666,41],256],12850:[[40,26377,41],256],12851:[[40,31038,41],256],12852:[[40,21517,41],256],12853:[[40,29305,41],256],12854:[[40,36001,41],256],12855:[[40,31069,41],256],12856:[[40,21172,41],256],12857:[[40,20195,41],256],12858:[[40,21628,41],256],12859:[[40,23398,41],256],12860:[[40,30435,41],256],12861:[[40,20225,41],256],12862:[[40,36039,41],256],12863:[[40,21332,41],256],12864:[[40,31085,41],256],12865:[[40,20241,41],256],12866:[[40,33258,41],256],12867:[[40,33267,41],256],12868:[[21839],256],12869:[[24188],256],12870:[[25991],256],12871:[[31631],256],12880:[[80,84,69],256],12881:[[50,49],256],12882:[[50,50],256],12883:[[50,51],256],12884:[[50,52],256],12885:[[50,53],256],12886:[[50,54],256],12887:[[50,55],256],12888:[[50,56],256],12889:[[50,57],256],12890:[[51,48],256],12891:[[51,49],256],12892:[[51,50],256],12893:[[51,51],256],12894:[[51,52],256],12895:[[51,53],256],12896:[[4352],256],12897:[[4354],256],12898:[[4355],256],12899:[[4357],256],12900:[[4358],256],12901:[[4359],256],12902:[[4361],256],12903:[[4363],256],12904:[[4364],256],12905:[[4366],256],12906:[[4367],256],12907:[[4368],256],12908:[[4369],256],12909:[[4370],256],12910:[[4352,4449],256],12911:[[4354,4449],256],12912:[[4355,4449],256],12913:[[4357,4449],256],12914:[[4358,4449],256],12915:[[4359,4449],256],12916:[[4361,4449],256],12917:[[4363,4449],256],12918:[[4364,4449],256],12919:[[4366,4449],256],12920:[[4367,4449],256],12921:[[4368,4449],256],12922:[[4369,4449],256],12923:[[4370,4449],256],12924:[[4366,4449,4535,4352,4457],256],12925:[[4364,4462,4363,4468],256],12926:[[4363,4462],256],12928:[[19968],256],12929:[[20108],256],12930:[[19977],256],12931:[[22235],256],12932:[[20116],256],12933:[[20845],256],12934:[[19971],256],12935:[[20843],256],12936:[[20061],256],12937:[[21313],256],12938:[[26376],256],12939:[[28779],256],12940:[[27700],256],12941:[[26408],256],12942:[[37329],256],12943:[[22303],256],12944:[[26085],256],12945:[[26666],256],12946:[[26377],256],12947:[[31038],256],12948:[[21517],256],12949:[[29305],256],12950:[[36001],256],12951:[[31069],256],12952:[[21172],256],12953:[[31192],256],12954:[[30007],256],12955:[[22899],256],12956:[[36969],256],12957:[[20778],256],12958:[[21360],256],12959:[[27880],256],12960:[[38917],256],12961:[[20241],256],12962:[[20889],256],12963:[[27491],256],12964:[[19978],256],12965:[[20013],256],12966:[[19979],256],12967:[[24038],256],12968:[[21491],256],12969:[[21307],256],12970:[[23447],256],12971:[[23398],256],12972:[[30435],256],12973:[[20225],256],12974:[[36039],256],12975:[[21332],256],12976:[[22812],256],12977:[[51,54],256],12978:[[51,55],256],12979:[[51,56],256],12980:[[51,57],256],12981:[[52,48],256],12982:[[52,49],256],12983:[[52,50],256],12984:[[52,51],256],12985:[[52,52],256],12986:[[52,53],256],12987:[[52,54],256],12988:[[52,55],256],12989:[[52,56],256],12990:[[52,57],256],12991:[[53,48],256],12992:[[49,26376],256],12993:[[50,26376],256],12994:[[51,26376],256],12995:[[52,26376],256],12996:[[53,26376],256],12997:[[54,26376],256],12998:[[55,26376],256],12999:[[56,26376],256],13000:[[57,26376],256],13001:[[49,48,26376],256],13002:[[49,49,26376],256],13003:[[49,50,26376],256],13004:[[72,103],256],13005:[[101,114,103],256],13006:[[101,86],256],13007:[[76,84,68],256],13008:[[12450],256],13009:[[12452],256],13010:[[12454],256],13011:[[12456],256],13012:[[12458],256],13013:[[12459],256],13014:[[12461],256],13015:[[12463],256],13016:[[12465],256],13017:[[12467],256],13018:[[12469],256],13019:[[12471],256],13020:[[12473],256],13021:[[12475],256],13022:[[12477],256],13023:[[12479],256],13024:[[12481],256],13025:[[12484],256],13026:[[12486],256],13027:[[12488],256],13028:[[12490],256],13029:[[12491],256],13030:[[12492],256],13031:[[12493],256],13032:[[12494],256],13033:[[12495],256],13034:[[12498],256],13035:[[12501],256],13036:[[12504],256],13037:[[12507],256],13038:[[12510],256],13039:[[12511],256],13040:[[12512],256],13041:[[12513],256],13042:[[12514],256],13043:[[12516],256],13044:[[12518],256],13045:[[12520],256],13046:[[12521],256],13047:[[12522],256],13048:[[12523],256],13049:[[12524],256],13050:[[12525],256],13051:[[12527],256],13052:[[12528],256],13053:[[12529],256],13054:[[12530],256]},
13056:{13056:[[12450,12497,12540,12488],256],13057:[[12450,12523,12501,12449],256],13058:[[12450,12531,12506,12450],256],13059:[[12450,12540,12523],256],13060:[[12452,12491,12531,12464],256],13061:[[12452,12531,12481],256],13062:[[12454,12457,12531],256],13063:[[12456,12473,12463,12540,12489],256],13064:[[12456,12540,12459,12540],256],13065:[[12458,12531,12473],256],13066:[[12458,12540,12512],256],13067:[[12459,12452,12522],256],13068:[[12459,12521,12483,12488],256],13069:[[12459,12525,12522,12540],256],13070:[[12460,12525,12531],256],13071:[[12460,12531,12510],256],13072:[[12462,12460],256],13073:[[12462,12491,12540],256],13074:[[12461,12517,12522,12540],256],13075:[[12462,12523,12480,12540],256],13076:[[12461,12525],256],13077:[[12461,12525,12464,12521,12512],256],13078:[[12461,12525,12513,12540,12488,12523],256],13079:[[12461,12525,12527,12483,12488],256],13080:[[12464,12521,12512],256],13081:[[12464,12521,12512,12488,12531],256],13082:[[12463,12523,12476,12452,12525],256],13083:[[12463,12525,12540,12493],256],13084:[[12465,12540,12473],256],13085:[[12467,12523,12490],256],13086:[[12467,12540,12509],256],13087:[[12469,12452,12463,12523],256],13088:[[12469,12531,12481,12540,12512],256],13089:[[12471,12522,12531,12464],256],13090:[[12475,12531,12481],256],13091:[[12475,12531,12488],256],13092:[[12480,12540,12473],256],13093:[[12487,12471],256],13094:[[12489,12523],256],13095:[[12488,12531],256],13096:[[12490,12494],256],13097:[[12494,12483,12488],256],13098:[[12495,12452,12484],256],13099:[[12497,12540,12475,12531,12488],256],13100:[[12497,12540,12484],256],13101:[[12496,12540,12524,12523],256],13102:[[12500,12450,12473,12488,12523],256],13103:[[12500,12463,12523],256],13104:[[12500,12467],256],13105:[[12499,12523],256],13106:[[12501,12449,12521,12483,12489],256],13107:[[12501,12451,12540,12488],256],13108:[[12502,12483,12471,12455,12523],256],13109:[[12501,12521,12531],256],13110:[[12504,12463,12479,12540,12523],256],13111:[[12506,12477],256],13112:[[12506,12491,12498],256],13113:[[12504,12523,12484],256],13114:[[12506,12531,12473],256],13115:[[12506,12540,12472],256],13116:[[12505,12540,12479],256],13117:[[12509,12452,12531,12488],256],13118:[[12508,12523,12488],256],13119:[[12507,12531],256],13120:[[12509,12531,12489],256],13121:[[12507,12540,12523],256],13122:[[12507,12540,12531],256],13123:[[12510,12452,12463,12525],256],13124:[[12510,12452,12523],256],13125:[[12510,12483,12495],256],13126:[[12510,12523,12463],256],13127:[[12510,12531,12471,12519,12531],256],13128:[[12511,12463,12525,12531],256],13129:[[12511,12522],256],13130:[[12511,12522,12496,12540,12523],256],13131:[[12513,12460],256],13132:[[12513,12460,12488,12531],256],13133:[[12513,12540,12488,12523],256],13134:[[12516,12540,12489],256],13135:[[12516,12540,12523],256],13136:[[12518,12450,12531],256],13137:[[12522,12483,12488,12523],256],13138:[[12522,12521],256],13139:[[12523,12500,12540],256],13140:[[12523,12540,12502,12523],256],13141:[[12524,12512],256],13142:[[12524,12531,12488,12466,12531],256],13143:[[12527,12483,12488],256],13144:[[48,28857],256],13145:[[49,28857],256],13146:[[50,28857],256],13147:[[51,28857],256],13148:[[52,28857],256],13149:[[53,28857],256],13150:[[54,28857],256],13151:[[55,28857],256],13152:[[56,28857],256],13153:[[57,28857],256],13154:[[49,48,28857],256],13155:[[49,49,28857],256],13156:[[49,50,28857],256],13157:[[49,51,28857],256],13158:[[49,52,28857],256],13159:[[49,53,28857],256],13160:[[49,54,28857],256],13161:[[49,55,28857],256],13162:[[49,56,28857],256],13163:[[49,57,28857],256],13164:[[50,48,28857],256],13165:[[50,49,28857],256],13166:[[50,50,28857],256],13167:[[50,51,28857],256],13168:[[50,52,28857],256],13169:[[104,80,97],256],13170:[[100,97],256],13171:[[65,85],256],13172:[[98,97,114],256],13173:[[111,86],256],13174:[[112,99],256],13175:[[100,109],256],13176:[[100,109,178],256],13177:[[100,109,179],256],13178:[[73,85],256],13179:[[24179,25104],256],13180:[[26157,21644],256],13181:[[22823,27491],256],13182:[[26126,27835],256],13183:[[26666,24335,20250,31038],256],13184:[[112,65],256],13185:[[110,65],256],13186:[[956,65],256],13187:[[109,65],256],13188:[[107,65],256],13189:[[75,66],256],13190:[[77,66],256],13191:[[71,66],256],13192:[[99,97,108],256],13193:[[107,99,97,108],256],13194:[[112,70],256],13195:[[110,70],256],13196:[[956,70],256],13197:[[956,103],256],13198:[[109,103],256],13199:[[107,103],256],13200:[[72,122],256],13201:[[107,72,122],256],13202:[[77,72,122],256],13203:[[71,72,122],256],13204:[[84,72,122],256],13205:[[956,8467],256],13206:[[109,8467],256],13207:[[100,8467],256],13208:[[107,8467],256],13209:[[102,109],256],13210:[[110,109],256],13211:[[956,109],256],13212:[[109,109],256],13213:[[99,109],256],13214:[[107,109],256],13215:[[109,109,178],256],13216:[[99,109,178],256],13217:[[109,178],256],13218:[[107,109,178],256],13219:[[109,109,179],256],13220:[[99,109,179],256],13221:[[109,179],256],13222:[[107,109,179],256],13223:[[109,8725,115],256],13224:[[109,8725,115,178],256],13225:[[80,97],256],13226:[[107,80,97],256],13227:[[77,80,97],256],13228:[[71,80,97],256],13229:[[114,97,100],256],13230:[[114,97,100,8725,115],256],13231:[[114,97,100,8725,115,178],256],13232:[[112,115],256],13233:[[110,115],256],13234:[[956,115],256],13235:[[109,115],256],13236:[[112,86],256],13237:[[110,86],256],13238:[[956,86],256],13239:[[109,86],256],13240:[[107,86],256],13241:[[77,86],256],13242:[[112,87],256],13243:[[110,87],256],13244:[[956,87],256],13245:[[109,87],256],13246:[[107,87],256],13247:[[77,87],256],13248:[[107,937],256],13249:[[77,937],256],13250:[[97,46,109,46],256],13251:[[66,113],256],13252:[[99,99],256],13253:[[99,100],256],13254:[[67,8725,107,103],256],13255:[[67,111,46],256],13256:[[100,66],256],13257:[[71,121],256],13258:[[104,97],256],13259:[[72,80],256],13260:[[105,110],256],13261:[[75,75],256],13262:[[75,77],256],13263:[[107,116],256],13264:[[108,109],256],13265:[[108,110],256],13266:[[108,111,103],256],13267:[[108,120],256],13268:[[109,98],256],13269:[[109,105,108],256],13270:[[109,111,108],256],13271:[[80,72],256],13272:[[112,46,109,46],256],13273:[[80,80,77],256],13274:[[80,82],256],13275:[[115,114],256],13276:[[83,118],256],13277:[[87,98],256],13278:[[86,8725,109],256],13279:[[65,8725,109],256],13280:[[49,26085],256],13281:[[50,26085],256],13282:[[51,26085],256],13283:[[52,26085],256],13284:[[53,26085],256],13285:[[54,26085],256],13286:[[55,26085],256],13287:[[56,26085],256],13288:[[57,26085],256],13289:[[49,48,26085],256],13290:[[49,49,26085],256],13291:[[49,50,26085],256],13292:[[49,51,26085],256],13293:[[49,52,26085],256],13294:[[49,53,26085],256],13295:[[49,54,26085],256],13296:[[49,55,26085],256],13297:[[49,56,26085],256],13298:[[49,57,26085],256],13299:[[50,48,26085],256],13300:[[50,49,26085],256],13301:[[50,50,26085],256],13302:[[50,51,26085],256],13303:[[50,52,26085],256],13304:[[50,53,26085],256],13305:[[50,54,26085],256],13306:[[50,55,26085],256],13307:[[50,56,26085],256],13308:[[50,57,26085],256],13309:[[51,48,26085],256],13310:[[51,49,26085],256],13311:[[103,97,108],256]},
27136:{92912:[,1],92913:[,1],92914:[,1],92915:[,1],92916:[,1]},
27392:{92976:[,230],92977:[,230],92978:[,230],92979:[,230],92980:[,230],92981:[,230],92982:[,230]},
42496:{42607:[,230],42612:[,230],42613:[,230],42614:[,230],42615:[,230],42616:[,230],42617:[,230],42618:[,230],42619:[,230],42620:[,230],42621:[,230],42652:[[1098],256],42653:[[1100],256],42655:[,230],42736:[,230],42737:[,230]},
42752:{42864:[[42863],256],43000:[[294],256],43001:[[339],256]},
43008:{43014:[,9],43204:[,9],43232:[,230],43233:[,230],43234:[,230],43235:[,230],43236:[,230],43237:[,230],43238:[,230],43239:[,230],43240:[,230],43241:[,230],43242:[,230],43243:[,230],43244:[,230],43245:[,230],43246:[,230],43247:[,230],43248:[,230],43249:[,230]},
43264:{43307:[,220],43308:[,220],43309:[,220],43347:[,9],43443:[,7],43456:[,9]},
43520:{43696:[,230],43698:[,230],43699:[,230],43700:[,220],43703:[,230],43704:[,230],43710:[,230],43711:[,230],43713:[,230],43766:[,9]},
43776:{43868:[[42791],256],43869:[[43831],256],43870:[[619],256],43871:[[43858],256],44013:[,9]},
48128:{113822:[,1]},
53504:{119134:[[119127,119141],512],119135:[[119128,119141],512],119136:[[119135,119150],512],119137:[[119135,119151],512],119138:[[119135,119152],512],119139:[[119135,119153],512],119140:[[119135,119154],512],119141:[,216],119142:[,216],119143:[,1],119144:[,1],119145:[,1],119149:[,226],119150:[,216],119151:[,216],119152:[,216],119153:[,216],119154:[,216],119163:[,220],119164:[,220],119165:[,220],119166:[,220],119167:[,220],119168:[,220],119169:[,220],119170:[,220],119173:[,230],119174:[,230],119175:[,230],119176:[,230],119177:[,230],119178:[,220],119179:[,220],119210:[,230],119211:[,230],119212:[,230],119213:[,230],119227:[[119225,119141],512],119228:[[119226,119141],512],119229:[[119227,119150],512],119230:[[119228,119150],512],119231:[[119227,119151],512],119232:[[119228,119151],512]},
53760:{119362:[,230],119363:[,230],119364:[,230]},
54272:{119808:[[65],256],119809:[[66],256],119810:[[67],256],119811:[[68],256],119812:[[69],256],119813:[[70],256],119814:[[71],256],119815:[[72],256],119816:[[73],256],119817:[[74],256],119818:[[75],256],119819:[[76],256],119820:[[77],256],119821:[[78],256],119822:[[79],256],119823:[[80],256],119824:[[81],256],119825:[[82],256],119826:[[83],256],119827:[[84],256],119828:[[85],256],119829:[[86],256],119830:[[87],256],119831:[[88],256],119832:[[89],256],119833:[[90],256],119834:[[97],256],119835:[[98],256],119836:[[99],256],119837:[[100],256],119838:[[101],256],119839:[[102],256],119840:[[103],256],119841:[[104],256],119842:[[105],256],119843:[[106],256],119844:[[107],256],119845:[[108],256],119846:[[109],256],119847:[[110],256],119848:[[111],256],119849:[[112],256],119850:[[113],256],119851:[[114],256],119852:[[115],256],119853:[[116],256],119854:[[117],256],119855:[[118],256],119856:[[119],256],119857:[[120],256],119858:[[121],256],119859:[[122],256],119860:[[65],256],119861:[[66],256],119862:[[67],256],119863:[[68],256],119864:[[69],256],119865:[[70],256],119866:[[71],256],119867:[[72],256],119868:[[73],256],119869:[[74],256],119870:[[75],256],119871:[[76],256],119872:[[77],256],119873:[[78],256],119874:[[79],256],119875:[[80],256],119876:[[81],256],119877:[[82],256],119878:[[83],256],119879:[[84],256],119880:[[85],256],119881:[[86],256],119882:[[87],256],119883:[[88],256],119884:[[89],256],119885:[[90],256],119886:[[97],256],119887:[[98],256],119888:[[99],256],119889:[[100],256],119890:[[101],256],119891:[[102],256],119892:[[103],256],119894:[[105],256],119895:[[106],256],119896:[[107],256],119897:[[108],256],119898:[[109],256],119899:[[110],256],119900:[[111],256],119901:[[112],256],119902:[[113],256],119903:[[114],256],119904:[[115],256],119905:[[116],256],119906:[[117],256],119907:[[118],256],119908:[[119],256],119909:[[120],256],119910:[[121],256],119911:[[122],256],119912:[[65],256],119913:[[66],256],119914:[[67],256],119915:[[68],256],119916:[[69],256],119917:[[70],256],119918:[[71],256],119919:[[72],256],119920:[[73],256],119921:[[74],256],119922:[[75],256],119923:[[76],256],119924:[[77],256],119925:[[78],256],119926:[[79],256],119927:[[80],256],119928:[[81],256],119929:[[82],256],119930:[[83],256],119931:[[84],256],119932:[[85],256],119933:[[86],256],119934:[[87],256],119935:[[88],256],119936:[[89],256],119937:[[90],256],119938:[[97],256],119939:[[98],256],119940:[[99],256],119941:[[100],256],119942:[[101],256],119943:[[102],256],119944:[[103],256],119945:[[104],256],119946:[[105],256],119947:[[106],256],119948:[[107],256],119949:[[108],256],119950:[[109],256],119951:[[110],256],119952:[[111],256],119953:[[112],256],119954:[[113],256],119955:[[114],256],119956:[[115],256],119957:[[116],256],119958:[[117],256],119959:[[118],256],119960:[[119],256],119961:[[120],256],119962:[[121],256],119963:[[122],256],119964:[[65],256],119966:[[67],256],119967:[[68],256],119970:[[71],256],119973:[[74],256],119974:[[75],256],119977:[[78],256],119978:[[79],256],119979:[[80],256],119980:[[81],256],119982:[[83],256],119983:[[84],256],119984:[[85],256],119985:[[86],256],119986:[[87],256],119987:[[88],256],119988:[[89],256],119989:[[90],256],119990:[[97],256],119991:[[98],256],119992:[[99],256],119993:[[100],256],119995:[[102],256],119997:[[104],256],119998:[[105],256],119999:[[106],256],120000:[[107],256],120001:[[108],256],120002:[[109],256],120003:[[110],256],120005:[[112],256],120006:[[113],256],120007:[[114],256],120008:[[115],256],120009:[[116],256],120010:[[117],256],120011:[[118],256],120012:[[119],256],120013:[[120],256],120014:[[121],256],120015:[[122],256],120016:[[65],256],120017:[[66],256],120018:[[67],256],120019:[[68],256],120020:[[69],256],120021:[[70],256],120022:[[71],256],120023:[[72],256],120024:[[73],256],120025:[[74],256],120026:[[75],256],120027:[[76],256],120028:[[77],256],120029:[[78],256],120030:[[79],256],120031:[[80],256],120032:[[81],256],120033:[[82],256],120034:[[83],256],120035:[[84],256],120036:[[85],256],120037:[[86],256],120038:[[87],256],120039:[[88],256],120040:[[89],256],120041:[[90],256],120042:[[97],256],120043:[[98],256],120044:[[99],256],120045:[[100],256],120046:[[101],256],120047:[[102],256],120048:[[103],256],120049:[[104],256],120050:[[105],256],120051:[[106],256],120052:[[107],256],120053:[[108],256],120054:[[109],256],120055:[[110],256],120056:[[111],256],120057:[[112],256],120058:[[113],256],120059:[[114],256],120060:[[115],256],120061:[[116],256],120062:[[117],256],120063:[[118],256]},
54528:{120064:[[119],256],120065:[[120],256],120066:[[121],256],120067:[[122],256],120068:[[65],256],120069:[[66],256],120071:[[68],256],120072:[[69],256],120073:[[70],256],120074:[[71],256],120077:[[74],256],120078:[[75],256],120079:[[76],256],120080:[[77],256],120081:[[78],256],120082:[[79],256],120083:[[80],256],120084:[[81],256],120086:[[83],256],120087:[[84],256],120088:[[85],256],120089:[[86],256],120090:[[87],256],120091:[[88],256],120092:[[89],256],120094:[[97],256],120095:[[98],256],120096:[[99],256],120097:[[100],256],120098:[[101],256],120099:[[102],256],120100:[[103],256],120101:[[104],256],120102:[[105],256],120103:[[106],256],120104:[[107],256],120105:[[108],256],120106:[[109],256],120107:[[110],256],120108:[[111],256],120109:[[112],256],120110:[[113],256],120111:[[114],256],120112:[[115],256],120113:[[116],256],120114:[[117],256],120115:[[118],256],120116:[[119],256],120117:[[120],256],120118:[[121],256],120119:[[122],256],120120:[[65],256],120121:[[66],256],120123:[[68],256],120124:[[69],256],120125:[[70],256],120126:[[71],256],120128:[[73],256],120129:[[74],256],120130:[[75],256],120131:[[76],256],120132:[[77],256],120134:[[79],256],120138:[[83],256],120139:[[84],256],120140:[[85],256],120141:[[86],256],120142:[[87],256],120143:[[88],256],120144:[[89],256],120146:[[97],256],120147:[[98],256],120148:[[99],256],120149:[[100],256],120150:[[101],256],120151:[[102],256],120152:[[103],256],120153:[[104],256],120154:[[105],256],120155:[[106],256],120156:[[107],256],120157:[[108],256],120158:[[109],256],120159:[[110],256],120160:[[111],256],120161:[[112],256],120162:[[113],256],120163:[[114],256],120164:[[115],256],120165:[[116],256],120166:[[117],256],120167:[[118],256],120168:[[119],256],120169:[[120],256],120170:[[121],256],120171:[[122],256],120172:[[65],256],120173:[[66],256],120174:[[67],256],120175:[[68],256],120176:[[69],256],120177:[[70],256],120178:[[71],256],120179:[[72],256],120180:[[73],256],120181:[[74],256],120182:[[75],256],120183:[[76],256],120184:[[77],256],120185:[[78],256],120186:[[79],256],120187:[[80],256],120188:[[81],256],120189:[[82],256],120190:[[83],256],120191:[[84],256],120192:[[85],256],120193:[[86],256],120194:[[87],256],120195:[[88],256],120196:[[89],256],120197:[[90],256],120198:[[97],256],120199:[[98],256],120200:[[99],256],120201:[[100],256],120202:[[101],256],120203:[[102],256],120204:[[103],256],120205:[[104],256],120206:[[105],256],120207:[[106],256],120208:[[107],256],120209:[[108],256],120210:[[109],256],120211:[[110],256],120212:[[111],256],120213:[[112],256],120214:[[113],256],120215:[[114],256],120216:[[115],256],120217:[[116],256],120218:[[117],256],120219:[[118],256],120220:[[119],256],120221:[[120],256],120222:[[121],256],120223:[[122],256],120224:[[65],256],120225:[[66],256],120226:[[67],256],120227:[[68],256],120228:[[69],256],120229:[[70],256],120230:[[71],256],120231:[[72],256],120232:[[73],256],120233:[[74],256],120234:[[75],256],120235:[[76],256],120236:[[77],256],120237:[[78],256],120238:[[79],256],120239:[[80],256],120240:[[81],256],120241:[[82],256],120242:[[83],256],120243:[[84],256],120244:[[85],256],120245:[[86],256],120246:[[87],256],120247:[[88],256],120248:[[89],256],120249:[[90],256],120250:[[97],256],120251:[[98],256],120252:[[99],256],120253:[[100],256],120254:[[101],256],120255:[[102],256],120256:[[103],256],120257:[[104],256],120258:[[105],256],120259:[[106],256],120260:[[107],256],120261:[[108],256],120262:[[109],256],120263:[[110],256],120264:[[111],256],120265:[[112],256],120266:[[113],256],120267:[[114],256],120268:[[115],256],120269:[[116],256],120270:[[117],256],120271:[[118],256],120272:[[119],256],120273:[[120],256],120274:[[121],256],120275:[[122],256],120276:[[65],256],120277:[[66],256],120278:[[67],256],120279:[[68],256],120280:[[69],256],120281:[[70],256],120282:[[71],256],120283:[[72],256],120284:[[73],256],120285:[[74],256],120286:[[75],256],120287:[[76],256],120288:[[77],256],120289:[[78],256],120290:[[79],256],120291:[[80],256],120292:[[81],256],120293:[[82],256],120294:[[83],256],120295:[[84],256],120296:[[85],256],120297:[[86],256],120298:[[87],256],120299:[[88],256],120300:[[89],256],120301:[[90],256],120302:[[97],256],120303:[[98],256],120304:[[99],256],120305:[[100],256],120306:[[101],256],120307:[[102],256],120308:[[103],256],120309:[[104],256],120310:[[105],256],120311:[[106],256],120312:[[107],256],120313:[[108],256],120314:[[109],256],120315:[[110],256],120316:[[111],256],120317:[[112],256],120318:[[113],256],120319:[[114],256]},
54784:{120320:[[115],256],120321:[[116],256],120322:[[117],256],120323:[[118],256],120324:[[119],256],120325:[[120],256],120326:[[121],256],120327:[[122],256],120328:[[65],256],120329:[[66],256],120330:[[67],256],120331:[[68],256],120332:[[69],256],120333:[[70],256],120334:[[71],256],120335:[[72],256],120336:[[73],256],120337:[[74],256],120338:[[75],256],120339:[[76],256],120340:[[77],256],120341:[[78],256],120342:[[79],256],120343:[[80],256],120344:[[81],256],120345:[[82],256],120346:[[83],256],120347:[[84],256],120348:[[85],256],120349:[[86],256],120350:[[87],256],120351:[[88],256],120352:[[89],256],120353:[[90],256],120354:[[97],256],120355:[[98],256],120356:[[99],256],120357:[[100],256],120358:[[101],256],120359:[[102],256],120360:[[103],256],120361:[[104],256],120362:[[105],256],120363:[[106],256],120364:[[107],256],120365:[[108],256],120366:[[109],256],120367:[[110],256],120368:[[111],256],120369:[[112],256],120370:[[113],256],120371:[[114],256],120372:[[115],256],120373:[[116],256],120374:[[117],256],120375:[[118],256],120376:[[119],256],120377:[[120],256],120378:[[121],256],120379:[[122],256],120380:[[65],256],120381:[[66],256],120382:[[67],256],120383:[[68],256],120384:[[69],256],120385:[[70],256],120386:[[71],256],120387:[[72],256],120388:[[73],256],120389:[[74],256],120390:[[75],256],120391:[[76],256],120392:[[77],256],120393:[[78],256],120394:[[79],256],120395:[[80],256],120396:[[81],256],120397:[[82],256],120398:[[83],256],120399:[[84],256],120400:[[85],256],120401:[[86],256],120402:[[87],256],120403:[[88],256],120404:[[89],256],120405:[[90],256],120406:[[97],256],120407:[[98],256],120408:[[99],256],120409:[[100],256],120410:[[101],256],120411:[[102],256],120412:[[103],256],120413:[[104],256],120414:[[105],256],120415:[[106],256],120416:[[107],256],120417:[[108],256],120418:[[109],256],120419:[[110],256],120420:[[111],256],120421:[[112],256],120422:[[113],256],120423:[[114],256],120424:[[115],256],120425:[[116],256],120426:[[117],256],120427:[[118],256],120428:[[119],256],120429:[[120],256],120430:[[121],256],120431:[[122],256],120432:[[65],256],120433:[[66],256],120434:[[67],256],120435:[[68],256],120436:[[69],256],120437:[[70],256],120438:[[71],256],120439:[[72],256],120440:[[73],256],120441:[[74],256],120442:[[75],256],120443:[[76],256],120444:[[77],256],120445:[[78],256],120446:[[79],256],120447:[[80],256],120448:[[81],256],120449:[[82],256],120450:[[83],256],120451:[[84],256],120452:[[85],256],120453:[[86],256],120454:[[87],256],120455:[[88],256],120456:[[89],256],120457:[[90],256],120458:[[97],256],120459:[[98],256],120460:[[99],256],120461:[[100],256],120462:[[101],256],120463:[[102],256],120464:[[103],256],120465:[[104],256],120466:[[105],256],120467:[[106],256],120468:[[107],256],120469:[[108],256],120470:[[109],256],120471:[[110],256],120472:[[111],256],120473:[[112],256],120474:[[113],256],120475:[[114],256],120476:[[115],256],120477:[[116],256],120478:[[117],256],120479:[[118],256],120480:[[119],256],120481:[[120],256],120482:[[121],256],120483:[[122],256],120484:[[305],256],120485:[[567],256],120488:[[913],256],120489:[[914],256],120490:[[915],256],120491:[[916],256],120492:[[917],256],120493:[[918],256],120494:[[919],256],120495:[[920],256],120496:[[921],256],120497:[[922],256],120498:[[923],256],120499:[[924],256],120500:[[925],256],120501:[[926],256],120502:[[927],256],120503:[[928],256],120504:[[929],256],120505:[[1012],256],120506:[[931],256],120507:[[932],256],120508:[[933],256],120509:[[934],256],120510:[[935],256],120511:[[936],256],120512:[[937],256],120513:[[8711],256],120514:[[945],256],120515:[[946],256],120516:[[947],256],120517:[[948],256],120518:[[949],256],120519:[[950],256],120520:[[951],256],120521:[[952],256],120522:[[953],256],120523:[[954],256],120524:[[955],256],120525:[[956],256],120526:[[957],256],120527:[[958],256],120528:[[959],256],120529:[[960],256],120530:[[961],256],120531:[[962],256],120532:[[963],256],120533:[[964],256],120534:[[965],256],120535:[[966],256],120536:[[967],256],120537:[[968],256],120538:[[969],256],120539:[[8706],256],120540:[[1013],256],120541:[[977],256],120542:[[1008],256],120543:[[981],256],120544:[[1009],256],120545:[[982],256],120546:[[913],256],120547:[[914],256],120548:[[915],256],120549:[[916],256],120550:[[917],256],120551:[[918],256],120552:[[919],256],120553:[[920],256],120554:[[921],256],120555:[[922],256],120556:[[923],256],120557:[[924],256],120558:[[925],256],120559:[[926],256],120560:[[927],256],120561:[[928],256],120562:[[929],256],120563:[[1012],256],120564:[[931],256],120565:[[932],256],120566:[[933],256],120567:[[934],256],120568:[[935],256],120569:[[936],256],120570:[[937],256],120571:[[8711],256],120572:[[945],256],120573:[[946],256],120574:[[947],256],120575:[[948],256]},
55040:{120576:[[949],256],120577:[[950],256],120578:[[951],256],120579:[[952],256],120580:[[953],256],120581:[[954],256],120582:[[955],256],120583:[[956],256],120584:[[957],256],120585:[[958],256],120586:[[959],256],120587:[[960],256],120588:[[961],256],120589:[[962],256],120590:[[963],256],120591:[[964],256],120592:[[965],256],120593:[[966],256],120594:[[967],256],120595:[[968],256],120596:[[969],256],120597:[[8706],256],120598:[[1013],256],120599:[[977],256],120600:[[1008],256],120601:[[981],256],120602:[[1009],256],120603:[[982],256],120604:[[913],256],120605:[[914],256],120606:[[915],256],120607:[[916],256],120608:[[917],256],120609:[[918],256],120610:[[919],256],120611:[[920],256],120612:[[921],256],120613:[[922],256],120614:[[923],256],120615:[[924],256],120616:[[925],256],120617:[[926],256],120618:[[927],256],120619:[[928],256],120620:[[929],256],120621:[[1012],256],120622:[[931],256],120623:[[932],256],120624:[[933],256],120625:[[934],256],120626:[[935],256],120627:[[936],256],120628:[[937],256],120629:[[8711],256],120630:[[945],256],120631:[[946],256],120632:[[947],256],120633:[[948],256],120634:[[949],256],120635:[[950],256],120636:[[951],256],120637:[[952],256],120638:[[953],256],120639:[[954],256],120640:[[955],256],120641:[[956],256],120642:[[957],256],120643:[[958],256],120644:[[959],256],120645:[[960],256],120646:[[961],256],120647:[[962],256],120648:[[963],256],120649:[[964],256],120650:[[965],256],120651:[[966],256],120652:[[967],256],120653:[[968],256],120654:[[969],256],120655:[[8706],256],120656:[[1013],256],120657:[[977],256],120658:[[1008],256],120659:[[981],256],120660:[[1009],256],120661:[[982],256],120662:[[913],256],120663:[[914],256],120664:[[915],256],120665:[[916],256],120666:[[917],256],120667:[[918],256],120668:[[919],256],120669:[[920],256],120670:[[921],256],120671:[[922],256],120672:[[923],256],120673:[[924],256],120674:[[925],256],120675:[[926],256],120676:[[927],256],120677:[[928],256],120678:[[929],256],120679:[[1012],256],120680:[[931],256],120681:[[932],256],120682:[[933],256],120683:[[934],256],120684:[[935],256],120685:[[936],256],120686:[[937],256],120687:[[8711],256],120688:[[945],256],120689:[[946],256],120690:[[947],256],120691:[[948],256],120692:[[949],256],120693:[[950],256],120694:[[951],256],120695:[[952],256],120696:[[953],256],120697:[[954],256],120698:[[955],256],120699:[[956],256],120700:[[957],256],120701:[[958],256],120702:[[959],256],120703:[[960],256],120704:[[961],256],120705:[[962],256],120706:[[963],256],120707:[[964],256],120708:[[965],256],120709:[[966],256],120710:[[967],256],120711:[[968],256],120712:[[969],256],120713:[[8706],256],120714:[[1013],256],120715:[[977],256],120716:[[1008],256],120717:[[981],256],120718:[[1009],256],120719:[[982],256],120720:[[913],256],120721:[[914],256],120722:[[915],256],120723:[[916],256],120724:[[917],256],120725:[[918],256],120726:[[919],256],120727:[[920],256],120728:[[921],256],120729:[[922],256],120730:[[923],256],120731:[[924],256],120732:[[925],256],120733:[[926],256],120734:[[927],256],120735:[[928],256],120736:[[929],256],120737:[[1012],256],120738:[[931],256],120739:[[932],256],120740:[[933],256],120741:[[934],256],120742:[[935],256],120743:[[936],256],120744:[[937],256],120745:[[8711],256],120746:[[945],256],120747:[[946],256],120748:[[947],256],120749:[[948],256],120750:[[949],256],120751:[[950],256],120752:[[951],256],120753:[[952],256],120754:[[953],256],120755:[[954],256],120756:[[955],256],120757:[[956],256],120758:[[957],256],120759:[[958],256],120760:[[959],256],120761:[[960],256],120762:[[961],256],120763:[[962],256],120764:[[963],256],120765:[[964],256],120766:[[965],256],120767:[[966],256],120768:[[967],256],120769:[[968],256],120770:[[969],256],120771:[[8706],256],120772:[[1013],256],120773:[[977],256],120774:[[1008],256],120775:[[981],256],120776:[[1009],256],120777:[[982],256],120778:[[988],256],120779:[[989],256],120782:[[48],256],120783:[[49],256],120784:[[50],256],120785:[[51],256],120786:[[52],256],120787:[[53],256],120788:[[54],256],120789:[[55],256],120790:[[56],256],120791:[[57],256],120792:[[48],256],120793:[[49],256],120794:[[50],256],120795:[[51],256],120796:[[52],256],120797:[[53],256],120798:[[54],256],120799:[[55],256],120800:[[56],256],120801:[[57],256],120802:[[48],256],120803:[[49],256],120804:[[50],256],120805:[[51],256],120806:[[52],256],120807:[[53],256],120808:[[54],256],120809:[[55],256],120810:[[56],256],120811:[[57],256],120812:[[48],256],120813:[[49],256],120814:[[50],256],120815:[[51],256],120816:[[52],256],120817:[[53],256],120818:[[54],256],120819:[[55],256],120820:[[56],256],120821:[[57],256],120822:[[48],256],120823:[[49],256],120824:[[50],256],120825:[[51],256],120826:[[52],256],120827:[[53],256],120828:[[54],256],120829:[[55],256],120830:[[56],256],120831:[[57],256]},
59392:{125136:[,220],125137:[,220],125138:[,220],125139:[,220],125140:[,220],125141:[,220],125142:[,220]},
60928:{126464:[[1575],256],126465:[[1576],256],126466:[[1580],256],126467:[[1583],256],126469:[[1608],256],126470:[[1586],256],126471:[[1581],256],126472:[[1591],256],126473:[[1610],256],126474:[[1603],256],126475:[[1604],256],126476:[[1605],256],126477:[[1606],256],126478:[[1587],256],126479:[[1593],256],126480:[[1601],256],126481:[[1589],256],126482:[[1602],256],126483:[[1585],256],126484:[[1588],256],126485:[[1578],256],126486:[[1579],256],126487:[[1582],256],126488:[[1584],256],126489:[[1590],256],126490:[[1592],256],126491:[[1594],256],126492:[[1646],256],126493:[[1722],256],126494:[[1697],256],126495:[[1647],256],126497:[[1576],256],126498:[[1580],256],126500:[[1607],256],126503:[[1581],256],126505:[[1610],256],126506:[[1603],256],126507:[[1604],256],126508:[[1605],256],126509:[[1606],256],126510:[[1587],256],126511:[[1593],256],126512:[[1601],256],126513:[[1589],256],126514:[[1602],256],126516:[[1588],256],126517:[[1578],256],126518:[[1579],256],126519:[[1582],256],126521:[[1590],256],126523:[[1594],256],126530:[[1580],256],126535:[[1581],256],126537:[[1610],256],126539:[[1604],256],126541:[[1606],256],126542:[[1587],256],126543:[[1593],256],126545:[[1589],256],126546:[[1602],256],126548:[[1588],256],126551:[[1582],256],126553:[[1590],256],126555:[[1594],256],126557:[[1722],256],126559:[[1647],256],126561:[[1576],256],126562:[[1580],256],126564:[[1607],256],126567:[[1581],256],126568:[[1591],256],126569:[[1610],256],126570:[[1603],256],126572:[[1605],256],126573:[[1606],256],126574:[[1587],256],126575:[[1593],256],126576:[[1601],256],126577:[[1589],256],126578:[[1602],256],126580:[[1588],256],126581:[[1578],256],126582:[[1579],256],126583:[[1582],256],126585:[[1590],256],126586:[[1592],256],126587:[[1594],256],126588:[[1646],256],126590:[[1697],256],126592:[[1575],256],126593:[[1576],256],126594:[[1580],256],126595:[[1583],256],126596:[[1607],256],126597:[[1608],256],126598:[[1586],256],126599:[[1581],256],126600:[[1591],256],126601:[[1610],256],126603:[[1604],256],126604:[[1605],256],126605:[[1606],256],126606:[[1587],256],126607:[[1593],256],126608:[[1601],256],126609:[[1589],256],126610:[[1602],256],126611:[[1585],256],126612:[[1588],256],126613:[[1578],256],126614:[[1579],256],126615:[[1582],256],126616:[[1584],256],126617:[[1590],256],126618:[[1592],256],126619:[[1594],256],126625:[[1576],256],126626:[[1580],256],126627:[[1583],256],126629:[[1608],256],126630:[[1586],256],126631:[[1581],256],126632:[[1591],256],126633:[[1610],256],126635:[[1604],256],126636:[[1605],256],126637:[[1606],256],126638:[[1587],256],126639:[[1593],256],126640:[[1601],256],126641:[[1589],256],126642:[[1602],256],126643:[[1585],256],126644:[[1588],256],126645:[[1578],256],126646:[[1579],256],126647:[[1582],256],126648:[[1584],256],126649:[[1590],256],126650:[[1592],256],126651:[[1594],256]},
61696:{127232:[[48,46],256],127233:[[48,44],256],127234:[[49,44],256],127235:[[50,44],256],127236:[[51,44],256],127237:[[52,44],256],127238:[[53,44],256],127239:[[54,44],256],127240:[[55,44],256],127241:[[56,44],256],127242:[[57,44],256],127248:[[40,65,41],256],127249:[[40,66,41],256],127250:[[40,67,41],256],127251:[[40,68,41],256],127252:[[40,69,41],256],127253:[[40,70,41],256],127254:[[40,71,41],256],127255:[[40,72,41],256],127256:[[40,73,41],256],127257:[[40,74,41],256],127258:[[40,75,41],256],127259:[[40,76,41],256],127260:[[40,77,41],256],127261:[[40,78,41],256],127262:[[40,79,41],256],127263:[[40,80,41],256],127264:[[40,81,41],256],127265:[[40,82,41],256],127266:[[40,83,41],256],127267:[[40,84,41],256],127268:[[40,85,41],256],127269:[[40,86,41],256],127270:[[40,87,41],256],127271:[[40,88,41],256],127272:[[40,89,41],256],127273:[[40,90,41],256],127274:[[12308,83,12309],256],127275:[[67],256],127276:[[82],256],127277:[[67,68],256],127278:[[87,90],256],127280:[[65],256],127281:[[66],256],127282:[[67],256],127283:[[68],256],127284:[[69],256],127285:[[70],256],127286:[[71],256],127287:[[72],256],127288:[[73],256],127289:[[74],256],127290:[[75],256],127291:[[76],256],127292:[[77],256],127293:[[78],256],127294:[[79],256],127295:[[80],256],127296:[[81],256],127297:[[82],256],127298:[[83],256],127299:[[84],256],127300:[[85],256],127301:[[86],256],127302:[[87],256],127303:[[88],256],127304:[[89],256],127305:[[90],256],127306:[[72,86],256],127307:[[77,86],256],127308:[[83,68],256],127309:[[83,83],256],127310:[[80,80,86],256],127311:[[87,67],256],127338:[[77,67],256],127339:[[77,68],256],127376:[[68,74],256]},
61952:{},
63488:{194560:[[20029]],194561:[[20024]],194562:[[20033]],194563:[[131362]],194564:[[20320]],194565:[[20398]],194566:[[20411]],194567:[[20482]],194568:[[20602]],194569:[[20633]],194570:[[20711]],194571:[[20687]],194572:[[13470]],194573:[[132666]],194574:[[20813]],194575:[[20820]],194576:[[20836]],194577:[[20855]],194578:[[132380]],194579:[[13497]],194580:[[20839]],194581:[[20877]],194582:[[132427]],194583:[[20887]],194584:[[20900]],194585:[[20172]],194586:[[20908]],194587:[[20917]],194588:[[168415]],194589:[[20981]],194590:[[20995]],194591:[[13535]],194592:[[21051]],194593:[[21062]],194594:[[21106]],194595:[[21111]],194596:[[13589]],194597:[[21191]],194598:[[21193]],194599:[[21220]],194600:[[21242]],194601:[[21253]],194602:[[21254]],194603:[[21271]],194604:[[21321]],194605:[[21329]],194606:[[21338]],194607:[[21363]],194608:[[21373]],194609:[[21375]],194610:[[21375]],194611:[[21375]],194612:[[133676]],194613:[[28784]],194614:[[21450]],194615:[[21471]],194616:[[133987]],194617:[[21483]],194618:[[21489]],194619:[[21510]],194620:[[21662]],194621:[[21560]],194622:[[21576]],194623:[[21608]],194624:[[21666]],194625:[[21750]],194626:[[21776]],194627:[[21843]],194628:[[21859]],194629:[[21892]],194630:[[21892]],194631:[[21913]],194632:[[21931]],194633:[[21939]],194634:[[21954]],194635:[[22294]],194636:[[22022]],194637:[[22295]],194638:[[22097]],194639:[[22132]],194640:[[20999]],194641:[[22766]],194642:[[22478]],194643:[[22516]],194644:[[22541]],194645:[[22411]],194646:[[22578]],194647:[[22577]],194648:[[22700]],194649:[[136420]],194650:[[22770]],194651:[[22775]],194652:[[22790]],194653:[[22810]],194654:[[22818]],194655:[[22882]],194656:[[136872]],194657:[[136938]],194658:[[23020]],194659:[[23067]],194660:[[23079]],194661:[[23000]],194662:[[23142]],194663:[[14062]],194664:[[14076]],194665:[[23304]],194666:[[23358]],194667:[[23358]],194668:[[137672]],194669:[[23491]],194670:[[23512]],194671:[[23527]],194672:[[23539]],194673:[[138008]],194674:[[23551]],194675:[[23558]],194676:[[24403]],194677:[[23586]],194678:[[14209]],194679:[[23648]],194680:[[23662]],194681:[[23744]],194682:[[23693]],194683:[[138724]],194684:[[23875]],194685:[[138726]],194686:[[23918]],194687:[[23915]],194688:[[23932]],194689:[[24033]],194690:[[24034]],194691:[[14383]],194692:[[24061]],194693:[[24104]],194694:[[24125]],194695:[[24169]],194696:[[14434]],194697:[[139651]],194698:[[14460]],194699:[[24240]],194700:[[24243]],194701:[[24246]],194702:[[24266]],194703:[[172946]],194704:[[24318]],194705:[[140081]],194706:[[140081]],194707:[[33281]],194708:[[24354]],194709:[[24354]],194710:[[14535]],194711:[[144056]],194712:[[156122]],194713:[[24418]],194714:[[24427]],194715:[[14563]],194716:[[24474]],194717:[[24525]],194718:[[24535]],194719:[[24569]],194720:[[24705]],194721:[[14650]],194722:[[14620]],194723:[[24724]],194724:[[141012]],194725:[[24775]],194726:[[24904]],194727:[[24908]],194728:[[24910]],194729:[[24908]],194730:[[24954]],194731:[[24974]],194732:[[25010]],194733:[[24996]],194734:[[25007]],194735:[[25054]],194736:[[25074]],194737:[[25078]],194738:[[25104]],194739:[[25115]],194740:[[25181]],194741:[[25265]],194742:[[25300]],194743:[[25424]],194744:[[142092]],194745:[[25405]],194746:[[25340]],194747:[[25448]],194748:[[25475]],194749:[[25572]],194750:[[142321]],194751:[[25634]],194752:[[25541]],194753:[[25513]],194754:[[14894]],194755:[[25705]],194756:[[25726]],194757:[[25757]],194758:[[25719]],194759:[[14956]],194760:[[25935]],194761:[[25964]],194762:[[143370]],194763:[[26083]],194764:[[26360]],194765:[[26185]],194766:[[15129]],194767:[[26257]],194768:[[15112]],194769:[[15076]],194770:[[20882]],194771:[[20885]],194772:[[26368]],194773:[[26268]],194774:[[32941]],194775:[[17369]],194776:[[26391]],194777:[[26395]],194778:[[26401]],194779:[[26462]],194780:[[26451]],194781:[[144323]],194782:[[15177]],194783:[[26618]],194784:[[26501]],194785:[[26706]],194786:[[26757]],194787:[[144493]],194788:[[26766]],194789:[[26655]],194790:[[26900]],194791:[[15261]],194792:[[26946]],194793:[[27043]],194794:[[27114]],194795:[[27304]],194796:[[145059]],194797:[[27355]],194798:[[15384]],194799:[[27425]],194800:[[145575]],194801:[[27476]],194802:[[15438]],194803:[[27506]],194804:[[27551]],194805:[[27578]],194806:[[27579]],194807:[[146061]],194808:[[138507]],194809:[[146170]],194810:[[27726]],194811:[[146620]],194812:[[27839]],194813:[[27853]],194814:[[27751]],194815:[[27926]]},
63744:{63744:[[35912]],63745:[[26356]],63746:[[36554]],63747:[[36040]],63748:[[28369]],63749:[[20018]],63750:[[21477]],63751:[[40860]],63752:[[40860]],63753:[[22865]],63754:[[37329]],63755:[[21895]],63756:[[22856]],63757:[[25078]],63758:[[30313]],63759:[[32645]],63760:[[34367]],63761:[[34746]],63762:[[35064]],63763:[[37007]],63764:[[27138]],63765:[[27931]],63766:[[28889]],63767:[[29662]],63768:[[33853]],63769:[[37226]],63770:[[39409]],63771:[[20098]],63772:[[21365]],63773:[[27396]],63774:[[29211]],63775:[[34349]],63776:[[40478]],63777:[[23888]],63778:[[28651]],63779:[[34253]],63780:[[35172]],63781:[[25289]],63782:[[33240]],63783:[[34847]],63784:[[24266]],63785:[[26391]],63786:[[28010]],63787:[[29436]],63788:[[37070]],63789:[[20358]],63790:[[20919]],63791:[[21214]],63792:[[25796]],63793:[[27347]],63794:[[29200]],63795:[[30439]],63796:[[32769]],63797:[[34310]],63798:[[34396]],63799:[[36335]],63800:[[38706]],63801:[[39791]],63802:[[40442]],63803:[[30860]],63804:[[31103]],63805:[[32160]],63806:[[33737]],63807:[[37636]],63808:[[40575]],63809:[[35542]],63810:[[22751]],63811:[[24324]],63812:[[31840]],63813:[[32894]],63814:[[29282]],63815:[[30922]],63816:[[36034]],63817:[[38647]],63818:[[22744]],63819:[[23650]],63820:[[27155]],63821:[[28122]],63822:[[28431]],63823:[[32047]],63824:[[32311]],63825:[[38475]],63826:[[21202]],63827:[[32907]],63828:[[20956]],63829:[[20940]],63830:[[31260]],63831:[[32190]],63832:[[33777]],63833:[[38517]],63834:[[35712]],63835:[[25295]],63836:[[27138]],63837:[[35582]],63838:[[20025]],63839:[[23527]],63840:[[24594]],63841:[[29575]],63842:[[30064]],63843:[[21271]],63844:[[30971]],63845:[[20415]],63846:[[24489]],63847:[[19981]],63848:[[27852]],63849:[[25976]],63850:[[32034]],63851:[[21443]],63852:[[22622]],63853:[[30465]],63854:[[33865]],63855:[[35498]],63856:[[27578]],63857:[[36784]],63858:[[27784]],63859:[[25342]],63860:[[33509]],63861:[[25504]],63862:[[30053]],63863:[[20142]],63864:[[20841]],63865:[[20937]],63866:[[26753]],63867:[[31975]],63868:[[33391]],63869:[[35538]],63870:[[37327]],63871:[[21237]],63872:[[21570]],63873:[[22899]],63874:[[24300]],63875:[[26053]],63876:[[28670]],63877:[[31018]],63878:[[38317]],63879:[[39530]],63880:[[40599]],63881:[[40654]],63882:[[21147]],63883:[[26310]],63884:[[27511]],63885:[[36706]],63886:[[24180]],63887:[[24976]],63888:[[25088]],63889:[[25754]],63890:[[28451]],63891:[[29001]],63892:[[29833]],63893:[[31178]],63894:[[32244]],63895:[[32879]],63896:[[36646]],63897:[[34030]],63898:[[36899]],63899:[[37706]],63900:[[21015]],63901:[[21155]],63902:[[21693]],63903:[[28872]],63904:[[35010]],63905:[[35498]],63906:[[24265]],63907:[[24565]],63908:[[25467]],63909:[[27566]],63910:[[31806]],63911:[[29557]],63912:[[20196]],63913:[[22265]],63914:[[23527]],63915:[[23994]],63916:[[24604]],63917:[[29618]],63918:[[29801]],63919:[[32666]],63920:[[32838]],63921:[[37428]],63922:[[38646]],63923:[[38728]],63924:[[38936]],63925:[[20363]],63926:[[31150]],63927:[[37300]],63928:[[38584]],63929:[[24801]],63930:[[20102]],63931:[[20698]],63932:[[23534]],63933:[[23615]],63934:[[26009]],63935:[[27138]],63936:[[29134]],63937:[[30274]],63938:[[34044]],63939:[[36988]],63940:[[40845]],63941:[[26248]],63942:[[38446]],63943:[[21129]],63944:[[26491]],63945:[[26611]],63946:[[27969]],63947:[[28316]],63948:[[29705]],63949:[[30041]],63950:[[30827]],63951:[[32016]],63952:[[39006]],63953:[[20845]],63954:[[25134]],63955:[[38520]],63956:[[20523]],63957:[[23833]],63958:[[28138]],63959:[[36650]],63960:[[24459]],63961:[[24900]],63962:[[26647]],63963:[[29575]],63964:[[38534]],63965:[[21033]],63966:[[21519]],63967:[[23653]],63968:[[26131]],63969:[[26446]],63970:[[26792]],63971:[[27877]],63972:[[29702]],63973:[[30178]],63974:[[32633]],63975:[[35023]],63976:[[35041]],63977:[[37324]],63978:[[38626]],63979:[[21311]],63980:[[28346]],63981:[[21533]],63982:[[29136]],63983:[[29848]],63984:[[34298]],63985:[[38563]],63986:[[40023]],63987:[[40607]],63988:[[26519]],63989:[[28107]],63990:[[33256]],63991:[[31435]],63992:[[31520]],63993:[[31890]],63994:[[29376]],63995:[[28825]],63996:[[35672]],63997:[[20160]],63998:[[33590]],63999:[[21050]],194816:[[27966]],194817:[[28023]],194818:[[27969]],194819:[[28009]],194820:[[28024]],194821:[[28037]],194822:[[146718]],194823:[[27956]],194824:[[28207]],194825:[[28270]],194826:[[15667]],194827:[[28363]],194828:[[28359]],194829:[[147153]],194830:[[28153]],194831:[[28526]],194832:[[147294]],194833:[[147342]],194834:[[28614]],194835:[[28729]],194836:[[28702]],194837:[[28699]],194838:[[15766]],194839:[[28746]],194840:[[28797]],194841:[[28791]],194842:[[28845]],194843:[[132389]],194844:[[28997]],194845:[[148067]],194846:[[29084]],194847:[[148395]],194848:[[29224]],194849:[[29237]],194850:[[29264]],194851:[[149000]],194852:[[29312]],194853:[[29333]],194854:[[149301]],194855:[[149524]],194856:[[29562]],194857:[[29579]],194858:[[16044]],194859:[[29605]],194860:[[16056]],194861:[[16056]],194862:[[29767]],194863:[[29788]],194864:[[29809]],194865:[[29829]],194866:[[29898]],194867:[[16155]],194868:[[29988]],194869:[[150582]],194870:[[30014]],194871:[[150674]],194872:[[30064]],194873:[[139679]],194874:[[30224]],194875:[[151457]],194876:[[151480]],194877:[[151620]],194878:[[16380]],194879:[[16392]],194880:[[30452]],194881:[[151795]],194882:[[151794]],194883:[[151833]],194884:[[151859]],194885:[[30494]],194886:[[30495]],194887:[[30495]],194888:[[30538]],194889:[[16441]],194890:[[30603]],194891:[[16454]],194892:[[16534]],194893:[[152605]],194894:[[30798]],194895:[[30860]],194896:[[30924]],194897:[[16611]],194898:[[153126]],194899:[[31062]],194900:[[153242]],194901:[[153285]],194902:[[31119]],194903:[[31211]],194904:[[16687]],194905:[[31296]],194906:[[31306]],194907:[[31311]],194908:[[153980]],194909:[[154279]],194910:[[154279]],194911:[[31470]],194912:[[16898]],194913:[[154539]],194914:[[31686]],194915:[[31689]],194916:[[16935]],194917:[[154752]],194918:[[31954]],194919:[[17056]],194920:[[31976]],194921:[[31971]],194922:[[32000]],194923:[[155526]],194924:[[32099]],194925:[[17153]],194926:[[32199]],194927:[[32258]],194928:[[32325]],194929:[[17204]],194930:[[156200]],194931:[[156231]],194932:[[17241]],194933:[[156377]],194934:[[32634]],194935:[[156478]],194936:[[32661]],194937:[[32762]],194938:[[32773]],194939:[[156890]],194940:[[156963]],194941:[[32864]],194942:[[157096]],194943:[[32880]],194944:[[144223]],194945:[[17365]],194946:[[32946]],194947:[[33027]],194948:[[17419]],194949:[[33086]],194950:[[23221]],194951:[[157607]],194952:[[157621]],194953:[[144275]],194954:[[144284]],194955:[[33281]],194956:[[33284]],194957:[[36766]],194958:[[17515]],194959:[[33425]],194960:[[33419]],194961:[[33437]],194962:[[21171]],194963:[[33457]],194964:[[33459]],194965:[[33469]],194966:[[33510]],194967:[[158524]],194968:[[33509]],194969:[[33565]],194970:[[33635]],194971:[[33709]],194972:[[33571]],194973:[[33725]],194974:[[33767]],194975:[[33879]],194976:[[33619]],194977:[[33738]],194978:[[33740]],194979:[[33756]],194980:[[158774]],194981:[[159083]],194982:[[158933]],194983:[[17707]],194984:[[34033]],194985:[[34035]],194986:[[34070]],194987:[[160714]],194988:[[34148]],194989:[[159532]],194990:[[17757]],194991:[[17761]],194992:[[159665]],194993:[[159954]],194994:[[17771]],194995:[[34384]],194996:[[34396]],194997:[[34407]],194998:[[34409]],194999:[[34473]],195000:[[34440]],195001:[[34574]],195002:[[34530]],195003:[[34681]],195004:[[34600]],195005:[[34667]],195006:[[34694]],195007:[[17879]],195008:[[34785]],195009:[[34817]],195010:[[17913]],195011:[[34912]],195012:[[34915]],195013:[[161383]],195014:[[35031]],195015:[[35038]],195016:[[17973]],195017:[[35066]],195018:[[13499]],195019:[[161966]],195020:[[162150]],195021:[[18110]],195022:[[18119]],195023:[[35488]],195024:[[35565]],195025:[[35722]],195026:[[35925]],195027:[[162984]],195028:[[36011]],195029:[[36033]],195030:[[36123]],195031:[[36215]],195032:[[163631]],195033:[[133124]],195034:[[36299]],195035:[[36284]],195036:[[36336]],195037:[[133342]],195038:[[36564]],195039:[[36664]],195040:[[165330]],195041:[[165357]],195042:[[37012]],195043:[[37105]],195044:[[37137]],195045:[[165678]],195046:[[37147]],195047:[[37432]],195048:[[37591]],195049:[[37592]],195050:[[37500]],195051:[[37881]],195052:[[37909]],195053:[[166906]],195054:[[38283]],195055:[[18837]],195056:[[38327]],195057:[[167287]],195058:[[18918]],195059:[[38595]],195060:[[23986]],195061:[[38691]],195062:[[168261]],195063:[[168474]],195064:[[19054]],195065:[[19062]],195066:[[38880]],195067:[[168970]],195068:[[19122]],195069:[[169110]],195070:[[38923]],195071:[[38923]]},
64000:{64000:[[20999]],64001:[[24230]],64002:[[25299]],64003:[[31958]],64004:[[23429]],64005:[[27934]],64006:[[26292]],64007:[[36667]],64008:[[34892]],64009:[[38477]],64010:[[35211]],64011:[[24275]],64012:[[20800]],64013:[[21952]],64016:[[22618]],64018:[[26228]],64021:[[20958]],64022:[[29482]],64023:[[30410]],64024:[[31036]],64025:[[31070]],64026:[[31077]],64027:[[31119]],64028:[[38742]],64029:[[31934]],64030:[[32701]],64032:[[34322]],64034:[[35576]],64037:[[36920]],64038:[[37117]],64042:[[39151]],64043:[[39164]],64044:[[39208]],64045:[[40372]],64046:[[37086]],64047:[[38583]],64048:[[20398]],64049:[[20711]],64050:[[20813]],64051:[[21193]],64052:[[21220]],64053:[[21329]],64054:[[21917]],64055:[[22022]],64056:[[22120]],64057:[[22592]],64058:[[22696]],64059:[[23652]],64060:[[23662]],64061:[[24724]],64062:[[24936]],64063:[[24974]],64064:[[25074]],64065:[[25935]],64066:[[26082]],64067:[[26257]],64068:[[26757]],64069:[[28023]],64070:[[28186]],64071:[[28450]],64072:[[29038]],64073:[[29227]],64074:[[29730]],64075:[[30865]],64076:[[31038]],64077:[[31049]],64078:[[31048]],64079:[[31056]],64080:[[31062]],64081:[[31069]],64082:[[31117]],64083:[[31118]],64084:[[31296]],64085:[[31361]],64086:[[31680]],64087:[[32244]],64088:[[32265]],64089:[[32321]],64090:[[32626]],64091:[[32773]],64092:[[33261]],64093:[[33401]],64094:[[33401]],64095:[[33879]],64096:[[35088]],64097:[[35222]],64098:[[35585]],64099:[[35641]],64100:[[36051]],64101:[[36104]],64102:[[36790]],64103:[[36920]],64104:[[38627]],64105:[[38911]],64106:[[38971]],64107:[[24693]],64108:[[148206]],64109:[[33304]],64112:[[20006]],64113:[[20917]],64114:[[20840]],64115:[[20352]],64116:[[20805]],64117:[[20864]],64118:[[21191]],64119:[[21242]],64120:[[21917]],64121:[[21845]],64122:[[21913]],64123:[[21986]],64124:[[22618]],64125:[[22707]],64126:[[22852]],64127:[[22868]],64128:[[23138]],64129:[[23336]],64130:[[24274]],64131:[[24281]],64132:[[24425]],64133:[[24493]],64134:[[24792]],64135:[[24910]],64136:[[24840]],64137:[[24974]],64138:[[24928]],64139:[[25074]],64140:[[25140]],64141:[[25540]],64142:[[25628]],64143:[[25682]],64144:[[25942]],64145:[[26228]],64146:[[26391]],64147:[[26395]],64148:[[26454]],64149:[[27513]],64150:[[27578]],64151:[[27969]],64152:[[28379]],64153:[[28363]],64154:[[28450]],64155:[[28702]],64156:[[29038]],64157:[[30631]],64158:[[29237]],64159:[[29359]],64160:[[29482]],64161:[[29809]],64162:[[29958]],64163:[[30011]],64164:[[30237]],64165:[[30239]],64166:[[30410]],64167:[[30427]],64168:[[30452]],64169:[[30538]],64170:[[30528]],64171:[[30924]],64172:[[31409]],64173:[[31680]],64174:[[31867]],64175:[[32091]],64176:[[32244]],64177:[[32574]],64178:[[32773]],64179:[[33618]],64180:[[33775]],64181:[[34681]],64182:[[35137]],64183:[[35206]],64184:[[35222]],64185:[[35519]],64186:[[35576]],64187:[[35531]],64188:[[35585]],64189:[[35582]],64190:[[35565]],64191:[[35641]],64192:[[35722]],64193:[[36104]],64194:[[36664]],64195:[[36978]],64196:[[37273]],64197:[[37494]],64198:[[38524]],64199:[[38627]],64200:[[38742]],64201:[[38875]],64202:[[38911]],64203:[[38923]],64204:[[38971]],64205:[[39698]],64206:[[40860]],64207:[[141386]],64208:[[141380]],64209:[[144341]],64210:[[15261]],64211:[[16408]],64212:[[16441]],64213:[[152137]],64214:[[154832]],64215:[[163539]],64216:[[40771]],64217:[[40846]],195072:[[38953]],195073:[[169398]],195074:[[39138]],195075:[[19251]],195076:[[39209]],195077:[[39335]],195078:[[39362]],195079:[[39422]],195080:[[19406]],195081:[[170800]],195082:[[39698]],195083:[[40000]],195084:[[40189]],195085:[[19662]],195086:[[19693]],195087:[[40295]],195088:[[172238]],195089:[[19704]],195090:[[172293]],195091:[[172558]],195092:[[172689]],195093:[[40635]],195094:[[19798]],195095:[[40697]],195096:[[40702]],195097:[[40709]],195098:[[40719]],195099:[[40726]],195100:[[40763]],195101:[[173568]]},
64256:{64256:[[102,102],256],64257:[[102,105],256],64258:[[102,108],256],64259:[[102,102,105],256],64260:[[102,102,108],256],64261:[[383,116],256],64262:[[115,116],256],64275:[[1396,1398],256],64276:[[1396,1381],256],64277:[[1396,1387],256],64278:[[1406,1398],256],64279:[[1396,1389],256],64285:[[1497,1460],512],64286:[,26],64287:[[1522,1463],512],64288:[[1506],256],64289:[[1488],256],64290:[[1491],256],64291:[[1492],256],64292:[[1499],256],64293:[[1500],256],64294:[[1501],256],64295:[[1512],256],64296:[[1514],256],64297:[[43],256],64298:[[1513,1473],512],64299:[[1513,1474],512],64300:[[64329,1473],512],64301:[[64329,1474],512],64302:[[1488,1463],512],64303:[[1488,1464],512],64304:[[1488,1468],512],64305:[[1489,1468],512],64306:[[1490,1468],512],64307:[[1491,1468],512],64308:[[1492,1468],512],64309:[[1493,1468],512],64310:[[1494,1468],512],64312:[[1496,1468],512],64313:[[1497,1468],512],64314:[[1498,1468],512],64315:[[1499,1468],512],64316:[[1500,1468],512],64318:[[1502,1468],512],64320:[[1504,1468],512],64321:[[1505,1468],512],64323:[[1507,1468],512],64324:[[1508,1468],512],64326:[[1510,1468],512],64327:[[1511,1468],512],64328:[[1512,1468],512],64329:[[1513,1468],512],64330:[[1514,1468],512],64331:[[1493,1465],512],64332:[[1489,1471],512],64333:[[1499,1471],512],64334:[[1508,1471],512],64335:[[1488,1500],256],64336:[[1649],256],64337:[[1649],256],64338:[[1659],256],64339:[[1659],256],64340:[[1659],256],64341:[[1659],256],64342:[[1662],256],64343:[[1662],256],64344:[[1662],256],64345:[[1662],256],64346:[[1664],256],64347:[[1664],256],64348:[[1664],256],64349:[[1664],256],64350:[[1658],256],64351:[[1658],256],64352:[[1658],256],64353:[[1658],256],64354:[[1663],256],64355:[[1663],256],64356:[[1663],256],64357:[[1663],256],64358:[[1657],256],64359:[[1657],256],64360:[[1657],256],64361:[[1657],256],64362:[[1700],256],64363:[[1700],256],64364:[[1700],256],64365:[[1700],256],64366:[[1702],256],64367:[[1702],256],64368:[[1702],256],64369:[[1702],256],64370:[[1668],256],64371:[[1668],256],64372:[[1668],256],64373:[[1668],256],64374:[[1667],256],64375:[[1667],256],64376:[[1667],256],64377:[[1667],256],64378:[[1670],256],64379:[[1670],256],64380:[[1670],256],64381:[[1670],256],64382:[[1671],256],64383:[[1671],256],64384:[[1671],256],64385:[[1671],256],64386:[[1677],256],64387:[[1677],256],64388:[[1676],256],64389:[[1676],256],64390:[[1678],256],64391:[[1678],256],64392:[[1672],256],64393:[[1672],256],64394:[[1688],256],64395:[[1688],256],64396:[[1681],256],64397:[[1681],256],64398:[[1705],256],64399:[[1705],256],64400:[[1705],256],64401:[[1705],256],64402:[[1711],256],64403:[[1711],256],64404:[[1711],256],64405:[[1711],256],64406:[[1715],256],64407:[[1715],256],64408:[[1715],256],64409:[[1715],256],64410:[[1713],256],64411:[[1713],256],64412:[[1713],256],64413:[[1713],256],64414:[[1722],256],64415:[[1722],256],64416:[[1723],256],64417:[[1723],256],64418:[[1723],256],64419:[[1723],256],64420:[[1728],256],64421:[[1728],256],64422:[[1729],256],64423:[[1729],256],64424:[[1729],256],64425:[[1729],256],64426:[[1726],256],64427:[[1726],256],64428:[[1726],256],64429:[[1726],256],64430:[[1746],256],64431:[[1746],256],64432:[[1747],256],64433:[[1747],256],64467:[[1709],256],64468:[[1709],256],64469:[[1709],256],64470:[[1709],256],64471:[[1735],256],64472:[[1735],256],64473:[[1734],256],64474:[[1734],256],64475:[[1736],256],64476:[[1736],256],64477:[[1655],256],64478:[[1739],256],64479:[[1739],256],64480:[[1733],256],64481:[[1733],256],64482:[[1737],256],64483:[[1737],256],64484:[[1744],256],64485:[[1744],256],64486:[[1744],256],64487:[[1744],256],64488:[[1609],256],64489:[[1609],256],64490:[[1574,1575],256],64491:[[1574,1575],256],64492:[[1574,1749],256],64493:[[1574,1749],256],64494:[[1574,1608],256],64495:[[1574,1608],256],64496:[[1574,1735],256],64497:[[1574,1735],256],64498:[[1574,1734],256],64499:[[1574,1734],256],64500:[[1574,1736],256],64501:[[1574,1736],256],64502:[[1574,1744],256],64503:[[1574,1744],256],64504:[[1574,1744],256],64505:[[1574,1609],256],64506:[[1574,1609],256],64507:[[1574,1609],256],64508:[[1740],256],64509:[[1740],256],64510:[[1740],256],64511:[[1740],256]},
64512:{64512:[[1574,1580],256],64513:[[1574,1581],256],64514:[[1574,1605],256],64515:[[1574,1609],256],64516:[[1574,1610],256],64517:[[1576,1580],256],64518:[[1576,1581],256],64519:[[1576,1582],256],64520:[[1576,1605],256],64521:[[1576,1609],256],64522:[[1576,1610],256],64523:[[1578,1580],256],64524:[[1578,1581],256],64525:[[1578,1582],256],64526:[[1578,1605],256],64527:[[1578,1609],256],64528:[[1578,1610],256],64529:[[1579,1580],256],64530:[[1579,1605],256],64531:[[1579,1609],256],64532:[[1579,1610],256],64533:[[1580,1581],256],64534:[[1580,1605],256],64535:[[1581,1580],256],64536:[[1581,1605],256],64537:[[1582,1580],256],64538:[[1582,1581],256],64539:[[1582,1605],256],64540:[[1587,1580],256],64541:[[1587,1581],256],64542:[[1587,1582],256],64543:[[1587,1605],256],64544:[[1589,1581],256],64545:[[1589,1605],256],64546:[[1590,1580],256],64547:[[1590,1581],256],64548:[[1590,1582],256],64549:[[1590,1605],256],64550:[[1591,1581],256],64551:[[1591,1605],256],64552:[[1592,1605],256],64553:[[1593,1580],256],64554:[[1593,1605],256],64555:[[1594,1580],256],64556:[[1594,1605],256],64557:[[1601,1580],256],64558:[[1601,1581],256],64559:[[1601,1582],256],64560:[[1601,1605],256],64561:[[1601,1609],256],64562:[[1601,1610],256],64563:[[1602,1581],256],64564:[[1602,1605],256],64565:[[1602,1609],256],64566:[[1602,1610],256],64567:[[1603,1575],256],64568:[[1603,1580],256],64569:[[1603,1581],256],64570:[[1603,1582],256],64571:[[1603,1604],256],64572:[[1603,1605],256],64573:[[1603,1609],256],64574:[[1603,1610],256],64575:[[1604,1580],256],64576:[[1604,1581],256],64577:[[1604,1582],256],64578:[[1604,1605],256],64579:[[1604,1609],256],64580:[[1604,1610],256],64581:[[1605,1580],256],64582:[[1605,1581],256],64583:[[1605,1582],256],64584:[[1605,1605],256],64585:[[1605,1609],256],64586:[[1605,1610],256],64587:[[1606,1580],256],64588:[[1606,1581],256],64589:[[1606,1582],256],64590:[[1606,1605],256],64591:[[1606,1609],256],64592:[[1606,1610],256],64593:[[1607,1580],256],64594:[[1607,1605],256],64595:[[1607,1609],256],64596:[[1607,1610],256],64597:[[1610,1580],256],64598:[[1610,1581],256],64599:[[1610,1582],256],64600:[[1610,1605],256],64601:[[1610,1609],256],64602:[[1610,1610],256],64603:[[1584,1648],256],64604:[[1585,1648],256],64605:[[1609,1648],256],64606:[[32,1612,1617],256],64607:[[32,1613,1617],256],64608:[[32,1614,1617],256],64609:[[32,1615,1617],256],64610:[[32,1616,1617],256],64611:[[32,1617,1648],256],64612:[[1574,1585],256],64613:[[1574,1586],256],64614:[[1574,1605],256],64615:[[1574,1606],256],64616:[[1574,1609],256],64617:[[1574,1610],256],64618:[[1576,1585],256],64619:[[1576,1586],256],64620:[[1576,1605],256],64621:[[1576,1606],256],64622:[[1576,1609],256],64623:[[1576,1610],256],64624:[[1578,1585],256],64625:[[1578,1586],256],64626:[[1578,1605],256],64627:[[1578,1606],256],64628:[[1578,1609],256],64629:[[1578,1610],256],64630:[[1579,1585],256],64631:[[1579,1586],256],64632:[[1579,1605],256],64633:[[1579,1606],256],64634:[[1579,1609],256],64635:[[1579,1610],256],64636:[[1601,1609],256],64637:[[1601,1610],256],64638:[[1602,1609],256],64639:[[1602,1610],256],64640:[[1603,1575],256],64641:[[1603,1604],256],64642:[[1603,1605],256],64643:[[1603,1609],256],64644:[[1603,1610],256],64645:[[1604,1605],256],64646:[[1604,1609],256],64647:[[1604,1610],256],64648:[[1605,1575],256],64649:[[1605,1605],256],64650:[[1606,1585],256],64651:[[1606,1586],256],64652:[[1606,1605],256],64653:[[1606,1606],256],64654:[[1606,1609],256],64655:[[1606,1610],256],64656:[[1609,1648],256],64657:[[1610,1585],256],64658:[[1610,1586],256],64659:[[1610,1605],256],64660:[[1610,1606],256],64661:[[1610,1609],256],64662:[[1610,1610],256],64663:[[1574,1580],256],64664:[[1574,1581],256],64665:[[1574,1582],256],64666:[[1574,1605],256],64667:[[1574,1607],256],64668:[[1576,1580],256],64669:[[1576,1581],256],64670:[[1576,1582],256],64671:[[1576,1605],256],64672:[[1576,1607],256],64673:[[1578,1580],256],64674:[[1578,1581],256],64675:[[1578,1582],256],64676:[[1578,1605],256],64677:[[1578,1607],256],64678:[[1579,1605],256],64679:[[1580,1581],256],64680:[[1580,1605],256],64681:[[1581,1580],256],64682:[[1581,1605],256],64683:[[1582,1580],256],64684:[[1582,1605],256],64685:[[1587,1580],256],64686:[[1587,1581],256],64687:[[1587,1582],256],64688:[[1587,1605],256],64689:[[1589,1581],256],64690:[[1589,1582],256],64691:[[1589,1605],256],64692:[[1590,1580],256],64693:[[1590,1581],256],64694:[[1590,1582],256],64695:[[1590,1605],256],64696:[[1591,1581],256],64697:[[1592,1605],256],64698:[[1593,1580],256],64699:[[1593,1605],256],64700:[[1594,1580],256],64701:[[1594,1605],256],64702:[[1601,1580],256],64703:[[1601,1581],256],64704:[[1601,1582],256],64705:[[1601,1605],256],64706:[[1602,1581],256],64707:[[1602,1605],256],64708:[[1603,1580],256],64709:[[1603,1581],256],64710:[[1603,1582],256],64711:[[1603,1604],256],64712:[[1603,1605],256],64713:[[1604,1580],256],64714:[[1604,1581],256],64715:[[1604,1582],256],64716:[[1604,1605],256],64717:[[1604,1607],256],64718:[[1605,1580],256],64719:[[1605,1581],256],64720:[[1605,1582],256],64721:[[1605,1605],256],64722:[[1606,1580],256],64723:[[1606,1581],256],64724:[[1606,1582],256],64725:[[1606,1605],256],64726:[[1606,1607],256],64727:[[1607,1580],256],64728:[[1607,1605],256],64729:[[1607,1648],256],64730:[[1610,1580],256],64731:[[1610,1581],256],64732:[[1610,1582],256],64733:[[1610,1605],256],64734:[[1610,1607],256],64735:[[1574,1605],256],64736:[[1574,1607],256],64737:[[1576,1605],256],64738:[[1576,1607],256],64739:[[1578,1605],256],64740:[[1578,1607],256],64741:[[1579,1605],256],64742:[[1579,1607],256],64743:[[1587,1605],256],64744:[[1587,1607],256],64745:[[1588,1605],256],64746:[[1588,1607],256],64747:[[1603,1604],256],64748:[[1603,1605],256],64749:[[1604,1605],256],64750:[[1606,1605],256],64751:[[1606,1607],256],64752:[[1610,1605],256],64753:[[1610,1607],256],64754:[[1600,1614,1617],256],64755:[[1600,1615,1617],256],64756:[[1600,1616,1617],256],64757:[[1591,1609],256],64758:[[1591,1610],256],64759:[[1593,1609],256],64760:[[1593,1610],256],64761:[[1594,1609],256],64762:[[1594,1610],256],64763:[[1587,1609],256],64764:[[1587,1610],256],64765:[[1588,1609],256],64766:[[1588,1610],256],64767:[[1581,1609],256]},
64768:{64768:[[1581,1610],256],64769:[[1580,1609],256],64770:[[1580,1610],256],64771:[[1582,1609],256],64772:[[1582,1610],256],64773:[[1589,1609],256],64774:[[1589,1610],256],64775:[[1590,1609],256],64776:[[1590,1610],256],64777:[[1588,1580],256],64778:[[1588,1581],256],64779:[[1588,1582],256],64780:[[1588,1605],256],64781:[[1588,1585],256],64782:[[1587,1585],256],64783:[[1589,1585],256],64784:[[1590,1585],256],64785:[[1591,1609],256],64786:[[1591,1610],256],64787:[[1593,1609],256],64788:[[1593,1610],256],64789:[[1594,1609],256],64790:[[1594,1610],256],64791:[[1587,1609],256],64792:[[1587,1610],256],64793:[[1588,1609],256],64794:[[1588,1610],256],64795:[[1581,1609],256],64796:[[1581,1610],256],64797:[[1580,1609],256],64798:[[1580,1610],256],64799:[[1582,1609],256],64800:[[1582,1610],256],64801:[[1589,1609],256],64802:[[1589,1610],256],64803:[[1590,1609],256],64804:[[1590,1610],256],64805:[[1588,1580],256],64806:[[1588,1581],256],64807:[[1588,1582],256],64808:[[1588,1605],256],64809:[[1588,1585],256],64810:[[1587,1585],256],64811:[[1589,1585],256],64812:[[1590,1585],256],64813:[[1588,1580],256],64814:[[1588,1581],256],64815:[[1588,1582],256],64816:[[1588,1605],256],64817:[[1587,1607],256],64818:[[1588,1607],256],64819:[[1591,1605],256],64820:[[1587,1580],256],64821:[[1587,1581],256],64822:[[1587,1582],256],64823:[[1588,1580],256],64824:[[1588,1581],256],64825:[[1588,1582],256],64826:[[1591,1605],256],64827:[[1592,1605],256],64828:[[1575,1611],256],64829:[[1575,1611],256],64848:[[1578,1580,1605],256],64849:[[1578,1581,1580],256],64850:[[1578,1581,1580],256],64851:[[1578,1581,1605],256],64852:[[1578,1582,1605],256],64853:[[1578,1605,1580],256],64854:[[1578,1605,1581],256],64855:[[1578,1605,1582],256],64856:[[1580,1605,1581],256],64857:[[1580,1605,1581],256],64858:[[1581,1605,1610],256],64859:[[1581,1605,1609],256],64860:[[1587,1581,1580],256],64861:[[1587,1580,1581],256],64862:[[1587,1580,1609],256],64863:[[1587,1605,1581],256],64864:[[1587,1605,1581],256],64865:[[1587,1605,1580],256],64866:[[1587,1605,1605],256],64867:[[1587,1605,1605],256],64868:[[1589,1581,1581],256],64869:[[1589,1581,1581],256],64870:[[1589,1605,1605],256],64871:[[1588,1581,1605],256],64872:[[1588,1581,1605],256],64873:[[1588,1580,1610],256],64874:[[1588,1605,1582],256],64875:[[1588,1605,1582],256],64876:[[1588,1605,1605],256],64877:[[1588,1605,1605],256],64878:[[1590,1581,1609],256],64879:[[1590,1582,1605],256],64880:[[1590,1582,1605],256],64881:[[1591,1605,1581],256],64882:[[1591,1605,1581],256],64883:[[1591,1605,1605],256],64884:[[1591,1605,1610],256],64885:[[1593,1580,1605],256],64886:[[1593,1605,1605],256],64887:[[1593,1605,1605],256],64888:[[1593,1605,1609],256],64889:[[1594,1605,1605],256],64890:[[1594,1605,1610],256],64891:[[1594,1605,1609],256],64892:[[1601,1582,1605],256],64893:[[1601,1582,1605],256],64894:[[1602,1605,1581],256],64895:[[1602,1605,1605],256],64896:[[1604,1581,1605],256],64897:[[1604,1581,1610],256],64898:[[1604,1581,1609],256],64899:[[1604,1580,1580],256],64900:[[1604,1580,1580],256],64901:[[1604,1582,1605],256],64902:[[1604,1582,1605],256],64903:[[1604,1605,1581],256],64904:[[1604,1605,1581],256],64905:[[1605,1581,1580],256],64906:[[1605,1581,1605],256],64907:[[1605,1581,1610],256],64908:[[1605,1580,1581],256],64909:[[1605,1580,1605],256],64910:[[1605,1582,1580],256],64911:[[1605,1582,1605],256],64914:[[1605,1580,1582],256],64915:[[1607,1605,1580],256],64916:[[1607,1605,1605],256],64917:[[1606,1581,1605],256],64918:[[1606,1581,1609],256],64919:[[1606,1580,1605],256],64920:[[1606,1580,1605],256],64921:[[1606,1580,1609],256],64922:[[1606,1605,1610],256],64923:[[1606,1605,1609],256],64924:[[1610,1605,1605],256],64925:[[1610,1605,1605],256],64926:[[1576,1582,1610],256],64927:[[1578,1580,1610],256],64928:[[1578,1580,1609],256],64929:[[1578,1582,1610],256],64930:[[1578,1582,1609],256],64931:[[1578,1605,1610],256],64932:[[1578,1605,1609],256],64933:[[1580,1605,1610],256],64934:[[1580,1581,1609],256],64935:[[1580,1605,1609],256],64936:[[1587,1582,1609],256],64937:[[1589,1581,1610],256],64938:[[1588,1581,1610],256],64939:[[1590,1581,1610],256],64940:[[1604,1580,1610],256],64941:[[1604,1605,1610],256],64942:[[1610,1581,1610],256],64943:[[1610,1580,1610],256],64944:[[1610,1605,1610],256],64945:[[1605,1605,1610],256],64946:[[1602,1605,1610],256],64947:[[1606,1581,1610],256],64948:[[1602,1605,1581],256],64949:[[1604,1581,1605],256],64950:[[1593,1605,1610],256],64951:[[1603,1605,1610],256],64952:[[1606,1580,1581],256],64953:[[1605,1582,1610],256],64954:[[1604,1580,1605],256],64955:[[1603,1605,1605],256],64956:[[1604,1580,1605],256],64957:[[1606,1580,1581],256],64958:[[1580,1581,1610],256],64959:[[1581,1580,1610],256],64960:[[1605,1580,1610],256],64961:[[1601,1605,1610],256],64962:[[1576,1581,1610],256],64963:[[1603,1605,1605],256],64964:[[1593,1580,1605],256],64965:[[1589,1605,1605],256],64966:[[1587,1582,1610],256],64967:[[1606,1580,1610],256],65008:[[1589,1604,1746],256],65009:[[1602,1604,1746],256],65010:[[1575,1604,1604,1607],256],65011:[[1575,1603,1576,1585],256],65012:[[1605,1581,1605,1583],256],65013:[[1589,1604,1593,1605],256],65014:[[1585,1587,1608,1604],256],65015:[[1593,1604,1610,1607],256],65016:[[1608,1587,1604,1605],256],65017:[[1589,1604,1609],256],65018:[[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605],256],65019:[[1580,1604,32,1580,1604,1575,1604,1607],256],65020:[[1585,1740,1575,1604],256]},
65024:{65040:[[44],256],65041:[[12289],256],65042:[[12290],256],65043:[[58],256],65044:[[59],256],65045:[[33],256],65046:[[63],256],65047:[[12310],256],65048:[[12311],256],65049:[[8230],256],65056:[,230],65057:[,230],65058:[,230],65059:[,230],65060:[,230],65061:[,230],65062:[,230],65063:[,220],65064:[,220],65065:[,220],65066:[,220],65067:[,220],65068:[,220],65069:[,220],65072:[[8229],256],65073:[[8212],256],65074:[[8211],256],65075:[[95],256],65076:[[95],256],65077:[[40],256],65078:[[41],256],65079:[[123],256],65080:[[125],256],65081:[[12308],256],65082:[[12309],256],65083:[[12304],256],65084:[[12305],256],65085:[[12298],256],65086:[[12299],256],65087:[[12296],256],65088:[[12297],256],65089:[[12300],256],65090:[[12301],256],65091:[[12302],256],65092:[[12303],256],65095:[[91],256],65096:[[93],256],65097:[[8254],256],65098:[[8254],256],65099:[[8254],256],65100:[[8254],256],65101:[[95],256],65102:[[95],256],65103:[[95],256],65104:[[44],256],65105:[[12289],256],65106:[[46],256],65108:[[59],256],65109:[[58],256],65110:[[63],256],65111:[[33],256],65112:[[8212],256],65113:[[40],256],65114:[[41],256],65115:[[123],256],65116:[[125],256],65117:[[12308],256],65118:[[12309],256],65119:[[35],256],65120:[[38],256],65121:[[42],256],65122:[[43],256],65123:[[45],256],65124:[[60],256],65125:[[62],256],65126:[[61],256],65128:[[92],256],65129:[[36],256],65130:[[37],256],65131:[[64],256],65136:[[32,1611],256],65137:[[1600,1611],256],65138:[[32,1612],256],65140:[[32,1613],256],65142:[[32,1614],256],65143:[[1600,1614],256],65144:[[32,1615],256],65145:[[1600,1615],256],65146:[[32,1616],256],65147:[[1600,1616],256],65148:[[32,1617],256],65149:[[1600,1617],256],65150:[[32,1618],256],65151:[[1600,1618],256],65152:[[1569],256],65153:[[1570],256],65154:[[1570],256],65155:[[1571],256],65156:[[1571],256],65157:[[1572],256],65158:[[1572],256],65159:[[1573],256],65160:[[1573],256],65161:[[1574],256],65162:[[1574],256],65163:[[1574],256],65164:[[1574],256],65165:[[1575],256],65166:[[1575],256],65167:[[1576],256],65168:[[1576],256],65169:[[1576],256],65170:[[1576],256],65171:[[1577],256],65172:[[1577],256],65173:[[1578],256],65174:[[1578],256],65175:[[1578],256],65176:[[1578],256],65177:[[1579],256],65178:[[1579],256],65179:[[1579],256],65180:[[1579],256],65181:[[1580],256],65182:[[1580],256],65183:[[1580],256],65184:[[1580],256],65185:[[1581],256],65186:[[1581],256],65187:[[1581],256],65188:[[1581],256],65189:[[1582],256],65190:[[1582],256],65191:[[1582],256],65192:[[1582],256],65193:[[1583],256],65194:[[1583],256],65195:[[1584],256],65196:[[1584],256],65197:[[1585],256],65198:[[1585],256],65199:[[1586],256],65200:[[1586],256],65201:[[1587],256],65202:[[1587],256],65203:[[1587],256],65204:[[1587],256],65205:[[1588],256],65206:[[1588],256],65207:[[1588],256],65208:[[1588],256],65209:[[1589],256],65210:[[1589],256],65211:[[1589],256],65212:[[1589],256],65213:[[1590],256],65214:[[1590],256],65215:[[1590],256],65216:[[1590],256],65217:[[1591],256],65218:[[1591],256],65219:[[1591],256],65220:[[1591],256],65221:[[1592],256],65222:[[1592],256],65223:[[1592],256],65224:[[1592],256],65225:[[1593],256],65226:[[1593],256],65227:[[1593],256],65228:[[1593],256],65229:[[1594],256],65230:[[1594],256],65231:[[1594],256],65232:[[1594],256],65233:[[1601],256],65234:[[1601],256],65235:[[1601],256],65236:[[1601],256],65237:[[1602],256],65238:[[1602],256],65239:[[1602],256],65240:[[1602],256],65241:[[1603],256],65242:[[1603],256],65243:[[1603],256],65244:[[1603],256],65245:[[1604],256],65246:[[1604],256],65247:[[1604],256],65248:[[1604],256],65249:[[1605],256],65250:[[1605],256],65251:[[1605],256],65252:[[1605],256],65253:[[1606],256],65254:[[1606],256],65255:[[1606],256],65256:[[1606],256],65257:[[1607],256],65258:[[1607],256],65259:[[1607],256],65260:[[1607],256],65261:[[1608],256],65262:[[1608],256],65263:[[1609],256],65264:[[1609],256],65265:[[1610],256],65266:[[1610],256],65267:[[1610],256],65268:[[1610],256],65269:[[1604,1570],256],65270:[[1604,1570],256],65271:[[1604,1571],256],65272:[[1604,1571],256],65273:[[1604,1573],256],65274:[[1604,1573],256],65275:[[1604,1575],256],65276:[[1604,1575],256]},
65280:{65281:[[33],256],65282:[[34],256],65283:[[35],256],65284:[[36],256],65285:[[37],256],65286:[[38],256],65287:[[39],256],65288:[[40],256],65289:[[41],256],65290:[[42],256],65291:[[43],256],65292:[[44],256],65293:[[45],256],65294:[[46],256],65295:[[47],256],65296:[[48],256],65297:[[49],256],65298:[[50],256],65299:[[51],256],65300:[[52],256],65301:[[53],256],65302:[[54],256],65303:[[55],256],65304:[[56],256],65305:[[57],256],65306:[[58],256],65307:[[59],256],65308:[[60],256],65309:[[61],256],65310:[[62],256],65311:[[63],256],65312:[[64],256],65313:[[65],256],65314:[[66],256],65315:[[67],256],65316:[[68],256],65317:[[69],256],65318:[[70],256],65319:[[71],256],65320:[[72],256],65321:[[73],256],65322:[[74],256],65323:[[75],256],65324:[[76],256],65325:[[77],256],65326:[[78],256],65327:[[79],256],65328:[[80],256],65329:[[81],256],65330:[[82],256],65331:[[83],256],65332:[[84],256],65333:[[85],256],65334:[[86],256],65335:[[87],256],65336:[[88],256],65337:[[89],256],65338:[[90],256],65339:[[91],256],65340:[[92],256],65341:[[93],256],65342:[[94],256],65343:[[95],256],65344:[[96],256],65345:[[97],256],65346:[[98],256],65347:[[99],256],65348:[[100],256],65349:[[101],256],65350:[[102],256],65351:[[103],256],65352:[[104],256],65353:[[105],256],65354:[[106],256],65355:[[107],256],65356:[[108],256],65357:[[109],256],65358:[[110],256],65359:[[111],256],65360:[[112],256],65361:[[113],256],65362:[[114],256],65363:[[115],256],65364:[[116],256],65365:[[117],256],65366:[[118],256],65367:[[119],256],65368:[[120],256],65369:[[121],256],65370:[[122],256],65371:[[123],256],65372:[[124],256],65373:[[125],256],65374:[[126],256],65375:[[10629],256],65376:[[10630],256],65377:[[12290],256],65378:[[12300],256],65379:[[12301],256],65380:[[12289],256],65381:[[12539],256],65382:[[12530],256],65383:[[12449],256],65384:[[12451],256],65385:[[12453],256],65386:[[12455],256],65387:[[12457],256],65388:[[12515],256],65389:[[12517],256],65390:[[12519],256],65391:[[12483],256],65392:[[12540],256],65393:[[12450],256],65394:[[12452],256],65395:[[12454],256],65396:[[12456],256],65397:[[12458],256],65398:[[12459],256],65399:[[12461],256],65400:[[12463],256],65401:[[12465],256],65402:[[12467],256],65403:[[12469],256],65404:[[12471],256],65405:[[12473],256],65406:[[12475],256],65407:[[12477],256],65408:[[12479],256],65409:[[12481],256],65410:[[12484],256],65411:[[12486],256],65412:[[12488],256],65413:[[12490],256],65414:[[12491],256],65415:[[12492],256],65416:[[12493],256],65417:[[12494],256],65418:[[12495],256],65419:[[12498],256],65420:[[12501],256],65421:[[12504],256],65422:[[12507],256],65423:[[12510],256],65424:[[12511],256],65425:[[12512],256],65426:[[12513],256],65427:[[12514],256],65428:[[12516],256],65429:[[12518],256],65430:[[12520],256],65431:[[12521],256],65432:[[12522],256],65433:[[12523],256],65434:[[12524],256],65435:[[12525],256],65436:[[12527],256],65437:[[12531],256],65438:[[12441],256],65439:[[12442],256],65440:[[12644],256],65441:[[12593],256],65442:[[12594],256],65443:[[12595],256],65444:[[12596],256],65445:[[12597],256],65446:[[12598],256],65447:[[12599],256],65448:[[12600],256],65449:[[12601],256],65450:[[12602],256],65451:[[12603],256],65452:[[12604],256],65453:[[12605],256],65454:[[12606],256],65455:[[12607],256],65456:[[12608],256],65457:[[12609],256],65458:[[12610],256],65459:[[12611],256],65460:[[12612],256],65461:[[12613],256],65462:[[12614],256],65463:[[12615],256],65464:[[12616],256],65465:[[12617],256],65466:[[12618],256],65467:[[12619],256],65468:[[12620],256],65469:[[12621],256],65470:[[12622],256],65474:[[12623],256],65475:[[12624],256],65476:[[12625],256],65477:[[12626],256],65478:[[12627],256],65479:[[12628],256],65482:[[12629],256],65483:[[12630],256],65484:[[12631],256],65485:[[12632],256],65486:[[12633],256],65487:[[12634],256],65490:[[12635],256],65491:[[12636],256],65492:[[12637],256],65493:[[12638],256],65494:[[12639],256],65495:[[12640],256],65498:[[12641],256],65499:[[12642],256],65500:[[12643],256],65504:[[162],256],65505:[[163],256],65506:[[172],256],65507:[[175],256],65508:[[166],256],65509:[[165],256],65510:[[8361],256],65512:[[9474],256],65513:[[8592],256],65514:[[8593],256],65515:[[8594],256],65516:[[8595],256],65517:[[9632],256],65518:[[9675],256]}

};

   /***** Module to export */
   var unorm = {
      nfc: nfc,
      nfd: nfd,
      nfkc: nfkc,
      nfkd: nfkd
   };

   /*globals module:true,define:true*/

   // CommonJS
   if (true) {
      module.exports = unorm;

   // AMD
   } else {}

   /***** Export as shim for String::normalize method *****/
   /*
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

      21.1.3.12 String.prototype.normalize(form="NFC")
      When the normalize method is called with one argument form, the following steps are taken:

      1. Let O be CheckObjectCoercible(this value).
      2. Let S be ToString(O).
      3. ReturnIfAbrupt(S).
      4. If form is not provided or undefined let form be "NFC".
      5. Let f be ToString(form).
      6. ReturnIfAbrupt(f).
      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
      9. Return ns.

      The length property of the normalize method is 0.

      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
   */
    unorm.shimApplied = false;

   if (!String.prototype.normalize) {
      Object.defineProperty(String.prototype, "normalize", {
         enumerable: false,
         configurable: true,
         writable: true,
         value: function normalize (/*form*/) {
            
            var str = "" + this;
            var form = arguments[0] === undefined ? "NFC" : arguments[0];

            if (this === null || this === undefined) {
               throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
            }

            if (form === "NFC") {
               return unorm.nfc(str);
            } else if (form === "NFD") {
               return unorm.nfd(str);
            } else if (form === "NFKC") {
               return unorm.nfkc(str);
            } else if (form === "NFKD") {
               return unorm.nfkd(str);
            } else {
               throw new RangeError("Invalid normalization form: " + form);
            }
         }
      });

      unorm.shimApplied = true;
   }
}(this));


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.collatorFromConfig = collatorFromConfig;

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function collatorFromConfig(config) {
  var sensitivity = config.caseSensitive ? config.accentSensitive ? 'variant' : 'case' : config.accentSensitive ? 'accent' : 'base';
  var caseFirst = config.caseFirst;
  var ignorePunctuation = config.ignorePunctuation;
  return new Intl.Collator(config.localeLang, {
    sensitivity: sensitivity,
    caseFirst: caseFirst,
    ignorePunctuation: ignorePunctuation
  });
}

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(137);

__webpack_require__(50);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.TimeNumber = exports.RichNumber = exports.PercentNumber = exports.NumberType = exports.EmptyValue = exports.DateTimeNumber = exports.DateNumber = exports.CurrencyNumber = void 0;
exports.cloneNumber = cloneNumber;
exports.getFormatOfExtendedNumber = getFormatOfExtendedNumber;
exports.getRawValue = getRawValue;
exports.getTypeFormatOfExtendedNumber = getTypeFormatOfExtendedNumber;
exports.getTypeOfExtendedNumber = getTypeOfExtendedNumber;
exports.isExtendedNumber = isExtendedNumber;

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var EmptyValue = Symbol('Empty value');
exports.EmptyValue = EmptyValue;

function getRawValue(num) {
  if (num instanceof RichNumber) {
    return num.val;
  } else {
    return num;
  }
}

var RichNumber = /*#__PURE__*/function () {
  function RichNumber(val, format) {
    _classCallCheck(this, RichNumber);

    this.val = val;
    this.format = format;
  }

  _createClass(RichNumber, [{
    key: "fromNumber",
    value: function fromNumber(val) {
      return new this.constructor(val);
    }
  }]);

  return RichNumber;
}();

exports.RichNumber = RichNumber;

function cloneNumber(val, newVal) {
  if (typeof val === 'number') {
    return newVal;
  } else {
    var ret = val.fromNumber(newVal);
    ret.format = val.format;
    return ret;
  }
}

var DateNumber = /*#__PURE__*/function (_RichNumber) {
  _inherits(DateNumber, _RichNumber);

  var _super = _createSuper(DateNumber);

  function DateNumber() {
    _classCallCheck(this, DateNumber);

    return _super.apply(this, arguments);
  }

  _createClass(DateNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_DATE;
    }
  }]);

  return DateNumber;
}(RichNumber);

exports.DateNumber = DateNumber;

var CurrencyNumber = /*#__PURE__*/function (_RichNumber2) {
  _inherits(CurrencyNumber, _RichNumber2);

  var _super2 = _createSuper(CurrencyNumber);

  function CurrencyNumber() {
    _classCallCheck(this, CurrencyNumber);

    return _super2.apply(this, arguments);
  }

  _createClass(CurrencyNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_CURRENCY;
    }
  }]);

  return CurrencyNumber;
}(RichNumber);

exports.CurrencyNumber = CurrencyNumber;

var TimeNumber = /*#__PURE__*/function (_RichNumber3) {
  _inherits(TimeNumber, _RichNumber3);

  var _super3 = _createSuper(TimeNumber);

  function TimeNumber() {
    _classCallCheck(this, TimeNumber);

    return _super3.apply(this, arguments);
  }

  _createClass(TimeNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_TIME;
    }
  }]);

  return TimeNumber;
}(RichNumber);

exports.TimeNumber = TimeNumber;

var DateTimeNumber = /*#__PURE__*/function (_RichNumber4) {
  _inherits(DateTimeNumber, _RichNumber4);

  var _super4 = _createSuper(DateTimeNumber);

  function DateTimeNumber() {
    _classCallCheck(this, DateTimeNumber);

    return _super4.apply(this, arguments);
  }

  _createClass(DateTimeNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_DATETIME;
    }
  }]);

  return DateTimeNumber;
}(RichNumber);

exports.DateTimeNumber = DateTimeNumber;

var PercentNumber = /*#__PURE__*/function (_RichNumber5) {
  _inherits(PercentNumber, _RichNumber5);

  var _super5 = _createSuper(PercentNumber);

  function PercentNumber() {
    _classCallCheck(this, PercentNumber);

    return _super5.apply(this, arguments);
  }

  _createClass(PercentNumber, [{
    key: "getDetailedType",
    value: function getDetailedType() {
      return NumberType.NUMBER_PERCENT;
    }
  }]);

  return PercentNumber;
}(RichNumber);

exports.PercentNumber = PercentNumber;

function isExtendedNumber(val) {
  return typeof val === 'number' || val instanceof RichNumber;
}

var NumberType;
exports.NumberType = NumberType;

(function (NumberType) {
  NumberType["NUMBER_RAW"] = "NUMBER_RAW";
  NumberType["NUMBER_DATE"] = "NUMBER_DATE";
  NumberType["NUMBER_TIME"] = "NUMBER_TIME";
  NumberType["NUMBER_DATETIME"] = "NUMBER_DATETIME";
  NumberType["NUMBER_CURRENCY"] = "NUMBER_CURRENCY";
  NumberType["NUMBER_PERCENT"] = "NUMBER_PERCENT";
})(NumberType || (exports.NumberType = NumberType = {}));

function getTypeOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return num.getDetailedType();
  } else {
    return NumberType.NUMBER_RAW;
  }
}

function getFormatOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return num.format;
  } else {
    return undefined;
  }
}

function getTypeFormatOfExtendedNumber(num) {
  if (num instanceof RichNumber) {
    return {
      type: num.getDetailedType(),
      format: num.format
    };
  } else {
    return {
      type: NumberType.NUMBER_RAW
    };
  }
}

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Statistics = exports.StatType = exports.EmptyStatistics = void 0;

var _EmptyStatistics = __webpack_require__(257);

exports.EmptyStatistics = _EmptyStatistics.EmptyStatistics;

var _Statistics = __webpack_require__(258);

exports.Statistics = _Statistics.Statistics;

var _StatType = __webpack_require__(259);

exports.StatType = _StatType.StatType;

/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.EmptyStatistics = void 0;

__webpack_require__(137);

var _Statistics2 = __webpack_require__(258);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/** Do not store stats in the memory. Stats are not needed on daily basis */
var EmptyStatistics = /*#__PURE__*/function (_Statistics) {
  _inherits(EmptyStatistics, _Statistics);

  var _super = _createSuper(EmptyStatistics);

  function EmptyStatistics() {
    _classCallCheck(this, EmptyStatistics);

    return _super.apply(this, arguments);
  }

  _createClass(EmptyStatistics, [{
    key: "incrementCriterionFunctionFullCacheUsed",
    value:
    /** @inheritDoc */
    function incrementCriterionFunctionFullCacheUsed() {// do nothing
    }
    /** @inheritDoc */

  }, {
    key: "incrementCriterionFunctionPartialCacheUsed",
    value: function incrementCriterionFunctionPartialCacheUsed() {// do nothing
    }
    /** @inheritDoc */

  }, {
    key: "start",
    value: function start(_name) {// do nothing
    }
    /** @inheritDoc */

  }, {
    key: "end",
    value: function end(_name) {// do nothing
    }
  }]);

  return EmptyStatistics;
}(_Statistics2.Statistics);

exports.EmptyStatistics = EmptyStatistics;

/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.Statistics = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

var _StatType = __webpack_require__(259);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Provides tracking performance statistics to the engine
 */
var Statistics = /*#__PURE__*/function () {
  function Statistics() {
    _classCallCheck(this, Statistics);

    this.stats = new Map([[_StatType.StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0], [_StatType.StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0]]);
    this.startTimes = new Map();
  }

  _createClass(Statistics, [{
    key: "incrementCriterionFunctionFullCacheUsed",
    value: function incrementCriterionFunctionFullCacheUsed() {
      var _a;

      var newValue = ((_a = this.stats.get(_StatType.StatType.CRITERION_FUNCTION_FULL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;
      this.stats.set(_StatType.StatType.CRITERION_FUNCTION_FULL_CACHE_USED, newValue);
    }
  }, {
    key: "incrementCriterionFunctionPartialCacheUsed",
    value: function incrementCriterionFunctionPartialCacheUsed() {
      var _a;

      var newValue = ((_a = this.stats.get(_StatType.StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED)) !== null && _a !== void 0 ? _a : 0) + 1;
      this.stats.set(_StatType.StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, newValue);
    }
    /**
     * Resets statistics
     */

  }, {
    key: "reset",
    value: function reset() {
      this.stats.clear();
      this.startTimes.clear();
      this.stats.set(_StatType.StatType.CRITERION_FUNCTION_FULL_CACHE_USED, 0);
      this.stats.set(_StatType.StatType.CRITERION_FUNCTION_PARTIAL_CACHE_USED, 0);
    }
    /**
     * Starts tracking particular statistic.
     *
     * @param name - statistic to start tracking
     */

  }, {
    key: "start",
    value: function start(name) {
      if (this.startTimes.get(name)) {
        throw Error("Statistics ".concat(name, " already started"));
      } else {
        this.startTimes.set(name, Date.now());
      }
    }
    /**
     * Stops tracking particular statistic.
     * Raise error if tracking statistic wasn't started.
     *
     * @param name - statistic to stop tracking
     */

  }, {
    key: "end",
    value: function end(name) {
      var _a;

      var now = Date.now();
      var startTime = this.startTimes.get(name);

      if (startTime) {
        var values = (_a = this.stats.get(name)) !== null && _a !== void 0 ? _a : 0;
        values += now - startTime;
        this.stats.set(name, values);
        this.startTimes.delete(name);
      } else {
        throw Error("Statistics ".concat(name, " not started"));
      }
    }
    /**
     * Measure given statistic as execution of given function.
     *
     * @param name - statistic to track
     * @param func - function to call
     * @returns result of the function call
     */

  }, {
    key: "measure",
    value: function measure(name, func) {
      this.start(name);
      var result = func();
      this.end(name);
      return result;
    }
    /**
     * Returns the snapshot of current results
     */

  }, {
    key: "snapshot",
    value: function snapshot() {
      return new Map(this.stats);
    }
  }]);

  return Statistics;
}();

exports.Statistics = Statistics;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.StatType = void 0;

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var StatType;
exports.StatType = StatType;

(function (StatType) {
  /* build engine */
  StatType["BUILD_ENGINE_TOTAL"] = "BUILD_ENGINE_TOTAL";
  StatType["PARSER"] = "PARSER";
  StatType["GRAPH_BUILD"] = "GRAPH_BUILD";
  StatType["COLLECT_DEPENDENCIES"] = "COLLECT_DEPENDENCIES";
  StatType["PROCESS_DEPENDENCIES"] = "PROCESS_DEPENDENCIES";
  StatType["TOP_SORT"] = "TOP_SORT";
  StatType["BUILD_COLUMN_INDEX"] = "BUILD_COLUMN_INDEX";
  StatType["EVALUATION"] = "EVALUATION";
  StatType["VLOOKUP"] = "VLOOKUP";
  /* crud adjustments */

  StatType["TRANSFORM_ASTS"] = "TRANSFORM_ASTS";
  StatType["TRANSFORM_ASTS_POSTPONED"] = "TRANSFORM_ASTS_POSTPONED";
  StatType["ADJUSTING_ADDRESS_MAPPING"] = "ADJUSTING_ADDRESS_MAPPING";
  StatType["ADJUSTING_ARRAY_MAPPING"] = "ADJUSTING_ARRAY_MAPPING";
  StatType["ADJUSTING_RANGES"] = "ADJUSTING_RANGES";
  StatType["ADJUSTING_GRAPH"] = "ADJUSTING_GRAPH";
  /* criterion cache */

  StatType["CRITERION_FUNCTION_FULL_CACHE_USED"] = "CRITERION_FUNCTION_FULL_CACHE_USED";
  StatType["CRITERION_FUNCTION_PARTIAL_CACHE_USED"] = "CRITERION_FUNCTION_PARTIAL_CACHE_USED";
})(StatType || (exports.StatType = StatType = {}));

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.AddressMapping = void 0;

__webpack_require__(149);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(261);

var _errors = __webpack_require__(165);

var _InterpreterValue = __webpack_require__(255);

var _index = __webpack_require__(147);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var AddressMapping = /*#__PURE__*/function () {
  function AddressMapping(policy) {
    _classCallCheck(this, AddressMapping);

    this.policy = policy;
    this.mapping = new Map();
  }
  /** @inheritDoc */


  _createClass(AddressMapping, [{
    key: "getCell",
    value: function getCell(address) {
      var sheetMapping = this.mapping.get(address.sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(address.sheet);
      }

      return sheetMapping.getCell(address);
    }
  }, {
    key: "fetchCell",
    value: function fetchCell(address) {
      var sheetMapping = this.mapping.get(address.sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(address.sheet);
      }

      var vertex = sheetMapping.getCell(address);

      if (!vertex) {
        throw Error('Vertex for address missing in AddressMapping');
      }

      return vertex;
    }
  }, {
    key: "strategyFor",
    value: function strategyFor(sheetId) {
      var strategy = this.mapping.get(sheetId);

      if (strategy === undefined) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      return strategy;
    }
  }, {
    key: "addSheet",
    value: function addSheet(sheetId, strategy) {
      if (this.mapping.has(sheetId)) {
        throw Error('Sheet already added');
      }

      this.mapping.set(sheetId, strategy);
    }
  }, {
    key: "autoAddSheet",
    value: function autoAddSheet(sheetId, sheet, sheetBoundaries) {
      var height = sheetBoundaries.height,
          width = sheetBoundaries.width,
          fill = sheetBoundaries.fill;
      var strategyConstructor = this.policy.call(fill);
      this.addSheet(sheetId, new strategyConstructor(width, height));
    }
  }, {
    key: "getCellValue",
    value: function getCellValue(address) {
      var vertex = this.getCell(address);

      if (vertex === undefined) {
        return _InterpreterValue.EmptyValue;
      } else if (vertex instanceof _index.ArrayVertex) {
        return vertex.getArrayCellValue(address);
      } else {
        return vertex.getCellValue();
      }
    }
  }, {
    key: "getRawValue",
    value: function getRawValue(address) {
      var vertex = this.getCell(address);

      if (vertex instanceof _index.ValueCellVertex) {
        return vertex.getValues().rawValue;
      } else if (vertex instanceof _index.ArrayVertex) {
        return vertex.getArrayCellRawValue(address);
      } else {
        return null;
      }
    }
    /** @inheritDoc */

  }, {
    key: "setCell",
    value: function setCell(address, newVertex) {
      var sheetMapping = this.mapping.get(address.sheet);

      if (!sheetMapping) {
        throw Error('Sheet not initialized');
      }

      sheetMapping.setCell(address, newVertex);
    }
  }, {
    key: "moveCell",
    value: function moveCell(source, destination) {
      var sheetMapping = this.mapping.get(source.sheet);

      if (!sheetMapping) {
        throw Error('Sheet not initialized.');
      }

      if (source.sheet !== destination.sheet) {
        throw Error('Cannot move cells between sheets.');
      }

      if (sheetMapping.has(destination)) {
        throw new Error('Cannot move cell. Destination already occupied.');
      }

      var vertex = sheetMapping.getCell(source);

      if (vertex === undefined) {
        throw new Error('Cannot move cell. No cell with such address.');
      }

      this.setCell(destination, vertex);
      this.removeCell(source);
    }
  }, {
    key: "removeCell",
    value: function removeCell(address) {
      var sheetMapping = this.mapping.get(address.sheet);

      if (!sheetMapping) {
        throw Error('Sheet not initialized');
      }

      sheetMapping.removeCell(address);
    }
    /** @inheritDoc */

  }, {
    key: "has",
    value: function has(address) {
      var sheetMapping = this.mapping.get(address.sheet);

      if (sheetMapping === undefined) {
        return false;
      }

      return sheetMapping.has(address);
    }
    /** @inheritDoc */

  }, {
    key: "getHeight",
    value: function getHeight(sheetId) {
      var sheetMapping = this.mapping.get(sheetId);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      return sheetMapping.getHeight();
    }
    /** @inheritDoc */

  }, {
    key: "getWidth",
    value: function getWidth(sheetId) {
      var sheetMapping = this.mapping.get(sheetId);

      if (!sheetMapping) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      return sheetMapping.getWidth();
    }
  }, {
    key: "addRows",
    value: function addRows(sheet, row, numberOfRows) {
      var sheetMapping = this.mapping.get(sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(sheet);
      }

      sheetMapping.addRows(row, numberOfRows);
    }
  }, {
    key: "removeRows",
    value: function removeRows(removedRows) {
      var sheetMapping = this.mapping.get(removedRows.sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(removedRows.sheet);
      }

      sheetMapping.removeRows(removedRows);
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      this.mapping.delete(sheetId);
    }
  }, {
    key: "addColumns",
    value: function addColumns(sheet, column, numberOfColumns) {
      var sheetMapping = this.mapping.get(sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(sheet);
      }

      sheetMapping.addColumns(column, numberOfColumns);
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(removedColumns) {
      var sheetMapping = this.mapping.get(removedColumns.sheet);

      if (sheetMapping === undefined) {
        throw new _errors.NoSheetWithIdError(removedColumns.sheet);
      }

      sheetMapping.removeColumns(removedColumns);
    }
  }, {
    key: "verticesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRowsSpan(rowsSpan) {
      return regeneratorRuntime.wrap(function verticesFromRowsSpan$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.mapping.get(rowsSpan.sheet).verticesFromRowsSpan(rowsSpan), "t0", 1);

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, verticesFromRowsSpan, this);
    })
  }, {
    key: "verticesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromColumnsSpan(columnsSpan) {
      return regeneratorRuntime.wrap(function verticesFromColumnsSpan$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.delegateYield(this.mapping.get(columnsSpan.sheet).verticesFromColumnsSpan(columnsSpan), "t0", 1);

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, verticesFromColumnsSpan, this);
    })
  }, {
    key: "entriesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {
      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.delegateYield(this.mapping.get(rowsSpan.sheet).entriesFromRowsSpan(rowsSpan), "t0", 1);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, entriesFromRowsSpan, this);
    })
  }, {
    key: "entriesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {
      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.delegateYield(this.mapping.get(columnsSpan.sheet).entriesFromColumnsSpan(columnsSpan), "t0", 1);

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, entriesFromColumnsSpan, this);
    })
  }, {
    key: "entries",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entries() {
      var _iterator, _step, _step$value, sheet, mapping;

      return regeneratorRuntime.wrap(function entries$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.mapping.entries());
              _context5.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context5.next = 8;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), sheet = _step$value[0], mapping = _step$value[1];
              return _context5.delegateYield(mapping.getEntries(sheet), "t0", 6);

            case 6:
              _context5.next = 3;
              break;

            case 8:
              _context5.next = 13;
              break;

            case 10:
              _context5.prev = 10;
              _context5.t1 = _context5["catch"](1);

              _iterator.e(_context5.t1);

            case 13:
              _context5.prev = 13;

              _iterator.f();

              return _context5.finish(13);

            case 16:
            case "end":
              return _context5.stop();
          }
        }
      }, entries, this, [[1, 10, 13, 16]]);
    })
  }, {
    key: "sheetEntries",
    value: /*#__PURE__*/regeneratorRuntime.mark(function sheetEntries(sheet) {
      var sheetMapping;
      return regeneratorRuntime.wrap(function sheetEntries$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              sheetMapping = this.mapping.get(sheet);

              if (!(sheetMapping !== undefined)) {
                _context6.next = 5;
                break;
              }

              return _context6.delegateYield(sheetMapping.getEntries(sheet), "t0", 3);

            case 3:
              _context6.next = 6;
              break;

            case 5:
              throw new _errors.NoSheetWithIdError(sheet);

            case 6:
            case "end":
              return _context6.stop();
          }
        }
      }, sheetEntries, this);
    })
  }]);

  return AddressMapping;
}();

exports.AddressMapping = AddressMapping;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var fill = __webpack_require__(262);
var addToUnscopables = __webpack_require__(121);

// `Array.prototype.fill` method
// https://tc39.es/ecma262/#sec-array.prototype.fill
$({ target: 'Array', proto: true }, {
  fill: fill
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('fill');


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var toObject = __webpack_require__(12);
var toAbsoluteIndex = __webpack_require__(61);
var lengthOfArrayLike = __webpack_require__(63);

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
module.exports = function fill(value /* , start = 0, end = @length */) {
  var O = toObject(this);
  var length = lengthOfArrayLike(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.ArrayMapping = void 0;

__webpack_require__(149);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(154);

var _Cell = __webpack_require__(143);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ArrayMapping = /*#__PURE__*/function () {
  function ArrayMapping() {
    _classCallCheck(this, ArrayMapping);

    this.arrayMapping = new Map();
  }

  _createClass(ArrayMapping, [{
    key: "getArray",
    value: function getArray(range) {
      var array = this.getArrayByCorner(range.start);

      if (array === null || array === void 0 ? void 0 : array.getRange().sameAs(range)) {
        return array;
      }

      return;
    }
  }, {
    key: "getArrayByCorner",
    value: function getArrayByCorner(address) {
      return this.arrayMapping.get((0, _Cell.addressKey)(address));
    }
  }, {
    key: "setArray",
    value: function setArray(range, vertex) {
      this.arrayMapping.set((0, _Cell.addressKey)(range.start), vertex);
    }
  }, {
    key: "removeArray",
    value: function removeArray(range) {
      if (typeof range === 'string') {
        this.arrayMapping.delete(range);
      } else {
        this.arrayMapping.delete((0, _Cell.addressKey)(range.start));
      }
    }
  }, {
    key: "count",
    value: function count() {
      return this.arrayMapping.size;
    }
  }, {
    key: "arraysInRows",
    value: /*#__PURE__*/regeneratorRuntime.mark(function arraysInRows(rowsSpan) {
      var _iterator, _step, _step$value, mtxKey, mtx;

      return regeneratorRuntime.wrap(function arraysInRows$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.arrayMapping.entries());
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 10;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), mtxKey = _step$value[0], mtx = _step$value[1];

              if (!mtx.spansThroughSheetRows(rowsSpan.sheet, rowsSpan.rowStart, rowsSpan.rowEnd)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [mtxKey, mtx];

            case 8:
              _context.next = 3;
              break;

            case 10:
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);

              _iterator.e(_context.t0);

            case 15:
              _context.prev = 15;

              _iterator.f();

              return _context.finish(15);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, arraysInRows, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "arraysInCols",
    value: /*#__PURE__*/regeneratorRuntime.mark(function arraysInCols(col) {
      var _iterator2, _step2, _step2$value, mtxKey, mtx;

      return regeneratorRuntime.wrap(function arraysInCols$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(this.arrayMapping.entries());
              _context2.prev = 1;

              _iterator2.s();

            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 10;
                break;
              }

              _step2$value = _slicedToArray(_step2.value, 2), mtxKey = _step2$value[0], mtx = _step2$value[1];

              if (!mtx.spansThroughSheetColumn(col.sheet, col.columnStart, col.columnEnd)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 8;
              return [mtxKey, mtx];

            case 8:
              _context2.next = 3;
              break;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);

              _iterator2.e(_context2.t0);

            case 15:
              _context2.prev = 15;

              _iterator2.f();

              return _context2.finish(15);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, arraysInCols, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "isFormulaArrayInRow",
    value: function isFormulaArrayInRow(sheet, row) {
      var _iterator3 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var mtx = _step3.value;

          if (mtx.spansThroughSheetRows(sheet, row)) {
            return true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayInAllRows",
    value: function isFormulaArrayInAllRows(span) {
      var result = true;

      var _iterator4 = _createForOfIteratorHelper(span.rows()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var row = _step4.value;

          if (!this.isFormulaArrayInRow(span.sheet, row)) {
            result = false;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return result;
    }
  }, {
    key: "isFormulaArrayInColumn",
    value: function isFormulaArrayInColumn(sheet, column) {
      var _iterator5 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var mtx = _step5.value;

          if (mtx.spansThroughSheetColumn(sheet, column)) {
            return true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayInAllColumns",
    value: function isFormulaArrayInAllColumns(span) {
      var result = true;

      var _iterator6 = _createForOfIteratorHelper(span.columns()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var col = _step6.value;

          if (!this.isFormulaArrayInColumn(span.sheet, col)) {
            result = false;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return result;
    }
  }, {
    key: "isFormulaArrayInRange",
    value: function isFormulaArrayInRange(range) {
      var _iterator7 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var mtx = _step7.value;

          if (mtx.getRange().doesOverlap(range)) {
            return true;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayAtAddress",
    value: function isFormulaArrayAtAddress(address) {
      var _iterator8 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var mtx = _step8.value;

          if (mtx.getRange().addressInRange(address)) {
            return true;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return false;
    }
  }, {
    key: "moveArrayVerticesAfterRowByRows",
    value: function moveArrayVerticesAfterRowByRows(sheet, row, numberOfRows) {
      this.updateArrayVerticesInSheet(sheet, function (key, vertex) {
        var range = vertex.getRange();
        return row <= range.start.row ? [range.shifted(0, numberOfRows), vertex] : undefined;
      });
    }
  }, {
    key: "moveArrayVerticesAfterColumnByColumns",
    value: function moveArrayVerticesAfterColumnByColumns(sheet, column, numberOfColumns) {
      this.updateArrayVerticesInSheet(sheet, function (key, vertex) {
        var range = vertex.getRange();
        return column <= range.start.col ? [range.shifted(numberOfColumns, 0), vertex] : undefined;
      });
    }
  }, {
    key: "updateArrayVerticesInSheet",
    value: function updateArrayVerticesInSheet(sheet, fn) {
      var _this = this;

      var updated = Array();

      var _iterator9 = _createForOfIteratorHelper(this.arrayMapping.entries()),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 2),
              key = _step9$value[0],
              vertex = _step9$value[1];

          if (vertex.sheet !== sheet) {
            continue;
          }

          var result = fn(key, vertex);

          if (result !== undefined) {
            this.removeArray(key);
            updated.push(result);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      updated.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            range = _ref2[0],
            array = _ref2[1];

        _this.setArray(range, array);
      });
    }
  }]);

  return ArrayMapping;
}();

exports.ArrayMapping = ArrayMapping;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.collectAddressesDependentToRange = void 0;

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(157);

__webpack_require__(1);

__webpack_require__(150);

var _parser = __webpack_require__(169);

var _FormulaCellVertex = __webpack_require__(265);

var _RangeVertex = __webpack_require__(268);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var collectAddressesDependentToRange = function collectAddressesDependentToRange(funcitonRegistry, vertex, range, lazilyTransformingAstService, dependencyGraph) {
  if (vertex instanceof _RangeVertex.RangeVertex) {
    var intersection = vertex.range.intersectionWith(range);

    if (intersection !== undefined) {
      return Array.from(intersection.addresses(dependencyGraph));
    } else {
      return [];
    }
  }

  var formula;
  var address;

  if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
    formula = vertex.getFormula(lazilyTransformingAstService);
    address = vertex.getAddress(lazilyTransformingAstService);
  } else {
    return [];
  }

  return (0, _parser.collectDependencies)(formula, funcitonRegistry).filter(function (d) {
    return d instanceof _parser.AddressDependency;
  }).map(function (d) {
    return d.dependency.toSimpleCellAddress(address);
  }).filter(function (d) {
    return range.addressInRange(d);
  });
};

exports.collectAddressesDependentToRange = collectAddressesDependentToRange;

/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(137);

__webpack_require__(50);

exports.__esModule = true;
exports.FormulaVertex = exports.FormulaCellVertex = exports.ArrayVertex = void 0;

var _AbsoluteCellRange = __webpack_require__(158);

var _ArraySize = __webpack_require__(246);

var _ArrayValue = __webpack_require__(266);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _Span = __webpack_require__(242);

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var FormulaVertex = /*#__PURE__*/function () {
  function FormulaVertex(formula, cellAddress, version) {
    _classCallCheck(this, FormulaVertex);

    this.formula = formula;
    this.cellAddress = cellAddress;
    this.version = version;
  }

  _createClass(FormulaVertex, [{
    key: "width",
    get: function get() {
      return 1;
    }
  }, {
    key: "height",
    get: function get() {
      return 1;
    }
  }, {
    key: "getFormula",
    value:
    /**
     * Returns formula stored in this vertex
     */
    function getFormula(updatingService) {
      this.ensureRecentData(updatingService);
      return this.formula;
    }
  }, {
    key: "ensureRecentData",
    value: function ensureRecentData(updatingService) {
      if (this.version != updatingService.version()) {
        var _updatingService$appl = updatingService.applyTransformations(this.formula, this.cellAddress, this.version),
            _updatingService$appl2 = _slicedToArray(_updatingService$appl, 3),
            newAst = _updatingService$appl2[0],
            newAddress = _updatingService$appl2[1],
            newVersion = _updatingService$appl2[2];

        this.formula = newAst;
        this.cellAddress = newAddress;
        this.version = newVersion;
      }
    }
    /**
     * Returns address of the cell associated with vertex
     */

  }, {
    key: "getAddress",
    value: function getAddress(updatingService) {
      this.ensureRecentData(updatingService);
      return this.cellAddress;
    }
  }], [{
    key: "fromAst",
    value: function fromAst(formula, address, size, version) {
      if (size.isScalar()) {
        return new FormulaCellVertex(formula, address, version);
      } else {
        return new ArrayVertex(formula, address, size, version);
      }
    }
  }]);

  return FormulaVertex;
}();

exports.FormulaVertex = FormulaVertex;

var ArrayVertex = /*#__PURE__*/function (_FormulaVertex) {
  _inherits(ArrayVertex, _FormulaVertex);

  var _super = _createSuper(ArrayVertex);

  function ArrayVertex(formula, cellAddress, size) {
    var _this;

    var version = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    _classCallCheck(this, ArrayVertex);

    _this = _super.call(this, formula, cellAddress, version);

    if (size.isRef) {
      _this.array = new _ArrayValue.ErroredArray(new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.NoSpaceForArrayResult), _ArraySize.ArraySize.error());
    } else {
      _this.array = new _ArrayValue.NotComputedArray(size);
    }

    return _this;
  }

  _createClass(ArrayVertex, [{
    key: "width",
    get: function get() {
      return this.array.width();
    }
  }, {
    key: "height",
    get: function get() {
      return this.array.height();
    }
  }, {
    key: "sheet",
    get: function get() {
      return this.cellAddress.sheet;
    }
  }, {
    key: "leftCorner",
    get: function get() {
      return this.cellAddress;
    }
  }, {
    key: "setCellValue",
    value: function setCellValue(value) {
      if (value instanceof _Cell.CellError) {
        this.setErrorValue(value);
        return value;
      }

      var array = _ArrayValue.ArrayValue.fromInterpreterValue(value);

      array.resize(this.array.size);
      this.array = array;
      return value;
    }
  }, {
    key: "getCellValue",
    value: function getCellValue() {
      if (this.array instanceof _ArrayValue.NotComputedArray) {
        throw Error('Array not computed yet.');
      }

      return this.array.simpleRangeValue();
    }
  }, {
    key: "valueOrUndef",
    value: function valueOrUndef() {
      if (this.array instanceof _ArrayValue.NotComputedArray) {
        return undefined;
      }

      return this.array.simpleRangeValue();
    }
  }, {
    key: "getArrayCellValue",
    value: function getArrayCellValue(address) {
      var col = address.col - this.cellAddress.col;
      var row = address.row - this.cellAddress.row;

      try {
        return this.array.get(col, row);
      } catch (e) {
        return new _Cell.CellError(_Cell.ErrorType.REF);
      }
    }
  }, {
    key: "getArrayCellRawValue",
    value: function getArrayCellRawValue(address) {
      var val = this.getArrayCellValue(address);

      if (val instanceof _Cell.CellError || val === _InterpreterValue.EmptyValue) {
        return undefined;
      } else {
        return (0, _InterpreterValue.getRawValue)(val);
      }
    }
  }, {
    key: "setArrayCellValue",
    value: function setArrayCellValue(address, value) {
      var col = address.col - this.cellAddress.col;
      var row = address.row - this.cellAddress.row;

      if (this.array instanceof _ArrayValue.ArrayValue) {
        this.array.set(col, row, value);
      }
    }
  }, {
    key: "setNoSpace",
    value: function setNoSpace() {
      this.array = new _ArrayValue.ErroredArray(new _Cell.CellError(_Cell.ErrorType.SPILL, _errorMessage.ErrorMessage.NoSpaceForArrayResult), _ArraySize.ArraySize.error());
      return this.getCellValue();
    }
  }, {
    key: "getRange",
    value: function getRange() {
      return _AbsoluteCellRange.AbsoluteCellRange.spanFrom(this.cellAddress, this.width, this.height);
    }
  }, {
    key: "getRangeOrUndef",
    value: function getRangeOrUndef() {
      return _AbsoluteCellRange.AbsoluteCellRange.spanFromOrUndef(this.cellAddress, this.width, this.height);
    }
  }, {
    key: "setAddress",
    value: function setAddress(address) {
      this.cellAddress = address;
    }
  }, {
    key: "setFormula",
    value: function setFormula(newFormula) {
      this.formula = newFormula;
    }
  }, {
    key: "spansThroughSheetRows",
    value: function spansThroughSheetRows(sheet, startRow) {
      var endRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : startRow;
      return this.cellAddress.sheet === sheet && this.cellAddress.row <= endRow && startRow < this.cellAddress.row + this.height;
    }
  }, {
    key: "spansThroughSheetColumn",
    value: function spansThroughSheetColumn(sheet, col) {
      var columnEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : col;
      return this.cellAddress.sheet === sheet && this.cellAddress.col <= columnEnd && col < this.cellAddress.col + this.width;
    }
  }, {
    key: "isComputed",
    value: function isComputed() {
      return !(this.array instanceof _ArrayValue.NotComputedArray);
    }
  }, {
    key: "columnsFromArray",
    value: function columnsFromArray() {
      return _Span.ColumnsSpan.fromNumberOfColumns(this.cellAddress.sheet, this.cellAddress.col, this.width);
    }
  }, {
    key: "rowsFromArray",
    value: function rowsFromArray() {
      return _Span.RowsSpan.fromNumberOfRows(this.cellAddress.sheet, this.cellAddress.row, this.height);
    }
    /**
     * No-op as array vertices are transformed eagerly.
     * */

  }, {
    key: "ensureRecentData",
    value: function ensureRecentData(_updatingService) {}
  }, {
    key: "isLeftCorner",
    value: function isLeftCorner(address) {
      return (0, _Cell.equalSimpleCellAddress)(this.cellAddress, address);
    }
  }, {
    key: "setErrorValue",
    value: function setErrorValue(error) {
      this.array = new _ArrayValue.ErroredArray(error, this.array.size);
    }
  }]);

  return ArrayVertex;
}(FormulaVertex);
/**
 * Represents vertex which keeps formula
 */


exports.ArrayVertex = ArrayVertex;

var FormulaCellVertex = /*#__PURE__*/function (_FormulaVertex2) {
  _inherits(FormulaCellVertex, _FormulaVertex2);

  var _super2 = _createSuper(FormulaCellVertex);

  function FormulaCellVertex(
  /** Formula in AST format */
  formula,
  /** Address which this vertex represents */
  address, version) {
    _classCallCheck(this, FormulaCellVertex);

    return _super2.call(this, formula, address, version);
  }

  _createClass(FormulaCellVertex, [{
    key: "valueOrUndef",
    value: function valueOrUndef() {
      return this.cachedCellValue;
    }
    /**
     * Sets computed cell value stored in this vertex
     */

  }, {
    key: "setCellValue",
    value: function setCellValue(cellValue) {
      this.cachedCellValue = cellValue;
      return this.cachedCellValue;
    }
    /**
     * Returns cell value stored in vertex
     */

  }, {
    key: "getCellValue",
    value: function getCellValue() {
      if (this.cachedCellValue !== undefined) {
        return this.cachedCellValue;
      } else {
        throw Error('Value of the formula cell is not computed.');
      }
    }
  }, {
    key: "isComputed",
    value: function isComputed() {
      return this.cachedCellValue !== undefined;
    }
  }]);

  return FormulaCellVertex;
}(FormulaVertex);

exports.FormulaCellVertex = FormulaCellVertex;

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(82);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

exports.__esModule = true;
exports.NotComputedArray = exports.ErroredArray = exports.ArrayValue = void 0;

__webpack_require__(267);

__webpack_require__(146);

__webpack_require__(261);

var _ArraySize = __webpack_require__(246);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var NotComputedArray = /*#__PURE__*/function () {
  function NotComputedArray(size) {
    _classCallCheck(this, NotComputedArray);

    this.size = size;
  }

  _createClass(NotComputedArray, [{
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "get",
    value: function get(col, row) {
      throw Error('Array not computed yet.');
    }
  }, {
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      throw Error('Array not computed yet.');
    }
  }]);

  return NotComputedArray;
}();

exports.NotComputedArray = NotComputedArray;

var ArrayValue = /*#__PURE__*/function () {
  function ArrayValue(array) {
    _classCallCheck(this, ArrayValue);

    this.size = new _ArraySize.ArraySize(array.length > 0 ? array[0].length : 0, array.length);
    this.array = array;
  }

  _createClass(ArrayValue, [{
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      return _SimpleRangeValue.SimpleRangeValue.onlyValues(this.array);
    }
  }, {
    key: "addRows",
    value: function addRows(aboveRow, numberOfRows) {
      var _this$array;

      (_this$array = this.array).splice.apply(_this$array, [aboveRow, 0].concat(_toConsumableArray(this.nullArrays(numberOfRows, this.width()))));

      this.size.height += numberOfRows;
    }
  }, {
    key: "addColumns",
    value: function addColumns(aboveColumn, numberOfColumns) {
      for (var i = 0; i < this.height(); i++) {
        var _this$array$i;

        (_this$array$i = this.array[i]).splice.apply(_this$array$i, [aboveColumn, 0].concat(_toConsumableArray(new Array(numberOfColumns).fill(_InterpreterValue.EmptyValue))));
      }

      this.size.width += numberOfColumns;
    }
  }, {
    key: "removeRows",
    value: function removeRows(startRow, endRow) {
      if (this.outOfBound(0, startRow) || this.outOfBound(0, endRow)) {
        throw Error('Array index out of bound');
      }

      var numberOfRows = endRow - startRow + 1;
      this.array.splice(startRow, numberOfRows);
      this.size.height -= numberOfRows;
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(leftmostColumn, rightmostColumn) {
      if (this.outOfBound(leftmostColumn, 0) || this.outOfBound(rightmostColumn, 0)) {
        throw Error('Array index out of bound');
      }

      var numberOfColumns = rightmostColumn - leftmostColumn + 1;

      var _iterator = _createForOfIteratorHelper(this.array),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var row = _step.value;
          row.splice(leftmostColumn, numberOfColumns);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.size.width -= numberOfColumns;
    }
  }, {
    key: "nullArrays",
    value: function nullArrays(count, size) {
      var result = [];

      for (var i = 0; i < count; ++i) {
        result.push(new Array(size).fill(_InterpreterValue.EmptyValue));
      }

      return result;
    }
  }, {
    key: "get",
    value: function get(col, row) {
      if (this.outOfBound(col, row)) {
        throw Error('Array index out of bound');
      }

      return this.array[row][col];
    }
  }, {
    key: "set",
    value: function set(col, row, value) {
      if (this.outOfBound(col, row)) {
        throw Error('Array index out of bound');
      }

      this.array[row][col] = value;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    }
  }, {
    key: "raw",
    value: function raw() {
      return this.array;
    }
  }, {
    key: "resize",
    value: function resize(newSize) {
      if (this.height() < newSize.height && isFinite(newSize.height)) {
        this.addRows(this.height(), newSize.height - this.height());
      }

      if (this.height() > newSize.height) {
        throw 'Resizing to smaller array';
      }

      if (this.width() < newSize.width && isFinite(newSize.width)) {
        this.addColumns(this.width(), newSize.width - this.width());
      }

      if (this.width() > newSize.width) {
        throw 'Resizing to smaller array';
      }
    }
  }, {
    key: "outOfBound",
    value: function outOfBound(col, row) {
      return col < 0 || row < 0 || row > this.size.height - 1 || col > this.size.width - 1;
    }
  }], [{
    key: "fromInterpreterValue",
    value: function fromInterpreterValue(value) {
      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return new ArrayValue(value.data);
      } else {
        return new ArrayValue([[value]]);
      }
    }
  }]);

  return ArrayValue;
}();

exports.ArrayValue = ArrayValue;

var ErroredArray = /*#__PURE__*/function () {
  function ErroredArray(error, size) {
    _classCallCheck(this, ErroredArray);

    this.error = error;
    this.size = size;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  _createClass(ErroredArray, [{
    key: "get",
    value: function get(col, row) {
      return this.error;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    }
  }, {
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      return this.error;
    }
  }]);

  return ErroredArray;
}();

exports.ErroredArray = ErroredArray;

/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var toAbsoluteIndex = __webpack_require__(61);
var toIntegerOrInfinity = __webpack_require__(62);
var lengthOfArrayLike = __webpack_require__(63);
var toObject = __webpack_require__(12);
var arraySpeciesCreate = __webpack_require__(116);
var createProperty = __webpack_require__(79);
var arrayMethodHasSpeciesSupport = __webpack_require__(80);

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');

var TypeError = global.TypeError;
var max = Math.max;
var min = Math.min;
var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded';

// `Array.prototype.splice` method
// https://tc39.es/ecma262/#sec-array.prototype.splice
// with adding support of @@species
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  splice: function splice(start, deleteCount /* , ...items */) {
    var O = toObject(this);
    var len = lengthOfArrayLike(O);
    var actualStart = toAbsoluteIndex(start, len);
    var argumentsLength = arguments.length;
    var insertCount, actualDeleteCount, A, k, from, to;
    if (argumentsLength === 0) {
      insertCount = actualDeleteCount = 0;
    } else if (argumentsLength === 1) {
      insertCount = 0;
      actualDeleteCount = len - actualStart;
    } else {
      insertCount = argumentsLength - 2;
      actualDeleteCount = min(max(toIntegerOrInfinity(deleteCount), 0), len - actualStart);
    }
    if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
      throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
    }
    A = arraySpeciesCreate(O, actualDeleteCount);
    for (k = 0; k < actualDeleteCount; k++) {
      from = actualStart + k;
      if (from in O) createProperty(A, k, O[from]);
    }
    A.length = actualDeleteCount;
    if (insertCount < actualDeleteCount) {
      for (k = actualStart; k < len - actualDeleteCount; k++) {
        from = k + actualDeleteCount;
        to = k + insertCount;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
      for (k = len; k > len - actualDeleteCount + insertCount; k--) delete O[k - 1];
    } else if (insertCount > actualDeleteCount) {
      for (k = len - actualDeleteCount; k > actualStart; k--) {
        from = k + actualDeleteCount - 1;
        to = k + insertCount - 1;
        if (from in O) O[to] = O[from];
        else delete O[to];
      }
    }
    for (k = 0; k < insertCount; k++) {
      O[k + actualStart] = arguments[k + 2];
    }
    O.length = len - actualDeleteCount + insertCount;
    return A;
  }
});


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.RangeVertex = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(151);

__webpack_require__(154);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/**
 * Represents vertex bound to range
 */
var RangeVertex = /*#__PURE__*/function () {
  function RangeVertex(range) {
    _classCallCheck(this, RangeVertex);

    this.range = range;
    this.functionCache = new Map();
    this.criterionFunctionCache = new Map();
    this.dependentCacheRanges = new Set();
    this.bruteForce = false;
  }

  _createClass(RangeVertex, [{
    key: "start",
    get: function get() {
      return this.range.start;
    }
  }, {
    key: "end",
    get: function get() {
      return this.range.end;
    }
  }, {
    key: "sheet",
    get: function get() {
      return this.range.start.sheet;
    }
    /**
     * Returns cached value stored for given function
     *
     * @param functionName - name of the function
     */

  }, {
    key: "getFunctionValue",
    value: function getFunctionValue(functionName) {
      return this.functionCache.get(functionName);
    }
    /**
     * Stores cached value for given function
     *
     * @param functionName - name of the function
     * @param value - cached value
     */

  }, {
    key: "setFunctionValue",
    value: function setFunctionValue(functionName, value) {
      this.functionCache.set(functionName, value);
    }
    /**
     * Returns cached value for given cache key and criterion text representation
     *
     * @param cacheKey - key to retrieve from the cache
     * @param criterionString - criterion text (ex. '<=5')
     */

  }, {
    key: "getCriterionFunctionValue",
    value: function getCriterionFunctionValue(cacheKey, criterionString) {
      var _a;

      return (_a = this.getCriterionFunctionValues(cacheKey).get(criterionString)) === null || _a === void 0 ? void 0 : _a[0];
    }
    /**
     * Returns all cached values stored for given criterion function
     *
     * @param cacheKey - key to retrieve from the cache
     */

  }, {
    key: "getCriterionFunctionValues",
    value: function getCriterionFunctionValues(cacheKey) {
      var _a;

      return (_a = this.criterionFunctionCache.get(cacheKey)) !== null && _a !== void 0 ? _a : new Map();
    }
    /**
     * Stores all values for given criterion function
     *
     * @param cacheKey - key to store in the cache
     * @param values - map with values
     */

  }, {
    key: "setCriterionFunctionValues",
    value: function setCriterionFunctionValues(cacheKey, values) {
      this.criterionFunctionCache.set(cacheKey, values);
    }
  }, {
    key: "addDependentCacheRange",
    value: function addDependentCacheRange(dependentRange) {
      if (dependentRange !== this) {
        this.dependentCacheRanges.add(dependentRange);
      }
    }
    /**
     * Clears function cache
     */

  }, {
    key: "clearCache",
    value: function clearCache() {
      this.functionCache.clear();
      this.criterionFunctionCache.clear();
      this.dependentCacheRanges.forEach(function (range) {
        return range.criterionFunctionCache.clear();
      });
      this.dependentCacheRanges.clear();
    }
    /**
     * Returns start of the range (it's top-left corner)
     */

  }, {
    key: "getStart",
    value: function getStart() {
      return this.start;
    }
    /**
     * Returns end of the range (it's bottom-right corner)
     */

  }, {
    key: "getEnd",
    value: function getEnd() {
      return this.end;
    }
  }]);

  return RangeVertex;
}();

exports.RangeVertex = RangeVertex;

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.Graph = void 0;

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(151);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(166);

__webpack_require__(154);

__webpack_require__(82);

__webpack_require__(270);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var NodeVisitStatus;

(function (NodeVisitStatus) {
  NodeVisitStatus[NodeVisitStatus["ON_STACK"] = 0] = "ON_STACK";
  NodeVisitStatus[NodeVisitStatus["PROCESSED"] = 1] = "PROCESSED";
  NodeVisitStatus[NodeVisitStatus["POPPED"] = 2] = "POPPED";
})(NodeVisitStatus || (NodeVisitStatus = {}));
/**
 * Provides graph directed structure
 *
 * Invariants:
 * - this.edges(node) exists if and only if node is in the graph
 * - this.specialNodes* are always subset of this.nodes
 * - this.edges(node) is subset of this.nodes (i.e. it does not contain nodes not present in graph) -- this invariant DOES NOT HOLD right now
 */


var Graph = /*#__PURE__*/function () {
  function Graph(dependencyQuery) {
    _classCallCheck(this, Graph);

    this.dependencyQuery = dependencyQuery;
    /** Set with nodes in graph. */

    this.nodes = new Set();
    this.specialNodes = new Set();
    this.specialNodesStructuralChanges = new Set();
    this.specialNodesRecentlyChanged = new Set();
    this.infiniteRanges = new Set();
    /** Nodes adjacency mapping. */

    this.edges = new Map();
  }
  /**
   * Adds node to a graph
   *
   * @param node - a node to be added
   */


  _createClass(Graph, [{
    key: "addNode",
    value: function addNode(node) {
      this.nodes.add(node);

      if (!this.edges.has(node)) {
        this.edges.set(node, new Set());
      }
    }
    /**
     * Adds edge between nodes.
     *
     * The nodes had to be added to the graph before, or the error will be raised
     *
     * @param fromNode - node from which edge is outcoming
     * @param toNode - node to which edge is incoming
     */

  }, {
    key: "addEdge",
    value: function addEdge(fromNode, toNode) {
      if (!this.nodes.has(fromNode)) {
        throw new Error("Unknown node ".concat(fromNode));
      }

      if (!this.nodes.has(toNode)) {
        throw new Error("Unknown node ".concat(toNode));
      } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion


      this.edges.get(fromNode).add(toNode);
    }
  }, {
    key: "removeEdge",
    value: function removeEdge(fromNode, toNode) {
      if (this.existsEdge(fromNode, toNode)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        this.edges.get(fromNode).delete(toNode);
      } else {
        throw new Error('Edge does not exist');
      }
    }
  }, {
    key: "softRemoveEdge",
    value: function softRemoveEdge(fromNode, toNode) {
      var _a;

      (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.delete(toNode);
    }
  }, {
    key: "removeIncomingEdges",
    value: function removeIncomingEdges(toNode) {
      this.edges.forEach(function (nodeEdges) {
        nodeEdges.delete(toNode);
      });
    }
    /**
     * Returns nodes adjacent to given node
     *
     * @param node - node to which adjacent nodes we want to retrieve
     */

  }, {
    key: "adjacentNodes",
    value: function adjacentNodes(node) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      return this.edges.get(node);
    }
  }, {
    key: "adjacentNodesCount",
    value: function adjacentNodesCount(node) {
      return this.adjacentNodes(node).size;
    }
    /**
     * Checks whether a node is present in graph
     *
     * @param node - node to check
     */

  }, {
    key: "hasNode",
    value: function hasNode(node) {
      return this.nodes.has(node);
    }
    /**
     * Returns number of nodes in graph
     */

  }, {
    key: "nodesCount",
    value: function nodesCount() {
      return this.nodes.size;
    }
    /**
     * Returns number of edges in graph
     */

  }, {
    key: "edgesCount",
    value: function edgesCount() {
      var result = 0;
      this.edges.forEach(function (edgesForNode) {
        return result += edgesForNode.size;
      });
      return result;
    }
  }, {
    key: "removeNode",
    value: function removeNode(node) {
      var _iterator = _createForOfIteratorHelper(this.adjacentNodes(node).values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var adjacentNode = _step.value;
          this.markNodeAsSpecialRecentlyChanged(adjacentNode);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.edges.delete(node);
      this.nodes.delete(node);
      this.specialNodes.delete(node);
      this.specialNodesRecentlyChanged.delete(node);
      this.specialNodesStructuralChanges.delete(node);
      this.infiniteRanges.delete(node);
      return this.removeDependencies(node);
    }
  }, {
    key: "markNodeAsSpecial",
    value: function markNodeAsSpecial(node) {
      this.specialNodes.add(node);
    }
  }, {
    key: "markNodeAsSpecialRecentlyChanged",
    value: function markNodeAsSpecialRecentlyChanged(node) {
      if (this.nodes.has(node)) {
        this.specialNodesRecentlyChanged.add(node);
      }
    }
  }, {
    key: "markNodeAsChangingWithStructure",
    value: function markNodeAsChangingWithStructure(node) {
      this.specialNodesStructuralChanges.add(node);
    }
  }, {
    key: "clearSpecialNodesRecentlyChanged",
    value: function clearSpecialNodesRecentlyChanged() {
      this.specialNodesRecentlyChanged.clear();
    }
  }, {
    key: "markNodeAsInfiniteRange",
    value: function markNodeAsInfiniteRange(node) {
      this.infiniteRanges.add(node);
    }
    /**
     * Checks whether exists edge between nodes
     *
     * @param fromNode - node from which edge is outcoming
     * @param toNode - node to which edge is incoming
     */

  }, {
    key: "existsEdge",
    value: function existsEdge(fromNode, toNode) {
      var _a, _b;

      return (_b = (_a = this.edges.get(fromNode)) === null || _a === void 0 ? void 0 : _a.has(toNode)) !== null && _b !== void 0 ? _b : false;
    }
    /*
     * return a topological sort order, but separates vertices that exist in some cycle
     */

  }, {
    key: "topSortWithScc",
    value: function topSortWithScc() {
      return this.getTopSortedWithSccSubgraphFrom(Array.from(this.nodes), function () {
        return true;
      }, function () {});
    }
    /**
     *
     * an iterative implementation of Tarjan's algorithm for finding strongly connected compontents
     * returns vertices in order of topological sort, but vertices that are on cycles are kept separate
     *
     * @param modifiedNodes - seed for computation. During engine init run, all of the vertices of grap. In recomputation run, changed vertices.
     * @param operatingFunction - recomputes value of a node, and returns whether a change occured
     * @param onCycle - action to be performed when node is on cycle
     */

  }, {
    key: "getTopSortedWithSccSubgraphFrom",
    value: function getTopSortedWithSccSubgraphFrom(modifiedNodes, operatingFunction, onCycle) {
      var _this = this;

      var entranceTime = new Map();
      var low = new Map();
      var parent = new Map();
      var inSCC = new Set(); // node status life cycle:
      // undefined -> ON_STACK -> PROCESSED -> POPPED

      var nodeStatus = new Map();
      var order = [];
      var time = 0;
      var sccNonSingletons = new Set();
      modifiedNodes.reverse();
      modifiedNodes.forEach(function (v) {
        if (nodeStatus.get(v) !== undefined) {
          return;
        }

        var DFSstack = [v];
        var SCCstack = [];
        nodeStatus.set(v, NodeVisitStatus.ON_STACK);

        var _loop = function _loop() {
          var u = DFSstack[DFSstack.length - 1]; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

          switch (nodeStatus.get(u)) {
            case NodeVisitStatus.ON_STACK:
              {
                entranceTime.set(u, time);
                low.set(u, time);
                SCCstack.push(u);
                time++;

                _this.adjacentNodes(u).forEach(function (t) {
                  if (entranceTime.get(t) === undefined) {
                    DFSstack.push(t);
                    parent.set(t, u);
                    nodeStatus.set(t, NodeVisitStatus.ON_STACK);
                  }
                });

                nodeStatus.set(u, NodeVisitStatus.PROCESSED);
                break;
              }

            case NodeVisitStatus.PROCESSED:
              {
                // leaving this DFS subtree
                var uLow; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

                uLow = entranceTime.get(u);

                _this.adjacentNodes(u).forEach(function (t) {
                  if (!inSCC.has(t)) {
                    if (parent.get(t) === u) {
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      uLow = Math.min(uLow, low.get(t));
                    } else {
                      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                      uLow = Math.min(uLow, entranceTime.get(t));
                    }
                  }
                });

                low.set(u, uLow);

                if (uLow === entranceTime.get(u)) {
                  var currentSCC = [];

                  do {
                    currentSCC.push(SCCstack[SCCstack.length - 1]);
                    SCCstack.pop();
                  } while (currentSCC[currentSCC.length - 1] !== u);

                  currentSCC.forEach(function (t) {
                    inSCC.add(t);
                  });
                  order.push.apply(order, currentSCC);

                  if (currentSCC.length > 1) {
                    currentSCC.forEach(function (t) {
                      sccNonSingletons.add(t);
                    });
                  }
                }

                DFSstack.pop();
                nodeStatus.set(u, NodeVisitStatus.POPPED);
                break;
              }

            case NodeVisitStatus.POPPED:
              {
                // it's a 'shadow' copy, we already processed this vertex and can ignore it
                DFSstack.pop();
                break;
              }
          }
        };

        while (DFSstack.length > 0) {
          _loop();
        }
      });
      var shouldBeUpdatedMapping = new Set(modifiedNodes);
      var sorted = [];
      var cycled = [];
      order.reverse();
      order.forEach(function (t) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        if (sccNonSingletons.has(t) || _this.adjacentNodes(t).has(t)) {
          cycled.push(t);
          onCycle(t);

          _this.adjacentNodes(t).forEach(function (s) {
            return shouldBeUpdatedMapping.add(s);
          });
        } else {
          sorted.push(t);

          if (shouldBeUpdatedMapping.has(t) && operatingFunction(t)) {
            _this.adjacentNodes(t).forEach(function (s) {
              return shouldBeUpdatedMapping.add(s);
            });
          }
        }
      });
      return {
        sorted: sorted,
        cycled: cycled
      };
    }
  }, {
    key: "getDependencies",
    value: function getDependencies(vertex) {
      var result = [];
      this.edges.forEach(function (adjacentNodes, sourceNode) {
        if (adjacentNodes.has(vertex)) {
          result.push(sourceNode);
        }
      });
      return result;
    }
  }, {
    key: "removeDependencies",
    value: function removeDependencies(node) {
      var dependencies = this.dependencyQuery(node);

      var _iterator2 = _createForOfIteratorHelper(dependencies),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var dependency = _step2.value;
          this.softRemoveEdge(dependency, node);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return dependencies;
    }
  }]);

  return Graph;
}();

exports.Graph = Graph;

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var isArray = __webpack_require__(78);

var un$Reverse = uncurryThis([].reverse);
var test = [1, 2];

// `Array.prototype.reverse` method
// https://tc39.es/ecma262/#sec-array.prototype.reverse
// fix for Safari 12.0 bug
// https://bugs.webkit.org/show_bug.cgi?id=188794
$({ target: 'Array', proto: true, forced: String(test) === String(test.reverse()) }, {
  reverse: function reverse() {
    // eslint-disable-next-line no-self-assign -- dirty hack
    if (isArray(this)) this.length = this.length;
    return un$Reverse(this);
  }
});


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.RangeMapping = void 0;

__webpack_require__(149);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(272);

__webpack_require__(119);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(159);

__webpack_require__(161);

__webpack_require__(154);

__webpack_require__(150);

__webpack_require__(157);

__webpack_require__(146);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Mapping from address ranges to range vertices
 */
var RangeMapping = /*#__PURE__*/function () {
  function RangeMapping() {
    _classCallCheck(this, RangeMapping);

    /** Map in which actual data is stored. */
    this.rangeMapping = new Map();
  }

  _createClass(RangeMapping, [{
    key: "getMappingSize",
    value: function getMappingSize(sheet) {
      var _a, _b;

      return (_b = (_a = this.rangeMapping.get(sheet)) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0;
    }
    /**
     * Saves range vertex
     *
     * @param vertex - vertex to save
     */

  }, {
    key: "setRange",
    value: function setRange(vertex) {
      var sheetMap = this.rangeMapping.get(vertex.getStart().sheet);

      if (sheetMap === undefined) {
        sheetMap = new Map();
        this.rangeMapping.set(vertex.getStart().sheet, sheetMap);
      }

      var key = keyFromAddresses(vertex.getStart(), vertex.getEnd());
      sheetMap.set(key, vertex);
    }
  }, {
    key: "removeRange",
    value: function removeRange(vertex) {
      var sheet = vertex.getStart().sheet;
      var sheetMap = this.rangeMapping.get(sheet);

      if (sheetMap === undefined) {
        return;
      }

      var key = keyFromAddresses(vertex.getStart(), vertex.getEnd());
      sheetMap.delete(key);

      if (sheetMap.size === 0) {
        this.rangeMapping.delete(sheet);
      }
    }
    /**
     * Returns associated vertex for given range
     *
     * @param start - top-left corner of the range
     * @param end - bottom-right corner of the range
     */

  }, {
    key: "getRange",
    value: function getRange(start, end) {
      var sheetMap = this.rangeMapping.get(start.sheet);
      var key = keyFromAddresses(start, end);
      return sheetMap === null || sheetMap === void 0 ? void 0 : sheetMap.get(key);
    }
  }, {
    key: "fetchRange",
    value: function fetchRange(start, end) {
      var maybeRange = this.getRange(start, end);

      if (!maybeRange) {
        throw Error('Range does not exist');
      }

      return maybeRange;
    }
  }, {
    key: "truncateRanges",
    value: function truncateRanges(span, coordinate) {
      var verticesToRemove = Array();
      var updated = Array();
      var verticesWithChangedSize = Array();
      var sheet = span.sheet;

      var _iterator = _createForOfIteratorHelper(this.entriesFromSheet(span.sheet)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              key = _step$value[0],
              _vertex = _step$value[1];

          var range = _vertex.range;

          if (span.start <= coordinate(_vertex.range.end)) {
            range.removeSpan(span);

            if (range.shouldBeRemoved()) {
              this.removeByKey(sheet, key);
              verticesToRemove.push(_vertex);
            } else {
              updated.push([key, _vertex]);
            }

            verticesWithChangedSize.push(_vertex);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var verticesToMerge = [];
      updated.sort(function (left, right) {
        return compareBy(left[1], right[1], coordinate);
      });

      for (var _i = 0, _updated = updated; _i < _updated.length; _i++) {
        var _updated$_i = _slicedToArray(_updated[_i], 2),
            oldKey = _updated$_i[0],
            vertex = _updated$_i[1];

        var newKey = keyFromRange(vertex.range);

        if (newKey === oldKey) {
          continue;
        }

        var existingVertex = this.getByKey(sheet, newKey);
        this.removeByKey(sheet, oldKey);

        if (existingVertex !== undefined && vertex != existingVertex) {
          verticesToMerge.push([existingVertex, vertex]);
        } else {
          this.setRange(vertex);
        }
      }

      return {
        verticesToRemove: verticesToRemove,
        verticesToMerge: verticesToMerge,
        verticesWithChangedSize: verticesWithChangedSize
      };
    }
  }, {
    key: "moveAllRangesInSheetAfterRowByRows",
    value: function moveAllRangesInSheetAfterRowByRows(sheet, row, numberOfRows) {
      return this.updateVerticesFromSheet(sheet, function (key, vertex) {
        if (row <= vertex.start.row) {
          vertex.range.shiftByRows(numberOfRows);
          return {
            changedSize: false,
            vertex: vertex
          };
        } else if (row > vertex.start.row && row <= vertex.end.row) {
          vertex.range.expandByRows(numberOfRows);
          return {
            changedSize: true,
            vertex: vertex
          };
        } else {
          return undefined;
        }
      });
    }
  }, {
    key: "moveAllRangesInSheetAfterColumnByColumns",
    value: function moveAllRangesInSheetAfterColumnByColumns(sheet, column, numberOfColumns) {
      return this.updateVerticesFromSheet(sheet, function (key, vertex) {
        if (column <= vertex.start.col) {
          vertex.range.shiftByColumns(numberOfColumns);
          return {
            changedSize: false,
            vertex: vertex
          };
        } else if (column > vertex.start.col && column <= vertex.end.col) {
          vertex.range.expandByColumns(numberOfColumns);
          return {
            changedSize: true,
            vertex: vertex
          };
        } else {
          return undefined;
        }
      });
    }
  }, {
    key: "moveRangesInsideSourceRange",
    value: function moveRangesInsideSourceRange(sourceRange, toRight, toBottom, toSheet) {
      this.updateVerticesFromSheet(sourceRange.sheet, function (key, vertex) {
        if (sourceRange.containsRange(vertex.range)) {
          vertex.range.shiftByColumns(toRight);
          vertex.range.shiftByRows(toBottom);
          vertex.range.moveToSheet(toSheet);
          return {
            changedSize: false,
            vertex: vertex
          };
        } else {
          return undefined;
        }
      });
    }
  }, {
    key: "removeRangesInSheet",
    value: function removeRangesInSheet(sheet) {
      if (this.rangeMapping.has(sheet)) {
        var ranges = this.rangeMapping.get(sheet).values();
        this.rangeMapping.delete(sheet);
        return ranges;
      }

      return [][Symbol.iterator]();
    }
  }, {
    key: "rangesInSheet",
    value: /*#__PURE__*/regeneratorRuntime.mark(function rangesInSheet(sheet) {
      var sheetMap;
      return regeneratorRuntime.wrap(function rangesInSheet$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              sheetMap = this.rangeMapping.get(sheet);

              if (sheetMap) {
                _context.next = 3;
                break;
              }

              return _context.abrupt("return");

            case 3:
              return _context.delegateYield(sheetMap.values(), "t0", 4);

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, rangesInSheet, this);
    })
  }, {
    key: "rangeVerticesContainedInRange",
    value: /*#__PURE__*/regeneratorRuntime.mark(function rangeVerticesContainedInRange(sourceRange) {
      var _iterator2, _step2, rangeVertex;

      return regeneratorRuntime.wrap(function rangeVerticesContainedInRange$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(this.rangesInSheet(sourceRange.sheet));
              _context2.prev = 1;

              _iterator2.s();

            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 10;
                break;
              }

              rangeVertex = _step2.value;

              if (!sourceRange.containsRange(rangeVertex.range)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 8;
              return rangeVertex;

            case 8:
              _context2.next = 3;
              break;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);

              _iterator2.e(_context2.t0);

            case 15:
              _context2.prev = 15;

              _iterator2.f();

              return _context2.finish(15);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, rangeVerticesContainedInRange, this, [[1, 12, 15, 18]]);
    })
    /**
     * Finds smaller range does have own vertex.
     *
     * @param range
     */

  }, {
    key: "findSmallerRange",
    value: function findSmallerRange(range) {
      if (range.height() > 1 && Number.isFinite(range.height())) {
        var valuesRangeEndRowLess = (0, _Cell.simpleCellAddress)(range.end.sheet, range.end.col, range.end.row - 1);
        var rowLessVertex = this.getRange(range.start, valuesRangeEndRowLess);

        if (rowLessVertex !== undefined) {
          var restRange = new _AbsoluteCellRange.AbsoluteCellRange((0, _Cell.simpleCellAddress)(range.start.sheet, range.start.col, range.end.row), range.end);
          return {
            smallerRangeVertex: rowLessVertex,
            restRange: restRange
          };
        }
      }

      return {
        restRange: range
      };
    }
  }, {
    key: "entriesFromSheet",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromSheet(sheet) {
      var sheetMap;
      return regeneratorRuntime.wrap(function entriesFromSheet$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              sheetMap = this.rangeMapping.get(sheet);

              if (sheetMap) {
                _context3.next = 3;
                break;
              }

              return _context3.abrupt("return");

            case 3:
              return _context3.delegateYield(sheetMap.entries(), "t0", 4);

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, entriesFromSheet, this);
    })
  }, {
    key: "removeByKey",
    value: function removeByKey(sheet, key) {
      this.rangeMapping.get(sheet).delete(key);
    }
  }, {
    key: "getByKey",
    value: function getByKey(sheet, key) {
      var _a;

      return (_a = this.rangeMapping.get(sheet)) === null || _a === void 0 ? void 0 : _a.get(key);
    }
  }, {
    key: "updateVerticesFromSheet",
    value: function updateVerticesFromSheet(sheet, fn) {
      var _this = this;

      var updated = Array();

      var _iterator3 = _createForOfIteratorHelper(this.entriesFromSheet(sheet)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
              key = _step3$value[0],
              vertex = _step3$value[1];

          var result = fn(key, vertex);

          if (result !== undefined) {
            this.removeByKey(sheet, key);
            updated.push(result);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      updated.forEach(function (entry) {
        _this.setRange(entry.vertex);
      });
      return {
        verticesWithChangedSize: updated.filter(function (entry) {
          return entry.changedSize;
        }).map(function (entry) {
          return entry.vertex;
        })
      };
    }
  }]);

  return RangeMapping;
}();

exports.RangeMapping = RangeMapping;

function keyFromAddresses(start, end) {
  return "".concat(start.col, ",").concat(start.row, ",").concat(end.col, ",").concat(end.row);
}

function keyFromRange(range) {
  return keyFromAddresses(range.start, range.end);
}

var compareBy = function compareBy(left, right, coordinate) {
  var leftStart = coordinate(left.range.start);
  var rightStart = coordinate(left.range.start);

  if (leftStart === rightStart) {
    var leftEnd = coordinate(left.range.end);
    var rightEnd = coordinate(right.range.end);
    return leftEnd - rightEnd;
  } else {
    return leftStart - rightStart;
  }
};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var aCallable = __webpack_require__(37);
var toObject = __webpack_require__(12);
var lengthOfArrayLike = __webpack_require__(63);
var toString = __webpack_require__(94);
var fails = __webpack_require__(20);
var internalSort = __webpack_require__(273);
var arrayMethodIsStrict = __webpack_require__(156);
var FF = __webpack_require__(274);
var IE_OR_EDGE = __webpack_require__(275);
var V8 = __webpack_require__(16);
var WEBKIT = __webpack_require__(276);

var test = [];
var un$Sort = uncurryThis(test.sort);
var push = uncurryThis(test.push);

// IE8-
var FAILS_ON_UNDEFINED = fails(function () {
  test.sort(undefined);
});
// V8 bug
var FAILS_ON_NULL = fails(function () {
  test.sort(null);
});
// Old WebKit
var STRICT_METHOD = arrayMethodIsStrict('sort');

var STABLE_SORT = !fails(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 70;
  if (FF && FF > 3) return;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 603;

  var result = '';
  var code, chr, value, index;

  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)
  for (code = 65; code < 76; code++) {
    chr = String.fromCharCode(code);

    switch (code) {
      case 66: case 69: case 70: case 72: value = 3; break;
      case 68: case 71: value = 4; break;
      default: value = 2;
    }

    for (index = 0; index < 47; index++) {
      test.push({ k: chr + index, v: value });
    }
  }

  test.sort(function (a, b) { return b.v - a.v; });

  for (index = 0; index < test.length; index++) {
    chr = test[index].k.charAt(0);
    if (result.charAt(result.length - 1) !== chr) result += chr;
  }

  return result !== 'DGBEFHACIJK';
});

var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (y === undefined) return -1;
    if (x === undefined) return 1;
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    return toString(x) > toString(y) ? 1 : -1;
  };
};

// `Array.prototype.sort` method
// https://tc39.es/ecma262/#sec-array.prototype.sort
$({ target: 'Array', proto: true, forced: FORCED }, {
  sort: function sort(comparefn) {
    if (comparefn !== undefined) aCallable(comparefn);

    var array = toObject(this);

    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);

    var items = [];
    var arrayLength = lengthOfArrayLike(array);
    var itemsLength, index;

    for (index = 0; index < arrayLength; index++) {
      if (index in array) push(items, array[index]);
    }

    internalSort(items, getSortCompare(comparefn));

    itemsLength = items.length;
    index = 0;

    while (index < itemsLength) array[index] = items[index++];
    while (index < arrayLength) delete array[index++];

    return array;
  }
});


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

var arraySlice = __webpack_require__(111);

var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice(array, 0, middle), comparefn),
    mergeSort(arraySlice(array, middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = (lindex < llength && rindex < rlength)
      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
      : lindex < llength ? left[lindex++] : right[rindex++];
  } return array;
};

module.exports = mergeSort;


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__(17);

var firefox = userAgent.match(/firefox\/(\d+)/i);

module.exports = !!firefox && +firefox[1];


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

var UA = __webpack_require__(17);

module.exports = /MSIE|Trident/.test(UA);


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

var userAgent = __webpack_require__(17);

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

module.exports = !!webkit && +webkit[1];


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.SheetMapping = void 0;

__webpack_require__(149);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(146);

__webpack_require__(150);

__webpack_require__(82);

var _errors = __webpack_require__(165);

var _i18n = __webpack_require__(278);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function canonicalize(sheetDisplayName) {
  return sheetDisplayName.toLowerCase();
}

var Sheet = /*#__PURE__*/function () {
  function Sheet(id, displayName) {
    _classCallCheck(this, Sheet);

    this.id = id;
    this.displayName = displayName;
  }

  _createClass(Sheet, [{
    key: "canonicalName",
    get: function get() {
      return canonicalize(this.displayName);
    }
  }]);

  return Sheet;
}();

var SheetMapping = /*#__PURE__*/function () {
  function SheetMapping(languages) {
    var _this = this;

    _classCallCheck(this, SheetMapping);

    this.languages = languages;
    this.mappingFromCanonicalName = new Map();
    this.mappingFromId = new Map();
    this.lastSheetId = -1;

    this.fetch = function (sheetName) {
      var sheet = _this.mappingFromCanonicalName.get(canonicalize(sheetName));

      if (sheet === undefined) {
        throw new _errors.NoSheetWithNameError(sheetName);
      }

      return sheet.id;
    };

    this.get = function (sheetName) {
      var _a;

      return (_a = _this.mappingFromCanonicalName.get(canonicalize(sheetName))) === null || _a === void 0 ? void 0 : _a.id;
    };

    this.fetchDisplayName = function (sheetId) {
      return _this.fetchSheetById(sheetId).displayName;
    };

    this.sheetNamePrefix = languages.getUITranslation(_i18n.UIElement.NEW_SHEET_PREFIX);
  }

  _createClass(SheetMapping, [{
    key: "addSheet",
    value: function addSheet() {
      var newSheetDisplayName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "".concat(this.sheetNamePrefix).concat(this.lastSheetId + 2);
      var newSheetCanonicalName = canonicalize(newSheetDisplayName);

      if (this.mappingFromCanonicalName.has(newSheetCanonicalName)) {
        throw new _errors.SheetNameAlreadyTakenError(newSheetDisplayName);
      }

      this.lastSheetId++;
      var sheet = new Sheet(this.lastSheetId, newSheetDisplayName);
      this.store(sheet);
      return sheet.id;
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      var sheet = this.fetchSheetById(sheetId);

      if (sheetId == this.lastSheetId) {
        --this.lastSheetId;
      }

      this.mappingFromCanonicalName.delete(sheet.canonicalName);
      this.mappingFromId.delete(sheet.id);
    }
  }, {
    key: "getDisplayName",
    value: function getDisplayName(sheetId) {
      var _a;

      return (_a = this.mappingFromId.get(sheetId)) === null || _a === void 0 ? void 0 : _a.displayName;
    }
  }, {
    key: "displayNames",
    value: /*#__PURE__*/regeneratorRuntime.mark(function displayNames() {
      var _iterator, _step, sheet;

      return regeneratorRuntime.wrap(function displayNames$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.mappingFromCanonicalName.values());
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 9;
                break;
              }

              sheet = _step.value;
              _context.next = 7;
              return sheet.displayName;

            case 7:
              _context.next = 3;
              break;

            case 9:
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);

              _iterator.e(_context.t0);

            case 14:
              _context.prev = 14;

              _iterator.f();

              return _context.finish(14);

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, displayNames, this, [[1, 11, 14, 17]]);
    })
  }, {
    key: "numberOfSheets",
    value: function numberOfSheets() {
      return this.mappingFromCanonicalName.size;
    }
  }, {
    key: "hasSheetWithId",
    value: function hasSheetWithId(sheetId) {
      return this.mappingFromId.has(sheetId);
    }
  }, {
    key: "hasSheetWithName",
    value: function hasSheetWithName(sheetName) {
      return this.mappingFromCanonicalName.has(canonicalize(sheetName));
    }
  }, {
    key: "renameSheet",
    value: function renameSheet(sheetId, newDisplayName) {
      var sheet = this.fetchSheetById(sheetId);
      var currentDisplayName = sheet.displayName;

      if (currentDisplayName === newDisplayName) {
        return undefined;
      }

      var sheetWithThisCanonicalName = this.mappingFromCanonicalName.get(canonicalize(newDisplayName));

      if (sheetWithThisCanonicalName !== undefined && sheetWithThisCanonicalName.id !== sheet.id) {
        throw new _errors.SheetNameAlreadyTakenError(newDisplayName);
      }

      var currentCanonicalName = sheet.canonicalName;
      this.mappingFromCanonicalName.delete(currentCanonicalName);
      sheet.displayName = newDisplayName;
      this.store(sheet);
      return currentDisplayName;
    }
  }, {
    key: "sheetNames",
    value: function sheetNames() {
      return Array.from(this.mappingFromId.values()).map(function (s) {
        return s.displayName;
      });
    }
  }, {
    key: "store",
    value: function store(sheet) {
      this.mappingFromId.set(sheet.id, sheet);
      this.mappingFromCanonicalName.set(sheet.canonicalName, sheet);
    }
  }, {
    key: "fetchSheetById",
    value: function fetchSheetById(sheetId) {
      var sheet = this.mappingFromId.get(sheetId);

      if (sheet === undefined) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      return sheet;
    }
  }]);

  return SheetMapping;
}();

exports.SheetMapping = SheetMapping;

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.UIElement = void 0;

var _TranslationPackage = __webpack_require__(279);

exports.buildTranslationPackage = _TranslationPackage.buildTranslationPackage;
exports.TranslationPackage = _TranslationPackage.TranslationPackage;

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var UIElement;
exports.UIElement = UIElement;

(function (UIElement) {
  UIElement["NEW_SHEET_PREFIX"] = "NEW_SHEET_PREFIX";
})(UIElement || (exports.UIElement = UIElement = {}));

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.TranslationPackage = void 0;
exports.buildTranslationPackage = buildTranslationPackage;

__webpack_require__(144);

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(280);

__webpack_require__(281);

__webpack_require__(120);

__webpack_require__(151);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(138);

var _Cell = __webpack_require__(143);

var _errors = __webpack_require__(165);

var _index = __webpack_require__(278);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var TranslationPackage = /*#__PURE__*/function () {
  function TranslationPackage(functions, errors, ui) {
    _classCallCheck(this, TranslationPackage);

    this.functions = functions;
    this.errors = errors;
    this.ui = ui;
    this._protectedTranslations = {
      'VERSION': 'VERSION'
    };
    this.checkUI();
    this.checkErrors();
    this.checkFunctionTranslations(this.functions);
    Object.assign(this.functions, this._protectedTranslations);
  }

  _createClass(TranslationPackage, [{
    key: "extendFunctions",
    value: function extendFunctions(additionalFunctionTranslations) {
      this.checkFunctionTranslations(additionalFunctionTranslations);
      Object.assign(this.functions, additionalFunctionTranslations);
    }
  }, {
    key: "buildFunctionMapping",
    value: function buildFunctionMapping() {
      var _this = this;

      return Object.keys(this.functions).reduce(function (ret, key) {
        ret[_this.functions[key]] = key;
        return ret;
      }, {});
    }
  }, {
    key: "buildErrorMapping",
    value: function buildErrorMapping() {
      var _this2 = this;

      return Object.keys(this.errors).reduce(function (ret, key) {
        ret[_this2.errors[key]] = key;
        return ret;
      }, {});
    }
  }, {
    key: "isFunctionTranslated",
    value: function isFunctionTranslated(key) {
      return this.functions[key] !== undefined;
    }
  }, {
    key: "getFunctionTranslations",
    value: function getFunctionTranslations(functionIds) {
      var translations = [];

      var _iterator = _createForOfIteratorHelper(functionIds),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var functionId = _step.value;

          if (this.isFunctionTranslated(functionId)) {
            translations.push(this.functions[functionId]);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return translations;
    }
  }, {
    key: "getFunctionTranslation",
    value: function getFunctionTranslation(key) {
      var val = this.functions[key];

      if (val === undefined) {
        throw new _errors.MissingTranslationError("functions.".concat(key));
      } else {
        return val;
      }
    }
  }, {
    key: "getMaybeFunctionTranslation",
    value: function getMaybeFunctionTranslation(key) {
      return this.functions[key];
    }
  }, {
    key: "getErrorTranslation",
    value: function getErrorTranslation(key) {
      if (key === _Cell.ErrorType.LIC) {
        return "#".concat(_Cell.ErrorType.LIC, "!");
      }

      var val = this.errors[key];

      if (val === undefined) {
        throw new _errors.MissingTranslationError("errors.".concat(key));
      } else {
        return val;
      }
    }
  }, {
    key: "getUITranslation",
    value: function getUITranslation(key) {
      var val = this.ui[key];

      if (val === undefined) {
        throw new _errors.MissingTranslationError("ui.".concat(key));
      } else {
        return val;
      }
    }
  }, {
    key: "checkUI",
    value: function checkUI() {
      for (var _i = 0, _Object$values = Object.values(_index.UIElement); _i < _Object$values.length; _i++) {
        var key = _Object$values[_i];

        if (!(key in this.ui)) {
          throw new _errors.MissingTranslationError("ui.".concat(key));
        }
      }
    }
  }, {
    key: "checkErrors",
    value: function checkErrors() {
      for (var _i2 = 0, _Object$values2 = Object.values(_Cell.ErrorType); _i2 < _Object$values2.length; _i2++) {
        var key = _Object$values2[_i2];

        if (!(key in this.errors) && key !== _Cell.ErrorType.LIC) {
          throw new _errors.MissingTranslationError("errors.".concat(key));
        }
      }
    }
  }, {
    key: "checkFunctionTranslations",
    value: function checkFunctionTranslations(functions) {
      var functionNames = new Set(Object.getOwnPropertyNames(functions));

      var _iterator2 = _createForOfIteratorHelper(Object.getOwnPropertyNames(this._protectedTranslations)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var protectedTranslation = _step2.value;

          if (functionNames.has(protectedTranslation)) {
            throw new _errors.ProtectedFunctionTranslationError(protectedTranslation);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }]);

  return TranslationPackage;
}();

exports.TranslationPackage = TranslationPackage;

function buildTranslationPackage(rawTranslationPackage) {
  return new TranslationPackage(Object.assign({}, rawTranslationPackage.functions), Object.assign({}, rawTranslationPackage.errors), Object.assign({}, rawTranslationPackage.ui));
}

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var toObject = __webpack_require__(12);
var nativeKeys = __webpack_require__(75);
var fails = __webpack_require__(20);

var FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {
  keys: function keys(it) {
    return nativeKeys(toObject(it));
  }
});


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var $values = __webpack_require__(282).values;

// `Object.values` method
// https://tc39.es/ecma262/#sec-object.values
$({ target: 'Object', stat: true }, {
  values: function values(O) {
    return $values(O);
  }
});


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

var DESCRIPTORS = __webpack_require__(24);
var uncurryThis = __webpack_require__(11);
var objectKeys = __webpack_require__(75);
var toIndexedObject = __webpack_require__(54);
var $propertyIsEnumerable = __webpack_require__(53).f;

var propertyIsEnumerable = uncurryThis($propertyIsEnumerable);
var push = uncurryThis([].push);

// `Object.{ entries, values }` methods implementation
var createMethod = function (TO_ENTRIES) {
  return function (it) {
    var O = toIndexedObject(it);
    var keys = objectKeys(O);
    var length = keys.length;
    var i = 0;
    var result = [];
    var key;
    while (length > i) {
      key = keys[i++];
      if (!DESCRIPTORS || propertyIsEnumerable(O, key)) {
        push(result, TO_ENTRIES ? [key, O[key]] : O[key]);
      }
    }
    return result;
  };
};

module.exports = {
  // `Object.entries` method
  // https://tc39.es/ecma262/#sec-object.entries
  entries: createMethod(true),
  // `Object.values` method
  // https://tc39.es/ecma262/#sec-object.values
  values: createMethod(false)
};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.EmptyCellVertex = void 0;

var _InterpreterValue = __webpack_require__(255);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Represents singleton vertex bound to all empty cells
 */
var EmptyCellVertex = /*#__PURE__*/function () {
  function EmptyCellVertex(address //might be outdated!
  ) {
    _classCallCheck(this, EmptyCellVertex);

    this.address = address;
  }
  /**
   * Retrieves cell value bound to that singleton
   */


  _createClass(EmptyCellVertex, [{
    key: "getCellValue",
    value: function getCellValue() {
      return _InterpreterValue.EmptyValue;
    }
  }]);

  return EmptyCellVertex;
}();

exports.EmptyCellVertex = EmptyCellVertex;

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ValueCellVertex = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */

/**
 * Represents vertex which keeps static cell value
 */
var ValueCellVertex = /*#__PURE__*/function () {
  /** Static cell value. */
  function ValueCellVertex(parsedValue, rawValue) {
    _classCallCheck(this, ValueCellVertex);

    this.parsedValue = parsedValue;
    this.rawValue = rawValue;
  }

  _createClass(ValueCellVertex, [{
    key: "getValues",
    value: function getValues() {
      return {
        parsedValue: this.parsedValue,
        rawValue: this.rawValue
      };
    }
  }, {
    key: "setValues",
    value: function setValues(values) {
      this.parsedValue = values.parsedValue;
      this.rawValue = values.rawValue;
    }
    /**
     * Returns cell value stored in vertex
     */

  }, {
    key: "getCellValue",
    value: function getCellValue() {
      return this.parsedValue;
    }
  }, {
    key: "setCellValue",
    value: function setCellValue(_cellValue) {
      throw 'SetCellValue is deprecated for ValueCellVertex';
    }
  }]);

  return ValueCellVertex;
}();

exports.ValueCellVertex = ValueCellVertex;

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ParsingErrorVertex = void 0;

var _Cell = __webpack_require__(143);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ParsingErrorVertex = /*#__PURE__*/function () {
  function ParsingErrorVertex(errors, rawInput) {
    _classCallCheck(this, ParsingErrorVertex);

    this.errors = errors;
    this.rawInput = rawInput;
  }

  _createClass(ParsingErrorVertex, [{
    key: "getCellValue",
    value: function getCellValue() {
      return _Cell.CellError.parsingError();
    }
  }, {
    key: "getFormula",
    value: function getFormula() {
      return this.rawInput;
    }
  }]);

  return ParsingErrorVertex;
}();

exports.ParsingErrorVertex = ParsingErrorVertex;

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.SparseStrategy = void 0;

__webpack_require__(149);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(154);

var _Cell = __webpack_require__(143);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Mapping from cell addresses to vertices
 *
 * Uses Map to store addresses, having minimal memory usage for sparse sheets but not necessarily constant set/lookup.
 */
var SparseStrategy = /*#__PURE__*/function () {
  function SparseStrategy(width, height) {
    _classCallCheck(this, SparseStrategy);

    this.width = width;
    this.height = height;
    /**
     * Map of Maps in which actual data is stored.
     *
     * Key of map in first level is column number.
     * Key of map in second level is row number.
     */

    this.mapping = new Map();
  }
  /** @inheritDoc */


  _createClass(SparseStrategy, [{
    key: "getCell",
    value: function getCell(address) {
      var _a;

      return (_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.get(address.row);
    }
    /** @inheritDoc */

  }, {
    key: "setCell",
    value: function setCell(address, newVertex) {
      this.width = Math.max(this.width, address.col + 1);
      this.height = Math.max(this.height, address.row + 1);
      var colMapping = this.mapping.get(address.col);

      if (!colMapping) {
        colMapping = new Map();
        this.mapping.set(address.col, colMapping);
      }

      colMapping.set(address.row, newVertex);
    }
    /** @inheritDoc */

  }, {
    key: "has",
    value: function has(address) {
      var _a;

      return !!((_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.get(address.row));
    }
    /** @inheritDoc */

  }, {
    key: "getHeight",
    value: function getHeight() {
      return this.height;
    }
    /** @inheritDoc */

  }, {
    key: "getWidth",
    value: function getWidth() {
      return this.width;
    }
  }, {
    key: "removeCell",
    value: function removeCell(address) {
      var _a;

      (_a = this.mapping.get(address.col)) === null || _a === void 0 ? void 0 : _a.delete(address.row);
    }
  }, {
    key: "addRows",
    value: function addRows(row, numberOfRows) {
      this.mapping.forEach(function (rowMapping) {
        var tmpMapping = new Map();
        rowMapping.forEach(function (vertex, rowNumber) {
          if (rowNumber >= row) {
            tmpMapping.set(rowNumber + numberOfRows, vertex);
            rowMapping.delete(rowNumber);
          }
        });
        tmpMapping.forEach(function (vertex, rowNumber) {
          rowMapping.set(rowNumber, vertex);
        });
      });
      this.height += numberOfRows;
    }
  }, {
    key: "addColumns",
    value: function addColumns(column, numberOfColumns) {
      var _this = this;

      var tmpMapping = new Map();
      this.mapping.forEach(function (rowMapping, colNumber) {
        if (colNumber >= column) {
          tmpMapping.set(colNumber + numberOfColumns, rowMapping);

          _this.mapping.delete(colNumber);
        }
      });
      tmpMapping.forEach(function (rowMapping, colNumber) {
        _this.mapping.set(colNumber, rowMapping);
      });
      this.width += numberOfColumns;
    }
  }, {
    key: "removeRows",
    value: function removeRows(removedRows) {
      this.mapping.forEach(function (rowMapping) {
        var tmpMapping = new Map();
        rowMapping.forEach(function (vertex, rowNumber) {
          if (rowNumber >= removedRows.rowStart) {
            rowMapping.delete(rowNumber);

            if (rowNumber > removedRows.rowEnd) {
              tmpMapping.set(rowNumber - removedRows.numberOfRows, vertex);
            }
          }
        });
        tmpMapping.forEach(function (vertex, rowNumber) {
          rowMapping.set(rowNumber, vertex);
        });
      });
      var rightmostRowRemoved = Math.min(this.height - 1, removedRows.rowEnd);
      var numberOfRowsRemoved = Math.max(0, rightmostRowRemoved - removedRows.rowStart + 1);
      this.height = Math.max(0, this.height - numberOfRowsRemoved);
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(removedColumns) {
      var _this2 = this;

      var tmpMapping = new Map();
      this.mapping.forEach(function (rowMapping, colNumber) {
        if (colNumber >= removedColumns.columnStart) {
          _this2.mapping.delete(colNumber);

          if (colNumber > removedColumns.columnEnd) {
            tmpMapping.set(colNumber - removedColumns.numberOfColumns, rowMapping);
          }
        }
      });
      tmpMapping.forEach(function (rowMapping, colNumber) {
        _this2.mapping.set(colNumber, rowMapping);
      });
      var rightmostColumnRemoved = Math.min(this.width - 1, removedColumns.columnEnd);
      var numberOfColumnsRemoved = Math.max(0, rightmostColumnRemoved - removedColumns.columnStart + 1);
      this.width = Math.max(0, this.width - numberOfColumnsRemoved);
    }
  }, {
    key: "getEntries",
    value: /*#__PURE__*/regeneratorRuntime.mark(function getEntries(sheet) {
      var _iterator, _step, _step$value, colNumber, col, _iterator2, _step2, _step2$value, rowNumber, value;

      return regeneratorRuntime.wrap(function getEntries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.mapping);
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 24;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), colNumber = _step$value[0], col = _step$value[1];
              _iterator2 = _createForOfIteratorHelper(col);
              _context.prev = 6;

              _iterator2.s();

            case 8:
              if ((_step2 = _iterator2.n()).done) {
                _context.next = 14;
                break;
              }

              _step2$value = _slicedToArray(_step2.value, 2), rowNumber = _step2$value[0], value = _step2$value[1];
              _context.next = 12;
              return [(0, _Cell.simpleCellAddress)(sheet, colNumber, rowNumber), value];

            case 12:
              _context.next = 8;
              break;

            case 14:
              _context.next = 19;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](6);

              _iterator2.e(_context.t0);

            case 19:
              _context.prev = 19;

              _iterator2.f();

              return _context.finish(19);

            case 22:
              _context.next = 3;
              break;

            case 24:
              _context.next = 29;
              break;

            case 26:
              _context.prev = 26;
              _context.t1 = _context["catch"](1);

              _iterator.e(_context.t1);

            case 29:
              _context.prev = 29;

              _iterator.f();

              return _context.finish(29);

            case 32:
            case "end":
              return _context.stop();
          }
        }
      }, getEntries, this, [[1, 26, 29, 32], [6, 16, 19, 22]]);
    })
  }, {
    key: "verticesFromColumn",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromColumn(column) {
      var colMapping, _iterator3, _step3, _step3$value, _, vertex;

      return regeneratorRuntime.wrap(function verticesFromColumn$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              colMapping = this.mapping.get(column);

              if (!(colMapping === undefined)) {
                _context2.next = 3;
                break;
              }

              return _context2.abrupt("return");

            case 3:
              _iterator3 = _createForOfIteratorHelper(colMapping);
              _context2.prev = 4;

              _iterator3.s();

            case 6:
              if ((_step3 = _iterator3.n()).done) {
                _context2.next = 12;
                break;
              }

              _step3$value = _slicedToArray(_step3.value, 2), _ = _step3$value[0], vertex = _step3$value[1];
              _context2.next = 10;
              return vertex;

            case 10:
              _context2.next = 6;
              break;

            case 12:
              _context2.next = 17;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](4);

              _iterator3.e(_context2.t0);

            case 17:
              _context2.prev = 17;

              _iterator3.f();

              return _context2.finish(17);

            case 20:
            case "end":
              return _context2.stop();
          }
        }
      }, verticesFromColumn, this, [[4, 14, 17, 20]]);
    })
  }, {
    key: "verticesFromRow",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRow(row) {
      var _iterator4, _step4, colMapping, rowVertex;

      return regeneratorRuntime.wrap(function verticesFromRow$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _iterator4 = _createForOfIteratorHelper(this.mapping.values());
              _context3.prev = 1;

              _iterator4.s();

            case 3:
              if ((_step4 = _iterator4.n()).done) {
                _context3.next = 11;
                break;
              }

              colMapping = _step4.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context3.next = 9;
                break;
              }

              _context3.next = 9;
              return rowVertex;

            case 9:
              _context3.next = 3;
              break;

            case 11:
              _context3.next = 16;
              break;

            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](1);

              _iterator4.e(_context3.t0);

            case 16:
              _context3.prev = 16;

              _iterator4.f();

              return _context3.finish(16);

            case 19:
            case "end":
              return _context3.stop();
          }
        }
      }, verticesFromRow, this, [[1, 13, 16, 19]]);
    })
  }, {
    key: "verticesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromColumnsSpan(columnsSpan) {
      var _iterator5, _step5, column, colMapping, _iterator6, _step6, _step6$value, _, vertex;

      return regeneratorRuntime.wrap(function verticesFromColumnsSpan$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _iterator5 = _createForOfIteratorHelper(columnsSpan.columns());
              _context4.prev = 1;

              _iterator5.s();

            case 3:
              if ((_step5 = _iterator5.n()).done) {
                _context4.next = 27;
                break;
              }

              column = _step5.value;
              colMapping = this.mapping.get(column);

              if (!(colMapping === undefined)) {
                _context4.next = 8;
                break;
              }

              return _context4.abrupt("continue", 25);

            case 8:
              _iterator6 = _createForOfIteratorHelper(colMapping);
              _context4.prev = 9;

              _iterator6.s();

            case 11:
              if ((_step6 = _iterator6.n()).done) {
                _context4.next = 17;
                break;
              }

              _step6$value = _slicedToArray(_step6.value, 2), _ = _step6$value[0], vertex = _step6$value[1];
              _context4.next = 15;
              return vertex;

            case 15:
              _context4.next = 11;
              break;

            case 17:
              _context4.next = 22;
              break;

            case 19:
              _context4.prev = 19;
              _context4.t0 = _context4["catch"](9);

              _iterator6.e(_context4.t0);

            case 22:
              _context4.prev = 22;

              _iterator6.f();

              return _context4.finish(22);

            case 25:
              _context4.next = 3;
              break;

            case 27:
              _context4.next = 32;
              break;

            case 29:
              _context4.prev = 29;
              _context4.t1 = _context4["catch"](1);

              _iterator5.e(_context4.t1);

            case 32:
              _context4.prev = 32;

              _iterator5.f();

              return _context4.finish(32);

            case 35:
            case "end":
              return _context4.stop();
          }
        }
      }, verticesFromColumnsSpan, this, [[1, 29, 32, 35], [9, 19, 22, 25]]);
    })
  }, {
    key: "verticesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRowsSpan(rowsSpan) {
      var _iterator7, _step7, colMapping, _iterator8, _step8, row, rowVertex;

      return regeneratorRuntime.wrap(function verticesFromRowsSpan$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _iterator7 = _createForOfIteratorHelper(this.mapping.values());
              _context5.prev = 1;

              _iterator7.s();

            case 3:
              if ((_step7 = _iterator7.n()).done) {
                _context5.next = 26;
                break;
              }

              colMapping = _step7.value;
              _iterator8 = _createForOfIteratorHelper(rowsSpan.rows());
              _context5.prev = 6;

              _iterator8.s();

            case 8:
              if ((_step8 = _iterator8.n()).done) {
                _context5.next = 16;
                break;
              }

              row = _step8.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context5.next = 14;
                break;
              }

              _context5.next = 14;
              return rowVertex;

            case 14:
              _context5.next = 8;
              break;

            case 16:
              _context5.next = 21;
              break;

            case 18:
              _context5.prev = 18;
              _context5.t0 = _context5["catch"](6);

              _iterator8.e(_context5.t0);

            case 21:
              _context5.prev = 21;

              _iterator8.f();

              return _context5.finish(21);

            case 24:
              _context5.next = 3;
              break;

            case 26:
              _context5.next = 31;
              break;

            case 28:
              _context5.prev = 28;
              _context5.t1 = _context5["catch"](1);

              _iterator7.e(_context5.t1);

            case 31:
              _context5.prev = 31;

              _iterator7.f();

              return _context5.finish(31);

            case 34:
            case "end":
              return _context5.stop();
          }
        }
      }, verticesFromRowsSpan, this, [[1, 28, 31, 34], [6, 18, 21, 24]]);
    })
  }, {
    key: "entriesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {
      var _iterator9, _step9, _step9$value, col, colMapping, _iterator10, _step10, row, rowVertex;

      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _iterator9 = _createForOfIteratorHelper(this.mapping.entries());
              _context6.prev = 1;

              _iterator9.s();

            case 3:
              if ((_step9 = _iterator9.n()).done) {
                _context6.next = 26;
                break;
              }

              _step9$value = _slicedToArray(_step9.value, 2), col = _step9$value[0], colMapping = _step9$value[1];
              _iterator10 = _createForOfIteratorHelper(rowsSpan.rows());
              _context6.prev = 6;

              _iterator10.s();

            case 8:
              if ((_step10 = _iterator10.n()).done) {
                _context6.next = 16;
                break;
              }

              row = _step10.value;
              rowVertex = colMapping.get(row);

              if (!(rowVertex !== undefined)) {
                _context6.next = 14;
                break;
              }

              _context6.next = 14;
              return [(0, _Cell.simpleCellAddress)(rowsSpan.sheet, col, row), rowVertex];

            case 14:
              _context6.next = 8;
              break;

            case 16:
              _context6.next = 21;
              break;

            case 18:
              _context6.prev = 18;
              _context6.t0 = _context6["catch"](6);

              _iterator10.e(_context6.t0);

            case 21:
              _context6.prev = 21;

              _iterator10.f();

              return _context6.finish(21);

            case 24:
              _context6.next = 3;
              break;

            case 26:
              _context6.next = 31;
              break;

            case 28:
              _context6.prev = 28;
              _context6.t1 = _context6["catch"](1);

              _iterator9.e(_context6.t1);

            case 31:
              _context6.prev = 31;

              _iterator9.f();

              return _context6.finish(31);

            case 34:
            case "end":
              return _context6.stop();
          }
        }
      }, entriesFromRowsSpan, this, [[1, 28, 31, 34], [6, 18, 21, 24]]);
    })
  }, {
    key: "entriesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {
      var _iterator11, _step11, col, colMapping, _iterator12, _step12, _step12$value, row, vertex;

      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              _iterator11 = _createForOfIteratorHelper(columnsSpan.columns());
              _context7.prev = 1;

              _iterator11.s();

            case 3:
              if ((_step11 = _iterator11.n()).done) {
                _context7.next = 26;
                break;
              }

              col = _step11.value;
              colMapping = this.mapping.get(col);

              if (!(colMapping !== undefined)) {
                _context7.next = 24;
                break;
              }

              _iterator12 = _createForOfIteratorHelper(colMapping.entries());
              _context7.prev = 8;

              _iterator12.s();

            case 10:
              if ((_step12 = _iterator12.n()).done) {
                _context7.next = 16;
                break;
              }

              _step12$value = _slicedToArray(_step12.value, 2), row = _step12$value[0], vertex = _step12$value[1];
              _context7.next = 14;
              return [(0, _Cell.simpleCellAddress)(columnsSpan.sheet, col, row), vertex];

            case 14:
              _context7.next = 10;
              break;

            case 16:
              _context7.next = 21;
              break;

            case 18:
              _context7.prev = 18;
              _context7.t0 = _context7["catch"](8);

              _iterator12.e(_context7.t0);

            case 21:
              _context7.prev = 21;

              _iterator12.f();

              return _context7.finish(21);

            case 24:
              _context7.next = 3;
              break;

            case 26:
              _context7.next = 31;
              break;

            case 28:
              _context7.prev = 28;
              _context7.t1 = _context7["catch"](1);

              _iterator11.e(_context7.t1);

            case 31:
              _context7.prev = 31;

              _iterator11.f();

              return _context7.finish(31);

            case 34:
            case "end":
              return _context7.stop();
          }
        }
      }, entriesFromColumnsSpan, this, [[1, 28, 31, 34], [8, 18, 21, 24]]);
    })
  }, {
    key: "vertices",
    value: /*#__PURE__*/regeneratorRuntime.mark(function vertices() {
      var _iterator13, _step13, _step13$value, _, col, _iterator14, _step14, _step14$value, _2, value;

      return regeneratorRuntime.wrap(function vertices$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              _iterator13 = _createForOfIteratorHelper(this.mapping);
              _context8.prev = 1;

              _iterator13.s();

            case 3:
              if ((_step13 = _iterator13.n()).done) {
                _context8.next = 25;
                break;
              }

              _step13$value = _slicedToArray(_step13.value, 2), _ = _step13$value[0], col = _step13$value[1];
              _iterator14 = _createForOfIteratorHelper(col);
              _context8.prev = 6;

              _iterator14.s();

            case 8:
              if ((_step14 = _iterator14.n()).done) {
                _context8.next = 15;
                break;
              }

              _step14$value = _slicedToArray(_step14.value, 2), _2 = _step14$value[0], value = _step14$value[1];

              if (!(value !== undefined)) {
                _context8.next = 13;
                break;
              }

              _context8.next = 13;
              return value;

            case 13:
              _context8.next = 8;
              break;

            case 15:
              _context8.next = 20;
              break;

            case 17:
              _context8.prev = 17;
              _context8.t0 = _context8["catch"](6);

              _iterator14.e(_context8.t0);

            case 20:
              _context8.prev = 20;

              _iterator14.f();

              return _context8.finish(20);

            case 23:
              _context8.next = 3;
              break;

            case 25:
              _context8.next = 30;
              break;

            case 27:
              _context8.prev = 27;
              _context8.t1 = _context8["catch"](1);

              _iterator13.e(_context8.t1);

            case 30:
              _context8.prev = 30;

              _iterator13.f();

              return _context8.finish(30);

            case 33:
            case "end":
              return _context8.stop();
          }
        }
      }, vertices, this, [[1, 27, 30, 33], [6, 17, 20, 23]]);
    })
  }]);

  return SparseStrategy;
}();

exports.SparseStrategy = SparseStrategy;

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(82);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

exports.__esModule = true;
exports.DenseStrategy = void 0;

__webpack_require__(149);

__webpack_require__(267);

__webpack_require__(146);

var _Cell = __webpack_require__(143);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Mapping from cell addresses to vertices
 *
 * Uses Array to store addresses, having minimal memory usage for dense sheets and constant set/lookup.
 */
var DenseStrategy = /*#__PURE__*/function () {
  /**
   * @param width - width of the stored sheet
   * @param height - height of the stored sheet
   */
  function DenseStrategy(width, height) {
    _classCallCheck(this, DenseStrategy);

    this.width = width;
    this.height = height;
    this.mapping = new Array(height);

    for (var i = 0; i < height; i++) {
      this.mapping[i] = new Array(width);
    }
  }
  /** @inheritDoc */


  _createClass(DenseStrategy, [{
    key: "getCell",
    value: function getCell(address) {
      return this.getCellVertex(address.col, address.row);
    }
    /** @inheritDoc */

  }, {
    key: "setCell",
    value: function setCell(address, newVertex) {
      this.width = Math.max(this.width, address.col + 1);
      this.height = Math.max(this.height, address.row + 1);
      var rowMapping = this.mapping[address.row];

      if (!rowMapping) {
        this.mapping[address.row] = new Array(this.width);
      }

      this.mapping[address.row][address.col] = newVertex;
    }
    /** @inheritDoc */

  }, {
    key: "has",
    value: function has(address) {
      var row = this.mapping[address.row];

      if (!row) {
        return false;
      }

      return !!row[address.col];
    }
    /** @inheritDoc */

  }, {
    key: "getHeight",
    value: function getHeight() {
      return this.height;
    }
    /** @inheritDoc */

  }, {
    key: "getWidth",
    value: function getWidth() {
      return this.width;
    }
  }, {
    key: "removeCell",
    value: function removeCell(address) {
      if (this.mapping[address.row] !== undefined) {
        delete this.mapping[address.row][address.col];
      }
    }
  }, {
    key: "addRows",
    value: function addRows(row, numberOfRows) {
      var _this$mapping;

      var newRows = [];

      for (var i = 0; i < numberOfRows; i++) {
        newRows.push(new Array(this.width));
      }

      (_this$mapping = this.mapping).splice.apply(_this$mapping, [row, 0].concat(newRows));

      this.height += numberOfRows;
    }
  }, {
    key: "addColumns",
    value: function addColumns(column, numberOfColumns) {
      for (var i = 0; i < this.height; i++) {
        var _this$mapping$i;

        (_this$mapping$i = this.mapping[i]).splice.apply(_this$mapping$i, [column, 0].concat(_toConsumableArray(new Array(numberOfColumns))));
      }

      this.width += numberOfColumns;
    }
  }, {
    key: "removeRows",
    value: function removeRows(removedRows) {
      this.mapping.splice(removedRows.rowStart, removedRows.numberOfRows);
      var rightmostRowRemoved = Math.min(this.height - 1, removedRows.rowEnd);
      var numberOfRowsRemoved = Math.max(0, rightmostRowRemoved - removedRows.rowStart + 1);
      this.height = Math.max(0, this.height - numberOfRowsRemoved);
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(removedColumns) {
      for (var i = 0; i < this.height; i++) {
        this.mapping[i].splice(removedColumns.columnStart, removedColumns.numberOfColumns);
      }

      var rightmostColumnRemoved = Math.min(this.width - 1, removedColumns.columnEnd);
      var numberOfColumnsRemoved = Math.max(0, rightmostColumnRemoved - removedColumns.columnStart + 1);
      this.width = Math.max(0, this.width - numberOfColumnsRemoved);
    }
  }, {
    key: "getEntries",
    value: /*#__PURE__*/regeneratorRuntime.mark(function getEntries(sheet) {
      var y, x, vertex;
      return regeneratorRuntime.wrap(function getEntries$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              y = 0;

            case 1:
              if (!(y < this.height)) {
                _context.next = 14;
                break;
              }

              x = 0;

            case 3:
              if (!(x < this.width)) {
                _context.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [(0, _Cell.simpleCellAddress)(sheet, x, y), vertex];

            case 8:
              ++x;
              _context.next = 3;
              break;

            case 11:
              ++y;
              _context.next = 1;
              break;

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, getEntries, this);
    })
  }, {
    key: "verticesFromColumn",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromColumn(column) {
      var y, vertex;
      return regeneratorRuntime.wrap(function verticesFromColumn$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              y = 0;

            case 1:
              if (!(y < this.height)) {
                _context2.next = 9;
                break;
              }

              vertex = this.getCellVertex(column, y);

              if (!vertex) {
                _context2.next = 6;
                break;
              }

              _context2.next = 6;
              return vertex;

            case 6:
              ++y;
              _context2.next = 1;
              break;

            case 9:
            case "end":
              return _context2.stop();
          }
        }
      }, verticesFromColumn, this);
    })
  }, {
    key: "verticesFromRow",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRow(row) {
      var x, vertex;
      return regeneratorRuntime.wrap(function verticesFromRow$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              x = 0;

            case 1:
              if (!(x < this.width)) {
                _context3.next = 9;
                break;
              }

              vertex = this.getCellVertex(x, row);

              if (!vertex) {
                _context3.next = 6;
                break;
              }

              _context3.next = 6;
              return vertex;

            case 6:
              ++x;
              _context3.next = 1;
              break;

            case 9:
            case "end":
              return _context3.stop();
          }
        }
      }, verticesFromRow, this);
    })
  }, {
    key: "verticesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromColumnsSpan(columnsSpan) {
      var x, y, vertex;
      return regeneratorRuntime.wrap(function verticesFromColumnsSpan$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              x = columnsSpan.columnStart;

            case 1:
              if (!(x <= columnsSpan.columnEnd)) {
                _context4.next = 14;
                break;
              }

              y = 0;

            case 3:
              if (!(y < this.height)) {
                _context4.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context4.next = 8;
                break;
              }

              _context4.next = 8;
              return vertex;

            case 8:
              ++y;
              _context4.next = 3;
              break;

            case 11:
              ++x;
              _context4.next = 1;
              break;

            case 14:
            case "end":
              return _context4.stop();
          }
        }
      }, verticesFromColumnsSpan, this);
    })
  }, {
    key: "verticesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function verticesFromRowsSpan(rowsSpan) {
      var x, y, vertex;
      return regeneratorRuntime.wrap(function verticesFromRowsSpan$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              x = 0;

            case 1:
              if (!(x < this.width)) {
                _context5.next = 14;
                break;
              }

              y = rowsSpan.rowStart;

            case 3:
              if (!(y <= rowsSpan.rowEnd)) {
                _context5.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context5.next = 8;
                break;
              }

              _context5.next = 8;
              return vertex;

            case 8:
              ++y;
              _context5.next = 3;
              break;

            case 11:
              ++x;
              _context5.next = 1;
              break;

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, verticesFromRowsSpan, this);
    })
  }, {
    key: "entriesFromRowsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromRowsSpan(rowsSpan) {
      var x, y, vertex;
      return regeneratorRuntime.wrap(function entriesFromRowsSpan$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              x = 0;

            case 1:
              if (!(x < this.width)) {
                _context6.next = 14;
                break;
              }

              y = rowsSpan.rowStart;

            case 3:
              if (!(y <= rowsSpan.rowEnd)) {
                _context6.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context6.next = 8;
                break;
              }

              _context6.next = 8;
              return [(0, _Cell.simpleCellAddress)(rowsSpan.sheet, x, y), vertex];

            case 8:
              ++y;
              _context6.next = 3;
              break;

            case 11:
              ++x;
              _context6.next = 1;
              break;

            case 14:
            case "end":
              return _context6.stop();
          }
        }
      }, entriesFromRowsSpan, this);
    })
  }, {
    key: "entriesFromColumnsSpan",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromColumnsSpan(columnsSpan) {
      var y, x, vertex;
      return regeneratorRuntime.wrap(function entriesFromColumnsSpan$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              y = 0;

            case 1:
              if (!(y < this.height)) {
                _context7.next = 14;
                break;
              }

              x = columnsSpan.columnStart;

            case 3:
              if (!(x <= columnsSpan.columnEnd)) {
                _context7.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context7.next = 8;
                break;
              }

              _context7.next = 8;
              return [(0, _Cell.simpleCellAddress)(columnsSpan.sheet, x, y), vertex];

            case 8:
              ++x;
              _context7.next = 3;
              break;

            case 11:
              ++y;
              _context7.next = 1;
              break;

            case 14:
            case "end":
              return _context7.stop();
          }
        }
      }, entriesFromColumnsSpan, this);
    })
  }, {
    key: "vertices",
    value: /*#__PURE__*/regeneratorRuntime.mark(function vertices() {
      var y, x, vertex;
      return regeneratorRuntime.wrap(function vertices$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              y = 0;

            case 1:
              if (!(y < this.height)) {
                _context8.next = 14;
                break;
              }

              x = 0;

            case 3:
              if (!(x < this.width)) {
                _context8.next = 11;
                break;
              }

              vertex = this.getCellVertex(x, y);

              if (!vertex) {
                _context8.next = 8;
                break;
              }

              _context8.next = 8;
              return vertex;

            case 8:
              ++x;
              _context8.next = 3;
              break;

            case 11:
              ++y;
              _context8.next = 1;
              break;

            case 14:
            case "end":
              return _context8.stop();
          }
        }
      }, vertices, this);
    })
  }, {
    key: "getCellVertex",
    value: function getCellVertex(x, y) {
      var _a;

      return (_a = this.mapping[y]) === null || _a === void 0 ? void 0 : _a[x];
    }
  }]);

  return DenseStrategy;
}();

exports.DenseStrategy = DenseStrategy;

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DetailedCellError = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var DetailedCellError = /*#__PURE__*/function () {
  function DetailedCellError(error, value, address) {
    _classCallCheck(this, DetailedCellError);

    var _a;

    this.value = value;
    this.address = address;
    this.type = error.type;
    this.message = (_a = error.message) !== null && _a !== void 0 ? _a : '';
  }

  _createClass(DetailedCellError, [{
    key: "toString",
    value: function toString() {
      return this.value;
    }
  }, {
    key: "valueOf",
    value: function valueOf() {
      return this.value;
    }
  }]);

  return DetailedCellError;
}();

exports.DetailedCellError = DetailedCellError;

/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(82);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

exports.__esModule = true;
exports.Config = void 0;
exports.getDefaultConfig = getDefaultConfig;

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(125);

__webpack_require__(122);

__webpack_require__(154);

__webpack_require__(144);

__webpack_require__(146);

var _ArgumentSanitization = __webpack_require__(290);

var _DateTimeDefault = __webpack_require__(292);

var _DateTimeHelper = __webpack_require__(294);

var _ChooseAddressMappingPolicy = __webpack_require__(295);

var _errors = __webpack_require__(165);

var _format = __webpack_require__(296);

var _licenseKeyValidator = __webpack_require__(300);

var _HyperFormula = __webpack_require__(306);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var PossibleGPUModeString = ['gpu', 'cpu', 'dev'];
var privatePool = new WeakMap();

var Config = /*#__PURE__*/function () {
  function Config() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var showDeprecatedWarns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

    _classCallCheck(this, Config);

    var accentSensitive = options.accentSensitive,
        binarySearchThreshold = options.binarySearchThreshold,
        caseSensitive = options.caseSensitive,
        caseFirst = options.caseFirst,
        chooseAddressMappingPolicy = options.chooseAddressMappingPolicy,
        currencySymbol = options.currencySymbol,
        dateFormats = options.dateFormats,
        decimalSeparator = options.decimalSeparator,
        evaluateNullToZero = options.evaluateNullToZero,
        functionArgSeparator = options.functionArgSeparator,
        functionPlugins = options.functionPlugins,
        gpujs = options.gpujs,
        gpuMode = options.gpuMode,
        ignorePunctuation = options.ignorePunctuation,
        leapYear1900 = options.leapYear1900,
        localeLang = options.localeLang,
        language = options.language,
        licenseKey = options.licenseKey,
        matchWholeCell = options.matchWholeCell,
        arrayColumnSeparator = options.arrayColumnSeparator,
        arrayRowSeparator = options.arrayRowSeparator,
        maxRows = options.maxRows,
        maxColumns = options.maxColumns,
        nullYear = options.nullYear,
        nullDate = options.nullDate,
        parseDateTime = options.parseDateTime,
        precisionEpsilon = options.precisionEpsilon,
        precisionRounding = options.precisionRounding,
        stringifyDateTime = options.stringifyDateTime,
        stringifyDuration = options.stringifyDuration,
        smartRounding = options.smartRounding,
        timeFormats = options.timeFormats,
        thousandSeparator = options.thousandSeparator,
        useArrayArithmetic = options.useArrayArithmetic,
        useStats = options.useStats,
        undoLimit = options.undoLimit,
        useColumnIndex = options.useColumnIndex,
        useRegularExpressions = options.useRegularExpressions,
        useWildcards = options.useWildcards;

    if (showDeprecatedWarns) {
      this.warnDeprecatedOptions(options);
    }

    this.useArrayArithmetic = (0, _ArgumentSanitization.configValueFromParam)(useArrayArithmetic, 'boolean', 'useArrayArithmetic');
    this.accentSensitive = (0, _ArgumentSanitization.configValueFromParam)(accentSensitive, 'boolean', 'accentSensitive');
    this.caseSensitive = (0, _ArgumentSanitization.configValueFromParam)(caseSensitive, 'boolean', 'caseSensitive');
    this.caseFirst = (0, _ArgumentSanitization.configValueFromParam)(caseFirst, ['upper', 'lower', 'false'], 'caseFirst');
    this.ignorePunctuation = (0, _ArgumentSanitization.configValueFromParam)(ignorePunctuation, 'boolean', 'ignorePunctuation');
    this.chooseAddressMappingPolicy = chooseAddressMappingPolicy !== null && chooseAddressMappingPolicy !== void 0 ? chooseAddressMappingPolicy : Config.defaultConfig.chooseAddressMappingPolicy;
    this.dateFormats = _toConsumableArray((0, _ArgumentSanitization.configValueFromParamCheck)(dateFormats, Array.isArray, 'array', 'dateFormats'));
    this.timeFormats = _toConsumableArray((0, _ArgumentSanitization.configValueFromParamCheck)(timeFormats, Array.isArray, 'array', 'timeFormats'));
    this.functionArgSeparator = (0, _ArgumentSanitization.configValueFromParam)(functionArgSeparator, 'string', 'functionArgSeparator');
    this.decimalSeparator = (0, _ArgumentSanitization.configValueFromParam)(decimalSeparator, ['.', ','], 'decimalSeparator');
    this.language = (0, _ArgumentSanitization.configValueFromParam)(language, 'string', 'language');
    this.licenseKey = (0, _ArgumentSanitization.configValueFromParam)(licenseKey, 'string', 'licenseKey');
    this.thousandSeparator = (0, _ArgumentSanitization.configValueFromParam)(thousandSeparator, ['', ',', ' ', '.'], 'thousandSeparator');
    this.arrayColumnSeparator = (0, _ArgumentSanitization.configValueFromParam)(arrayColumnSeparator, [',', ';'], 'arrayColumnSeparator');
    this.arrayRowSeparator = (0, _ArgumentSanitization.configValueFromParam)(arrayRowSeparator, [';', '|'], 'arrayRowSeparator');
    this.localeLang = (0, _ArgumentSanitization.configValueFromParam)(localeLang, 'string', 'localeLang');
    this.functionPlugins = _toConsumableArray(functionPlugins !== null && functionPlugins !== void 0 ? functionPlugins : Config.defaultConfig.functionPlugins);
    this.gpujs = gpujs !== null && gpujs !== void 0 ? gpujs : Config.defaultConfig.gpujs;
    this.gpuMode = (0, _ArgumentSanitization.configValueFromParam)(gpuMode, PossibleGPUModeString, 'gpuMode');
    this.smartRounding = (0, _ArgumentSanitization.configValueFromParam)(smartRounding, 'boolean', 'smartRounding');
    this.evaluateNullToZero = (0, _ArgumentSanitization.configValueFromParam)(evaluateNullToZero, 'boolean', 'evaluateNullToZero');
    this.nullYear = (0, _ArgumentSanitization.configValueFromParam)(nullYear, 'number', 'nullYear');
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.nullYear, 'nullYear', 0);
    (0, _ArgumentSanitization.validateNumberToBeAtMost)(this.nullYear, 'nullYear', 100);
    this.precisionRounding = (0, _ArgumentSanitization.configValueFromParam)(precisionRounding, 'number', 'precisionRounding');
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.precisionRounding, 'precisionRounding', 0);
    this.precisionEpsilon = (0, _ArgumentSanitization.configValueFromParam)(precisionEpsilon, 'number', 'precisionEpsilon');
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.precisionEpsilon, 'precisionEpsilon', 0);
    this.useColumnIndex = (0, _ArgumentSanitization.configValueFromParam)(useColumnIndex, 'boolean', 'useColumnIndex');
    this.useStats = (0, _ArgumentSanitization.configValueFromParam)(useStats, 'boolean', 'useStats');
    this.binarySearchThreshold = binarySearchThreshold !== null && binarySearchThreshold !== void 0 ? binarySearchThreshold : Config.defaultConfig.binarySearchThreshold;
    this.parseDateTime = (0, _ArgumentSanitization.configValueFromParam)(parseDateTime, 'function', 'parseDateTime');
    this.stringifyDateTime = (0, _ArgumentSanitization.configValueFromParam)(stringifyDateTime, 'function', 'stringifyDateTime');
    this.stringifyDuration = (0, _ArgumentSanitization.configValueFromParam)(stringifyDuration, 'function', 'stringifyDuration');
    this.translationPackage = _HyperFormula.HyperFormula.getLanguage(this.language);
    this.errorMapping = this.translationPackage.buildErrorMapping();
    this.nullDate = (0, _ArgumentSanitization.configValueFromParamCheck)(nullDate, _DateTimeHelper.instanceOfSimpleDate, 'IDate', 'nullDate');
    this.leapYear1900 = (0, _ArgumentSanitization.configValueFromParam)(leapYear1900, 'boolean', 'leapYear1900');
    this.undoLimit = (0, _ArgumentSanitization.configValueFromParam)(undoLimit, 'number', 'undoLimit');
    this.useRegularExpressions = (0, _ArgumentSanitization.configValueFromParam)(useRegularExpressions, 'boolean', 'useRegularExpressions');
    this.useWildcards = (0, _ArgumentSanitization.configValueFromParam)(useWildcards, 'boolean', 'useWildcards');
    this.matchWholeCell = (0, _ArgumentSanitization.configValueFromParam)(matchWholeCell, 'boolean', 'matchWholeCell');
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.undoLimit, 'undoLimit', 0);
    this.maxRows = (0, _ArgumentSanitization.configValueFromParam)(maxRows, 'number', 'maxRows');
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.maxRows, 'maxRows', 1);
    this.maxColumns = (0, _ArgumentSanitization.configValueFromParam)(maxColumns, 'number', 'maxColumns');
    this.currencySymbol = _toConsumableArray((0, _ArgumentSanitization.configValueFromParamCheck)(currencySymbol, Array.isArray, 'array', 'currencySymbol'));
    this.currencySymbol.forEach(function (val) {
      if (typeof val !== 'string') {
        throw new _errors.ExpectedValueOfTypeError('string[]', 'currencySymbol');
      }

      if (val === '') {
        throw new _errors.ConfigValueEmpty('currencySymbol');
      }
    });
    (0, _ArgumentSanitization.validateNumberToBeAtLeast)(this.maxColumns, 'maxColumns', 1);
    privatePool.set(this, {
      licenseKeyValidityState: (0, _licenseKeyValidator.checkLicenseKeyValidity)(this.licenseKey)
    });
    (0, _ArgumentSanitization.configCheckIfParametersNotInConflict)({
      value: this.decimalSeparator,
      name: 'decimalSeparator'
    }, {
      value: this.functionArgSeparator,
      name: 'functionArgSeparator'
    }, {
      value: this.thousandSeparator,
      name: 'thousandSeparator'
    });
    (0, _ArgumentSanitization.configCheckIfParametersNotInConflict)({
      value: this.arrayRowSeparator,
      name: 'arrayRowSeparator'
    }, {
      value: this.arrayColumnSeparator,
      name: 'arrayColumnSeparator'
    });
  }
  /**
   * Proxied property to its private counterpart. This makes the property
   * as accessible as the other Config options but without ability to change the value.
   *
   * @internal
   */


  _createClass(Config, [{
    key: "licenseKeyValidityState",
    get: function get() {
      return privatePool.get(this).licenseKeyValidityState;
    }
  }, {
    key: "getConfig",
    value: function getConfig() {
      return getFullConfigFromPartial(this);
    }
  }, {
    key: "mergeConfig",
    value: function mergeConfig(init) {
      var mergedConfig = Object.assign({}, this.getConfig(), init);
      this.warnDeprecatedOptions(init);
      return new Config(mergedConfig, false);
    }
  }, {
    key: "warnDeprecatedOptions",
    value: function warnDeprecatedOptions(options) {
      this.warnDeprecatedIfUsed(options.binarySearchThreshold, 'binarySearchThreshold', '1.1');
      this.warnDeprecatedIfUsed(options.gpujs, 'gpujs', '1.2');

      if (options.gpuMode !== Config.defaultConfig.gpuMode) {
        this.warnDeprecatedIfUsed(options.gpuMode, 'gpuMode', '1.2');
      }
    }
  }, {
    key: "warnDeprecatedIfUsed",
    value: function warnDeprecatedIfUsed(inputValue, paramName, fromVersion, replacementName) {
      if (inputValue !== undefined) {
        if (replacementName === undefined) {
          console.warn("".concat(paramName, " option is deprecated since ").concat(fromVersion));
        } else {
          console.warn("".concat(paramName, " option is deprecated since ").concat(fromVersion, ", please use ").concat(replacementName));
        }
      }
    }
  }]);

  return Config;
}();

exports.Config = Config;
Config.defaultConfig = {
  accentSensitive: false,
  binarySearchThreshold: 20,
  currencySymbol: ['$'],
  caseSensitive: false,
  caseFirst: 'lower',
  chooseAddressMappingPolicy: new _ChooseAddressMappingPolicy.AlwaysDense(),
  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],
  decimalSeparator: '.',
  evaluateNullToZero: false,
  functionArgSeparator: ',',
  functionPlugins: [],
  gpujs: undefined,
  gpuMode: 'gpu',
  ignorePunctuation: false,
  language: 'enGB',
  licenseKey: '',
  leapYear1900: false,
  localeLang: 'en',
  matchWholeCell: true,
  arrayColumnSeparator: ',',
  arrayRowSeparator: ';',
  maxRows: 40000,
  maxColumns: 18278,
  nullYear: 30,
  nullDate: {
    year: 1899,
    month: 12,
    day: 30
  },
  parseDateTime: _DateTimeDefault.defaultParseToDateTime,
  precisionEpsilon: 1e-13,
  precisionRounding: 14,
  smartRounding: true,
  stringifyDateTime: _format.defaultStringifyDateTime,
  stringifyDuration: _format.defaultStringifyDuration,
  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],
  thousandSeparator: '',
  undoLimit: 20,
  useRegularExpressions: false,
  useWildcards: true,
  useColumnIndex: false,
  useStats: false,
  useArrayArithmetic: false
};

function getFullConfigFromPartial(partialConfig) {
  var _a;

  var ret = {};

  for (var key in Config.defaultConfig) {
    var val = (_a = partialConfig[key]) !== null && _a !== void 0 ? _a : Config.defaultConfig[key];

    if (Array.isArray(val)) {
      ret[key] = _toConsumableArray(val);
    } else {
      ret[key] = val;
    }
  }

  return ret;
}

function getDefaultConfig() {
  return getFullConfigFromPartial({});
}

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.configCheckIfParametersNotInConflict = configCheckIfParametersNotInConflict;
exports.configValueFromParam = configValueFromParam;
exports.configValueFromParamCheck = configValueFromParamCheck;
exports.validateArgToType = validateArgToType;
exports.validateNumberToBeAtLeast = validateNumberToBeAtLeast;
exports.validateNumberToBeAtMost = validateNumberToBeAtMost;

__webpack_require__(252);

__webpack_require__(291);

__webpack_require__(229);

__webpack_require__(150);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(154);

__webpack_require__(81);

__webpack_require__(272);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

var _Config = __webpack_require__(289);

var _errors = __webpack_require__(165);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function configValueFromParam(inputValue, expectedType, paramName) {
  if (typeof inputValue === 'undefined') {
    return _Config.Config.defaultConfig[paramName];
  } else if (typeof expectedType === 'string') {
    if (_typeof(inputValue) === expectedType) {
      return inputValue;
    } else {
      throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
    }
  } else {
    if (expectedType.includes(inputValue)) {
      return inputValue;
    } else {
      throw new _errors.ExpectedOneOfValuesError(expectedType.map(function (val) {
        return "'".concat(val, "'");
      }).join(' '), paramName);
    }
  }
}

function validateNumberToBeAtLeast(value, paramName, minimum) {
  if (value < minimum) {
    throw new _errors.ConfigValueTooSmallError(paramName, minimum);
  }
}

function validateNumberToBeAtMost(value, paramName, maximum) {
  if (value > maximum) {
    throw new _errors.ConfigValueTooBigError(paramName, maximum);
  }
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function configValueFromParamCheck(inputValue, typeCheck, expectedType, paramName) {
  if (typeCheck(inputValue)) {
    return inputValue;
  } else if (typeof inputValue === 'undefined') {
    return _Config.Config.defaultConfig[paramName];
  } else {
    throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
  }
}

function configCheckIfParametersNotInConflict() {
  var valuesMap = new Map();

  for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
    params[_key] = arguments[_key];
  }

  params.forEach(function (param) {
    var names = valuesMap.get(param.value) || [];
    names.push(param.name);
    valuesMap.set(param.value, names);
  });
  var duplicates = [];

  var _iterator = _createForOfIteratorHelper(valuesMap.values()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var entry = _step.value;

      if (entry.length > 1) {
        duplicates.push(entry);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (duplicates.length > 0) {
    duplicates.forEach(function (entry) {
      return entry.sort();
    });
    var paramNames = duplicates.map(function (entry) {
      return "[".concat(entry, "]");
    }).join('; ');
    throw new Error("Config initialization failed. Parameters in conflict: ".concat(paramNames));
  }
}

function validateArgToType(inputValue, expectedType, paramName) {
  if (_typeof(inputValue) !== expectedType) {
    throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
  }
}

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var notARegExp = __webpack_require__(140);
var requireObjectCoercible = __webpack_require__(13);
var toString = __webpack_require__(94);
var correctIsRegExpLogic = __webpack_require__(142);

var stringIndexOf = uncurryThis(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(
      toString(requireObjectCoercible(this)),
      toString(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : undefined
    );
  }
});


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.defaultParseToDateTime = defaultParseToDateTime;
exports.secondsExtendedRegexp = void 0;

__webpack_require__(250);

__webpack_require__(103);

__webpack_require__(179);

__webpack_require__(171);

__webpack_require__(252);

__webpack_require__(291);

__webpack_require__(77);

__webpack_require__(144);

__webpack_require__(293);

__webpack_require__(161);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function defaultParseToDateTime(dateTimeString, dateFormat, timeFormat) {
  dateTimeString = dateTimeString.replace(/\s\s+/g, ' ').trim().toLowerCase();
  var ampmtoken = dateTimeString.substring(dateTimeString.length - 2);

  if (ampmtoken === 'am' || ampmtoken === 'pm') {
    dateTimeString = dateTimeString.substring(0, dateTimeString.length - 2).trim();
  } else {
    ampmtoken = dateTimeString.substring(dateTimeString.length - 1);

    if (ampmtoken === 'a' || ampmtoken === 'p') {
      dateTimeString = dateTimeString.substring(0, dateTimeString.length - 1).trim();
    } else {
      ampmtoken = undefined;
    }
  }

  var dateItems = dateTimeString.split(/[ /.-]/g);

  if (dateItems.length >= 2 && dateItems[dateItems.length - 2].includes(':')) {
    dateItems[dateItems.length - 2] = dateItems[dateItems.length - 2] + '.' + dateItems[dateItems.length - 1];
    dateItems.pop();
  }

  var timeItems = dateItems[dateItems.length - 1].split(':');

  if (ampmtoken !== undefined) {
    timeItems.push(ampmtoken);
  }

  if (dateItems.length === 1) {
    return defaultParseToTime(timeItems, timeFormat);
  }

  if (timeItems.length === 1) {
    return defaultParseToDate(dateItems, dateFormat);
  }

  var parsedDate = defaultParseToDate(dateItems.slice(0, dateItems.length - 1), dateFormat);
  var parsedTime = defaultParseToTime(timeItems, timeFormat);

  if (parsedDate === undefined) {
    return undefined;
  } else if (parsedTime === undefined) {
    return undefined;
  } else {
    return Object.assign(Object.assign({}, parsedDate), parsedTime);
  }
}

var secondsExtendedRegexp = /^ss\.(s+|0+)$/;
exports.secondsExtendedRegexp = secondsExtendedRegexp;

function defaultParseToTime(timeItems, timeFormat) {
  if (timeFormat === undefined) {
    return undefined;
  }

  timeFormat = timeFormat.toLowerCase();

  if (timeFormat.endsWith('am/pm')) {
    timeFormat = timeFormat.substring(0, timeFormat.length - 5).trim();
  } else if (timeFormat.endsWith('a/p')) {
    timeFormat = timeFormat.substring(0, timeFormat.length - 3).trim();
  }

  var formatItems = timeFormat.split(':');
  var ampm = undefined;

  if (timeItems[timeItems.length - 1] === 'am' || timeItems[timeItems.length - 1] === 'a') {
    ampm = false;
    timeItems.pop();
  } else if (timeItems[timeItems.length - 1] === 'pm' || timeItems[timeItems.length - 1] === 'p') {
    ampm = true;
    timeItems.pop();
  }

  var fractionOfSecondPrecision = 0;

  if (formatItems.length >= 1 && secondsExtendedRegexp.test(formatItems[formatItems.length - 1])) {
    fractionOfSecondPrecision = formatItems[formatItems.length - 1].length - 3;
    formatItems[formatItems.length - 1] = 'ss';
  }

  if (timeItems.length !== formatItems.length) {
    return undefined;
  }

  var hourIndex = formatItems.indexOf('hh');
  var minuteIndex = formatItems.indexOf('mm');
  var secondIndex = formatItems.indexOf('ss');
  var hourString = hourIndex !== -1 ? timeItems[hourIndex] : '0';

  if (!/^\d+$/.test(hourString)) {
    return undefined;
  }

  var hours = Number(hourString);

  if (ampm !== undefined) {
    if (hours < 0 || hours > 12) {
      return undefined;
    }

    hours = hours % 12;

    if (ampm) {
      hours = hours + 12;
    }
  }

  var minuteString = minuteIndex !== -1 ? timeItems[minuteIndex] : '0';

  if (!/^\d+$/.test(minuteString)) {
    return undefined;
  }

  var minutes = Number(minuteString);
  var secondString = secondIndex !== -1 ? timeItems[secondIndex] : '0';

  if (!/^\d+(\.\d+)?$/.test(secondString)) {
    return undefined;
  }

  var seconds = Number(secondString);
  seconds = Math.round(seconds * Math.pow(10, fractionOfSecondPrecision)) / Math.pow(10, fractionOfSecondPrecision);
  return {
    hours: hours,
    minutes: minutes,
    seconds: seconds
  };
}

function defaultParseToDate(dateItems, dateFormat) {
  if (dateFormat === undefined) {
    return undefined;
  }

  var formatItems = dateFormat.toLowerCase().split(/[ /.-]/g);

  if (dateItems.length !== formatItems.length) {
    return undefined;
  }

  var monthIndex = formatItems.indexOf('mm');
  var dayIndex = formatItems.indexOf('dd');
  var yearIndexLong = formatItems.indexOf('yyyy');
  var yearIndexShort = formatItems.indexOf('yy');

  if (!(monthIndex in dateItems) || !(dayIndex in dateItems) || !(yearIndexLong in dateItems) && !(yearIndexShort in dateItems)) {
    return undefined;
  }

  if (yearIndexLong in dateItems && yearIndexShort in dateItems) {
    return undefined;
  }

  var year;

  if (yearIndexLong in dateItems) {
    var yearString = dateItems[yearIndexLong];

    if (/^\d+$/.test(yearString)) {
      year = Number(yearString);

      if (year < 1000 || year > 9999) {
        return undefined;
      }
    } else {
      return undefined;
    }
  } else {
    var _yearString = dateItems[yearIndexShort];

    if (/^\d+$/.test(_yearString)) {
      year = Number(_yearString);

      if (year < 0 || year > 99) {
        return undefined;
      }
    } else {
      return undefined;
    }
  }

  var monthString = dateItems[monthIndex];

  if (!/^\d+$/.test(monthString)) {
    return undefined;
  }

  var month = Number(monthString);
  var dayString = dateItems[dayIndex];

  if (!/^\d+$/.test(dayString)) {
    return undefined;
  }

  var day = Number(dayString);
  return {
    year: year,
    month: month,
    day: day
  };
}

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var uncurryThis = __webpack_require__(11);
var getOwnPropertyDescriptor = __webpack_require__(52).f;
var toLength = __webpack_require__(64);
var toString = __webpack_require__(94);
var notARegExp = __webpack_require__(140);
var requireObjectCoercible = __webpack_require__(13);
var correctIsRegExpLogic = __webpack_require__(142);
var IS_PURE = __webpack_require__(7);

// eslint-disable-next-line es/no-string-prototype-endswith -- safe
var un$EndsWith = uncurryThis(''.endsWith);
var slice = uncurryThis(''.slice);
var min = Math.min;

var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith');
// https://github.com/zloirock/core-js/pull/702
var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
  var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
  return descriptor && !descriptor.writable;
}();

// `String.prototype.endsWith` method
// https://tc39.es/ecma262/#sec-string.prototype.endswith
$({ target: 'String', proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
  endsWith: function endsWith(searchString /* , endPosition = @length */) {
    var that = toString(requireObjectCoercible(this));
    notARegExp(searchString);
    var endPosition = arguments.length > 1 ? arguments[1] : undefined;
    var len = that.length;
    var end = endPosition === undefined ? len : min(toLength(endPosition), len);
    var search = toString(searchString);
    return un$EndsWith
      ? un$EndsWith(that, search, end)
      : slice(that, end - search.length, end) === search;
  }
});


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.DateTimeHelper = void 0;
exports.instanceOfSimpleDate = instanceOfSimpleDate;
exports.instanceOfSimpleTime = instanceOfSimpleTime;
exports.maxDate = void 0;
exports.numberToSimpleTime = numberToSimpleTime;
exports.offsetMonth = offsetMonth;
exports.roundToNearestSecond = roundToNearestSecond;
exports.timeToNumber = timeToNumber;
exports.toBasisEU = toBasisEU;
exports.truncateDayInMonth = truncateDayInMonth;

__webpack_require__(144);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

var _InterpreterValue = __webpack_require__(255);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var prefSumDays = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];

function instanceOfSimpleDate(obj) {
  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {
    return 'year' in obj && typeof obj.year === 'number' && 'month' in obj && typeof obj.month === 'number' && 'day' in obj && typeof obj.day === 'number';
  } else {
    return false;
  }
}

function instanceOfSimpleTime(obj) {
  if (obj && (_typeof(obj) === 'object' || typeof obj === 'function')) {
    return 'hours' in obj && typeof obj.hours === 'number' && 'minutes' in obj && typeof obj.minutes === 'number' && 'seconds' in obj && typeof obj.seconds === 'number';
  } else {
    return false;
  }
}

var maxDate = {
  year: 9999,
  month: 12,
  day: 31
};
exports.maxDate = maxDate;

var DateTimeHelper = /*#__PURE__*/function () {
  function DateTimeHelper(config) {
    _classCallCheck(this, DateTimeHelper);

    this.config = config;
    this.minDateAboluteValue = this.dateToNumberFromZero(config.nullDate);
    this.maxDateValue = this.dateToNumber(maxDate);
    this.leapYear1900 = config.leapYear1900; // code below fixes epochYearStart while being leapYear1900 sensitive
    // if nullDate is earlier than fateful 28 Feb 1900 and 1900 is not supposed to be leap year, then we should
    // add two days (this is the config default)
    // otherwise only one day

    if (!this.leapYear1900 && 0 <= this.dateToNumber({
      year: 1900,
      month: 2,
      day: 28
    })) {
      this.epochYearZero = this.numberToSimpleDate(2).year;
    } else {
      this.epochYearZero = this.numberToSimpleDate(1).year;
    }

    this.parseDateTime = config.parseDateTime;
  }

  _createClass(DateTimeHelper, [{
    key: "getWithinBounds",
    value: function getWithinBounds(dayNumber) {
      return dayNumber <= this.maxDateValue && dayNumber >= 0 ? dayNumber : undefined;
    }
  }, {
    key: "dateStringToDateNumber",
    value: function dateStringToDateNumber(dateTimeString) {
      var _this$parseDateTimeFr = this.parseDateTimeFromConfigFormats(dateTimeString),
          dateTime = _this$parseDateTimeFr.dateTime,
          _this$parseDateTimeFr2 = _this$parseDateTimeFr.dateFormat,
          dateFormat = _this$parseDateTimeFr2 === void 0 ? '' : _this$parseDateTimeFr2,
          _this$parseDateTimeFr3 = _this$parseDateTimeFr.timeFormat,
          timeFormat = _this$parseDateTimeFr3 === void 0 ? '' : _this$parseDateTimeFr3;

      if (dateTime === undefined) {
        return undefined;
      }

      if (instanceOfSimpleTime(dateTime)) {
        if (instanceOfSimpleDate(dateTime)) {
          return new _InterpreterValue.DateTimeNumber(timeToNumber(dateTime) + this.dateToNumber(dateTime), dateFormat + ' ' + timeFormat);
        } else {
          return new _InterpreterValue.TimeNumber(timeToNumber(dateTime), timeFormat);
        }
      } else {
        if (instanceOfSimpleDate(dateTime)) {
          return new _InterpreterValue.DateNumber(this.dateToNumber(dateTime), dateFormat);
        } else {
          return 0;
        }
      }
    }
  }, {
    key: "parseDateTimeFromConfigFormats",
    value: function parseDateTimeFromConfigFormats(dateTimeString) {
      return this.parseDateTimeFromFormats(dateTimeString, this.config.dateFormats, this.config.timeFormats);
    }
  }, {
    key: "getNullYear",
    value: function getNullYear() {
      return this.config.nullYear;
    }
  }, {
    key: "getEpochYearZero",
    value: function getEpochYearZero() {
      return this.epochYearZero;
    }
  }, {
    key: "isValidDate",
    value: function isValidDate(date) {
      if (isNaN(date.year) || isNaN(date.month) || isNaN(date.day)) {
        return false;
      } else if (date.day !== Math.round(date.day) || date.month !== Math.round(date.month) || date.year !== Math.round(date.year)) {
        return false;
      } else if (date.year < 1582) {
        // Gregorian calendar start
        return false;
      } else if (date.month < 1 || date.month > 12) {
        return false;
      } else if (date.day < 1) {
        return false;
      } else if (this.isLeapYear(date.year) && date.month === 2) {
        return date.day <= 29;
      } else {
        return date.day <= numDays[date.month - 1];
      }
    }
  }, {
    key: "dateToNumber",
    value: function dateToNumber(date) {
      return this.dateToNumberFromZero(date) - this.minDateAboluteValue;
    }
  }, {
    key: "relativeNumberToAbsoluteNumber",
    value: function relativeNumberToAbsoluteNumber(arg) {
      return arg + this.minDateAboluteValue - (this.leapYear1900 ? 1 : 0);
    }
  }, {
    key: "numberToSimpleDate",
    value: function numberToSimpleDate(arg) {
      var dateNumber = Math.floor(arg) + this.minDateAboluteValue;
      var year = Math.floor(dateNumber / 365.2425);

      if (this.dateToNumberFromZero({
        year: year + 1,
        month: 1,
        day: 1
      }) <= dateNumber) {
        year++;
      } else if (this.dateToNumberFromZero({
        year: year - 1,
        month: 1,
        day: 1
      }) > dateNumber) {
        year--;
      }

      var dayOfYear = dateNumber - this.dateToNumberFromZero({
        year: year,
        month: 1,
        day: 1
      });
      var month = dayToMonth(dayOfYear - (this.isLeapYear(year) && dayOfYear >= 59 ? 1 : 0));
      var day = dayOfYear - prefSumDays[month] - (this.isLeapYear(year) && month > 1 ? 1 : 0);
      return {
        year: year,
        month: month + 1,
        day: day + 1
      };
    }
  }, {
    key: "numberToSimpleDateTime",
    value: function numberToSimpleDateTime(arg) {
      return Object.assign(Object.assign({}, this.numberToSimpleDate(Math.floor(arg))), numberToSimpleTime(arg % 1));
    }
  }, {
    key: "leapYearsCount",
    value: function leapYearsCount(year) {
      return Math.floor(year / 4) - Math.floor(year / 100) + Math.floor(year / 400) + (this.config.leapYear1900 && year >= 1900 ? 1 : 0);
    }
  }, {
    key: "daysInMonth",
    value: function daysInMonth(year, month) {
      if (this.isLeapYear(year) && month === 2) {
        return 29;
      } else {
        return numDays[month - 1];
      }
    }
  }, {
    key: "endOfMonth",
    value: function endOfMonth(date) {
      return {
        year: date.year,
        month: date.month,
        day: this.daysInMonth(date.year, date.month)
      };
    }
  }, {
    key: "toBasisUS",
    value: function toBasisUS(start, end) {
      if (start.day === 31) {
        start.day = 30;
      }

      if (start.day === 30 && end.day === 31) {
        end.day = 30;
      }

      if (start.month === 2 && start.day === this.daysInMonth(start.year, start.month)) {
        start.day = 30;

        if (end.month === 2 && end.day === this.daysInMonth(end.year, end.month)) {
          end.day = 30;
        }
      }

      return [start, end];
    }
  }, {
    key: "yearLengthForBasis",
    value: function yearLengthForBasis(start, end) {
      if (start.year !== end.year) {
        if (start.year + 1 !== end.year || start.month < end.month || start.month === end.month && start.day < end.day) {
          // this is true IFF at least one year of gap between dates
          return (this.leapYearsCount(end.year) - this.leapYearsCount(start.year - 1)) / (end.year - start.year + 1) + 365;
        }

        if (this.countLeapDays(end) !== this.countLeapDays({
          year: start.year,
          month: start.month,
          day: start.day - 1
        })) {
          return 366;
        } else {
          return 365;
        }
      }

      if (this.isLeapYear(start.year)) {
        return 366;
      } else {
        return 365;
      }
    }
  }, {
    key: "parseSingleFormat",
    value: function parseSingleFormat(dateString, dateFormat, timeFormat) {
      var dateTime = this.parseDateTime(dateString, dateFormat, timeFormat);

      if (instanceOfSimpleDate(dateTime)) {
        if (dateTime.year >= 0 && dateTime.year < 100) {
          if (dateTime.year < this.getNullYear()) {
            dateTime.year += 2000;
          } else {
            dateTime.year += 1900;
          }
        }

        if (!this.isValidDate(dateTime)) {
          return undefined;
        }
      }

      return dateTime;
    }
  }, {
    key: "parseDateTimeFromFormats",
    value: function parseDateTimeFromFormats(dateTimeString, dateFormats, timeFormats) {
      var dateFormatsIterate = dateFormats.length === 0 ? [undefined] : dateFormats;
      var timeFormatsIterate = timeFormats.length === 0 ? [undefined] : timeFormats;

      var _iterator = _createForOfIteratorHelper(dateFormatsIterate),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var dateFormat = _step.value;

          var _iterator2 = _createForOfIteratorHelper(timeFormatsIterate),
              _step2;

          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var timeFormat = _step2.value;
              var dateTime = this.parseSingleFormat(dateTimeString, dateFormat, timeFormat);

              if (dateTime !== undefined) {
                return {
                  dateTime: dateTime,
                  timeFormat: timeFormat,
                  dateFormat: dateFormat
                };
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return {};
    }
  }, {
    key: "countLeapDays",
    value: function countLeapDays(date) {
      if (date.month > 2 || date.month === 2 && date.day >= 29) {
        return this.leapYearsCount(date.year);
      } else {
        return this.leapYearsCount(date.year - 1);
      }
    }
  }, {
    key: "dateToNumberFromZero",
    value: function dateToNumberFromZero(date) {
      return 365 * date.year + prefSumDays[date.month - 1] + date.day - 1 + (date.month <= 2 ? this.leapYearsCount(date.year - 1) : this.leapYearsCount(date.year));
    }
  }, {
    key: "isLeapYear",
    value: function isLeapYear(year) {
      if (year % 4) {
        return false;
      } else if (year % 100) {
        return true;
      } else if (year % 400) {
        return year === 1900 && this.config.leapYear1900;
      } else {
        return true;
      }
    }
  }]);

  return DateTimeHelper;
}();

exports.DateTimeHelper = DateTimeHelper;

function dayToMonth(dayOfYear) {
  var month = 0;

  if (prefSumDays[month + 6] <= dayOfYear) {
    month += 6;
  }

  if (prefSumDays[month + 3] <= dayOfYear) {
    month += 3;
  }

  if (prefSumDays[month + 2] <= dayOfYear) {
    month += 2;
  } else if (prefSumDays[month + 1] <= dayOfYear) {
    month += 1;
  }

  return month;
}

function offsetMonth(date, offset) {
  var totalM = 12 * date.year + date.month - 1 + offset;
  return {
    year: Math.floor(totalM / 12),
    month: totalM % 12 + 1,
    day: date.day
  };
}

function truncateDayInMonth(date) {
  return {
    year: date.year,
    month: date.month,
    day: Math.min(date.day, numDays[date.month - 1])
  };
}

function roundToNearestSecond(arg) {
  return Math.round(arg * 3600 * 24) / (3600 * 24);
}

function numberToSimpleTime(arg) {
  arg = Math.round(arg * 24 * 60 * 60 * 100000) / (24 * 60 * 60 * 100000);
  arg *= 24;
  var hours = Math.floor(arg);
  arg -= hours;
  arg *= 60;
  var minutes = Math.floor(arg);
  arg -= minutes;
  arg *= 60;
  var seconds = Math.round(arg * 100000) / 100000;
  return {
    hours: hours,
    minutes: minutes,
    seconds: seconds
  };
}

function timeToNumber(time) {
  return ((time.seconds / 60 + time.minutes) / 60 + time.hours) / 24;
}

function toBasisEU(date) {
  return {
    year: date.year,
    month: date.month,
    day: Math.min(30, date.day)
  };
}

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.DenseSparseChooseBasedOnThreshold = exports.AlwaysSparse = exports.AlwaysDense = void 0;

var _DenseStrategy = __webpack_require__(287);

var _SparseStrategy = __webpack_require__(286);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var DenseSparseChooseBasedOnThreshold = /*#__PURE__*/function () {
  function DenseSparseChooseBasedOnThreshold(threshold) {
    _classCallCheck(this, DenseSparseChooseBasedOnThreshold);

    this.threshold = threshold;
  }

  _createClass(DenseSparseChooseBasedOnThreshold, [{
    key: "call",
    value: function call(fill) {
      if (fill > this.threshold) {
        return _DenseStrategy.DenseStrategy;
      } else {
        return _SparseStrategy.SparseStrategy;
      }
    }
  }]);

  return DenseSparseChooseBasedOnThreshold;
}();

exports.DenseSparseChooseBasedOnThreshold = DenseSparseChooseBasedOnThreshold;

var AlwaysSparse = /*#__PURE__*/function () {
  function AlwaysSparse() {
    _classCallCheck(this, AlwaysSparse);
  }

  _createClass(AlwaysSparse, [{
    key: "call",
    value: function call() {
      return _SparseStrategy.SparseStrategy;
    }
  }]);

  return AlwaysSparse;
}();

exports.AlwaysSparse = AlwaysSparse;

var AlwaysDense = /*#__PURE__*/function () {
  function AlwaysDense() {
    _classCallCheck(this, AlwaysDense);
  }

  _createClass(AlwaysDense, [{
    key: "call",
    value: function call() {
      return _DenseStrategy.DenseStrategy;
    }
  }]);

  return AlwaysDense;
}();

exports.AlwaysDense = AlwaysDense;

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.defaultStringifyDateTime = defaultStringifyDateTime;
exports.defaultStringifyDuration = defaultStringifyDuration;
exports.format = format;
exports.padLeft = padLeft;
exports.padRight = padRight;

__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(1);

__webpack_require__(167);

__webpack_require__(161);

__webpack_require__(297);

__webpack_require__(139);

var _DateTimeDefault = __webpack_require__(292);

var _DateTimeHelper = __webpack_require__(294);

var _parser = __webpack_require__(299);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function format(value, formatArg, config, dateHelper) {
  var tryDateTime = config.stringifyDateTime(dateHelper.numberToSimpleDateTime(value), formatArg); // default points to defaultStringifyDateTime()

  if (tryDateTime !== undefined) {
    return tryDateTime;
  }

  var tryDuration = config.stringifyDuration((0, _DateTimeHelper.numberToSimpleTime)(value), formatArg);

  if (tryDuration !== undefined) {
    return tryDuration;
  }

  var expression = (0, _parser.parseForNumberFormat)(formatArg);

  if (expression !== undefined) {
    return numberFormat(expression.tokens, value);
  }

  return formatArg;
}

function padLeft(number, size) {
  var result = number + '';

  while (result.length < size) {
    result = '0' + result;
  }

  return result;
}

function padRight(number, size) {
  var result = number + '';

  while (result.length < size) {
    result = result + '0';
  }

  return result;
}

function countChars(text, char) {
  return text.split(char).length - 1;
}

function numberFormat(tokens, value) {
  var result = '';

  for (var i = 0; i < tokens.length; ++i) {
    var token = tokens[i];

    if (token.type === _parser.TokenType.FREE_TEXT) {
      result += token.value;
      continue;
    }

    var tokenParts = token.value.split('.');
    var integerFormat = tokenParts[0];
    var decimalFormat = tokenParts[1] || '';
    var separator = tokenParts[1] ? '.' : '';
    /* get fixed-point number without trailing zeros */

    var valueParts = Number(value.toFixed(decimalFormat.length)).toString().split('.');
    var integerPart = valueParts[0] || '';
    var decimalPart = valueParts[1] || '';

    if (integerFormat.length > integerPart.length) {
      var padSizeInteger = countChars(integerFormat.substr(0, integerFormat.length - integerPart.length), '0');
      integerPart = padLeft(integerPart, padSizeInteger + integerPart.length);
    }

    var padSizeDecimal = countChars(decimalFormat.substr(decimalPart.length, decimalFormat.length - decimalPart.length), '0');
    decimalPart = padRight(decimalPart, padSizeDecimal + decimalPart.length);
    result += integerPart + separator + decimalPart;
  }

  return result;
}

function defaultStringifyDuration(time, formatArg) {
  var expression = (0, _parser.parseForDateTimeFormat)(formatArg);

  if (expression === undefined) {
    return undefined;
  }

  var tokens = expression.tokens;
  var result = '';

  var _iterator = _createForOfIteratorHelper(tokens),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var token = _step.value;

      if (token.type === _parser.TokenType.FREE_TEXT) {
        result += token.value;
        continue;
      }

      if (_DateTimeDefault.secondsExtendedRegexp.test(token.value)) {
        var fractionOfSecondPrecision = token.value.length - 3;
        result += (time.seconds < 10 ? '0' : '') + Math.round(time.seconds * Math.pow(10, fractionOfSecondPrecision)) / Math.pow(10, fractionOfSecondPrecision);
        continue;
      }

      switch (token.value.toLowerCase()) {
        case 'h':
        case 'hh':
          {
            result += padLeft(time.hours, token.value.length);
            time.hours = 0;
            break;
          }

        case '[hh]':
          {
            result += padLeft(time.hours, token.value.length - 2);
            time.hours = 0;
            break;
          }

        case 'm':
        case 'mm':
          {
            result += padLeft(time.minutes, token.value.length);
            time.minutes = 0;
            break;
          }

        case '[mm]':
          {
            result += padLeft(time.minutes + 60 * time.hours, token.value.length - 2);
            time.minutes = 0;
            time.hours = 0;
            break;
          }

        /* seconds */

        case 's':
        case 'ss':
          {
            result += padLeft(time.seconds, token.value.length);
            break;
          }

        default:
          {
            return undefined;
          }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
}

function defaultStringifyDateTime(dateTime, formatArg) {
  var expression = (0, _parser.parseForDateTimeFormat)(formatArg);

  if (expression === undefined) {
    return undefined;
  }

  var tokens = expression.tokens;
  var result = '';
  var minutes = false;
  var ampm = tokens.some(function (token) {
    return token.type === _parser.TokenType.FORMAT && (token.value === 'a/p' || token.value === 'A/P' || token.value === 'am/pm' || token.value === 'AM/PM');
  });

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (token.type === _parser.TokenType.FREE_TEXT) {
      result += token.value;
      continue;
    }

    if (_DateTimeDefault.secondsExtendedRegexp.test(token.value)) {
      var fractionOfSecondPrecision = token.value.length - 3;
      result += (dateTime.seconds < 10 ? '0' : '') + Math.round(dateTime.seconds * Math.pow(10, fractionOfSecondPrecision)) / Math.pow(10, fractionOfSecondPrecision);
      continue;
    }

    switch (token.value.toLowerCase()) {
      /* hours*/
      case 'h':
      case 'hh':
        {
          minutes = true;
          result += padLeft(ampm ? (dateTime.hours + 11) % 12 + 1 : dateTime.hours, token.value.length);
          break;
        }

      /* days */

      case 'd':
      case 'dd':
        {
          result += padLeft(dateTime.day, token.value.length);
          break;
        }

      /* seconds */

      case 's':
      case 'ss':
        {
          result += padLeft(Math.round(dateTime.seconds), token.value.length);
          break;
        }

      /* minutes / months */

      case 'm':
      case 'mm':
        {
          if (i + 1 < tokens.length && tokens[i + 1].value.startsWith(':')) {
            minutes = true;
          }

          if (minutes) {
            result += padLeft(dateTime.minutes, token.value.length);
          } else {
            result += padLeft(dateTime.month, token.value.length);
          }

          minutes = true;
          break;
        }

      /* years */

      case 'yy':
        {
          result += padLeft(dateTime.year % 100, token.value.length);
          break;
        }

      case 'yyyy':
        {
          result += dateTime.year;
          break;
        }

      /* AM / PM */

      case 'am/pm':
      case 'a/p':
        {
          var _token$value$split = token.value.split('/'),
              _token$value$split2 = _slicedToArray(_token$value$split, 2),
              am = _token$value$split2[0],
              pm = _token$value$split2[1];

          result += dateTime.hours < 12 ? am : pm;
          break;
        }

      default:
        {
          return undefined;
        }
    }
  }

  return result;
}

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var toIntegerOrInfinity = __webpack_require__(62);
var thisNumberValue = __webpack_require__(162);
var $repeat = __webpack_require__(298);
var fails = __webpack_require__(20);

var RangeError = global.RangeError;
var String = global.String;
var floor = Math.floor;
var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);
var un$ToFixed = uncurryThis(1.0.toFixed);

var pow = function (x, n, acc) {
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};

var log = function (x) {
  var n = 0;
  var x2 = x;
  while (x2 >= 4096) {
    n += 12;
    x2 /= 4096;
  }
  while (x2 >= 2) {
    n += 1;
    x2 /= 2;
  } return n;
};

var multiply = function (data, n, c) {
  var index = -1;
  var c2 = c;
  while (++index < 6) {
    c2 += n * data[index];
    data[index] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};

var divide = function (data, n) {
  var index = 6;
  var c = 0;
  while (--index >= 0) {
    c += data[index];
    data[index] = floor(c / n);
    c = (c % n) * 1e7;
  }
};

var dataToString = function (data) {
  var index = 6;
  var s = '';
  while (--index >= 0) {
    if (s !== '' || index === 0 || data[index] !== 0) {
      var t = String(data[index]);
      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;
    }
  } return s;
};

var FORCED = fails(function () {
  return un$ToFixed(0.00008, 3) !== '0.000' ||
    un$ToFixed(0.9, 0) !== '1' ||
    un$ToFixed(1.255, 2) !== '1.25' ||
    un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';
}) || !fails(function () {
  // V8 ~ Android 4.3-
  un$ToFixed({});
});

// `Number.prototype.toFixed` method
// https://tc39.es/ecma262/#sec-number.prototype.tofixed
$({ target: 'Number', proto: true, forced: FORCED }, {
  toFixed: function toFixed(fractionDigits) {
    var number = thisNumberValue(this);
    var fractDigits = toIntegerOrInfinity(fractionDigits);
    var data = [0, 0, 0, 0, 0, 0];
    var sign = '';
    var result = '0';
    var e, z, j, k;

    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation
    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');
    // eslint-disable-next-line no-self-compare -- NaN check
    if (number != number) return 'NaN';
    if (number <= -1e21 || number >= 1e21) return String(number);
    if (number < 0) {
      sign = '-';
      number = -number;
    }
    if (number > 1e-21) {
      e = log(number * pow(2, 69, 1)) - 69;
      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if (e > 0) {
        multiply(data, 0, z);
        j = fractDigits;
        while (j >= 7) {
          multiply(data, 1e7, 0);
          j -= 7;
        }
        multiply(data, pow(10, j, 1), 0);
        j = e - 1;
        while (j >= 23) {
          divide(data, 1 << 23);
          j -= 23;
        }
        divide(data, 1 << j);
        multiply(data, 1, 1);
        divide(data, 2);
        result = dataToString(data);
      } else {
        multiply(data, 0, z);
        multiply(data, 1 << -e, 0);
        result = dataToString(data) + repeat('0', fractDigits);
      }
    }
    if (fractDigits > 0) {
      k = result.length;
      result = sign + (k <= fractDigits
        ? '0.' + repeat('0', fractDigits - k) + result
        : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));
    } else {
      result = sign + result;
    } return result;
  }
});


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global = __webpack_require__(4);
var toIntegerOrInfinity = __webpack_require__(62);
var toString = __webpack_require__(94);
var requireObjectCoercible = __webpack_require__(13);

var RangeError = global.RangeError;

// `String.prototype.repeat` method implementation
// https://tc39.es/ecma262/#sec-string.prototype.repeat
module.exports = function repeat(count) {
  var str = toString(requireObjectCoercible(this));
  var result = '';
  var n = toIntegerOrInfinity(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};


/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TokenType = exports.FormatExpressionType = void 0;
exports.formatToken = formatToken;
exports.isEscapeToken = isEscapeToken;
exports.parse = parse;
exports.parseForDateTimeFormat = parseForDateTimeFormat;
exports.parseForNumberFormat = parseForNumberFormat;

__webpack_require__(103);

__webpack_require__(139);

__webpack_require__(1);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var dateFormatRegex = /(\\.|dd|DD|d|D|mm|MM|m|M|YYYY|YY|yyyy|yy|HH|hh|H|h|ss(\.(0+|s+))?|s|AM\/PM|am\/pm|A\/P|a\/p|\[mm]|\[MM]|\[hh]|\[HH])/g;
var numberFormatRegex = /(\\.|[#0]+(\.[#0]*)?)/g;
var TokenType;
exports.TokenType = TokenType;

(function (TokenType) {
  TokenType["FORMAT"] = "FORMAT";
  TokenType["FREE_TEXT"] = "FREE_TEXT";
})(TokenType || (exports.TokenType = TokenType = {}));

function formatToken(type, value) {
  return {
    type: type,
    value: value
  };
}

var FormatExpressionType;
exports.FormatExpressionType = FormatExpressionType;

(function (FormatExpressionType) {
  FormatExpressionType["DATE"] = "DATE";
  FormatExpressionType["NUMBER"] = "NUMBER";
  FormatExpressionType["STRING"] = "STRING";
})(FormatExpressionType || (exports.FormatExpressionType = FormatExpressionType = {}));

function matchDateFormat(str) {
  dateFormatRegex.lastIndex = 0;
  var tokens = [];
  var m;

  do {
    m = dateFormatRegex.exec(str);

    if (m !== null) {
      tokens.push(m);
    }
  } while (m);

  return tokens;
}

function matchNumberFormat(str) {
  numberFormatRegex.lastIndex = 0;
  var numberFormatToken = numberFormatRegex.exec(str);

  if (numberFormatToken !== null) {
    return [numberFormatToken];
  } else {
    return [];
  }
}

function createTokens(regexTokens, str) {
  var tokens = [];
  var start = 0;

  for (var i = 0; i < regexTokens.length; ++i) {
    var token = regexTokens[i];

    if (token.index !== start) {
      var beforeToken = str.substr(start, token.index - start);
      tokens.push(formatToken(TokenType.FREE_TEXT, beforeToken));
    }

    if (token[0].startsWith('\\')) {
      tokens.push(formatToken(TokenType.FREE_TEXT, token[0]));
    } else {
      tokens.push(formatToken(TokenType.FORMAT, token[0]));
    }

    start = token.index + token[0].length;
  }

  var lastToken = regexTokens[regexTokens.length - 1];

  if (lastToken.index + lastToken[0].length < str.length) {
    var afterLastToken = str.substr(lastToken.index + lastToken[0].length, str.length);
    tokens.push(formatToken(TokenType.FREE_TEXT, afterLastToken));
  }

  return tokens;
}

function parseForDateTimeFormat(str) {
  var dateFormatTokens = matchDateFormat(str);

  if (dateFormatTokens.every(function (elem) {
    return isEscapeToken(elem);
  })) {
    return undefined;
  } else {
    return {
      type: FormatExpressionType.DATE,
      tokens: createTokens(dateFormatTokens, str)
    };
  }
}

function parseForNumberFormat(str) {
  var numberFormatTokens = matchNumberFormat(str);

  if (numberFormatTokens.every(function (elem) {
    return isEscapeToken(elem);
  })) {
    return undefined;
  } else {
    return {
      type: FormatExpressionType.NUMBER,
      tokens: createTokens(numberFormatTokens, str)
    };
  }
}

function parse(str) {
  var _a, _b;

  return (_b = (_a = parseForDateTimeFormat(str)) !== null && _a !== void 0 ? _a : parseForNumberFormat(str)) !== null && _b !== void 0 ? _b : {
    type: FormatExpressionType.STRING,
    tokens: [{
      type: TokenType.FREE_TEXT,
      value: str
    }]
  };
}

function isEscapeToken(token) {
  return token[0].startsWith('\\');
}

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.checkLicenseKeyValidity = checkLicenseKeyValidity;

__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(146);

var _licenseKeyHelper = __webpack_require__(301);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * List of all not valid messages which may occur.
 */
var consoleMessages = {
  invalid: function invalid() {
    return 'The license key for HyperFormula is invalid.';
  },
  expired: function expired(_ref) {
    var keyValidityDate = _ref.keyValidityDate;
    return 'The license key for HyperFormula expired' + " on ".concat(keyValidityDate, ", and is not valid for the installed version.");
  },
  missing: function missing() {
    return 'The license key for HyperFormula is missing.';
  }
};
var _notified = false;
/**
 * Checks if the provided license key is grammatically valid or not expired.
 *
 * @param {string} licenseKey The license key to check.
 * @returns {LicenseKeyValidityState} Returns the checking state.
 */

function checkLicenseKeyValidity(licenseKey) {
  var messageDescriptor = {
    template: "missing"
    /* MISSING */
    ,
    vars: {}
  };

  if (licenseKey === 'gpl-v3' || licenseKey === 'internal-use-in-handsontable') {
    messageDescriptor.template = "valid"
    /* VALID */
    ;
  } else if (typeof licenseKey === 'string' && (0, _licenseKeyHelper.checkKeySchema)(licenseKey)) {
    var _split = ("11/01/2022" || false).split('/'),
        _split2 = _slicedToArray(_split, 3),
        day = _split2[0],
        month = _split2[1],
        year = _split2[2];

    var releaseDays = Math.floor(new Date("".concat(month, "/").concat(day, "/").concat(year)).getTime() / 8.64e7);
    var keyValidityDays = (0, _licenseKeyHelper.extractTime)(licenseKey);
    messageDescriptor.vars.keyValidityDate = formatDate(new Date((keyValidityDays + 1) * 8.64e7));

    if (releaseDays > keyValidityDays) {
      messageDescriptor.template = "expired"
      /* EXPIRED */
      ;
    } else {
      messageDescriptor.template = "valid"
      /* VALID */
      ;
    }
  } else if (licenseKey !== '') {
    messageDescriptor.template = "invalid"
    /* INVALID */
    ;
  }

  if (!_notified && messageDescriptor.template !== "valid"
  /* VALID */
  ) {
    console.warn(consoleMessages[messageDescriptor.template](messageDescriptor.vars));
    _notified = true;
  }

  return messageDescriptor.template;
}
/**
 * Formats a Date instance to hard-coded format MMMM DD, YYYY.
 *
 * @param {Date} date The date to format.
 * @returns {string}
 */


function formatDate(date) {
  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  var month = monthNames[date.getMonth()];
  var day = date.getDate();
  var year = date.getFullYear();
  return "".concat(month, " ").concat(day, ", ").concat(year);
}

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.checkKeySchema = checkKeySchema;
exports.extractTime = extractTime;

__webpack_require__(103);

__webpack_require__(179);

__webpack_require__(302);

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(146);

__webpack_require__(303);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
// @ts-nocheck

/* eslint-disable */
var _rl = '\x6C\x65\x6E\x67\x74\x68';

var _hd = function _hd(v) {
  return parseInt(v, 16);
};

var _pi = function _pi(v) {
  return parseInt(v, 10);
};

var _nm = function _nm(v) {
  return (v + '').replace(/\-/g, '');
};

var _ss = function _ss(v, s, l) {
  return v['\x73\x75\x62\x73\x74\x72'](s, l);
};

var _cp = function _cp(v) {
  return v['\x63\x6F\x64\x65\x50\x6F\x69\x6E\x74\x41\x74'](0) - 65;
};

function extractTime(v) {
  return _nm(v)[_rl] === 50 >> 1 ? _hd(_ss(_nm(v), _hd('12'), _cp('\x46'))) / (_hd(_ss(_nm(v), _cp('C'), _cp('\x59') >> 4)) || (~~![][_rl] << 3) + 1) : 0;
}

function checkKeySchema(v) {
  v = (v + '').replace(/\-/g, '');

  if (v[_rl] !== _cp('\x5A')) {
    return false;
  }

  var sp = 0;
  return [[0, _cp('\x47') + 1], [_cp('\x48'), _cp('\x48') - 1], [_cp('G') + _cp('H'), _cp('\x47')]].reduce(function (e, _ref, c) {
    var _ref2 = _slicedToArray(_ref, 2),
        a = _ref2[0],
        b = _ref2[1];

    e |= (_pi("".concat(_pi(_hd(_ss.apply(void 0, [v].concat([sp + a - (c === 3 >> 2 ? 0 : 2), b + (!c ? 0 : 2)]))) + (_hd(_ss.apply(void 0, [v].concat([sp + a + b, 2]))) + []).padStart(2, '0')))) % 97 || 2) >> 1;
    sp += 2;
    return e;
  }, _cp('A')) === [] + 1 >> 1;
}
/* eslint-enable */

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var codeAt = __webpack_require__(93).codeAt;

// `String.prototype.codePointAt` method
// https://tc39.es/ecma262/#sec-string.prototype.codepointat
$({ target: 'String', proto: true }, {
  codePointAt: function codePointAt(pos) {
    return codeAt(this, pos);
  }
});


/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $padStart = __webpack_require__(304).start;
var WEBKIT_BUG = __webpack_require__(305);

// `String.prototype.padStart` method
// https://tc39.es/ecma262/#sec-string.prototype.padstart
$({ target: 'String', proto: true, forced: WEBKIT_BUG }, {
  padStart: function padStart(maxLength /* , fillString = ' ' */) {
    return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
  }
});


/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/tc39/proposal-string-pad-start-end
var uncurryThis = __webpack_require__(11);
var toLength = __webpack_require__(64);
var toString = __webpack_require__(94);
var $repeat = __webpack_require__(298);
var requireObjectCoercible = __webpack_require__(13);

var repeat = uncurryThis($repeat);
var stringSlice = uncurryThis(''.slice);
var ceil = Math.ceil;

// `String.prototype.{ padStart, padEnd }` methods implementation
var createMethod = function (IS_END) {
  return function ($this, maxLength, fillString) {
    var S = toString(requireObjectCoercible($this));
    var intMaxLength = toLength(maxLength);
    var stringLength = S.length;
    var fillStr = fillString === undefined ? ' ' : toString(fillString);
    var fillLen, stringFiller;
    if (intMaxLength <= stringLength || fillStr == '') return S;
    fillLen = intMaxLength - stringLength;
    stringFiller = repeat(fillStr, ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringSlice(stringFiller, 0, fillLen);
    return IS_END ? S + stringFiller : stringFiller + S;
  };
};

module.exports = {
  // `String.prototype.padStart` method
  // https://tc39.es/ecma262/#sec-string.prototype.padstart
  start: createMethod(false),
  // `String.prototype.padEnd` method
  // https://tc39.es/ecma262/#sec-string.prototype.padend
  end: createMethod(true)
};


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/zloirock/core-js/issues/280
var userAgent = __webpack_require__(17);

module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.HyperFormula = void 0;

__webpack_require__(146);

__webpack_require__(150);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(122);

__webpack_require__(166);

var _AbsoluteCellRange = __webpack_require__(158);

var _ArgumentSanitization = __webpack_require__(290);

var _BuildEngineFactory = __webpack_require__(307);

var _Cell = __webpack_require__(143);

var _CellContentParser = __webpack_require__(308);

var _Config = __webpack_require__(289);

var _DateTimeHelper = __webpack_require__(294);

var _Destroy = __webpack_require__(343);

var _Emitter = __webpack_require__(345);

var _errors = __webpack_require__(165);

var _i18n = __webpack_require__(278);

var _FunctionRegistry = __webpack_require__(328);

var _Operations = __webpack_require__(312);

var _parser2 = __webpack_require__(169);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * This is a class for creating HyperFormula instance, all the following public methods
 * ale related to this class.
 *
 * The instance can be created only by calling one of the static methods
 * `buildFromArray`, `buildFromSheets` or `buildEmpty` and should be disposed of with the
 * `destroy` method when it's no longer needed to free the resources.
 *
 * The instance can be seen as a workbook where worksheets can be created and
 * manipulated. They are organized within a widely know structure of columns and rows
 * which can be manipulated as well. The smallest possible data unit are the cells, which
 * may contain simple values or formulas to be calculated.
 *
 * All CRUD methods are called directly on HyperFormula instance and will trigger
 * corresponding lifecycle events. The events are marked accordingly, as well as thrown
 * errors so they can be correctly handled.
 */
var HyperFormula = /*#__PURE__*/function () {
  function HyperFormula(_config, _stats, _dependencyGraph, _columnSearch, _parser, _unparser, _cellContentParser, _evaluator, _lazilyTransformingAstService, _crudOperations, _exporter, _namedExpressions, _serialization, _functionRegistry) {
    _classCallCheck(this, HyperFormula);

    this._config = _config;
    this._stats = _stats;
    this._dependencyGraph = _dependencyGraph;
    this._columnSearch = _columnSearch;
    this._parser = _parser;
    this._unparser = _unparser;
    this._cellContentParser = _cellContentParser;
    this._evaluator = _evaluator;
    this._lazilyTransformingAstService = _lazilyTransformingAstService;
    this._crudOperations = _crudOperations;
    this._exporter = _exporter;
    this._namedExpressions = _namedExpressions;
    this._serialization = _serialization;
    this._functionRegistry = _functionRegistry;
    this._emitter = new _Emitter.Emitter();
    this._evaluationSuspended = false;
  }
  /**
   * Returns all of HyperFormula's default [configuration options](../../guide/configuration-options.md).
   *
   * @example
   * ```js
   * // returns all default configuration options
   * const defaultConfig = HyperFormula.defaultConfig;
   * ```
   *
   * @category Static Properties
   */


  _createClass(HyperFormula, [{
    key: "graph",
    get:
    /**
     * Calls the `graph` method on the dependency graph.
     * Allows to execute `graph` directly without a need to refer to `dependencyGraph`.
     *
     * @internal
     */
    function get() {
      return this.dependencyGraph.graph;
    }
    /**
     * Calls the `rangeMapping` method on the dependency graph.
     * Allows to execute `rangeMapping` directly without a need to refer to `dependencyGraph`.
     *
     * @internal
     */

  }, {
    key: "rangeMapping",
    get: function get() {
      return this.dependencyGraph.rangeMapping;
    }
    /**
     * Calls the `arrayMapping` method on the dependency graph.
     * Allows to execute `arrayMapping` directly without a need to refer to `dependencyGraph`.
     *
     * @internal
     */

  }, {
    key: "arrayMapping",
    get: function get() {
      return this.dependencyGraph.arrayMapping;
    }
    /**
     * Calls the `sheetMapping` method on the dependency graph.
     * Allows to execute `sheetMapping` directly without a need to refer to `dependencyGraph`.
     *
     * @internal
     */

  }, {
    key: "sheetMapping",
    get: function get() {
      return this.dependencyGraph.sheetMapping;
    }
    /**
     * Calls the `addressMapping` method on the dependency graph.
     * Allows to execute `addressMapping` directly without a need to refer to `dependencyGraph`.
     *
     * @internal
     */

  }, {
    key: "addressMapping",
    get: function get() {
      return this.dependencyGraph.addressMapping;
    }
    /** @internal */

  }, {
    key: "dependencyGraph",
    get: function get() {
      return this._dependencyGraph;
    }
    /** @internal */

  }, {
    key: "evaluator",
    get: function get() {
      return this._evaluator;
    }
    /** @internal */

  }, {
    key: "columnSearch",
    get: function get() {
      return this._columnSearch;
    }
    /** @internal */

  }, {
    key: "lazilyTransformingAstService",
    get: function get() {
      return this._lazilyTransformingAstService;
    }
    /**
     * Returns state of the validity of the license key.
     *
     * @internal
     */

  }, {
    key: "licenseKeyValidityState",
    get: function get() {
      return this._config.licenseKeyValidityState;
    }
    /**
     * Builds the engine for a sheet from a two-dimensional array representation.
     * The engine is created with a single sheet.
     * Can be configured with the optional second parameter that represents a [[ConfigParams]].
     * If not specified, the engine will be built with the default configuration.
     *
     * @param {Sheet} sheet - two-dimensional array representation of sheet
     * @param {Partial<ConfigParams>} configInput - engine configuration
     * @param {SerializedNamedExpression[]} namedExpressions - starting named expressions
     *
     * @throws [[SheetSizeLimitExceededError]] when sheet size exceeds the limits
     * @throws [[InvalidArgumentsError]] when sheet is not an array of arrays
     * @throws [[FunctionPluginValidationError]] when plugin class definition is not consistent with metadata
     *
     * @example
     * ```js
     * // data represented as an array
     * const sheetData = [
     *  ['0', '=SUM(1,2,3)', '52'],
     *  ['=SUM(A1:C1)', '', '=A1'],
     *  ['2', '=SUM(A1:C1)', '91'],
     * ];
     *
     * // method with optional config parameter maxColumns
     * const hfInstance = HyperFormula.buildFromArray(sheetData, { maxColumns: 1000 });
     * ```
     *
     * @category Factories
     */

  }, {
    key: "getCellValue",
    value:
    /**
     * Returns the cell value of a given address.
     * Applies rounding and post-processing.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[ExpectedValueOfTypeError]] when cellAddress is of incorrect type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2,3)', '2'],
     * ]);
     *
     * // get value of A1 cell, should be '6'
     * const A1Value = hfInstance.getCellValue({ sheet: 0, col: 0, row: 0 });
     *
     * // get value of B1 cell, should be '2'
     * const B1Value = hfInstance.getCellValue({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */
    function getCellValue(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getCellValue(cellAddress);
    }
    /**
     * Returns a normalized formula string from the cell of a given address or `undefined` for an address that does not exist and empty values.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] when cellAddress is of incorrect type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2,3)', '0'],
     * ]);
     *
     * // should return a normalized A1 cell formula: '=SUM(1,2,3)'
     * const A1Formula = hfInstance.getCellFormula({ sheet: 0, col: 0, row: 0 });
     *
     * // should return a normalized B1 cell formula: 'undefined'
     * const B1Formula = hfInstance.getCellFormula({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellFormula",
    value: function getCellFormula(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      return this._serialization.getCellFormula(cellAddress);
    }
    /**
     * Returns [[RawCellContent]] with a serialized content of the cell of a given address: either a cell formula, an explicit value, or an error.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[ExpectedValueOfTypeError]] when cellAddress is of incorrect type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2,3)', '0'],
     * ]);
     *
     * // should return serialized content of A1 cell: '=SUM(1,2,3)'
     * const cellA1Serialized = hfInstance.getCellSerialized({ sheet: 0, col: 0, row: 0 });
     *
     * // should return serialized content of B1 cell: '0'
     * const cellB1Serialized = hfInstance.getCellSerialized({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellSerialized",
    value: function getCellSerialized(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getCellSerialized(cellAddress);
    }
    /**
     * Returns an array of arrays of [[CellValue]] with values of all cells from [[Sheet]].
     * Applies rounding and post-processing.
     *
     * @param {number} sheetId - sheet ID number
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['0', '=SUM(1,2,3)', '=A1'],
     *  ['1', '=TEXT(A2, "0.0%")', '=C1'],
     *  ['2', '=SUM(A1:C1)', '=C1'],
     * ]);
     *
     * // should return all values of a sheet: [[0, 6, 0], [1, '1.0%', 0], [2, 6, 0]]
     * const sheetValues = hfInstance.getSheetValues(0);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetValues",
    value: function getSheetValues(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getSheetValues(sheetId);
    }
    /**
     * Returns an array with normalized formula strings from [[Sheet]] or `undefined` for a cells that have no value.
     *
     * @param {SimpleCellAddress} sheetId - sheet ID number
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['0', '=SUM(1,2,3)', '=A1'],
     *  ['1', '=TEXT(A2, "0.0%")', '=C1'],
     *  ['2', '=SUM(A1:C1)', '=C1'],
     * ]);
     *
     * // should return all formulas of a sheet:
     * // [
     * //  [undefined, '=SUM(1,2,3)', '=A1'],
     * //  [undefined, '=TEXT(A2, "0.0%")', '=C1'],
     * //  [undefined, '=SUM(A1:C1)', '=C1'],
     * // ];
     * const sheetFormulas = hfInstance.getSheetFormulas(0);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetFormulas",
    value: function getSheetFormulas(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return this._serialization.getSheetFormulas(sheetId);
    }
    /**
     * Returns an array of arrays of [[RawCellContent]] with serialized content of cells from [[Sheet]], either a cell formula or an explicit value.
     *
     * @param {SimpleCellAddress} sheetId - sheet ID number
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['0', '=SUM(1,2,3)', '=A1'],
     *  ['1', '=TEXT(A2, "0.0%")', '=C1'],
     *  ['2', '=SUM(A1:C1)', '=C1'],
     * ]);
     *
     * // should return:
     * // [
     * //  ['0', '=SUM(1,2,3)', '=A1'],
     * //  ['1', '=TEXT(A2, "0.0%")', '=C1'],
     * //  ['2', '=SUM(A1:C1)', '=C1'],
     * // ];
     * const serializedContent = hfInstance.getSheetSerialized(0);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetSerialized",
    value: function getSheetSerialized(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getSheetSerialized(sheetId);
    }
    /**
     * Returns a map containing dimensions of all sheets for the engine instance represented as a key-value pairs where keys are sheet IDs and dimensions are returned as numbers, width and height respectively.
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   Sheet1: [
     *    ['1', '2', '=Sheet2!$A1'],
     *   ],
     *   Sheet2: [
     *    ['3'],
     *    ['4'],
     *   ],
     * });
     *
     * // should return the dimensions of all sheets:
     * // { Sheet1: { width: 3, height: 1 }, Sheet2: { width: 1, height: 2 } }
     * const allSheetsDimensions = hfInstance.getAllSheetsDimensions();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getAllSheetsDimensions",
    value: function getAllSheetsDimensions() {
      var _this = this;

      return this._serialization.genericAllSheetsGetter(function (arg) {
        return _this.getSheetDimensions(arg);
      });
    }
    /**
     * Returns dimensions of a specified sheet.
     * The sheet dimensions is represented with numbers: width and height.
     *
     * @param {number} sheetId - sheet ID number
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *    ['1', '2', '=Sheet2!$A1'],
     * ]);
     *
     * // should return provided sheet's dimensions: { width: 3, height: 1 }
     * const sheetDimensions = hfInstance.getSheetDimensions(0);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetDimensions",
    value: function getSheetDimensions(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return {
        width: this.dependencyGraph.getSheetWidth(sheetId),
        height: this.dependencyGraph.getSheetHeight(sheetId)
      };
    }
    /**
     * Returns values of all sheets in a form of an object which property keys are strings and values are arrays of arrays of [[CellValue]].
     *
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '=A1+10', '3'],
     * ]);
     *
     * // should return all sheets values: { Sheet1: [ [ 1, 11, 3 ] ] }
     * const allSheetsValues = hfInstance.getAllSheetsValues();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getAllSheetsValues",
    value: function getAllSheetsValues() {
      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getAllSheetsValues();
    }
    /**
     * Returns formulas of all sheets in a form of an object which property keys are strings and values are arrays of arrays of strings or possibly `undefined` when the call does not contain a formula.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2', '=A1+10'],
     * ]);
     *
     * // should return only formulas: { Sheet1: [ [ undefined, undefined, '=A1+10' ] ] }
     * const allSheetsFormulas = hfInstance.getAllSheetsFormulas();
     * ```
     * @category Sheets
     */

  }, {
    key: "getAllSheetsFormulas",
    value: function getAllSheetsFormulas() {
      return this._serialization.getAllSheetsFormulas();
    }
    /**
     * Returns formulas or values of all sheets in a form of an object which property keys are strings and values are arrays of arrays of [[RawCellContent]].
     *
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2', '=A1+10'],
     * ]);
     *
     * // should return all sheets serialized content: { Sheet1: [ [ 1, 2, '=A1+10' ] ] }
     * const allSheetsSerialized = hfInstance.getAllSheetsSerialized();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getAllSheetsSerialized",
    value: function getAllSheetsSerialized() {
      this.ensureEvaluationIsNotSuspended();
      return this._serialization.getAllSheetsSerialized();
    }
    /**
     * Updates the config with given new metadata.
     *
     * @param {Partial<ConfigParams>} newParams configuration options to be updated or added
     *
     * @throws [[ExpectedValueOfTypeError]] when some parameters of config are of wrong type (e.g. currencySymbol)
     * @throws [[ConfigValueEmpty]] when some parameters of config are of invalid value (e.g. currencySymbol)
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // add a config param, for example maxColumns,
     * // you can check the configuration with getConfig method
     * hfInstance.updateConfig({ maxColumns: 1000 });
     * ```
     *
     * @category Instance
     */

  }, {
    key: "updateConfig",
    value: function updateConfig(newParams) {
      var newConfig = this._config.mergeConfig(newParams);

      var configNewLanguage = this._config.mergeConfig({
        language: newParams.language
      });

      var serializedSheets = this._serialization.withNewConfig(configNewLanguage, this._namedExpressions).getAllSheetsSerialized();

      var serializedNamedExpressions = this._serialization.getAllNamedExpressionsSerialized();

      var newEngine = _BuildEngineFactory.BuildEngineFactory.rebuildWithConfig(newConfig, serializedSheets, serializedNamedExpressions, this._stats);

      this._config = newEngine.config;
      this._stats = newEngine.stats;
      this._dependencyGraph = newEngine.dependencyGraph;
      this._columnSearch = newEngine.columnSearch;
      this._parser = newEngine.parser;
      this._unparser = newEngine.unparser;
      this._cellContentParser = newEngine.cellContentParser;
      this._evaluator = newEngine.evaluator;
      this._lazilyTransformingAstService = newEngine.lazilyTransformingAstService;
      this._crudOperations = newEngine.crudOperations;
      this._exporter = newEngine.exporter;
      this._namedExpressions = newEngine.namedExpressions;
      this._serialization = newEngine.serialization;
      this._functionRegistry = newEngine.functionRegistry;
    }
    /**
     * Returns current configuration of the engine instance.
     *
     * @example
     * ```js
     * // should return all config metadata including default and those which were added
     * const hfConfig = hfInstance.getConfig();
     * ```
     *
     * @category Instance
     */

  }, {
    key: "getConfig",
    value: function getConfig() {
      return this._config.getConfig();
    }
    /**
     * Serializes and deserializes whole engine, effectively reloading it.
     *
     * @example
     * ```js
     * hfInstance.rebuildAndRecalculate();
     * ```
     *
     * @category Instance
     */

  }, {
    key: "rebuildAndRecalculate",
    value: function rebuildAndRecalculate() {
      this.updateConfig({});
    }
    /**
     * Returns a snapshot of computation time statistics.
     * It returns a map with key-value pairs where keys are enums for stat type and time (number).
     *
     * @internal
     *
     * @category Instance
     */

  }, {
    key: "getStats",
    value: function getStats() {
      return this._stats.snapshot();
    }
    /**
     * Undo the previous operation.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoOperationToUndoError]] when there is no operation running that can be undone
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     *  ['3', ''],
     * ]);
     *
     * // perform CRUD operation, for example remove the second row
     * hfInstance.removeRows(0, [1, 1]);
     *
     * // do an undo, it should return the changes
     * const changes = hfInstance.undo();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "undo",
    value: function undo() {
      this._crudOperations.undo();

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Re-do recently undone operation.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoOperationToRedoError]] when there is no operation running that can be re-done
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     *  ['3'],
     * ]);
     *
     * // perform CRUD operation, for example remove the second row
     * hfInstance.removeRows(0, [1, 1]);
     *
     * // do an undo, it should return prvious values: [['1'], ['2'], ['3']]
     * hfInstance.undo();
     *
     * // do a redo, it should return the values after removing the second row: [['1'], ['3']]
     * const changes = hfInstance.redo();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "redo",
    value: function redo() {
      this._crudOperations.redo();

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Checks if there is at least one operation that can be undone.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     *  ['3'],
     * ]);
     *
     * // perform CRUD operation, for example remove the second row
     * hfInstance.removeRows(0, [1, 1]);
     *
     * // should return 'true', it is possible to undo last operation
     * // which is removing rows in this example
     * const isSomethingToUndo = hfInstance.isThereSomethingToUndo();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "isThereSomethingToUndo",
    value: function isThereSomethingToUndo() {
      return this._crudOperations.isThereSomethingToUndo();
    }
    /**
     * Checks if there is at least one operation that can be re-done.
     *
     * @example
     * ```js
     * hfInstance.undo();
     *
     * // when there is an action to redo, this returns 'true'
     * const isSomethingToRedo = hfInstance.isThereSomethingToRedo();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "isThereSomethingToRedo",
    value: function isThereSomethingToRedo() {
      return this._crudOperations.isThereSomethingToRedo();
    }
    /**
     * Returns information whether it is possible to change the content in a rectangular area bounded by the box.
     * If returns `true`, doing [[setCellContents]] operation won't throw any errors.
     * Returns `false` if the address is invalid or the sheet does not exist.
     *
     * @param {SimpleCellAddress | SimpleCellRange} address - single cell or block of cells to check
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // top left corner
     * const address1 = { col: 0, row: 0, sheet: 0 };
     * // bottom right corner
     * const address2 = { col: 1, row: 0, sheet: 0 };
     *
     * // should return 'true' for this example, it is possible to set content of
     * // width 2, height 1 in the first row and column of sheet 0
     * const isSettable = hfInstance.isItPossibleToSetCellContents({ start: address1, end: address2 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "isItPossibleToSetCellContents",
    value: function isItPossibleToSetCellContents(address) {
      var range;

      if ((0, _Cell.isSimpleCellAddress)(address)) {
        range = new _AbsoluteCellRange.AbsoluteCellRange(address, address);
      } else if ((0, _AbsoluteCellRange.isSimpleCellRange)(address)) {
        range = new _AbsoluteCellRange.AbsoluteCellRange(address.start, address.end);
      } else {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress | SimpleCellRange', 'address');
      }

      try {
        this._crudOperations.ensureRangeInSizeLimits(range);

        var _iterator = _createForOfIteratorHelper(range.addresses(this._dependencyGraph)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var it = _step.value;

            this._crudOperations.ensureItIsPossibleToChangeContent(it);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } catch (e) {
        return false;
      }

      return true;
    }
    /**
     * Sets the content for a block of cells of a given coordinates.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {SimpleCellAddress} topLeftCornerAddress - top left corner of block of cells
     * @param {(RawCellContent[][]|RawCellContent)} cellContents - array with content
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when the value is not an array of arrays or a raw cell value
     * @throws [[SheetSizeLimitExceededError]] when performing this operation would result in sheet size limits exceeding
     * @throws [[ExpectedValueOfTypeError]] if topLeftCornerAddress argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2', '=A1'],
     * ]);
     *
     * // should set the content, returns:
     * // [{
     * //   address: { sheet: 0, col: 3, row: 0 },
     * //   newValue: 2,
     * // }]
     * const changes = hfInstance.setCellContents({ col: 3, row: 0, sheet: 0 }, [['=B1']]);
     * ```
     *
     * @category Cells
     */

  }, {
    key: "setCellContents",
    value: function setCellContents(topLeftCornerAddress, cellContents) {
      this._crudOperations.setCellContents(topLeftCornerAddress, cellContents);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Reorders rows of a sheet according to a source-target mapping.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {[number, number][]} rowMapping - array mapping original positions to final positions of rows
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when rowMapping does not define correct row permutation for some subset of rows of the given sheet
     * @throws [[SourceLocationHasArrayError]] when the selected position has array inside
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1],
     *  [2],
     *  [4, 5],
     * ]);
     *
     * // should set swap rows 0 and 2 in place, returns:
     * // [{
     * //   address: { sheet: 0, col: 0, row: 2 },
     * //   newValue: 1,
     * // },
     * // {
     * //   address: { sheet: 0, col: 1, row: 2 },
     * //   newValue: null,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 4,
     * // },
     * // {
     * //   address: { sheet: 0, col: 1, row: 0 },
     * //   newValue: 5,
     * // }]
     * const changes = hfInstance.swapRowIndexes(0, [[0,2],[2,0]]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "swapRowIndexes",
    value: function swapRowIndexes(sheetId, rowMapping) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      this._crudOperations.setRowOrder(sheetId, rowMapping);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Checks if it is possible to reorder rows of a sheet according to a source-target mapping.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {[number, number][]} rowMapping - array mapping original positions to final positions of rows
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1],
     *  [2],
     *  [4, 5],
     * ]);
     *
     * // returns true
     * const isSwappable = hfInstance.isItPossibleToSwapRowIndexes(0, [[0,2],[2,0]]);
     *
     * // returns false
     * const isSwappable = hfInstance.isItPossibleToSwapRowIndexes(0, [[0,1]]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "isItPossibleToSwapRowIndexes",
    value: function isItPossibleToSwapRowIndexes(sheetId, rowMapping) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        this._crudOperations.validateSwapRowIndexes(sheetId, rowMapping);

        this._crudOperations.testRowOrderForArrays(sheetId, rowMapping);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Reorders rows of a sheet according to a permutation.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {number[]} newRowOrder - permutation of rows
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when rowMapping does not define correct row permutation for some subset of rows of the given sheet
     * @throws [[SourceLocationHasArrayError]] when the selected position has array inside
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1],
     *  [2],
     *  [4, 5],
     * ]);
     * // rows 0 and 2 swap places
     *
     * // returns:
     * // [{
     * //   address: { sheet: 0, col: 0, row: 2 },
     * //   newValue: 1,
     * // },
     * // {
     * //   address: { sheet: 0, col: 1, row: 2 },
     * //   newValue: null,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 4,
     * // },
     * // {
     * //   address: { sheet: 0, col: 1, row: 0 },
     * //   newValue: 5,
     * // }]
     * const changes = hfInstance.setRowOrder(0, [2, 1, 0]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "setRowOrder",
    value: function setRowOrder(sheetId, newRowOrder) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      var mapping = this._crudOperations.mappingFromOrder(sheetId, newRowOrder, 'row');

      return this.swapRowIndexes(sheetId, mapping);
    }
    /**
     * Checks if it is possible to reorder rows of a sheet according to a permutation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {number[]} newRowOrder - permutation of rows
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1],
     *  [2],
     *  [4, 5],
     * ]);
     *
     * // returns true
     * hfInstance.isItPossibleToSetRowOrder(0, [2, 1, 0]);
     *
     * // returns false
     * hfInstance.isItPossibleToSetRowOrder(0, [2]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "isItPossibleToSetRowOrder",
    value: function isItPossibleToSetRowOrder(sheetId, newRowOrder) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        var rowMapping = this._crudOperations.mappingFromOrder(sheetId, newRowOrder, 'row');

        this._crudOperations.validateSwapRowIndexes(sheetId, rowMapping);

        this._crudOperations.testRowOrderForArrays(sheetId, rowMapping);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Reorders columns of a sheet according to a source-target mapping.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {[number, number][]} columnMapping - array mapping original positions to final positions of columns
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when columnMapping does not define correct column permutation for some subset of columns of the given sheet
     * @throws [[SourceLocationHasArrayError]] when the selected position has array inside
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1, 2, 4],
     *  [5]
     * ]);
     *
     * // should set swap columns 0 and 2 in place, returns:
     * // [{
     * //   address: { sheet: 0, col: 2, row: 0 },
     * //   newValue: 1,
     * // },
     * // {
     * //   address: { sheet: 0, col: 2, row: 1 },
     * //   newValue: 5,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 4,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 1 },
     * //   newValue: null,
     * // }]
     * const changes = hfInstance.swapColumnIndexes(0, [[0,2],[2,0]]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "swapColumnIndexes",
    value: function swapColumnIndexes(sheetId, columnMapping) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      this._crudOperations.setColumnOrder(sheetId, columnMapping);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Checks if it is possible to reorder columns of a sheet according to a source-target mapping.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1, 2, 4],
     *  [5]
     * ]);
     *
     * // returns true
     * hfInstance.isItPossibleToSwapColumnIndexes(0, [[0,2],[2,0]]);
     *
     * // returns false
     * hfInstance.isItPossibleToSwapColumnIndexes(0, [[0,1]]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "isItPossibleToSwapColumnIndexes",
    value: function isItPossibleToSwapColumnIndexes(sheetId, columnMapping) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        this._crudOperations.validateSwapColumnIndexes(sheetId, columnMapping);

        this._crudOperations.testColumnOrderForArrays(sheetId, columnMapping);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Reorders columns of a sheet according to a permutation.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {number[]} newColumnOrder - permutation of columns
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when columnMapping does not define correct column permutation for some subset of columns of the given sheet
     * @throws [[SourceLocationHasArrayError]] when the selected position has array inside
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1, 2, 4],
     *  [5]
     * ]);
     * // columns 0 and 2 swap places
     *
     * // returns:
     * // [{
     * //   address: { sheet: 0, col: 2, row: 0 },
     * //   newValue: 1,
     * // },
     * // {
     * //   address: { sheet: 0, col: 2, row: 1 },
     * //   newValue: 5,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 4,
     * // },
     * // {
     * //   address: { sheet: 0, col: 0, row: 1 },
     * //   newValue: null,
     * // }]
     * const changes = hfInstance.setColumnOrder(0, [2, 1, 0]]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "setColumnOrder",
    value: function setColumnOrder(sheetId, newColumnOrder) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      var mapping = this._crudOperations.mappingFromOrder(sheetId, newColumnOrder, 'column');

      return this.swapColumnIndexes(sheetId, mapping);
    }
    /**
     * Checks if it possible to reorder columns of a sheet according to a permutation.
     *
     * @param {number} sheetId - ID of a sheet to operate on
     * @param {number[]} newColumnOrder - permutation of columns
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  [1, 2, 4],
     *  [5]
     * ]);
     *
     * // returns true
     * hfInstance.isItPossibleToSetColumnOrder(0, [2, 1, 0]]);
     *
     * // returns false
     * hfInstance.isItPossibleToSetColumnOrder(0, [1]]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "isItPossibleToSetColumnOrder",
    value: function isItPossibleToSetColumnOrder(sheetId, newColumnOrder) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        var columnMapping = this._crudOperations.mappingFromOrder(sheetId, newColumnOrder, 'column');

        this._crudOperations.validateSwapColumnIndexes(sheetId, columnMapping);

        this._crudOperations.testColumnOrderForArrays(sheetId, columnMapping);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Returns information whether it is possible to add rows into a specified position in a given sheet.
     * Checks against particular rules to ascertain that addRows can be called.
     * If returns `true`, doing [[addRows]] operation won't throw any errors.
     * Returns `false` if adding rows would exceed the sheet size limit or given arguments are invalid.
     *
     * @param {number} sheetId - sheet ID in which rows will be added
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format [row, amount], where row is a row number above which the rows will be added
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2', '3'],
     * ]);
     *
     * // should return 'true' for this example,
     * // it is possible to add one row in the second row of sheet 0
     * const isAddable = hfInstance.isItPossibleToAddRows(0, [1, 1]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "isItPossibleToAddRows",
    value: function isItPossibleToAddRows(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        indexes[_key - 1] = arguments[_key];
      }

      var normalizedIndexes = (0, _Operations.normalizeAddedIndexes)(indexes);

      try {
        var _this$_crudOperations;

        (_this$_crudOperations = this._crudOperations).ensureItIsPossibleToAddRows.apply(_this$_crudOperations, [sheetId].concat(_toConsumableArray(normalizedIndexes)));

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Adds multiple rows into a specified position in a given sheet.
     * Does nothing if rows are outside of effective sheet size.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID in which rows will be added
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format [row, amount], where row is a row number above which the rows will be added
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[SheetSizeLimitExceededError]] when performing this operation would result in sheet size limits exceeding
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     * ]);
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values
     * const changes = hfInstance.addRows(0, [0, 1]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "addRows",
    value: function addRows(sheetId) {
      var _this$_crudOperations2;

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        indexes[_key2 - 1] = arguments[_key2];
      }

      (_this$_crudOperations2 = this._crudOperations).addRows.apply(_this$_crudOperations2, [sheetId].concat(indexes));

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to remove rows from a specified position in a given sheet.
     * Checks against particular rules to ascertain that removeRows can be called.
     * If returns `true`, doing [[removeRows]] operation won't throw any errors.
     * Returns `false` if given arguments are invalid.
     *
     * @param {number} sheetId - sheet ID from which rows will be removed
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format: [row, amount]
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     * ]);
     *
     * // should return 'true' for this example
     * // it is possible to remove one row from row 1 of sheet 0
     * const isRemovable = hfInstance.isItPossibleToRemoveRows(0, [1, 1]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "isItPossibleToRemoveRows",
    value: function isItPossibleToRemoveRows(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        indexes[_key3 - 1] = arguments[_key3];
      }

      var normalizedIndexes = (0, _Operations.normalizeRemovedIndexes)(indexes);

      try {
        var _this$_crudOperations3;

        (_this$_crudOperations3 = this._crudOperations).ensureItIsPossibleToRemoveRows.apply(_this$_crudOperations3, [sheetId].concat(_toConsumableArray(normalizedIndexes)));

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Removes multiple rows from a specified position in a given sheet.
     * Does nothing if rows are outside of the effective sheet size.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID from which rows will be removed
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format: [row, amount]
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     * ]);
     *
     * // should return: [{ sheet: 0, col: 1, row: 2, value: null }] for this example
     * const changes = hfInstance.removeRows(0, [1, 1]);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "removeRows",
    value: function removeRows(sheetId) {
      var _this$_crudOperations4;

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        indexes[_key4 - 1] = arguments[_key4];
      }

      (_this$_crudOperations4 = this._crudOperations).removeRows.apply(_this$_crudOperations4, [sheetId].concat(indexes));

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to add columns into a specified position in a given sheet.
     * Checks against particular rules to ascertain that addColumns can be called.
     * If returns `true`, doing [[addColumns]] operation won't throw any errors.
     * Returns `false` if adding columns would exceed the sheet size limit or given arguments are invalid.
     *
     * @param {number} sheetId - sheet ID in which columns will be added
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format: [column, amount], where column is a column number from which new columns will be added
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return 'true' for this example,
     * // it is possible to add 1 column in sheet 0, at column 1
     * const isAddable = hfInstance.isItPossibleToAddColumns(0, [1, 1]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "isItPossibleToAddColumns",
    value: function isItPossibleToAddColumns(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        indexes[_key5 - 1] = arguments[_key5];
      }

      var normalizedIndexes = (0, _Operations.normalizeAddedIndexes)(indexes);

      try {
        var _this$_crudOperations5;

        (_this$_crudOperations5 = this._crudOperations).ensureItIsPossibleToAddColumns.apply(_this$_crudOperations5, [sheetId].concat(_toConsumableArray(normalizedIndexes)));

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Adds multiple columns into a specified position in a given sheet.
     * Does nothing if the columns are outside of the effective sheet size.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID in which columns will be added
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format: [column, amount], where column is a column number from which new columns will be added
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     * @throws [[SheetSizeLimitExceededError]] when performing this operation would result in sheet size limits exceeding
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=RAND()', '42'],
     * ]);
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, for this example:
     * // [{
     * //   address: { sheet: 0, col: 1, row: 0 },
     * //   newValue: 0.92754862796338,
     * // }]
     * const changes = hfInstance.addColumns(0, [0, 1]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "addColumns",
    value: function addColumns(sheetId) {
      var _this$_crudOperations6;

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        indexes[_key6 - 1] = arguments[_key6];
      }

      (_this$_crudOperations6 = this._crudOperations).addColumns.apply(_this$_crudOperations6, [sheetId].concat(indexes));

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to remove columns from a specified position in a given sheet.
     * Checks against particular rules to ascertain that removeColumns can be called.
     * If returns `true`, doing [[removeColumns]] operation won't throw any errors.
     * Returns `false` if given arguments are invalid.
     *
     * @param {number} sheetId - sheet ID from which columns will be removed
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format [column, amount]
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return 'true' for this example
     * // it is possible to remove one column, in place of the second column of sheet 0
     * const isRemovable = hfInstance.isItPossibleToRemoveColumns(0, [1, 1]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "isItPossibleToRemoveColumns",
    value: function isItPossibleToRemoveColumns(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        indexes[_key7 - 1] = arguments[_key7];
      }

      var normalizedIndexes = (0, _Operations.normalizeRemovedIndexes)(indexes);

      try {
        var _this$_crudOperations7;

        (_this$_crudOperations7 = this._crudOperations).ensureItIsPossibleToRemoveColumns.apply(_this$_crudOperations7, [sheetId].concat(_toConsumableArray(normalizedIndexes)));

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Removes multiple columns from a specified position in a given sheet.
     * Does nothing if columns are outside of the effective sheet size.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID from which columns will be removed
     * @param {ColumnRowIndex[]} indexes - non-contiguous indexes with format: [column, amount]
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['0', '=SUM(1,2,3)', '=A1'],
     * ]);
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, in this example it will return:
     * // [{
     * //   address: { sheet: 0, col: 1, row: 0 },
     * //   newValue: { error: [CellError], value: '#REF!' },
     * // }]
     * const changes = hfInstance.removeColumns(0, [0, 1]);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "removeColumns",
    value: function removeColumns(sheetId) {
      var _this$_crudOperations8;

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        indexes[_key8 - 1] = arguments[_key8];
      }

      (_this$_crudOperations8 = this._crudOperations).removeColumns.apply(_this$_crudOperations8, [sheetId].concat(indexes));

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to move cells to a specified position in a given sheet.
     * Checks against particular rules to ascertain that moveCells can be called.
     * If returns `true`, doing [[moveCells]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted and causes side-effects by the fact that there is an array inside the selected columns, the target location has array or the provided address is invalid.
     *
     * @param {SimpleCellRange} source - range for a moved block
     * @param {SimpleCellAddress} destinationLeftCorner - upper left address of the target cell block
     *
     * @throws [[ExpectedValueOfTypeError]] if destinationLeftCorner, source, or any of basic type arguments are of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // choose the coordinates and assign them to variables
     * const source = { sheet: 0, col: 1, row: 0 };
     * const destination = { sheet: 0, col: 3, row: 0 };
     *
     * // should return 'true' for this example
     * // it is possible to move a block of width 1 and height 1
     * // from the corner: column 1 and row 0 of sheet 0
     * // into destination corner: column 3, row 0 of sheet 0
     * const isMovable = hfInstance.isItPossibleToMoveCells({ start: source, end: source }, destination);
     * ```
     * @category Cells
     */

  }, {
    key: "isItPossibleToMoveCells",
    value: function isItPossibleToMoveCells(source, destinationLeftCorner) {
      if (!(0, _Cell.isSimpleCellAddress)(destinationLeftCorner)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'destinationLeftCorner');
      }

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      try {
        var range = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);

        this._crudOperations.operations.ensureItIsPossibleToMoveCells(range.start, range.width(), range.height(), destinationLeftCorner);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Moves the content of a cell block from source to the target location.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {SimpleCellRange} source - range for a moved block
     * @param {SimpleCellAddress} destinationLeftCorner - upper left address of the target cell block
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if destinationLeftCorner or source are of wrong type
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     * @throws [[SheetSizeLimitExceededError]] when performing this operation would result in sheet size limits exceeding
     * @throws [[SourceLocationHasArrayError]] when the source location has array inside - array cannot be moved
     * @throws [[TargetLocationHasArrayError]] when the target location has array inside - cells cannot be replaced by the array
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=RAND()', '42'],
     * ]);
     *
     * // choose the coordinates and assign them to variables
     * const source = { sheet: 0, col: 1, row: 0 };
     * const destination = { sheet: 0, col: 3, row: 0 };
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, for this example:
     * // [{
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 0.93524248002062,
     * // }]
     * const changes = hfInstance.moveCells({ start: source, end: source }, destination);
     * ```
     *
     * @category Cells
     */

  }, {
    key: "moveCells",
    value: function moveCells(source, destinationLeftCorner) {
      if (!(0, _Cell.isSimpleCellAddress)(destinationLeftCorner)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'destinationLeftCorner');
      }

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var range = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);

      this._crudOperations.moveCells(range.start, range.width(), range.height(), destinationLeftCorner);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to move a particular number of rows to a specified position in a given sheet.
     * Checks against particular rules to ascertain that moveRows can be called.
     * If returns `true`, doing [[moveRows]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted and causes side-effects by the fact that there is an array inside the selected rows, the target location has array or the provided address is invalid.
     *
     * @param {number} sheetId - a sheet number in which the operation will be performed
     * @param {number} startRow - number of the first row to move
     * @param {number} numberOfRows - number of rows to move
     * @param {number} targetRow - row number before which rows will be moved
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     * ]);
     *
     * // should return 'true' for this example
     * // it is possible to move one row from row 0 into row 2
     * const isMovable = hfInstance.isItPossibleToMoveRows(0, 0, 1, 2);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "isItPossibleToMoveRows",
    value: function isItPossibleToMoveRows(sheetId, startRow, numberOfRows, targetRow) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(startRow, 'number', 'startRow');
      (0, _ArgumentSanitization.validateArgToType)(numberOfRows, 'number', 'numberOfRows');
      (0, _ArgumentSanitization.validateArgToType)(targetRow, 'number', 'targetRow');

      try {
        this._crudOperations.ensureItIsPossibleToMoveRows(sheetId, startRow, numberOfRows, targetRow);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Moves a particular number of rows to a specified position in a given sheet.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - a sheet number in which the operation will be performed
     * @param {number} startRow - number of the first row to move
     * @param {number} numberOfRows - number of rows to move
     * @param {number} targetRow - row number before which rows will be moved
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     * @throws [[SourceLocationHasArrayError]] when the source location has array inside - array cannot be moved
     * @throws [[TargetLocationHasArrayError]] when the target location has array inside - cells cannot be replaced by the array
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1'],
     *  ['2'],
     * ]);
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values
     * const changes = hfInstance.moveRows(0, 0, 1, 2);
     * ```
     *
     * @category Rows
     */

  }, {
    key: "moveRows",
    value: function moveRows(sheetId, startRow, numberOfRows, targetRow) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(startRow, 'number', 'startRow');
      (0, _ArgumentSanitization.validateArgToType)(numberOfRows, 'number', 'numberOfRows');
      (0, _ArgumentSanitization.validateArgToType)(targetRow, 'number', 'targetRow');

      this._crudOperations.moveRows(sheetId, startRow, numberOfRows, targetRow);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to move a particular number of columns to a specified position in a given sheet.
     * Checks against particular rules to ascertain that moveColumns can be called.
     * If returns `true`, doing [[moveColumns]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted and causes side-effects by the fact that there is an array inside the selected columns, the target location has array or the provided address is invalid.
     *
     * @param {number} sheetId - a sheet number in which the operation will be performed
     * @param {number} startColumn - number of the first column to move
     * @param {number} numberOfColumns - number of columns to move
     * @param {number} targetColumn - column number before which columns will be moved
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return 'true' for this example
     * // it is possible to move one column from column 1 into column 2 of sheet 0
     * const isMovable = hfInstance.isItPossibleToMoveColumns(0, 1, 1, 2);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "isItPossibleToMoveColumns",
    value: function isItPossibleToMoveColumns(sheetId, startColumn, numberOfColumns, targetColumn) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(startColumn, 'number', 'startColumn');
      (0, _ArgumentSanitization.validateArgToType)(numberOfColumns, 'number', 'numberOfColumns');
      (0, _ArgumentSanitization.validateArgToType)(targetColumn, 'number', 'targetColumn');

      try {
        this._crudOperations.ensureItIsPossibleToMoveColumns(sheetId, startColumn, numberOfColumns, targetColumn);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Moves a particular number of columns to a specified position in a given sheet.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - a sheet number in which the operation will be performed
     * @param {number} startColumn - number of the first column to move
     * @param {number} numberOfColumns - number of columns to move
     * @param {number} targetColumn - column number before which columns will be moved
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[InvalidArgumentsError]] when the given arguments are invalid
     * @throws [[SourceLocationHasArrayError]] when the source location has array inside - array cannot be moved
     * @throws [[TargetLocationHasArrayError]] when the target location has array inside - cells cannot be replaced by the array
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2', '3', '=RAND()', '=SUM(A1:C1)'],
     * ]);
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, for this example:
     * // [{
     * //   address: { sheet: 0, col: 1, row: 0 },
     * //   newValue: 0.16210054671639,
     * //  }, {
     * //   address: { sheet: 0, col: 4, row: 0 },
     * //   newValue: 6.16210054671639,
     * // }]
     * const changes = hfInstance.moveColumns(0, 1, 1, 2);
     * ```
     *
     * @category Columns
     */

  }, {
    key: "moveColumns",
    value: function moveColumns(sheetId, startColumn, numberOfColumns, targetColumn) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(startColumn, 'number', 'startColumn');
      (0, _ArgumentSanitization.validateArgToType)(numberOfColumns, 'number', 'numberOfColumns');
      (0, _ArgumentSanitization.validateArgToType)(targetColumn, 'number', 'targetColumn');

      this._crudOperations.moveColumns(sheetId, startColumn, numberOfColumns, targetColumn);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Stores a copy of the cell block in internal clipboard for the further paste.
     * Returns values of cells for use in external clipboard.
     *
     * @param {SimpleCellRange} source - rectangle range to copy
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if source is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return: [ [ 2 ] ]
     * const clipboardContent = hfInstance.copy({ start: { sheet: 0, col: 1, row: 0 }, end: { sheet: 0, col: 1, row: 0 } });
     * ```
     *
     * @category Clipboard
     */

  }, {
    key: "copy",
    value: function copy(source) {
      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var range = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);

      this._crudOperations.copy(range.start, range.width(), range.height());

      return this.getRangeValues(source);
    }
    /**
     * Stores information of the cell block in internal clipboard for further paste.
     * Calling [[paste]] right after this method is equivalent to call [[moveCells]].
     * Almost any CRUD operation called after this method will abort the cut operation.
     * Returns values of cells for use in external clipboard.
     *
     * @param {SimpleCellRange} source - rectangle range to cut
     *
     * @throws [[ExpectedValueOfTypeError]] if source is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return values that were cut: [ [ 1 ] ]
     * const clipboardContent = hfInstance.cut({ start: { sheet: 0, col: 0, row: 0 }, end: { sheet: 0, col: 0, row: 0 } });
     * ```
     *
     * @category Clipboard
     */

  }, {
    key: "cut",
    value: function cut(source) {
      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var range = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);

      this._crudOperations.cut(range.start, range.width(), range.height());

      return this.getRangeValues(source);
    }
    /**
     * When called after [[copy]] it pastes copied values and formulas into a cell block.
     * When called after [[cut]] it performs [[moveCells]] operation into the cell block.
     * Does nothing if the clipboard is empty.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {SimpleCellAddress} targetLeftCorner - upper left address of the target cell block
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[SheetSizeLimitExceededError]] when performing this operation would result in sheet size limits exceeding
     * @throws [[NothingToPasteError]] when clipboard is empty
     * @throws [[TargetLocationHasArrayError]] when the selected target area has array inside
     * @throws [[ExpectedValueOfTypeError]] if targetLeftCorner is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // do a copy, [ [ 2 ] ] was copied
     * hfInstance.copy({ sheet: 0, col: 0, row: 0 }, 1, 1);
     *
     * // do a paste, should return a list of cells which values changed
     * // after the operation, their absolute addresses and new values
     * const changes = hfInstance.paste({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Clipboard
     */

  }, {
    key: "paste",
    value: function paste(targetLeftCorner) {
      if (!(0, _Cell.isSimpleCellAddress)(targetLeftCorner)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'targetLeftCorner');
      }

      this.ensureEvaluationIsNotSuspended();

      this._crudOperations.paste(targetLeftCorner);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether there is something in the clipboard.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // copy desired content
     * hfInstance.copy({ sheet: 0, col: 1, row: 0 }, 1, 1);
     *
     * // returns 'false', there is content in the clipboard
     * const isClipboardEmpty = hfInstance.isClipboardEmpty();
     * ```
     *
     * @category Clipboard
     */

  }, {
    key: "isClipboardEmpty",
    value: function isClipboardEmpty() {
      return this._crudOperations.isClipboardEmpty();
    }
    /**
     * Clears the clipboard content.
     *
     * @example
     * ```js
     * // clears the clipboard, isClipboardEmpty() should return true if called afterwards
     * hfInstance.clearClipboard();
     * ```
     *
     * @category Clipboard
     */

  }, {
    key: "clearClipboard",
    value: function clearClipboard() {
      this._crudOperations.clearClipboard();
    }
    /**
     * Clears the redo stack in undoRedo history.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *   ['1', '2', '3'],
     * ]);
     *
     * // do an operation, for example remove columns
     * hfInstance.removeColumns(0, [0, 1]);
     *
     * // undo the operation
     * hfInstance.undo();
     *
     * // redo the operation
     * hfInstance.redo();
     *
     * // clear the redo stack
     * hfInstance.clearRedoStack();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "clearRedoStack",
    value: function clearRedoStack() {
      this._crudOperations.undoRedo.clearRedoStack();
    }
    /**
     * Clears the undo stack in undoRedo history.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *   ['1', '2', '3'],
     * ]);
     *
     * // do an operation, for example remove columns
     * hfInstance.removeColumns(0, [0, 1]);
     *
     * // undo the operation
     * hfInstance.undo();
     *
     * // clear the undo stack
     * hfInstance.clearUndoStack();
     * ```
     *
     * @category Undo and Redo
     */

  }, {
    key: "clearUndoStack",
    value: function clearUndoStack() {
      this._crudOperations.undoRedo.clearUndoStack();
    }
    /**
     * Returns the cell content of a given range in a [[CellValue]][][] format.
     *
     * @param {SimpleCellRange} source - rectangular range
     *
     * @throws [[ExpectedValueOfTypeError]] if source is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2)', '2', '10'],
     *  ['5', '6', '7'],
     *  ['40', '30', '20'],
     * ]);
     *
     *
     * // returns calculated cells content: [ [ 3, 2 ], [ 5, 6 ] ]
     * const rangeValues = hfInstance.getRangeValues({ start: { sheet: 0, col: 0, row: 0 }, end: { sheet: 0, col: 1, row: 1 } });
     * ```
     *
     * @category Ranges
     */

  }, {
    key: "getRangeValues",
    value: function getRangeValues(source) {
      var _this2 = this;

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var cellRange = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);
      return cellRange.arrayOfAddressesInRange().map(function (subarray) {
        return subarray.map(function (address) {
          return _this2.getCellValue(address);
        });
      });
    }
    /**
     * Returns cell formulas in given range.
     *
     * @param {SimpleCellRange} source - rectangular range
     *
     * @throws [[ExpectedValueOfTypeError]] if source is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2)', '2', '10'],
     *  ['5', '6', '7'],
     *  ['40', '30', '20'],
     * ]);
     *
     * // returns cell formulas of a given range only:
     * // [ [ '=SUM(1,2)', undefined ], [ undefined, undefined ] ]
     * const rangeFormulas = hfInstance.getRangeFormulas({ start: { sheet: 0, col: 0, row: 0 }, end: { sheet: 0, col: 1, row: 1 } });
     * ```
     *
     * @category Ranges
     */

  }, {
    key: "getRangeFormulas",
    value: function getRangeFormulas(source) {
      var _this3 = this;

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var cellRange = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);
      return cellRange.arrayOfAddressesInRange().map(function (subarray) {
        return subarray.map(function (address) {
          return _this3.getCellFormula(address);
        });
      });
    }
    /**
     * Returns serialized cells in given range.
     *
     * @param {SimpleCellRange} source - rectangular range
     *
     * @throws [[ExpectedValueOfTypeError]] if source is of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2)', '2', '10'],
     *  ['5', '6', '7'],
     *  ['40', '30', '20'],
     * ]);
     *
     * // should return serialized cell content for the given range:
     * // [ [ '=SUM(1,2)', 2 ], [ 5, 6 ] ]
     * const rangeSerialized = hfInstance.getRangeSerialized({ start: { sheet: 0, col: 0, row: 0 }, end: { sheet: 0, col: 1, row: 1 } });
     * ```
     *
     * @category Ranges
     */

  }, {
    key: "getRangeSerialized",
    value: function getRangeSerialized(source) {
      var _this4 = this;

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      var cellRange = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);
      return cellRange.arrayOfAddressesInRange().map(function (subarray) {
        return subarray.map(function (address) {
          return _this4.getCellSerialized(address);
        });
      });
    }
    /**
     * Returns values to fill target range using source range, with properly extending the range using wrap-around heuristic.
     *
     * @param {SimpleCellRange} source of data
     * @param {SimpleCellRange} target range where data is intended to be put
     * @param {boolean} offsetsFromTarget if true, offsets are computed from target corner, otherwise from source corner
     *
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[ExpectedValueOfTypeError]] if source or target are of wrong type
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([[1, '=A1'], ['=$A$1', '2']]);
     *
     * // should return [['2', '=$A$1', '2'], ['=A3', 1, '=C3'], ['2', '=$A$1', '2']]
     * hfInstance.getFillRangeData( {start: {sheet: 0, row: 0, col: 0}}, end: {sheet: 0, row: 1, col: 1}},
     * {start: {sheet: 0, row: 1, col: 1}, end: {sheet: 0, row: 3, col: 3}});
     * ```
     *
     * @category Ranges
     */

  }, {
    key: "getFillRangeData",
    value: function getFillRangeData(source, target) {
      var _this5 = this;

      var offsetsFromTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(source)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'source');
      }

      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(target)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'target');
      }

      var sourceRange = new _AbsoluteCellRange.AbsoluteCellRange(source.start, source.end);
      var targetRange = new _AbsoluteCellRange.AbsoluteCellRange(target.start, target.end);
      this.ensureEvaluationIsNotSuspended();
      return targetRange.arrayOfAddressesInRange().map(function (subarray) {
        return subarray.map(function (address) {
          var row = ((address.row - (offsetsFromTarget ? target : source).start.row) % sourceRange.height() + sourceRange.height()) % sourceRange.height() + source.start.row;
          var col = ((address.col - (offsetsFromTarget ? target : source).start.col) % sourceRange.width() + sourceRange.width()) % sourceRange.width() + source.start.col;
          return _this5._serialization.getCellSerialized({
            row: row,
            col: col,
            sheet: sourceRange.sheet
          }, address);
        });
      });
    }
    /**
     * Returns information whether it is possible to add a sheet to the engine.
     * Checks against particular rules to ascertain that addSheet can be called.
     * If returns `true`, doing [[addSheet]] operation won't throw any errors and it possible to add sheet with provided name.
     * Returns `false` if the chosen name is already used.
     *
     * @param {string} sheetName - sheet name, case insensitive
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   MySheet1: [ ['1'] ],
     *   MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'false' because 'MySheet2' already exists
     * const isAddable = hfInstance.isItPossibleToAddSheet('MySheet2');
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "isItPossibleToAddSheet",
    value: function isItPossibleToAddSheet(sheetName) {
      (0, _ArgumentSanitization.validateArgToType)(sheetName, 'string', 'sheetName');

      try {
        this._crudOperations.ensureItIsPossibleToAddSheet(sheetName);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Adds a new sheet to the HyperFormula instance. Returns given or autogenerated name of a new sheet.
     *
     * @param {string} [sheetName] - if not specified, name is autogenerated
     *
     * @fires [[sheetAdded]] after the sheet was added
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[SheetNameAlreadyTakenError]] when sheet with a given name already exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'MySheet3'
     * const nameProvided = hfInstance.addSheet('MySheet3');
     *
     * // should return autogenerated 'Sheet4'
     * // because no name was provided and 3 other ones already exist
     * const generatedName = hfInstance.addSheet();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "addSheet",
    value: function addSheet(sheetName) {
      if (sheetName !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(sheetName, 'string', 'sheetName');
      }

      var addedSheetName = this._crudOperations.addSheet(sheetName);

      this._emitter.emit(_Emitter.Events.SheetAdded, addedSheetName);

      return addedSheetName;
    }
    /**
     * Returns information whether it is possible to remove sheet for the engine.
     * Returns `true` if the provided name of a sheet exists and therefore it can be removed, doing [[removeSheet]] operation won't throw any errors.
     * Returns `false` if there is no sheet with a given name.
     *
     * @param {number} sheetId - sheet ID.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'true' because sheet with ID 1 exists and is removable
     * const isRemovable = hfInstance.isItPossibleToRemoveSheet(1);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "isItPossibleToRemoveSheet",
    value: function isItPossibleToRemoveSheet(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        this._crudOperations.ensureScopeIdIsValid(sheetId);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Removes sheet with a specified name.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID.
     *
     * @fires [[sheetRemoved]] after the sheet was removed
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['=SUM(MySheet2!A1:A2)'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, in this example it will return:
     * // [{
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: { error: [CellError], value: '#REF!' },
     * // }]
     * const changes = hfInstance.removeSheet(1);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      var displayName = this.sheetMapping.getDisplayName(sheetId);

      this._crudOperations.removeSheet(sheetId);

      var changes = this.recomputeIfDependencyGraphNeedsIt();

      this._emitter.emit(_Emitter.Events.SheetRemoved, displayName, changes);

      return changes;
    }
    /**
     * Returns information whether it is possible to clear a specified sheet.
     * If returns `true`, doing [[clearSheet]] operation won't throw any errors, provided name of a sheet exists and then its content can be cleared.
     * Returns `false` if there is no sheet with a given name.
     *
     * @param {number} sheetId - sheet ID.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'true' because 'MySheet2' exists and can be cleared
     * const isClearable = hfInstance.isItPossibleToClearSheet(1);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "isItPossibleToClearSheet",
    value: function isItPossibleToClearSheet(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        this._crudOperations.ensureScopeIdIsValid(sheetId);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Clears the sheet content. Based on that the method finds the ID of a sheet to be cleared.
     * Double-checks if the sheet exists.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {number} sheetId - sheet ID.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['=SUM(MySheet2!A1:A2)'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values, in this example it will return:
     * // [{
     * //   address: { sheet: 0, col: 0, row: 0 },
     * //   newValue: 0,
     * // }]
     * const changes = hfInstance.clearSheet(0);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "clearSheet",
    value: function clearSheet(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      this._crudOperations.clearSheet(sheetId);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to replace the sheet content.
     * If returns `true`, doing [[setSheetContent]] operation won't throw any errors, the provided name of a sheet exists and then its content can be replaced.
     * Returns `false` if there is no sheet with a given name.
     *
     * @param {number} sheetId - sheet ID.
     * @param {RawCellContent[][]} values - array of new values
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'true' because 'MySheet1' (sheetId=0) exists
     * // and the provided content can be placed in this sheet
     * const isReplaceable = hfInstance.isItPossibleToReplaceSheetContent(0, [['50'], ['60']]);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "isItPossibleToReplaceSheetContent",
    value: function isItPossibleToReplaceSheetContent(sheetId, values) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      try {
        this._crudOperations.ensureScopeIdIsValid(sheetId);

        this._crudOperations.ensureItIsPossibleToChangeSheetContents(sheetId, values);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Replaces the sheet content with new values.
     * The new value is to be provided as an array of arrays of [[RawCellContent]].
     * The method finds sheet ID based on the provided sheet name.
     *
     * @param {number} sheetId - sheet ID.
     * @param {RawCellContent[][]} values - array of new values
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exists
     * @throws [[InvalidArgumentsError]] when values is not an array of arrays
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return a list of cells which values changed after the operation,
     * // their absolute addresses and new values
     * const changes = hfInstance.setSheetContent(0, [['50'], ['60']]);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "setSheetContent",
    value: function setSheetContent(sheetId, values) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      this._crudOperations.setSheetContent(sheetId, values);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Computes simple (absolute) address of a cell address based on its string representation.
     * If sheet name is present in string representation but not present in the engine, returns `undefined`.
     *
     * @param {string} cellAddress - string representation of cell address in A1 notation
     * @param {number} sheetId - context used in case of missing sheet in the first argument
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     * hfInstance.addSheet('Sheet0'); //sheetId = 0
     *
     * // returns { sheet: 0, col: 0, row: 0 }
     * const simpleCellAddress = hfInstance.simpleCellAddressFromString('A1', 0);
     *
     * // returns { sheet: 0, col: 0, row: 5 }
     * const simpleCellAddressTwo = hfInstance.simpleCellAddressFromString('Sheet1!A6');
     *
     * // returns { sheet: 0, col: 0, row: 5 }
     * const simpleCellAddressTwo = hfInstance.simpleCellAddressFromString('Sheet1!$A$6');
     *
     * // returns 'undefined', as there's no 'Sheet 2' in the HyperFormula instance
     * const simpleCellAddressTwo = hfInstance.simpleCellAddressFromString('Sheet2!A6');
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "simpleCellAddressFromString",
    value: function simpleCellAddressFromString(cellAddress, sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(cellAddress, 'string', 'cellAddress');
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return (0, _parser2.simpleCellAddressFromString)(this.sheetMapping.get, cellAddress, sheetId);
    }
    /**
     * Computes simple (absolute) address of a cell range based on its string representation.
     * If sheet name is present in string representation but not present in the engine, returns `undefined`.
     *
     * @param {string} cellRange - string representation of cell range in A1 notation
     * @param {number} sheetId - context used in case of missing sheet in the first argument
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     * hfInstance.addSheet('Sheet0'); //sheetId = 0
     *
     * // should return { start: { sheet: 0, col: 0, row: 0 }, end: { sheet: 0, col: 1, row: 0 } }
     * const simpleCellAddress = hfInstance.simpleCellRangeFromString('A1:A2', 0);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "simpleCellRangeFromString",
    value: function simpleCellRangeFromString(cellRange, sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(cellRange, 'string', 'cellRange');
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return (0, _parser2.simpleCellRangeFromString)(this.sheetMapping.get, cellRange, sheetId);
    }
    /**
     * Returns string representation of an absolute address in A1 notation or `undefined` if the sheet index is not present in the engine.
     *
     * @param {SimpleCellAddress} cellAddress - object representation of an absolute address
     * @param {number} sheetId - context used in case of missing sheet in the first argument
     *
     * @throws [[ExpectedValueOfTypeError]] if its arguments are of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     * hfInstance.addSheet('Sheet0'); //sheetId = 0
     *
     * // should return 'B2'
     * const A1Notation = hfInstance.simpleCellAddressToString({ sheet: 0, col: 1, row: 1 }, 0);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "simpleCellAddressToString",
    value: function simpleCellAddressToString(cellAddress, sheetId) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return (0, _parser2.simpleCellAddressToString)(this.sheetMapping.fetchDisplayName, cellAddress, sheetId);
    }
    /**
     * Returns string representation of an absolute range in A1 notation or `undefined` if the sheet index is not present in the engine.
     *
     * @param {SimpleCellRange} cellRange - object representation of an absolute range
     * @param {number} sheetId - context used in case of missing sheet in the first argument
     *
     * @throws [[ExpectedValueOfTypeError]] if its arguments are of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     * hfInstance.addSheet('Sheet0'); //sheetId = 0
     * hfInstance.addSheet('Sheet1'); //sheetId = 1
     *
     * // should return 'B2:C2'
     * const A1Notation = hfInstance.simpleCellRangeToString({ start: { sheet: 0, col: 1, row: 1 }, end: { sheet: 0, col: 2, row: 1 } }, 0);
     *
     *  // should return 'Sheet1!B2:C2'
     * const another = hfInstance.simpleCellRangeToString({ start: { sheet: 1, col: 1, row: 1 }, end: { sheet: 1, col: 2, row: 1 } }, 0);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "simpleCellRangeToString",
    value: function simpleCellRangeToString(cellRange, sheetId) {
      if (!(0, _AbsoluteCellRange.isSimpleCellRange)(cellRange)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellRange', 'cellRange');
      }

      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return (0, _parser2.simpleCellRangeToString)(this.sheetMapping.fetchDisplayName, cellRange, sheetId);
    }
    /**
     * Returns all addresses and ranges whose computation depends on input address or range provided.
     *
     * @param {SimpleCellAddress | SimpleCellRange} address - object representation of an absolute address or range of addresses
     *
     * @throws [[ExpectedValueOfTypeError]] if address is not [[SimpleCellAddress]] or [[SimpleCellRange]]
     * @throws [[SheetsNotEqual]] if range provided has distinct sheet numbers for start and end
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray( [ ['1', '=A1', '=A1+B1'] ] );
     *
     * hfInstance.getCellDependents({ sheet: 0, col: 0, row: 0});
     * // should return [{ sheet: 0, col: 1, row: 0}, { sheet: 0, col: 2, row: 0}]
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "getCellDependents",
    value: function getCellDependents(address) {
      var vertex;

      if ((0, _Cell.isSimpleCellAddress)(address)) {
        vertex = this._dependencyGraph.addressMapping.getCell(address);
      } else if ((0, _AbsoluteCellRange.isSimpleCellRange)(address)) {
        vertex = this._dependencyGraph.rangeMapping.getRange(address.start, address.end);
      } else {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress | SimpleCellRange', address);
      }

      if (vertex === undefined) {
        return [];
      }

      return this._dependencyGraph.getAdjacentNodesAddresses(vertex);
    }
    /**
     * Returns all addresses and ranges necessary for computation of a given address or range.
     *
     * @param {SimpleCellAddress | SimpleCellRange} address - object representation of an absolute address or range of addresses
     *
     * @throws [[ExpectedValueOfTypeError]] if address is of wrong type
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray( [ ['1', '=A1', '=A1+B1'] ] );
     *
     * hfInstance.getCellPrecedents({ sheet: 0, col: 2, row: 0});
     * // should return [{ sheet: 0, col: 0, row: 0}, { sheet: 0, col: 1, row: 0}]
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "getCellPrecedents",
    value: function getCellPrecedents(address) {
      var vertex;

      if ((0, _Cell.isSimpleCellAddress)(address)) {
        vertex = this._dependencyGraph.addressMapping.getCell(address);
      } else if ((0, _AbsoluteCellRange.isSimpleCellRange)(address)) {
        vertex = this._dependencyGraph.rangeMapping.getRange(address.start, address.end);
      } else {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress | SimpleCellRange', address);
      }

      if (vertex === undefined) {
        return [];
      }

      return this._dependencyGraph.dependencyQueryAddresses(vertex);
    }
    /**
     * Returns a unique sheet name assigned to the sheet of a given ID or `undefined` if the there is no sheet with a given ID.
     *
     * @param {number} sheetId - ID of the sheet, for which we want to retrieve name
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'MySheet2' as this sheet is the second one
     * const sheetName = hfInstance.getSheetName(1);
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetName",
    value: function getSheetName(sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      return this.sheetMapping.getDisplayName(sheetId);
    }
    /**
     * List all sheet names.
     * Returns an array of sheet names as strings.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // should return all sheets names: ['MySheet1', 'MySheet2']
     * const sheetNames = hfInstance.getSheetNames();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetNames",
    value: function getSheetNames() {
      return this.sheetMapping.sheetNames();
    }
    /**
     * Returns a unique sheet ID assigned to the sheet with a given name or `undefined` if the sheet does not exist.
     *
     * @param {string} sheetName - name of the sheet, for which we want to retrieve ID, case insensitive.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   MySheet1: [ ['1'] ],
     *   MySheet2: [ ['10'] ],
     * });
     *
     * // should return '0' because 'MySheet1' is of ID '0'
     * const sheetID = hfInstance.getSheetId('MySheet1');
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "getSheetId",
    value: function getSheetId(sheetName) {
      (0, _ArgumentSanitization.validateArgToType)(sheetName, 'string', 'sheetName');
      return this.sheetMapping.get(sheetName);
    }
    /**
     * Returns `true` whether sheet with a given name exists. The methods accepts sheet name to be checked.
     *
     * @param {string} sheetName - name of the sheet, case insensitive.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   MySheet1: [ ['1'] ],
     *   MySheet2: [ ['10'] ],
     * });
     *
     * // should return 'true' since 'MySheet1' exists
     * const sheetExist = hfInstance.doesSheetExist('MySheet1');
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "doesSheetExist",
    value: function doesSheetExist(sheetName) {
      (0, _ArgumentSanitization.validateArgToType)(sheetName, 'string', 'sheetName');
      return this.sheetMapping.hasSheetWithName(sheetName);
    }
    /**
     * Returns type of a specified cell of a given address.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(A2:A3)', '2'],
     * ]);
     *
     * // should return 'FORMULA', the cell of given coordinates is of this type
     * const cellA1Type = hfInstance.getCellType({ sheet: 0, col: 0, row: 0 });
     *
     * // should return 'VALUE', the cell of given coordinates is of this type
     * const cellB1Type = hfInstance.getCellType({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellType",
    value: function getCellType(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      var vertex = this.dependencyGraph.getCell(cellAddress);
      return (0, _Cell.getCellType)(vertex, cellAddress);
    }
    /**
     * Returns `true` if the specified cell contains a simple value.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(A2:A3)', '2'],
     * ]);
     *
     * // should return 'true' since the selected cell contains a simple value
     * const isA1Simple = hfInstance.doesCellHaveSimpleValue({ sheet: 0, col: 0, row: 0 });
     *
     * // should return 'false' since the selected cell does not contain a simple value
     * const isB1Simple = hfInstance.doesCellHaveSimpleValue({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "doesCellHaveSimpleValue",
    value: function doesCellHaveSimpleValue(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      return this.getCellType(cellAddress) === _Cell.CellType.VALUE;
    }
    /**
     * Returns `true` if the specified cell contains a formula.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(A2:A3)', '2'],
     * ]);
     *
     * // should return 'true' since the A1 cell contains a formula
     * const A1Formula = hfInstance.doesCellHaveFormula({ sheet: 0, col: 0, row: 0 });
     *
     * // should return 'false' since the B1 cell does not contain a formula
     * const B1NoFormula = hfInstance.doesCellHaveFormula({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "doesCellHaveFormula",
    value: function doesCellHaveFormula(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      var cellType = this.getCellType(cellAddress);
      return cellType === _Cell.CellType.FORMULA || cellType === _Cell.CellType.ARRAYFORMULA;
    }
    /**
     * Returns`true` if the specified cell is empty.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *   [null, '1'],
     * ]);
     *
     * // should return 'true', cell of provided coordinates is empty
     * const isEmpty = hfInstance.isCellEmpty({ sheet: 0, col: 0, row: 0 });
     *
     * // should return 'false', cell of provided coordinates is not empty
     * const isNotEmpty = hfInstance.isCellEmpty({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "isCellEmpty",
    value: function isCellEmpty(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      return this.getCellType(cellAddress) === _Cell.CellType.EMPTY;
    }
    /**
     * Returns `true` if a given cell is a part of a array.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *    ['{=TRANSPOSE(B1:B1)}'],
     * ]);
     *
     * // should return 'true', cell of provided coordinates is a part of a array
     * const isPartOfArray = hfInstance.isCellPartOfArray({ sheet: 0, col: 0, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "isCellPartOfArray",
    value: function isCellPartOfArray(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      var cellType = this.getCellType(cellAddress);
      return cellType === _Cell.CellType.ARRAY || cellType === _Cell.CellType.ARRAYFORMULA;
    }
    /**
     * Returns type of the cell value of a given address.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['=SUM(1,2,3)', '2'],
     * ]);
     *
     * // should return 'NUMBER', cell value type of provided coordinates is a number
     * const cellValue = hfInstance.getCellValueType({ sheet: 0, col: 1, row: 0 });
     *
     * // should return 'NUMBER', cell value type of provided coordinates is a number
     * const cellValue = hfInstance.getCellValueType({ sheet: 0, col: 0, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellValueType",
    value: function getCellValueType(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      this.ensureEvaluationIsNotSuspended();
      var value = this.dependencyGraph.getCellValue(cellAddress);
      return (0, _Cell.getCellValueType)(value);
    }
    /**
     * Returns detailed type of the cell value of a given address.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1%', '1$'],
     * ]);
     *
     * // should return 'NUMBER_PERCENT', cell value type of provided coordinates is a number with a format inference percent.
     * const cellType = hfInstance.getCellValueDetailedType({ sheet: 0, col: 0, row: 0 });
     *
     * // should return 'NUMBER_CURRENCY', cell value type of provided coordinates is a number with a format inference currency.
     * const cellType = hfInstance.getCellValueDetailedType({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellValueDetailedType",
    value: function getCellValueDetailedType(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      this.ensureEvaluationIsNotSuspended();
      var value = this.dependencyGraph.getCellValue(cellAddress);
      return (0, _Cell.getCellValueDetailedType)(value);
    }
    /**
     * Returns auxilary format information of the cell value of a given address.
     * The methods accepts cell coordinates as object with column, row and sheet numbers.
     *
     * @param {SimpleCellAddress} cellAddress - cell coordinates
     *
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[EvaluationSuspendedError]] when the evaluation is suspended
     * @throws [[ExpectedValueOfTypeError]] if cellAddress is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1$', '1'],
     * ]);
     *
     * // should return '$', cell value type of provided coordinates is a number with a format inference currency, parsed as using '$' as currency.
     * const cellFormat = hfInstance.getCellValueFormat({ sheet: 0, col: 0, row: 0 });
     *
     * // should return undefined, cell value type of provided coordinates is a number with no format information.
     * const cellFormat = hfInstance.getCellValueFormat({ sheet: 0, col: 1, row: 0 });
     * ```
     *
     * @category Cells
     */

  }, {
    key: "getCellValueFormat",
    value: function getCellValueFormat(cellAddress) {
      if (!(0, _Cell.isSimpleCellAddress)(cellAddress)) {
        throw new _errors.ExpectedValueOfTypeError('SimpleCellAddress', 'cellAddress');
      }

      this.ensureEvaluationIsNotSuspended();
      var value = this.dependencyGraph.getCellValue(cellAddress);
      return (0, _Cell.getCellValueFormat)(value);
    }
    /**
     * Returns the number of existing sheets.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['1', '2'],
     * ]);
     *
     * // should return the number of sheets which is '1'
     * const sheetsCount = hfInstance.countSheets();
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "countSheets",
    value: function countSheets() {
      return this.sheetMapping.numberOfSheets();
    }
    /**
     * Returns information whether it is possible to rename sheet.
     * Returns `true` if the sheet with provided id exists and new name is available
     * Returns `false` if sheet cannot be renamed
     *
     * @param {number} sheetId - a sheet number
     * @param {string} newName - a name of the sheet to be given
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   MySheet1: [ ['1'] ],
     *   MySheet2: [ ['10'] ],
     * });
     *
     * // returns true
     * hfInstance.isItPossibleToRenameSheet(0, 'MySheet0');
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "isItPossibleToRenameSheet",
    value: function isItPossibleToRenameSheet(sheetId, newName) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(newName, 'string', 'newName');

      try {
        this._crudOperations.ensureItIsPossibleToRenameSheet(sheetId, newName);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Renames a specified sheet.
     *
     * @param {number} sheetId - a sheet number
     * @param {string} newName - a name of the sheet to be given, if is the same as the old one the method does nothing
     *
     * @fires [[sheetRenamed]] after the sheet was renamed
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] when the given sheet ID does not exist
     * @throws [[SheetNameAlreadyTakenError]] when the provided sheet name already exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *   MySheet1: [ ['1'] ],
     *   MySheet2: [ ['10'] ],
     * });
     *
     * // renames the sheet 'MySheet1'
     * hfInstance.renameSheet(0, 'MySheet0');
     * ```
     *
     * @category Sheets
     */

  }, {
    key: "renameSheet",
    value: function renameSheet(sheetId, newName) {
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');
      (0, _ArgumentSanitization.validateArgToType)(newName, 'string', 'newName');

      var oldName = this._crudOperations.renameSheet(sheetId, newName);

      if (oldName !== undefined) {
        this._emitter.emit(_Emitter.Events.SheetRenamed, oldName, newName);
      }
    }
    /**
     * Runs multiple operations and recomputes formulas at the end.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {() => void} batchOperations
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     * @fires [[evaluationSuspended]] always
     * @fires [[evaluationResumed]] after the recomputation of necessary values
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // multiple operations in a single callback will trigger evaluation only once
     * // and only one set of changes is returned as a combined result of all
     * // the operations that were triggered within the callback
     * const changes = hfInstance.batch(() => {
     *  hfInstance.setCellContents({ col: 3, row: 0, sheet: 0 }, [['=B1']]);
     *  hfInstance.setCellContents({ col: 4, row: 0, sheet: 0 }, [['=A1']]);
     * });
     * ```
     *
     * @category Batch
     */

  }, {
    key: "batch",
    value: function batch(batchOperations) {
      this.suspendEvaluation();

      this._crudOperations.beginUndoRedoBatchMode();

      try {
        batchOperations();
      } catch (e) {
        this._crudOperations.commitUndoRedoBatchMode();

        this.resumeEvaluation();
        throw e;
      }

      this._crudOperations.commitUndoRedoBatchMode();

      return this.resumeEvaluation();
    }
    /**
     * Suspends the dependency graph recalculation.
     * It allows optimizing the performance.
     * With this method, multiple CRUD operations can be done without triggering recalculation after every operation.
     * Suspending evaluation should result in an overall faster calculation compared to recalculating after each operation separately.
     * To resume the evaluation use [[resumeEvaluation]].
     *
     * @fires [[evaluationSuspended]] always
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // similar to batch() but operations are not within a callback,
     * // one method suspends the recalculation
     * // the second will resume calculations and return the changes
     *
     * // suspend the evaluation with this method
     * hfInstance.suspendEvaluation();
     *
     * // perform operations
     * hfInstance.setCellContents({ col: 3, row: 0, sheet: 0 }, [['=B1']]);
     * hfInstance.setSheetContent('MySheet2', [['50'], ['60']]);
     *
     * // use resumeEvaluation to resume
     * const changes = hfInstance.resumeEvaluation();
     * ```
     *
     * @category Batch
     */

  }, {
    key: "suspendEvaluation",
    value: function suspendEvaluation() {
      this._evaluationSuspended = true;

      this._emitter.emit(_Emitter.Events.EvaluationSuspended);
    }
    /**
     * Resumes the dependency graph recalculation that was suspended with [[suspendEvaluation]].
     * It also triggers the recalculation and returns changes that are a result of all batched operations.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     * @fires [[evaluationResumed]] after the recomputation of necessary values
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  MySheet1: [ ['1'] ],
     *  MySheet2: [ ['10'] ],
     * });
     *
     * // similar to batch() but operations are not within a callback,
     * // one method suspends the recalculation
     * // the second will resume calculations and return the changes
     *
     * // first, suspend the evaluation
     * hfInstance.suspendEvaluation();
     *
     * // perform operations
     * hfInstance.setCellContents({ col: 3, row: 0, sheet: 0 }, [['=B1']]);
     * hfInstance.setSheetContent('MySheet2', [['50'], ['60']]);
     *
     * // resume the evaluation
     * const changes = hfInstance.resumeEvaluation();
     * ```
     *
     * @category Batch
     */

  }, {
    key: "resumeEvaluation",
    value: function resumeEvaluation() {
      this._evaluationSuspended = false;
      var changes = this.recomputeIfDependencyGraphNeedsIt();

      this._emitter.emit(_Emitter.Events.EvaluationResumed, changes);

      return changes;
    }
    /**
     * Checks if the dependency graph recalculation process is suspended or not.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // suspend the evaluation
     * hfInstance.suspendEvaluation();
     *
     * // between suspendEvaluation() and resumeEvaluation()
     * // or inside batch() callback it will return 'true', otherwise 'false'
     * const isEvaluationSuspended = hfInstance.isEvaluationSuspended();
     *
     * const changes = hfInstance.resumeEvaluation();
     * ```
     *
     * @category Batch
     */

  }, {
    key: "isEvaluationSuspended",
    value: function isEvaluationSuspended() {
      return this._evaluationSuspended;
    }
    /**
     * Returns information whether it is possible to add named expression into a specific scope.
     * Checks against particular rules to ascertain that addNamedExpression can be called.
     * If returns `true`, doing [[addNamedExpression]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted.
     *
     * @param {string} expressionName - a name of the expression to be added
     * @param {RawCellContent} expression - the expression
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // should return 'true' for this example,
     * // it is possible to add named expression to global scope
     * const isAddable = hfInstance.isItPossibleToAddNamedExpression('prettyName', '=Sheet1!$A$1+100');
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "isItPossibleToAddNamedExpression",
    value: function isItPossibleToAddNamedExpression(expressionName, expression, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      try {
        this._crudOperations.ensureItIsPossibleToAddNamedExpression(expressionName, expression, scope);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Adds a specified named expression.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {string} expressionName - a name of the expression to be added
     * @param {RawCellContent} expression - the expression
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     * @param {NamedExpressionOptions?} options - additional metadata related to named expression
     *
     * @fires [[namedExpressionAdded]] always, unless [[batch]] mode is used
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NamedExpressionNameIsAlreadyTakenError]] when the named expression name is not available.
     * @throws [[NamedExpressionNameIsInvalidError]] when the named expression name is not valid
     * @throws [[NoRelativeAddressesAllowedError]] when the named expression formula contains relative references
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add own expression, scope limited to 'Sheet1' (sheetId=0), the method should return a list of cells which values
     * // changed after the operation, their absolute addresses and new values
     * // for this example:
     * // [{
     * //   name: 'prettyName',
     * //   newValue: 142,
     * // }]
     * const changes = hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 0);
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "addNamedExpression",
    value: function addNamedExpression(expressionName, expression, scope, options) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      this._crudOperations.addNamedExpression(expressionName, expression, scope, options);

      var changes = this.recomputeIfDependencyGraphNeedsIt();

      this._emitter.emit(_Emitter.Events.NamedExpressionAdded, expressionName, changes);

      return changes;
    }
    /**
     * Gets specified named expression value.
     * Returns a [[CellValue]] or undefined if the given named expression does not exists.
     *
     * @param {string} expressionName - expression name, case insensitive.
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression, only 'Sheet1' (sheetId=0) considered as it is the scope
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 'Sheet1');
     *
     * // returns the calculated value of a passed named expression, '142' for this example
     * const myFormula = hfInstance.getNamedExpressionValue('prettyName', 'Sheet1');
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "getNamedExpressionValue",
    value: function getNamedExpressionValue(expressionName, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      this.ensureEvaluationIsNotSuspended();

      this._crudOperations.ensureScopeIdIsValid(scope);

      var namedExpression = this._namedExpressions.namedExpressionForScope(expressionName, scope);

      if (namedExpression) {
        return this._serialization.getCellValue(namedExpression.address);
      } else {
        return undefined;
      }
    }
    /**
     * Returns a normalized formula string for given named expression, or `undefined` for a named expression that does not exist or does not hold a formula.
     *
     * @param {string} expressionName - expression name, case insensitive.
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression in 'Sheet1' (sheetId=0)
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 0);
     *
     * // returns a normalized formula string corresponding to the passed name from 'Sheet1' (sheetId=0),
     * // '=Sheet1!A1+100' for this example
     * const myFormula = hfInstance.getNamedExpressionFormula('prettyName', 0);
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "getNamedExpressionFormula",
    value: function getNamedExpressionFormula(expressionName, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      this._crudOperations.ensureScopeIdIsValid(scope);

      var namedExpression = this._namedExpressions.namedExpressionForScope(expressionName, scope);

      if (namedExpression === undefined) {
        return undefined;
      } else {
        return this._serialization.getCellFormula(namedExpression.address);
      }
    }
    /**
     * Returns a named expression, or `undefined` for a named expression that does not exist or does not hold a formula.
     *
     * @param {string} expressionName - expression name, case insensitive.
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression in 'Sheet1' (sheetId=0)
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 0);
     *
     * // returns a named expression that corresponds to the passed name from 'Sheet1' (sheetId=0)
     * // for this example, returns:
     * // {name: 'prettyName', expression: '=Sheet1!$A$1+100', options: undefined, scope: 0}
     * const myFormula = hfInstance.getNamedExpression('prettyName', 0);
     *
     * // for a named expression that doesn't exist, returns 'undefined':
     * const myFormulaTwo = hfInstance.getNamedExpression('uglyName', 0);
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "getNamedExpression",
    value: function getNamedExpression(expressionName, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      var namedExpression = this._namedExpressions.namedExpressionForScope(expressionName, scope);

      if (namedExpression === undefined) {
        return undefined;
      }

      var expression = this._serialization.getCellFormula(namedExpression.address);

      return {
        name: expressionName,
        scope: scope,
        expression: expression,
        options: namedExpression.options
      };
    }
    /**
     * Returns information whether it is possible to change named expression in a specific scope.
     * Checks against particular rules to ascertain that changeNamedExpression can be called.
     * If returns `true`, doing [[changeNamedExpression]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted.
     *
     * @param {string} expressionName - an expression name, case insensitive.
     * @param {RawCellContent} newExpression - a new expression
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100');
     *
     * // should return 'true' for this example,
     * // it is possible to change named expression
     * const isAddable = hfInstance.isItPossibleToChangeNamedExpression('prettyName', '=Sheet1!$A$1+100');
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "isItPossibleToChangeNamedExpression",
    value: function isItPossibleToChangeNamedExpression(expressionName, newExpression, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      try {
        this._crudOperations.ensureItIsPossibleToChangeNamedExpression(expressionName, newExpression, scope);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Changes a given named expression to a specified formula.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {string} expressionName - an expression name, case insensitive.
     * @param {RawCellContent} newExpression - a new expression
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     * @param {NamedExpressionOptions?} options - additional metadata related to named expression
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NamedExpressionDoesNotExistError]] when the given expression does not exist.
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     * @throws [[ArrayFormulasNotSupportedError]] when the named expression formula is an array formula
     * @throws [[NoRelativeAddressesAllowedError]] when the named expression formula contains relative references
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression, scope limited to 'Sheet1' (sheetId=0)
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 0);
     *
     * // change the named expression
     * const changes = hfInstance.changeNamedExpression('prettyName', '=Sheet1!$A$1+200');
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "changeNamedExpression",
    value: function changeNamedExpression(expressionName, newExpression, scope, options) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      this._crudOperations.changeNamedExpressionExpression(expressionName, scope, newExpression, options);

      return this.recomputeIfDependencyGraphNeedsIt();
    }
    /**
     * Returns information whether it is possible to remove named expression from a specific scope.
     * Checks against particular rules to ascertain that removeNamedExpression can be called.
     * If returns `true`, doing [[removeNamedExpression]] operation won't throw any errors.
     * Returns `false` if the operation might be disrupted.
     *
     * @param {string} expressionName - an expression name, case insensitive.
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100');
     *
     * // should return 'true' for this example,
     * // it is possible to change named expression
     * const isAddable = hfInstance.isItPossibleToRemoveNamedExpression('prettyName');
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "isItPossibleToRemoveNamedExpression",
    value: function isItPossibleToRemoveNamedExpression(expressionName, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      try {
        this._crudOperations.isItPossibleToRemoveNamedExpression(expressionName, scope);

        return true;
      } catch (e) {
        return false;
      }
    }
    /**
     * Removes a named expression.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @param {string} expressionName - expression name, case insensitive.
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @fires [[namedExpressionRemoved]] after the expression was removed
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NamedExpressionDoesNotExistError]] when the given expression does not exist.
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     * ]);
     *
     * // add a named expression
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100', 0);
     *
     * // remove the named expression
     * const changes = hfInstance.removeNamedExpression('prettyName', 0);
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "removeNamedExpression",
    value: function removeNamedExpression(expressionName, scope) {
      (0, _ArgumentSanitization.validateArgToType)(expressionName, 'string', 'expressionName');

      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      var removedNamedExpression = this._crudOperations.removeNamedExpression(expressionName, scope);

      if (removedNamedExpression) {
        var changes = this.recomputeIfDependencyGraphNeedsIt();

        this._emitter.emit(_Emitter.Events.NamedExpressionRemoved, removedNamedExpression.displayName, changes);

        return changes;
      } else {
        return [];
      }
    }
    /**
     * Lists all named expressions.
     * Returns an array of expression names defined in a scope, as strings.
     *
     * @param {number?} scope - scope definition, `sheetId` for local scope or `undefined` for global scope
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NoSheetWithIdError]] if no sheet with given sheetId exists
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     *  ['50'],
     *  ['60'],
     * ]);
     *
     * // add two named expressions and one scoped
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100');
     * hfInstance.addNamedExpression('anotherPrettyName', '=Sheet1!$A$2+100');
     * hfInstance.addNamedExpression('alsoPrettyName', '=Sheet1!$A$3+100', 0);
     *
     * // list the expressions, should return: ['prettyName', 'anotherPrettyName'] for this example
     * const listOfExpressions = hfInstance.listNamedExpressions();
     *
     *  // list the expressions, should return: ['alsoPrettyName'] for this example
     * const listOfExpressions = hfInstance.listNamedExpressions(0);
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "listNamedExpressions",
    value: function listNamedExpressions(scope) {
      if (scope !== undefined) {
        (0, _ArgumentSanitization.validateArgToType)(scope, 'number', 'scope');
      }

      this._crudOperations.ensureScopeIdIsValid(scope);

      return this._namedExpressions.getAllNamedExpressionsNamesInScope(scope);
    }
    /**
     * Returns all named expressions serialized.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     *  ['50'],
     *  ['60'],
     * ]);
     *
     * // add two named expressions and one scoped
     * hfInstance.addNamedExpression('prettyName', '=Sheet1!$A$1+100');
     * hfInstance.addNamedExpression('anotherPrettyName', '=Sheet1!$A$2+100');
     * hfInstance.addNamedExpression('prettyName3', '=Sheet1!$A$3+100', 0);
     *
     * // get all expressions serialized
     * // should return:
     * // [
     * // {name: 'prettyName', expression: '=Sheet1!$A$1+100', options: undefined, scope: undefined},
     * // {name: 'anotherPrettyName', expression: '=Sheet1!$A$2+100', options: undefined, scope: undefined},
     * // {name: 'alsoPrettyName', expression: '=Sheet1!$A$3+100', options: undefined, scope: 0}
     * // ]
     * const allExpressions = hfInstance.getAllNamedExpressionsSerialized();
     * ```
     *
     * @category Named Expressions
     */

  }, {
    key: "getAllNamedExpressionsSerialized",
    value: function getAllNamedExpressionsSerialized() {
      return this._serialization.getAllNamedExpressionsSerialized();
    }
    /**
     * Parses and then unparses a formula.
     * Returns a normalized formula (e.g. restores the original capitalization of sheet names, function names, cell addresses, and named expressions).
     *
     * @param {string} formulaString - a formula in a proper format - it must start with "="
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[NotAFormulaError]] when the provided string is not a valid formula, i.e does not start with "="
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromArray([
     *  ['42'],
     *  ['50'],
     * ]);
     *
     * // returns '=Sheet1!$A$1+10'
     * const normalizedFormula = hfInstance.normalizeFormula('=SHEET1!$A$1+10');
     *
     * // returns '=3*$A$1'
     * const normalizedFormula = hfInstance.normalizeFormula('=3*$a$1');
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "normalizeFormula",
    value: function normalizeFormula(formulaString) {
      (0, _ArgumentSanitization.validateArgToType)(formulaString, 'string', 'formulaString');

      var _this$extractTemporar = this.extractTemporaryFormula(formulaString),
          ast = _this$extractTemporar.ast,
          address = _this$extractTemporar.address;

      if (ast === undefined) {
        throw new _errors.NotAFormulaError();
      }

      return this._unparser.unparse(ast, address);
    }
    /**
     * Calculates fire-and-forget formula, returns the calculated value.
     *
     * @param {string} formulaString - A formula in a proper format, starting with `=`.
     * @param {number} sheetId - The ID of a sheet in context of which the formula gets evaluated.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type arguments is of wrong type.
     * @throws [[NotAFormulaError]] when the provided string is not a valid formula (i.e. doesn't start with `=`).
     * @throws [[NoSheetWithIdError]] when the provided `sheetID` doesn't exist.
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildFromSheets({
     *  Sheet1: [['58']],
     *  Sheet2: [['1', '2', '3'], ['4', '5', '6']]
     * });
     *
     * // returns the calculated formula's value
     * // for this example, returns `68`
     * const calculatedFormula = hfInstance.calculateFormula('=A1+10', 0);
     *
     * // for this example, returns [['11', '12', '13'], ['14', '15', '16']]
     * const calculatedFormula = hfInstance.calculateFormula('=A1:B3+10', 1);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "calculateFormula",
    value: function calculateFormula(formulaString, sheetId) {
      (0, _ArgumentSanitization.validateArgToType)(formulaString, 'string', 'formulaString');
      (0, _ArgumentSanitization.validateArgToType)(sheetId, 'number', 'sheetId');

      this._crudOperations.ensureScopeIdIsValid(sheetId);

      var _this$extractTemporar2 = this.extractTemporaryFormula(formulaString, sheetId),
          ast = _this$extractTemporar2.ast,
          address = _this$extractTemporar2.address,
          dependencies = _this$extractTemporar2.dependencies;

      if (ast === undefined) {
        throw new _errors.NotAFormulaError();
      }

      var internalCellValue = this.evaluator.runAndForget(ast, address, dependencies);
      return this._exporter.exportScalarOrRange(internalCellValue);
    }
    /**
     * Validates the formula.
     * If the provided string starts with "=" and is a parsable formula, the method returns `true`.
     * The validation is purely grammatical: the method doesn't verify if the formula can be calculated or not.
     *
     * @param {string} formulaString -  a formula in a proper format - it must start with "="
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * // checks if the given string is a valid formula, should return 'true' for this example
     * const isFormula = hfInstance.validateFormula('=SUM(1,2)');
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "validateFormula",
    value: function validateFormula(formulaString) {
      (0, _ArgumentSanitization.validateArgToType)(formulaString, 'string', 'formulaString');

      var _this$extractTemporar3 = this.extractTemporaryFormula(formulaString),
          ast = _this$extractTemporar3.ast;

      if (ast === undefined) {
        return false;
      }

      if (ast.type === _parser2.AstNodeType.ERROR && !ast.error) {
        return false;
      }

      return true;
    }
    /**
     * Returns translated names of all functions registered in this instance of HyperFormula
     * according to the language set in the configuration
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // return translated names of all functions, assign to a variable
     * const allNames = hfInstance.getRegisteredFunctionNames();
     * ```
     *
     * @category Custom Functions
     */

  }, {
    key: "getRegisteredFunctionNames",
    value: function getRegisteredFunctionNames() {
      var language = HyperFormula.getLanguage(this._config.language);
      return language.getFunctionTranslations(this._functionRegistry.getRegisteredFunctionIds());
    }
    /**
     * Returns class of a plugin used by function with given id
     *
     * @param {string} functionId - id of a function, e.g. 'SUMIF'
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * // import your own plugin
     * import { MyExamplePlugin } from './file_with_your_plugin';
     *
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // register a plugin
     * HyperFormula.registerFunctionPlugin(MyExamplePlugin);
     *
     * // get the plugin
     * const myPlugin = hfInstance.getFunctionPlugin('EXAMPLE');
     * ```
     *
     * @category Custom Functions
     */

  }, {
    key: "getFunctionPlugin",
    value: function getFunctionPlugin(functionId) {
      (0, _ArgumentSanitization.validateArgToType)(functionId, 'string', 'functionId');
      return this._functionRegistry.getFunctionPlugin(functionId);
    }
    /**
     * Returns classes of all plugins registered in this instance of HyperFormula
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // return classes of all plugins registered, assign to a variable
     * const allNames = hfInstance.getAllFunctionPlugins();
     * ```
     *
     * @category Custom Functions
     */

  }, {
    key: "getAllFunctionPlugins",
    value: function getAllFunctionPlugins() {
      return this._functionRegistry.getPlugins();
    }
    /**
     * Interprets number as a date + time.
     *
     * @param {number} inputNumber - number of days since nullDate, should be nonnegative, fractions are interpreted as hours/minutes/seconds.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // pass the number of days since nullDate
     * // the method should return formatted date and time, for this example:
     * // {year: 2020, month: 1, day: 15, hours: 2, minutes: 24, seconds: 0}
     * const dateTimeFromNumber = hfInstance.numberToDateTime(43845.1);
     *
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "numberToDateTime",
    value: function numberToDateTime(inputNumber) {
      (0, _ArgumentSanitization.validateArgToType)(inputNumber, 'number', 'val');
      return this._evaluator.interpreter.dateTimeHelper.numberToSimpleDateTime(inputNumber);
    }
    /**
     * Interprets number as a date.
     *
     * @param {number} inputNumber - number of days since nullDate, should be nonnegative, fractions are ignored.
        * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
        * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // pass the number of days since nullDate
     * // the method should return formatted date, for this example:
     * // {year: 2020, month: 1, day: 15}
     * const dateFromNumber = hfInstance.numberToDate(43845);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "numberToDate",
    value: function numberToDate(inputNumber) {
      (0, _ArgumentSanitization.validateArgToType)(inputNumber, 'number', 'val');
      return this._evaluator.interpreter.dateTimeHelper.numberToSimpleDate(inputNumber);
    }
    /**
     * Interprets number as a time (hours/minutes/seconds).
     *
     * @param {number} inputNumber - time in 24h units.
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // pass a number to be interpreted as a time
     * // should return {hours: 26, minutes: 24} for this example
     * const timeFromNumber = hfInstance.numberToTime(1.1);
     * ```
     *
     * @category Helpers
     */

  }, {
    key: "numberToTime",
    value: function numberToTime(inputNumber) {
      (0, _ArgumentSanitization.validateArgToType)(inputNumber, 'number', 'val');
      return (0, _DateTimeHelper.numberToSimpleTime)(inputNumber);
    }
    /**
     * Subscribes to an event.
     * For the list of all available events, see [[Listeners]].
     *
     * @param {Event} event the name of the event to subscribe to
     * @param {Listener} listener to be called when event is emitted
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // subscribe to a 'sheetAdded', pass a simple handler
     * hfInstance.on('sheetAdded', ( ) => { console.log('foo') });
     *
     * // add a sheet to trigger an event,
     * // console should print 'foo' after each time sheet is added in this example
     * hfInstance.addSheet('FooBar');
     * ```
     *
     * @category Events
     */

  }, {
    key: "on",
    value: function on(event, listener) {
      this._emitter.on(event, listener);
    }
    /**
     * Subscribes to an event once.
     * For the list of all available events, see [[Listeners]].
     *
     * @param {Event} event the name of the event to subscribe to
     * @param {Listener} listener to be called when event is emitted
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // subscribe to a 'sheetAdded', pass a simple handler
     * hfInstance.once('sheetAdded', ( ) => { console.log('foo') });
     *
     * // call addSheet twice,
     * // console should print 'foo' only once when the sheet is added in this example
     * hfInstance.addSheet('FooBar');
     * hfInstance.addSheet('FooBaz');
     * ```
     *
     * @category Events
     */

  }, {
    key: "once",
    value: function once(event, listener) {
      this._emitter.once(event, listener);
    }
    /**
     * Unsubscribes from an event or from all events.
     * For the list of all available events, see [[Listeners]].
     *
     * @param {Event} event the name of the event to subscribe to
     * @param {Listener} listener to be called when event is emitted
     *
     * @example
     * ```js
     * const hfInstance = HyperFormula.buildEmpty();
     *
     * // define a simple function to be called upon emitting an event
     * const handler = ( ) => { console.log('baz') }
     *
     * // subscribe to a 'sheetAdded', pass the handler
     * hfInstance.on('sheetAdded', handler);
     *
     * // add a sheet to trigger an event,
     * // console should print 'baz' each time a sheet is added
     * hfInstance.addSheet('FooBar');
     *
     * // unsubscribe from a 'sheetAdded'
     * hfInstance.off('sheetAdded', handler);
     *
     * // add a sheet, the console should not print anything
     * hfInstance.addSheet('FooBaz');
     * ```
     *
     * @category Events
     */

  }, {
    key: "off",
    value: function off(event, listener) {
      this._emitter.off(event, listener);
    }
    /**
     * Destroys instance of HyperFormula.
     *
     * @example
     * ```js
     * // destroys the instance
     * hfInstance.destroy();
     * ```
     *
     * @category Instance
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this._evaluator.interpreter.destroyGpu();

      (0, _Destroy.objectDestroy)(this);
    }
  }, {
    key: "ensureEvaluationIsNotSuspended",
    value: function ensureEvaluationIsNotSuspended() {
      if (this._evaluationSuspended) {
        throw new _errors.EvaluationSuspendedError();
      }
    }
  }, {
    key: "extractTemporaryFormula",
    value: function extractTemporaryFormula(formulaString) {
      var sheetId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

      var parsedCellContent = this._cellContentParser.parse(formulaString);

      var address = {
        sheet: sheetId,
        col: 0,
        row: 0
      };

      if (!(parsedCellContent instanceof _CellContentParser.CellContent.Formula)) {
        return {
          address: address,
          dependencies: []
        };
      }

      var _this$_parser$parse = this._parser.parse(parsedCellContent.formula, address),
          ast = _this$_parser$parse.ast,
          errors = _this$_parser$parse.errors,
          dependencies = _this$_parser$parse.dependencies;

      if (errors.length > 0) {
        return {
          address: address,
          dependencies: []
        };
      }

      return {
        ast: ast,
        address: address,
        dependencies: dependencies
      };
    }
    /**
     * Runs a recomputation starting from recently changed vertices.
     *
     * Note that this method may trigger dependency graph recalculation.
     *
     * @fires [[valuesUpdated]] if recalculation was triggered by this change
     */

  }, {
    key: "recomputeIfDependencyGraphNeedsIt",
    value: function recomputeIfDependencyGraphNeedsIt() {
      if (!this._evaluationSuspended) {
        var changes = this._crudOperations.getAndClearContentChanges();

        var verticesToRecomputeFrom = Array.from(this.dependencyGraph.verticesToRecompute());
        this.dependencyGraph.clearRecentlyChangedVertices();

        if (verticesToRecomputeFrom.length > 0) {
          changes.addAll(this.evaluator.partialRun(verticesToRecomputeFrom));
        }

        var exportedChanges = changes.exportChanges(this._exporter);

        if (!changes.isEmpty()) {
          this._emitter.emit(_Emitter.Events.ValuesUpdated, exportedChanges);
        }

        return exportedChanges;
      } else {
        return [];
      }
    }
  }], [{
    key: "defaultConfig",
    get: function get() {
      return (0, _Config.getDefaultConfig)();
    }
  }, {
    key: "buildFromArray",
    value: function buildFromArray(sheet) {
      var configInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var namedExpressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      return this.buildFromEngineState(_BuildEngineFactory.BuildEngineFactory.buildFromSheet(sheet, configInput, namedExpressions));
    }
    /**
     * Builds the engine from an object containing multiple sheets with names.
     * The engine is created with one or more sheets.
     * Can be configured with the optional second parameter that represents a [[ConfigParams]].
     * If not specified the engine will be built with the default configuration.
     *
     * @param {Sheet} sheets - object with sheets definition
     * @param {Partial<ConfigParams>} configInput - engine configuration
     * @param {SerializedNamedExpression[]} namedExpressions - starting named expressions
     *
     * @throws [[SheetSizeLimitExceededError]] when sheet size exceeds the limits
     * @throws [[InvalidArgumentsError]] when any sheet is not an array of arrays
     * @throws [[FunctionPluginValidationError]] when plugin class definition is not consistent with metadata
     *
     * @example
     * ```js
     * // data represented as an object with sheets: Sheet1 and Sheet2
     * const sheetData = {
     *  'Sheet1': [
     *    ['1', '', '=Sheet2!$A1'],
     *    ['', '2', '=SUM(1,2,3)'],
     *    ['=Sheet2!$A2', '2', ''],
     *   ],
     *  'Sheet2': [
     *    ['', '4', '=Sheet1!$B1'],
     *    ['', '8', '=SUM(9,3,3)'],
     *    ['=Sheet1!$B1', '2', ''],
     *   ],
     * };
     *
     * // method with optional config parameter useColumnIndex
     * const hfInstance = HyperFormula.buildFromSheets(sheetData, { useColumnIndex: true });
     * ```
     *
     * @category Factories
     */

  }, {
    key: "buildFromSheets",
    value: function buildFromSheets(sheets) {
      var configInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var namedExpressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      return this.buildFromEngineState(_BuildEngineFactory.BuildEngineFactory.buildFromSheets(sheets, configInput, namedExpressions));
    }
    /**
     * Builds an empty engine instance.
     * Can be configured with the optional parameter that represents a [[ConfigParams]].
     * If not specified the engine will be built with the default configuration.
     *
     * @param {Partial<ConfigParams>} configInput - engine configuration
     * @param {SerializedNamedExpression[]} namedExpressions - starting named expressions
     *
     * @example
     * ```js
     * // build with no initial data and with optional config parameter maxColumns
     * const hfInstance = HyperFormula.buildEmpty({ maxColumns: 1000 });
     * ```
     *
     * @category Factories
     */

  }, {
    key: "buildEmpty",
    value: function buildEmpty() {
      var configInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var namedExpressions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return this.buildFromEngineState(_BuildEngineFactory.BuildEngineFactory.buildEmpty(configInput, namedExpressions));
    }
    /**
     * Returns registered language from its code string.
     *
     * @param {string} languageCode - code string of the translation package
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[LanguageNotRegisteredError]] when trying to retrieve not registered language
     *
     * @example
     * ```js
     * // return registered language
     * const language = HyperFormula.getLanguage('enGB');
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "getLanguage",
    value: function getLanguage(languageCode) {
      (0, _ArgumentSanitization.validateArgToType)(languageCode, 'string', 'languageCode');
      var val = this.registeredLanguages.get(languageCode);

      if (val === undefined) {
        throw new _errors.LanguageNotRegisteredError();
      } else {
        return val;
      }
    }
    /**
     * Registers language from under given code string.
     *
     * @param {string} languageCode - code string of the translation package
     * @param {RawTranslationPackage} languagePackage - translation package to be registered
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[ProtectedFunctionTranslationError]] when trying to register translation for protected function
     * @throws [[LanguageAlreadyRegisteredError]] when given language is already registered
     *
     * @example
     * ```js
     * // return registered language
     * HyperFormula.registerLanguage('plPL', plPL);
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "registerLanguage",
    value: function registerLanguage(languageCode, languagePackage) {
      (0, _ArgumentSanitization.validateArgToType)(languageCode, 'string', 'languageCode');

      if (this.registeredLanguages.has(languageCode)) {
        throw new _errors.LanguageAlreadyRegisteredError();
      } else {
        this.registeredLanguages.set(languageCode, (0, _i18n.buildTranslationPackage)(languagePackage));
      }
    }
    /**
     * Unregisters language that is registered under given code string.
     *
     * @param {string} languageCode - code string of the translation package
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[LanguageNotRegisteredError]] when given language is not registered
     *
     * @example
     * ```js
     * // register the language for the instance
     * HyperFormula.registerLanguage('plPL', plPL);
     *
     * // unregister plPL
     * HyperFormula.unregisterLanguage('plPL');
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "unregisterLanguage",
    value: function unregisterLanguage(languageCode) {
      (0, _ArgumentSanitization.validateArgToType)(languageCode, 'string', 'languageCode');

      if (this.registeredLanguages.has(languageCode)) {
        this.registeredLanguages.delete(languageCode);
      } else {
        throw new _errors.LanguageNotRegisteredError();
      }
    }
    /**
     * Returns all registered languages codes.
     *
     * @example
     * ```js
     * // should return all registered language codes: ['enGB', 'plPL']
     * const registeredLangugaes = HyperFormula.getRegisteredLanguagesCodes();
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "getRegisteredLanguagesCodes",
    value: function getRegisteredLanguagesCodes() {
      return Array.from(this.registeredLanguages.keys());
    }
    /**
     * Registers all functions in a given plugin with optional translations
     *
     * @param {FunctionPluginDefinition} plugin - plugin class
     * @param {FunctionTranslationsPackage} translations - optional package of function names translations
     *
     * @throws [[FunctionPluginValidationError]] when plugin class definition is not consistent with metadata
     * @throws [[ProtectedFunctionTranslationError]] when trying to register translation for protected function
     *
     * @example
     * ```js
     * // import your own plugin
     * import { MyExamplePlugin } from './file_with_your_plugin';
     *
     * // register the plugin
     * HyperFormula.registerFunctionPlugin(MyExamplePlugin);
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "registerFunctionPlugin",
    value: function registerFunctionPlugin(plugin, translations) {
      _FunctionRegistry.FunctionRegistry.registerFunctionPlugin(plugin, translations);
    }
    /**
     * Unregisters all functions defined in given plugin
     *
     * @param {FunctionPluginDefinition} plugin - plugin class
     *
     * @example
     * ```js
     * // get the class of a plugin
     * const registeredPluginClass = HyperFormula.getFunctionPlugin('EXAMPLE');
     *
     * // unregister all functions defined in a plugin of ID 'EXAMPLE'
     * HyperFormula.unregisterFunctionPlugin(registeredPluginClass);
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "unregisterFunctionPlugin",
    value: function unregisterFunctionPlugin(plugin) {
      _FunctionRegistry.FunctionRegistry.unregisterFunctionPlugin(plugin);
    }
    /**
     * Registers a function with a given id if such exists in a plugin.
     *
     * @param {string} functionId - function id, e.g. 'SUMIF'
     * @param {FunctionPluginDefinition} plugin - plugin class
     * @param translations
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     * @throws [[FunctionPluginValidationError]] when function with a given id does not exists in plugin or plugin class definition is not consistent with metadata
     * @throws [[ProtectedFunctionTranslationError]] when trying to register translation for protected function
     *
     * @example
     * ```js
     * // import your own plugin
     * import { MyExamplePlugin } from './file_with_your_plugin';
     *
     * // register a function
     * HyperFormula.registerFunction('EXAMPLE', MyExamplePlugin);
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "registerFunction",
    value: function registerFunction(functionId, plugin, translations) {
      (0, _ArgumentSanitization.validateArgToType)(functionId, 'string', 'functionId');

      _FunctionRegistry.FunctionRegistry.registerFunction(functionId, plugin, translations);
    }
    /**
     * Unregisters a function with a given id
     *
     * @param {string} functionId - function id, e.g. 'SUMIF'
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * // import your own plugin
     * import { MyExamplePlugin } from './file_with_your_plugin';
     *
     * // register a function
     * HyperFormula.registerFunction('EXAMPLE', MyExamplePlugin);
     *
     * // unregister a function
     * HyperFormula.unregisterFunction('EXAMPLE');
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "unregisterFunction",
    value: function unregisterFunction(functionId) {
      (0, _ArgumentSanitization.validateArgToType)(functionId, 'string', 'functionId');

      _FunctionRegistry.FunctionRegistry.unregisterFunction(functionId);
    }
    /**
     * Clears function registry
     *
     * @example
     * ```js
     * HyperFormula.unregisterAllFunctions();
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "unregisterAllFunctions",
    value: function unregisterAllFunctions() {
      _FunctionRegistry.FunctionRegistry.unregisterAll();
    }
    /**
     * Returns translated names of all registered functions for a given language
     *
     * @param {string} code - language code
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * // return a list of function names registered for enGB
     * const allNames = HyperFormula.getRegisteredFunctionNames('enGB');
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "getRegisteredFunctionNames",
    value: function getRegisteredFunctionNames(code) {
      (0, _ArgumentSanitization.validateArgToType)(code, 'string', 'code');

      var functionIds = _FunctionRegistry.FunctionRegistry.getRegisteredFunctionIds();

      var language = this.getLanguage(code);
      return language.getFunctionTranslations(functionIds);
    }
    /**
     * Returns class of a plugin used by function with given id
     *
     * @param {string} functionId - id of a function, e.g. 'SUMIF'
     *
     * @throws [[ExpectedValueOfTypeError]] if any of its basic type argument is of wrong type
     *
     * @example
     * ```js
     * // import your own plugin
     * import { MyExamplePlugin } from './file_with_your_plugin';
     *
     * // register a plugin
     * HyperFormula.registerFunctionPlugin(MyExamplePlugin);
     *
     * // return the class of a given plugin
     * const myFunctionClass = HyperFormula.getFunctionPlugin('EXAMPLE');
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "getFunctionPlugin",
    value: function getFunctionPlugin(functionId) {
      (0, _ArgumentSanitization.validateArgToType)(functionId, 'string', 'functionId');
      return _FunctionRegistry.FunctionRegistry.getFunctionPlugin(functionId);
    }
    /**
     * Returns classes of all plugins registered in this instance of HyperFormula
     *
     * @example
     * ```js
     * // return classes of all plugins
     * const allClasses = HyperFormula.getAllFunctionPlugins();
     * ```
     *
     * @category Static Methods
     */

  }, {
    key: "getAllFunctionPlugins",
    value: function getAllFunctionPlugins() {
      return _FunctionRegistry.FunctionRegistry.getPlugins();
    }
  }, {
    key: "buildFromEngineState",
    value: function buildFromEngineState(engine) {
      return new HyperFormula(engine.config, engine.stats, engine.dependencyGraph, engine.columnSearch, engine.parser, engine.unparser, engine.cellContentParser, engine.evaluator, engine.lazilyTransformingAstService, engine.crudOperations, engine.exporter, engine.namedExpressions, engine.serialization, engine.functionRegistry);
    }
  }]);

  return HyperFormula;
}();
/**
 * Version of the HyperFormula.
 *
 * @category Static Properties
 */


exports.HyperFormula = HyperFormula;
HyperFormula.version = "1.3.1";
/**
 * Latest build date.
 *
 * @category Static Properties
 */

HyperFormula.buildDate = "11/01/2022 10:43:18";
/**
 * A release date.
 *
 * @category Static Properties
 */

HyperFormula.releaseDate = "11/01/2022";
/**
 * Contains all available languages to use in registerLanguage.
 *
 * @category Static Properties
 */

HyperFormula.languages = {};
HyperFormula.registeredLanguages = new Map();

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.BuildEngineFactory = void 0;

__webpack_require__(1);

__webpack_require__(154);

__webpack_require__(81);

var _ArraySize = __webpack_require__(246);

var _CellContentParser = __webpack_require__(308);

var _ClipboardOperations = __webpack_require__(309);

var _Config = __webpack_require__(289);

var _CrudOperations = __webpack_require__(310);

var _DateTimeHelper = __webpack_require__(294);

var _DependencyGraph = __webpack_require__(147);

var _errors = __webpack_require__(165);

var _Evaluator = __webpack_require__(323);

var _Exporter = __webpack_require__(324);

var _GraphBuilder = __webpack_require__(327);

var _i18n = __webpack_require__(278);

var _ArithmeticHelper = __webpack_require__(249);

var _FunctionRegistry = __webpack_require__(328);

var _Interpreter = __webpack_require__(331);

var _LazilyTransformingAstService = __webpack_require__(333);

var _SearchStrategy = __webpack_require__(335);

var _NamedExpressions = __webpack_require__(311);

var _NumberLiteralHelper = __webpack_require__(341);

var _Operations = __webpack_require__(312);

var _parser = __webpack_require__(169);

var _Serialization = __webpack_require__(342);

var _Sheet = __webpack_require__(321);

var _statistics = __webpack_require__(256);

var _UndoRedo = __webpack_require__(322);

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var BuildEngineFactory = /*#__PURE__*/function () {
  function BuildEngineFactory() {
    _classCallCheck(this, BuildEngineFactory);
  }

  _createClass(BuildEngineFactory, null, [{
    key: "buildFromSheets",
    value: function buildFromSheets(sheets) {
      var configInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var namedExpressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var config = new _Config.Config(configInput);
      return this.buildEngine(config, sheets, namedExpressions);
    }
  }, {
    key: "buildFromSheet",
    value: function buildFromSheet(sheet) {
      var configInput = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var namedExpressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var config = new _Config.Config(configInput);
      var newsheetprefix = config.translationPackage.getUITranslation(_i18n.UIElement.NEW_SHEET_PREFIX) + '1';
      return this.buildEngine(config, _defineProperty({}, newsheetprefix, sheet), namedExpressions);
    }
  }, {
    key: "buildEmpty",
    value: function buildEmpty() {
      var configInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var namedExpressions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return this.buildEngine(new _Config.Config(configInput), {}, namedExpressions);
    }
  }, {
    key: "rebuildWithConfig",
    value: function rebuildWithConfig(config, sheets, namedExpressions, stats) {
      return this.buildEngine(config, sheets, namedExpressions, stats);
    }
  }, {
    key: "buildEngine",
    value: function buildEngine(config) {
      var sheets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var inputNamedExpressions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var stats = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : config.useStats ? new _statistics.Statistics() : new _statistics.EmptyStatistics();
      stats.start(_statistics.StatType.BUILD_ENGINE_TOTAL);
      var namedExpressions = new _NamedExpressions.NamedExpressions();
      var functionRegistry = new _FunctionRegistry.FunctionRegistry(config);
      var lazilyTransformingAstService = new _LazilyTransformingAstService.LazilyTransformingAstService(stats);

      var dependencyGraph = _DependencyGraph.DependencyGraph.buildEmpty(lazilyTransformingAstService, config, functionRegistry, namedExpressions, stats);

      var columnSearch = (0, _SearchStrategy.buildColumnSearchStrategy)(dependencyGraph, config, stats);
      var sheetMapping = dependencyGraph.sheetMapping;
      var addressMapping = dependencyGraph.addressMapping;

      for (var sheetName in sheets) {
        if (Object.prototype.hasOwnProperty.call(sheets, sheetName)) {
          var sheet = sheets[sheetName];
          (0, _Sheet.validateAsSheet)(sheet);
          var boundaries = (0, _Sheet.findBoundaries)(sheet);

          if (boundaries.height > config.maxRows || boundaries.width > config.maxColumns) {
            throw new _errors.SheetSizeLimitExceededError();
          }

          var sheetId = sheetMapping.addSheet(sheetName);
          addressMapping.autoAddSheet(sheetId, sheet, boundaries);
        }
      }

      var parser = new _parser.ParserWithCaching(config, functionRegistry, sheetMapping.get);
      lazilyTransformingAstService.parser = parser;
      var unparser = new _parser.Unparser(config, (0, _parser.buildLexerConfig)(config), sheetMapping.fetchDisplayName, namedExpressions);
      var dateTimeHelper = new _DateTimeHelper.DateTimeHelper(config);
      var numberLiteralHelper = new _NumberLiteralHelper.NumberLiteralHelper(config);
      var arithmeticHelper = new _ArithmeticHelper.ArithmeticHelper(config, dateTimeHelper, numberLiteralHelper);
      var cellContentParser = new _CellContentParser.CellContentParser(config, dateTimeHelper, numberLiteralHelper);
      var arraySizePredictor = new _ArraySize.ArraySizePredictor(config, functionRegistry);
      var operations = new _Operations.Operations(config, dependencyGraph, columnSearch, cellContentParser, parser, stats, lazilyTransformingAstService, namedExpressions, arraySizePredictor);
      var undoRedo = new _UndoRedo.UndoRedo(config, operations);
      lazilyTransformingAstService.undoRedo = undoRedo;
      var clipboardOperations = new _ClipboardOperations.ClipboardOperations(config, dependencyGraph, operations);
      var crudOperations = new _CrudOperations.CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions);
      inputNamedExpressions.forEach(function (entry) {
        crudOperations.ensureItIsPossibleToAddNamedExpression(entry.name, entry.expression, entry.scope);
        crudOperations.operations.addNamedExpression(entry.name, entry.expression, entry.scope, entry.options);
      });
      var exporter = new _Exporter.Exporter(config, namedExpressions, sheetMapping.fetchDisplayName, lazilyTransformingAstService);
      var serialization = new _Serialization.Serialization(dependencyGraph, unparser, exporter);
      var interpreter = new _Interpreter.Interpreter(config, dependencyGraph, columnSearch, stats, arithmeticHelper, functionRegistry, namedExpressions, serialization, arraySizePredictor, dateTimeHelper);
      stats.measure(_statistics.StatType.GRAPH_BUILD, function () {
        var graphBuilder = new _GraphBuilder.GraphBuilder(dependencyGraph, columnSearch, parser, cellContentParser, stats, arraySizePredictor);
        graphBuilder.buildGraph(sheets, stats);
      });
      var evaluator = new _Evaluator.Evaluator(config, stats, interpreter, lazilyTransformingAstService, dependencyGraph, columnSearch);
      evaluator.run();
      stats.end(_statistics.StatType.BUILD_ENGINE_TOTAL);
      return {
        config: config,
        stats: stats,
        dependencyGraph: dependencyGraph,
        columnSearch: columnSearch,
        parser: parser,
        unparser: unparser,
        cellContentParser: cellContentParser,
        evaluator: evaluator,
        lazilyTransformingAstService: lazilyTransformingAstService,
        crudOperations: crudOperations,
        exporter: exporter,
        namedExpressions: namedExpressions,
        serialization: serialization,
        functionRegistry: functionRegistry
      };
    }
  }]);

  return BuildEngineFactory;
}();

exports.BuildEngineFactory = BuildEngineFactory;

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.CellContentParser = exports.CellContent = void 0;
exports.isBoolean = isBoolean;
exports.isError = isError;
exports.isFormula = isFormula;

__webpack_require__(139);

__webpack_require__(103);

__webpack_require__(250);

__webpack_require__(293);

__webpack_require__(77);

var _Cell = __webpack_require__(143);

var _DateTimeHelper = __webpack_require__(294);

var _errorMessage = __webpack_require__(238);

var _errors = __webpack_require__(165);

var _ArithmeticHelper = __webpack_require__(249);

var _InterpreterValue = __webpack_require__(255);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CellContent;
exports.CellContent = CellContent;

(function (CellContent) {
  var Number = /*#__PURE__*/_createClass(function Number(value) {
    _classCallCheck(this, Number);

    this.value = value;
    this.value = (0, _InterpreterValue.cloneNumber)(this.value, (0, _ArithmeticHelper.fixNegativeZero)((0, _InterpreterValue.getRawValue)(this.value)));
  });

  CellContent.Number = Number;

  var String = /*#__PURE__*/_createClass(function String(value) {
    _classCallCheck(this, String);

    this.value = value;
  });

  CellContent.String = String;

  var Boolean = /*#__PURE__*/_createClass(function Boolean(value) {
    _classCallCheck(this, Boolean);

    this.value = value;
  });

  CellContent.Boolean = Boolean;

  var Empty = /*#__PURE__*/function () {
    function Empty() {
      _classCallCheck(this, Empty);
    }

    _createClass(Empty, null, [{
      key: "getSingletonInstance",
      value: function getSingletonInstance() {
        if (!Empty.instance) {
          Empty.instance = new Empty();
        }

        return Empty.instance;
      }
    }]);

    return Empty;
  }();

  CellContent.Empty = Empty;

  var Formula = /*#__PURE__*/_createClass(function Formula(formula) {
    _classCallCheck(this, Formula);

    this.formula = formula;
  });

  CellContent.Formula = Formula;

  var Error = /*#__PURE__*/_createClass(function Error(errorType, message) {
    _classCallCheck(this, Error);

    this.value = new _Cell.CellError(errorType, message);
  });

  CellContent.Error = Error;
})(CellContent || (exports.CellContent = CellContent = {}));
/**
 * Checks whether string looks like formula or not.
 *
 * @param text - formula
 */


function isFormula(text) {
  return text.startsWith('=');
}

function isBoolean(text) {
  var tl = text.toLowerCase();
  return tl === 'true' || tl === 'false';
}

function isError(text, errorMapping) {
  var upperCased = text.toUpperCase();
  var errorRegex = /#[A-Za-z0-9\/]+[?!]?/;
  return errorRegex.test(upperCased) && Object.prototype.hasOwnProperty.call(errorMapping, upperCased);
}

var CellContentParser = /*#__PURE__*/function () {
  function CellContentParser(config, dateHelper, numberLiteralsHelper) {
    _classCallCheck(this, CellContentParser);

    this.config = config;
    this.dateHelper = dateHelper;
    this.numberLiteralsHelper = numberLiteralsHelper;
  }

  _createClass(CellContentParser, [{
    key: "parse",
    value: function parse(content) {
      if (content === undefined || content === null) {
        return CellContent.Empty.getSingletonInstance();
      } else if (typeof content === 'number') {
        if ((0, _ArithmeticHelper.isNumberOverflow)(content)) {
          return new CellContent.Error(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        } else {
          return new CellContent.Number(content);
        }
      } else if (typeof content === 'boolean') {
        return new CellContent.Boolean(content);
      } else if (content instanceof Date) {
        var dateVal = this.dateHelper.dateToNumber({
          day: content.getDate(),
          month: content.getMonth() + 1,
          year: content.getFullYear()
        });
        var timeVal = (0, _DateTimeHelper.timeToNumber)({
          hours: content.getHours(),
          minutes: content.getMinutes(),
          seconds: content.getSeconds() + content.getMilliseconds() / 1000
        });
        var val = dateVal + timeVal;

        if (val < 0) {
          return new CellContent.Error(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DateBounds);
        }

        if (val % 1 === 0) {
          return new CellContent.Number(new _InterpreterValue.DateNumber(val, 'Date()'));
        } else if (val < 1) {
          return new CellContent.Number(new _InterpreterValue.TimeNumber(val, 'Date()'));
        } else {
          return new CellContent.Number(new _InterpreterValue.DateTimeNumber(val, 'Date()'));
        }
      } else if (typeof content === 'string') {
        if (isBoolean(content)) {
          return new CellContent.Boolean(content.toLowerCase() === 'true');
        } else if (isFormula(content)) {
          return new CellContent.Formula(content);
        } else if (isError(content, this.config.errorMapping)) {
          return new CellContent.Error(this.config.errorMapping[content.toUpperCase()]);
        } else {
          var trimmedContent = content.trim();
          var mode = 0;
          var currency;

          if (trimmedContent.endsWith('%')) {
            mode = 1;
            trimmedContent = trimmedContent.slice(0, trimmedContent.length - 1);
          } else {
            var res = this.currencyMatcher(trimmedContent);

            if (res !== undefined) {
              mode = 2;

              var _res = _slicedToArray(res, 2);

              currency = _res[0];
              trimmedContent = _res[1];
            }
          }

          var _val = this.numberLiteralsHelper.numericStringToMaybeNumber(trimmedContent);

          if (_val !== undefined) {
            var parseAsNum;

            if (mode === 1) {
              parseAsNum = new _InterpreterValue.PercentNumber(_val / 100);
            } else if (mode === 2) {
              parseAsNum = new _InterpreterValue.CurrencyNumber(_val, currency);
            } else {
              parseAsNum = _val;
            }

            return new CellContent.Number(parseAsNum);
          }

          var parsedDateNumber = this.dateHelper.dateStringToDateNumber(trimmedContent);

          if (parsedDateNumber !== undefined) {
            return new CellContent.Number(parsedDateNumber);
          } else {
            return new CellContent.String(content.startsWith('\'') ? content.slice(1) : content);
          }
        }
      } else {
        throw new _errors.UnableToParseError(content);
      }
    }
  }, {
    key: "currencyMatcher",
    value: function currencyMatcher(token) {
      var _iterator = _createForOfIteratorHelper(this.config.currencySymbol),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var currency = _step.value;

          if (token.startsWith(currency)) {
            return [currency, token.slice(currency.length)];
          }

          if (token.endsWith(currency)) {
            return [currency, token.slice(0, token.length - currency.length)];
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return undefined;
    }
  }]);

  return CellContentParser;
}();

exports.CellContentParser = CellContentParser;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.ClipboardOperations = exports.ClipboardCellType = void 0;

__webpack_require__(149);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _errors = __webpack_require__(165);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ClipboardOperationType;

(function (ClipboardOperationType) {
  ClipboardOperationType[ClipboardOperationType["COPY"] = 0] = "COPY";
  ClipboardOperationType[ClipboardOperationType["CUT"] = 1] = "CUT";
})(ClipboardOperationType || (ClipboardOperationType = {}));

var ClipboardCellType;
exports.ClipboardCellType = ClipboardCellType;

(function (ClipboardCellType) {
  ClipboardCellType[ClipboardCellType["VALUE"] = 0] = "VALUE";
  ClipboardCellType[ClipboardCellType["EMPTY"] = 1] = "EMPTY";
  ClipboardCellType[ClipboardCellType["FORMULA"] = 2] = "FORMULA";
  ClipboardCellType[ClipboardCellType["PARSING_ERROR"] = 3] = "PARSING_ERROR";
})(ClipboardCellType || (exports.ClipboardCellType = ClipboardCellType = {}));

var Clipboard = /*#__PURE__*/function () {
  function Clipboard(sourceLeftCorner, width, height, type, content) {
    _classCallCheck(this, Clipboard);

    this.sourceLeftCorner = sourceLeftCorner;
    this.width = width;
    this.height = height;
    this.type = type;
    this.content = content;
  }

  _createClass(Clipboard, [{
    key: "getContent",
    value: /*#__PURE__*/regeneratorRuntime.mark(function getContent(leftCorner) {
      var y, x;
      return regeneratorRuntime.wrap(function getContent$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(this.content === undefined)) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return");

            case 4:
              y = 0;

            case 5:
              if (!(y < this.height)) {
                _context.next = 16;
                break;
              }

              x = 0;

            case 7:
              if (!(x < this.width)) {
                _context.next = 13;
                break;
              }

              _context.next = 10;
              return [(0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y), this.content[y][x]];

            case 10:
              ++x;
              _context.next = 7;
              break;

            case 13:
              ++y;
              _context.next = 5;
              break;

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, getContent, this);
    })
  }]);

  return Clipboard;
}();

var ClipboardOperations = /*#__PURE__*/function () {
  function ClipboardOperations(config, dependencyGraph, operations) {
    _classCallCheck(this, ClipboardOperations);

    this.dependencyGraph = dependencyGraph;
    this.operations = operations;
    this.maxRows = config.maxRows;
    this.maxColumns = config.maxColumns;
  }

  _createClass(ClipboardOperations, [{
    key: "cut",
    value: function cut(leftCorner, width, height) {
      this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.CUT);
    }
  }, {
    key: "copy",
    value: function copy(leftCorner, width, height) {
      var content = [];

      for (var y = 0; y < height; ++y) {
        content[y] = [];

        for (var x = 0; x < width; ++x) {
          var clipboardCell = this.operations.getClipboardCell((0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + x, leftCorner.row + y));
          content[y].push(clipboardCell);
        }
      }

      this.clipboard = new Clipboard(leftCorner, width, height, ClipboardOperationType.COPY, content);
    }
  }, {
    key: "abortCut",
    value: function abortCut() {
      if (this.clipboard && this.clipboard.type === ClipboardOperationType.CUT) {
        this.clear();
      }
    }
  }, {
    key: "clear",
    value: function clear() {
      this.clipboard = undefined;
    }
  }, {
    key: "ensureItIsPossibleToCopyPaste",
    value: function ensureItIsPossibleToCopyPaste(destinationLeftCorner) {
      if (this.clipboard === undefined) {
        return;
      }

      if ((0, _Cell.invalidSimpleCellAddress)(destinationLeftCorner) || !this.dependencyGraph.sheetMapping.hasSheetWithId(destinationLeftCorner.sheet)) {
        throw new _errors.InvalidArgumentsError('a valid target address.');
      }

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(destinationLeftCorner, this.clipboard.width, this.clipboard.height);

      if (targetRange.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {
        throw new _errors.SheetSizeLimitExceededError();
      }

      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(targetRange)) {
        throw new Error('It is not possible to paste onto an array');
      }
    }
  }, {
    key: "isCutClipboard",
    value: function isCutClipboard() {
      return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.CUT;
    }
  }, {
    key: "isCopyClipboard",
    value: function isCopyClipboard() {
      return this.clipboard !== undefined && this.clipboard.type === ClipboardOperationType.COPY;
    }
  }]);

  return ClipboardOperations;
}();

exports.ClipboardOperations = ClipboardOperations;

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.CrudOperations = void 0;

__webpack_require__(146);

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(150);

__webpack_require__(272);

__webpack_require__(236);

__webpack_require__(161);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _CellContentParser = __webpack_require__(308);

var _errors = __webpack_require__(165);

var _NamedExpressions = __webpack_require__(311);

var _Operations = __webpack_require__(312);

var _Sheet = __webpack_require__(321);

var _Span = __webpack_require__(242);

var _UndoRedo = __webpack_require__(322);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var CrudOperations = /*#__PURE__*/function () {
  function CrudOperations(config, operations, undoRedo, clipboardOperations, dependencyGraph, columnSearch, parser, cellContentParser, lazilyTransformingAstService, namedExpressions) {
    _classCallCheck(this, CrudOperations);

    this.operations = operations;
    this.undoRedo = undoRedo;
    this.clipboardOperations = clipboardOperations;
    this.dependencyGraph = dependencyGraph;
    this.columnSearch = columnSearch;
    this.parser = parser;
    this.cellContentParser = cellContentParser;
    this.lazilyTransformingAstService = lazilyTransformingAstService;
    this.namedExpressions = namedExpressions;
    this.maxRows = config.maxRows;
    this.maxColumns = config.maxColumns;
  }

  _createClass(CrudOperations, [{
    key: "sheetMapping",
    get: function get() {
      return this.dependencyGraph.sheetMapping;
    }
  }, {
    key: "addRows",
    value: function addRows(sheet) {
      for (var _len = arguments.length, indexes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        indexes[_key - 1] = arguments[_key];
      }

      var addRowsCommand = new _Operations.AddRowsCommand(sheet, indexes);
      this.ensureItIsPossibleToAddRows.apply(this, [sheet].concat(indexes));
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      this.operations.addRows(addRowsCommand);
      this.undoRedo.saveOperation(new _UndoRedo.AddRowsUndoEntry(addRowsCommand));
    }
  }, {
    key: "removeRows",
    value: function removeRows(sheet) {
      for (var _len2 = arguments.length, indexes = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        indexes[_key2 - 1] = arguments[_key2];
      }

      var removeRowsCommand = new _Operations.RemoveRowsCommand(sheet, indexes);
      this.ensureItIsPossibleToRemoveRows.apply(this, [sheet].concat(indexes));
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var rowsRemovals = this.operations.removeRows(removeRowsCommand);
      this.undoRedo.saveOperation(new _UndoRedo.RemoveRowsUndoEntry(removeRowsCommand, rowsRemovals));
    }
  }, {
    key: "addColumns",
    value: function addColumns(sheet) {
      for (var _len3 = arguments.length, indexes = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        indexes[_key3 - 1] = arguments[_key3];
      }

      var addColumnsCommand = new _Operations.AddColumnsCommand(sheet, indexes);
      this.ensureItIsPossibleToAddColumns.apply(this, [sheet].concat(indexes));
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      this.operations.addColumns(addColumnsCommand);
      this.undoRedo.saveOperation(new _UndoRedo.AddColumnsUndoEntry(addColumnsCommand));
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(sheet) {
      for (var _len4 = arguments.length, indexes = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        indexes[_key4 - 1] = arguments[_key4];
      }

      var removeColumnsCommand = new _Operations.RemoveColumnsCommand(sheet, indexes);
      this.ensureItIsPossibleToRemoveColumns.apply(this, [sheet].concat(indexes));
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var columnsRemovals = this.operations.removeColumns(removeColumnsCommand);
      this.undoRedo.saveOperation(new _UndoRedo.RemoveColumnsUndoEntry(removeColumnsCommand, columnsRemovals));
    }
  }, {
    key: "moveCells",
    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();

      var _this$operations$move = this.operations.moveCells(sourceLeftCorner, width, height, destinationLeftCorner),
          version = _this$operations$move.version,
          overwrittenCellsData = _this$operations$move.overwrittenCellsData,
          addedGlobalNamedExpressions = _this$operations$move.addedGlobalNamedExpressions;

      this.undoRedo.saveOperation(new _UndoRedo.MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version));
    }
  }, {
    key: "moveRows",
    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {
      this.ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var version = this.operations.moveRows(sheet, startRow, numberOfRows, targetRow);
      this.undoRedo.saveOperation(new _UndoRedo.MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version));
    }
  }, {
    key: "moveColumns",
    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {
      this.ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn);
      this.undoRedo.clearRedoStack();
      var version = this.operations.moveColumns(sheet, startColumn, numberOfColumns, targetColumn);
      this.undoRedo.saveOperation(new _UndoRedo.MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version));
    }
  }, {
    key: "cut",
    value: function cut(sourceLeftCorner, width, height) {
      this.clipboardOperations.cut(sourceLeftCorner, width, height);
    }
  }, {
    key: "ensureItIsPossibleToCopy",
    value: function ensureItIsPossibleToCopy(sourceLeftCorner, width, height) {
      if (!isPositiveInteger(width)) {
        throw new _errors.InvalidArgumentsError('width to be positive integer.');
      }

      if (!isPositiveInteger(height)) {
        throw new _errors.InvalidArgumentsError('height to be positive integer.');
      }
    }
  }, {
    key: "copy",
    value: function copy(sourceLeftCorner, width, height) {
      this.ensureItIsPossibleToCopy(sourceLeftCorner, width, height);
      this.clipboardOperations.copy(sourceLeftCorner, width, height);
    }
  }, {
    key: "paste",
    value: function paste(targetLeftCorner) {
      var clipboard = this.clipboardOperations.clipboard;

      if (clipboard === undefined) {
        throw new _errors.NothingToPasteError();
      } else if (this.clipboardOperations.isCutClipboard()) {
        this.moveCells(clipboard.sourceLeftCorner, clipboard.width, clipboard.height, targetLeftCorner);
      } else if (this.clipboardOperations.isCopyClipboard()) {
        this.clipboardOperations.ensureItIsPossibleToCopyPaste(targetLeftCorner);

        var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(targetLeftCorner, clipboard.width, clipboard.height);

        var oldContent = this.operations.getRangeClipboardCells(targetRange);
        this.undoRedo.clearRedoStack();
        var addedGlobalNamedExpressions = this.operations.restoreClipboardCells(clipboard.sourceLeftCorner.sheet, clipboard.getContent(targetLeftCorner));
        this.undoRedo.saveOperation(new _UndoRedo.PasteUndoEntry(targetLeftCorner, oldContent, clipboard.content, addedGlobalNamedExpressions));
      }
    }
  }, {
    key: "beginUndoRedoBatchMode",
    value: function beginUndoRedoBatchMode() {
      this.undoRedo.beginBatchMode();
    }
  }, {
    key: "commitUndoRedoBatchMode",
    value: function commitUndoRedoBatchMode() {
      this.undoRedo.commitBatchMode();
    }
  }, {
    key: "isClipboardEmpty",
    value: function isClipboardEmpty() {
      return this.clipboardOperations.clipboard === undefined;
    }
  }, {
    key: "clearClipboard",
    value: function clearClipboard() {
      this.clipboardOperations.clear();
    }
  }, {
    key: "addSheet",
    value: function addSheet(name) {
      if (name !== undefined) {
        this.ensureItIsPossibleToAddSheet(name);
      }

      this.undoRedo.clearRedoStack();
      var addedSheetName = this.operations.addSheet(name);
      this.undoRedo.saveOperation(new _UndoRedo.AddSheetUndoEntry(addedSheetName));
      return addedSheetName;
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      this.ensureScopeIdIsValid(sheetId);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var originalName = this.sheetMapping.fetchDisplayName(sheetId);
      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);

      var _this$operations$remo = this.operations.removeSheet(sheetId),
          version = _this$operations$remo.version,
          scopedNamedExpressions = _this$operations$remo.scopedNamedExpressions;

      this.undoRedo.saveOperation(new _UndoRedo.RemoveSheetUndoEntry(originalName, sheetId, oldSheetContent, scopedNamedExpressions, version));
    }
  }, {
    key: "renameSheet",
    value: function renameSheet(sheetId, newName) {
      this.ensureItIsPossibleToRenameSheet(sheetId, newName);
      var oldName = this.operations.renameSheet(sheetId, newName);

      if (oldName !== undefined) {
        this.undoRedo.clearRedoStack();
        this.undoRedo.saveOperation(new _UndoRedo.RenameSheetUndoEntry(sheetId, oldName, newName));
      }

      return oldName;
    }
  }, {
    key: "clearSheet",
    value: function clearSheet(sheetId) {
      this.ensureScopeIdIsValid(sheetId);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);
      this.operations.clearSheet(sheetId);
      this.undoRedo.saveOperation(new _UndoRedo.ClearSheetUndoEntry(sheetId, oldSheetContent));
    }
  }, {
    key: "setCellContents",
    value: function setCellContents(topLeftCornerAddress, cellContents) {
      if (!(cellContents instanceof Array)) {
        cellContents = [[cellContents]];
      } else {
        for (var i = 0; i < cellContents.length; i++) {
          if (!(cellContents[i] instanceof Array)) {
            throw new _errors.InvalidArgumentsError('an array of arrays or a raw cell value.');
          }
        }
      }

      this.ensureItIsPossibleToChangeCellContents(topLeftCornerAddress, cellContents);
      this.undoRedo.clearRedoStack();
      var oldContents = [];

      for (var _i = 0; _i < cellContents.length; _i++) {
        for (var j = 0; j < cellContents[_i].length; j++) {
          var address = {
            sheet: topLeftCornerAddress.sheet,
            row: topLeftCornerAddress.row + _i,
            col: topLeftCornerAddress.col + j
          };
          var newContent = cellContents[_i][j];
          this.clipboardOperations.abortCut();
          var oldContent = this.operations.setCellContent(address, newContent);
          oldContents.push({
            address: address,
            newContent: newContent,
            oldContent: oldContent
          });
        }
      }

      this.undoRedo.saveOperation(new _UndoRedo.SetCellContentsUndoEntry(oldContents));
    }
  }, {
    key: "setSheetContent",
    value: function setSheetContent(sheetId, values) {
      this.ensureScopeIdIsValid(sheetId);
      this.ensureItIsPossibleToChangeSheetContents(sheetId, values);
      (0, _Sheet.validateAsSheet)(values);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var oldSheetContent = this.operations.getSheetClipboardCells(sheetId);
      this.operations.setSheetContent(sheetId, values);
      this.undoRedo.saveOperation(new _UndoRedo.SetSheetContentUndoEntry(sheetId, oldSheetContent, values));
    }
  }, {
    key: "setRowOrder",
    value: function setRowOrder(sheetId, rowMapping) {
      this.validateSwapRowIndexes(sheetId, rowMapping);
      this.testRowOrderForArrays(sheetId, rowMapping);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var oldContent = this.operations.setRowOrder(sheetId, rowMapping);
      this.undoRedo.saveOperation(new _UndoRedo.SetRowOrderUndoEntry(sheetId, rowMapping, oldContent));
    }
  }, {
    key: "validateSwapRowIndexes",
    value: function validateSwapRowIndexes(sheetId, rowMapping) {
      if (!this.sheetMapping.hasSheetWithId(sheetId)) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      this.validateRowOrColumnMapping(sheetId, rowMapping, 'row');
    }
  }, {
    key: "testColumnOrderForArrays",
    value: function testColumnOrderForArrays(sheetId, columnMapping) {
      var _iterator = _createForOfIteratorHelper(columnMapping),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              source = _step$value[0],
              target = _step$value[1];

          if (source !== target) {
            var rowRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom({
              sheet: sheetId,
              col: source,
              row: 0
            }, 1, Infinity);

            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {
              throw new _errors.SourceLocationHasArrayError();
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "setColumnOrder",
    value: function setColumnOrder(sheetId, columnMapping) {
      this.validateSwapColumnIndexes(sheetId, columnMapping);
      this.testColumnOrderForArrays(sheetId, columnMapping);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      var oldContent = this.operations.setColumnOrder(sheetId, columnMapping);
      this.undoRedo.saveOperation(new _UndoRedo.SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent));
    }
  }, {
    key: "validateSwapColumnIndexes",
    value: function validateSwapColumnIndexes(sheetId, columnMapping) {
      if (!this.sheetMapping.hasSheetWithId(sheetId)) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      this.validateRowOrColumnMapping(sheetId, columnMapping, 'column');
    }
  }, {
    key: "testRowOrderForArrays",
    value: function testRowOrderForArrays(sheetId, rowMapping) {
      var _iterator2 = _createForOfIteratorHelper(rowMapping),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
              source = _step2$value[0],
              target = _step2$value[1];

          if (source !== target) {
            var rowRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom({
              sheet: sheetId,
              col: 0,
              row: source
            }, Infinity, 1);

            if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(rowRange)) {
              throw new _errors.SourceLocationHasArrayError();
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "mappingFromOrder",
    value: function mappingFromOrder(sheetId, newOrder, rowOrColumn) {
      if (!this.sheetMapping.hasSheetWithId(sheetId)) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);

      if (newOrder.length !== limit) {
        throw new _errors.InvalidArgumentsError("number of ".concat(rowOrColumn, "s provided to be sheet ").concat(rowOrColumn === 'row' ? 'height' : 'width', "."));
      }

      var ret = [];

      for (var i = 0; i < limit; i++) {
        if (newOrder[i] !== i) {
          ret.push([i, newOrder[i]]);
        }
      }

      return ret;
    }
  }, {
    key: "undo",
    value: function undo() {
      if (this.undoRedo.isUndoStackEmpty()) {
        throw new _errors.NoOperationToUndoError();
      }

      this.clipboardOperations.abortCut();
      this.undoRedo.undo();
    }
  }, {
    key: "redo",
    value: function redo() {
      if (this.undoRedo.isRedoStackEmpty()) {
        throw new _errors.NoOperationToRedoError();
      }

      this.clipboardOperations.abortCut();
      this.undoRedo.redo();
    }
  }, {
    key: "addNamedExpression",
    value: function addNamedExpression(expressionName, expression, sheetId, options) {
      this.ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId);
      this.operations.addNamedExpression(expressionName, expression, sheetId, options);
      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      this.undoRedo.saveOperation(new _UndoRedo.AddNamedExpressionUndoEntry(expressionName, expression, sheetId, options));
    }
  }, {
    key: "changeNamedExpressionExpression",
    value: function changeNamedExpressionExpression(expressionName, sheetId, newExpression, options) {
      this.ensureItIsPossibleToChangeNamedExpression(expressionName, newExpression, sheetId);

      var _this$operations$chan = this.operations.changeNamedExpressionExpression(expressionName, newExpression, sheetId, options),
          _this$operations$chan2 = _slicedToArray(_this$operations$chan, 2),
          oldNamedExpression = _this$operations$chan2[0],
          content = _this$operations$chan2[1];

      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      this.undoRedo.saveOperation(new _UndoRedo.ChangeNamedExpressionUndoEntry(oldNamedExpression, newExpression, content, sheetId, options));
    }
  }, {
    key: "removeNamedExpression",
    value: function removeNamedExpression(expressionName, sheetId) {
      this.ensureScopeIdIsValid(sheetId);

      var _this$operations$remo2 = this.operations.removeNamedExpression(expressionName, sheetId),
          _this$operations$remo3 = _slicedToArray(_this$operations$remo2, 2),
          namedExpression = _this$operations$remo3[0],
          content = _this$operations$remo3[1];

      this.undoRedo.clearRedoStack();
      this.clipboardOperations.abortCut();
      this.undoRedo.saveOperation(new _UndoRedo.RemoveNamedExpressionUndoEntry(namedExpression, content, sheetId));
      return namedExpression;
    }
  }, {
    key: "ensureItIsPossibleToAddNamedExpression",
    value: function ensureItIsPossibleToAddNamedExpression(expressionName, expression, sheetId) {
      this.ensureScopeIdIsValid(sheetId);
      this.ensureNamedExpressionNameIsValid(expressionName, sheetId);
      this.ensureNamedExpressionIsValid(expression);
    }
  }, {
    key: "ensureItIsPossibleToChangeNamedExpression",
    value: function ensureItIsPossibleToChangeNamedExpression(expressionName, expression, sheetId) {
      this.ensureScopeIdIsValid(sheetId);

      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {
        throw new _errors.NamedExpressionDoesNotExistError(expressionName);
      }

      this.ensureNamedExpressionIsValid(expression);
    }
  }, {
    key: "isItPossibleToRemoveNamedExpression",
    value: function isItPossibleToRemoveNamedExpression(expressionName, sheetId) {
      this.ensureScopeIdIsValid(sheetId);

      if (this.namedExpressions.namedExpressionForScope(expressionName, sheetId) === undefined) {
        throw new _errors.NamedExpressionDoesNotExistError(expressionName);
      }
    }
  }, {
    key: "ensureItIsPossibleToAddRows",
    value: function ensureItIsPossibleToAddRows(sheet) {
      if (!this.sheetMapping.hasSheetWithId(sheet)) {
        throw new _errors.NoSheetWithIdError(sheet);
      }

      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);

      for (var _len5 = arguments.length, indexes = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        indexes[_key5 - 1] = arguments[_key5];
      }

      var newRowsCount = indexes.map(function (index) {
        return index[1];
      }).reduce(function (a, b) {
        return a + b;
      }, 0);

      if (sheetHeight + newRowsCount > this.maxRows) {
        throw new _errors.SheetSizeLimitExceededError();
      }

      for (var _i2 = 0, _indexes = indexes; _i2 < _indexes.length; _i2++) {
        var _indexes$_i = _slicedToArray(_indexes[_i2], 2),
            row = _indexes$_i[0],
            numberOfRowsToAdd = _indexes$_i[1];

        if (!isNonnegativeInteger(row) || !isPositiveInteger(numberOfRowsToAdd)) {
          throw new _errors.InvalidArgumentsError('row number to be nonnegative and number of rows to add to be positive.');
        }
      }
    }
  }, {
    key: "ensureItIsPossibleToRemoveRows",
    value: function ensureItIsPossibleToRemoveRows(sheet) {
      for (var _len6 = arguments.length, indexes = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
        indexes[_key6 - 1] = arguments[_key6];
      }

      for (var _i3 = 0, _indexes2 = indexes; _i3 < _indexes2.length; _i3++) {
        var _indexes2$_i = _slicedToArray(_indexes2[_i3], 2),
            rowStart = _indexes2$_i[0],
            numberOfRows = _indexes2$_i[1];

        var rowEnd = rowStart + numberOfRows - 1;

        if (!isNonnegativeInteger(rowStart) || !isNonnegativeInteger(rowEnd)) {
          throw new _errors.InvalidArgumentsError('starting and ending row to be nonnegative.');
        }

        if (rowEnd < rowStart) {
          throw new _errors.InvalidArgumentsError('starting row to be smaller than the ending row.');
        }

        if (!this.sheetMapping.hasSheetWithId(sheet)) {
          throw new _errors.NoSheetWithIdError(sheet);
        }
      }
    }
  }, {
    key: "ensureItIsPossibleToAddColumns",
    value: function ensureItIsPossibleToAddColumns(sheet) {
      if (!this.sheetMapping.hasSheetWithId(sheet)) {
        throw new _errors.NoSheetWithIdError(sheet);
      }

      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);

      for (var _len7 = arguments.length, indexes = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
        indexes[_key7 - 1] = arguments[_key7];
      }

      var newColumnsCount = indexes.map(function (index) {
        return index[1];
      }).reduce(function (a, b) {
        return a + b;
      }, 0);

      if (sheetWidth + newColumnsCount > this.maxColumns) {
        throw new _errors.SheetSizeLimitExceededError();
      }

      for (var _i4 = 0, _indexes3 = indexes; _i4 < _indexes3.length; _i4++) {
        var _indexes3$_i = _slicedToArray(_indexes3[_i4], 2),
            column = _indexes3$_i[0],
            numberOfColumnsToAdd = _indexes3$_i[1];

        if (!isNonnegativeInteger(column) || !isPositiveInteger(numberOfColumnsToAdd)) {
          throw new _errors.InvalidArgumentsError('column number to be nonnegative and number of columns to add to be positive.');
        }
      }
    }
  }, {
    key: "ensureItIsPossibleToRemoveColumns",
    value: function ensureItIsPossibleToRemoveColumns(sheet) {
      for (var _len8 = arguments.length, indexes = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        indexes[_key8 - 1] = arguments[_key8];
      }

      for (var _i5 = 0, _indexes4 = indexes; _i5 < _indexes4.length; _i5++) {
        var _indexes4$_i = _slicedToArray(_indexes4[_i5], 2),
            columnStart = _indexes4$_i[0],
            numberOfColumns = _indexes4$_i[1];

        var columnEnd = columnStart + numberOfColumns - 1;

        if (!isNonnegativeInteger(columnStart) || !isNonnegativeInteger(columnEnd)) {
          throw new _errors.InvalidArgumentsError('starting and ending column to be nonnegative.');
        }

        if (columnEnd < columnStart) {
          throw new _errors.InvalidArgumentsError('starting column to be smaller than the ending column.');
        }

        if (!this.sheetMapping.hasSheetWithId(sheet)) {
          throw new _errors.NoSheetWithIdError(sheet);
        }
      }
    }
  }, {
    key: "ensureItIsPossibleToMoveRows",
    value: function ensureItIsPossibleToMoveRows(sheet, startRow, numberOfRows, targetRow) {
      this.ensureItIsPossibleToAddRows(sheet, [targetRow, numberOfRows]);
      var sourceStart = (0, _Cell.simpleCellAddress)(sheet, 0, startRow);
      var targetStart = (0, _Cell.simpleCellAddress)(sheet, 0, targetRow);

      if (!this.sheetMapping.hasSheetWithId(sheet) || (0, _Cell.invalidSimpleCellAddress)(sourceStart) || (0, _Cell.invalidSimpleCellAddress)(targetStart) || !isPositiveInteger(numberOfRows) || targetRow <= startRow + numberOfRows && targetRow >= startRow) {
        throw new _errors.InvalidArgumentsError('a valid range of rows to move.');
      }

      var width = this.dependencyGraph.getSheetWidth(sheet);

      var sourceRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(sourceStart, width, numberOfRows);

      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {
        throw new _errors.SourceLocationHasArrayError();
      }

      if (targetRow > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllRows(_Span.RowsSpan.fromNumberOfRows(sheet, targetRow - 1, 2))) {
        throw new _errors.TargetLocationHasArrayError();
      }
    }
  }, {
    key: "ensureItIsPossibleToMoveColumns",
    value: function ensureItIsPossibleToMoveColumns(sheet, startColumn, numberOfColumns, targetColumn) {
      this.ensureItIsPossibleToAddColumns(sheet, [targetColumn, numberOfColumns]);
      var sourceStart = (0, _Cell.simpleCellAddress)(sheet, startColumn, 0);
      var targetStart = (0, _Cell.simpleCellAddress)(sheet, targetColumn, 0);

      if (!this.sheetMapping.hasSheetWithId(sheet) || (0, _Cell.invalidSimpleCellAddress)(sourceStart) || (0, _Cell.invalidSimpleCellAddress)(targetStart) || !isPositiveInteger(numberOfColumns) || targetColumn <= startColumn + numberOfColumns && targetColumn >= startColumn) {
        throw new _errors.InvalidArgumentsError('a valid range of columns to move.');
      }

      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);

      var sourceRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(sourceStart, numberOfColumns, sheetHeight);

      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {
        throw new _errors.SourceLocationHasArrayError();
      }

      if (targetColumn > 0 && this.dependencyGraph.arrayMapping.isFormulaArrayInAllColumns(_Span.ColumnsSpan.fromNumberOfColumns(sheet, targetColumn - 1, 2))) {
        throw new _errors.TargetLocationHasArrayError();
      }
    }
  }, {
    key: "ensureItIsPossibleToAddSheet",
    value: function ensureItIsPossibleToAddSheet(name) {
      if (this.sheetMapping.hasSheetWithName(name)) {
        throw new _errors.SheetNameAlreadyTakenError(name);
      }
    }
  }, {
    key: "ensureItIsPossibleToRenameSheet",
    value: function ensureItIsPossibleToRenameSheet(sheetId, name) {
      if (!this.sheetMapping.hasSheetWithId(sheetId)) {
        throw new _errors.NoSheetWithIdError(sheetId);
      }

      var existingSheetId = this.sheetMapping.get(name);

      if (existingSheetId !== undefined && existingSheetId !== sheetId) {
        throw new _errors.SheetNameAlreadyTakenError(name);
      }
    }
  }, {
    key: "ensureItIsPossibleToChangeContent",
    value: function ensureItIsPossibleToChangeContent(address) {
      if ((0, _Cell.invalidSimpleCellAddress)(address)) {
        throw new _errors.InvalidAddressError(address);
      }

      if (!this.sheetMapping.hasSheetWithId(address.sheet)) {
        throw new _errors.NoSheetWithIdError(address.sheet);
      }
    }
  }, {
    key: "ensureItIsPossibleToChangeCellContents",
    value: function ensureItIsPossibleToChangeCellContents(inputAddress, content) {
      var boundaries = (0, _Sheet.findBoundaries)(content);

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(inputAddress, boundaries.width, boundaries.height);

      this.ensureRangeInSizeLimits(targetRange);

      var _iterator3 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var address = _step3.value;
          this.ensureItIsPossibleToChangeContent(address);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "ensureItIsPossibleToChangeSheetContents",
    value: function ensureItIsPossibleToChangeSheetContents(sheetId, content) {
      var boundaries = (0, _Sheet.findBoundaries)(content);

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom((0, _Cell.simpleCellAddress)(sheetId, 0, 0), boundaries.width, boundaries.height);

      this.ensureRangeInSizeLimits(targetRange);
    }
  }, {
    key: "ensureRangeInSizeLimits",
    value: function ensureRangeInSizeLimits(range) {
      if (range.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {
        throw new _errors.SheetSizeLimitExceededError();
      }
    }
  }, {
    key: "isThereSomethingToUndo",
    value: function isThereSomethingToUndo() {
      return !this.undoRedo.isUndoStackEmpty();
    }
  }, {
    key: "isThereSomethingToRedo",
    value: function isThereSomethingToRedo() {
      return !this.undoRedo.isRedoStackEmpty();
    }
  }, {
    key: "getAndClearContentChanges",
    value: function getAndClearContentChanges() {
      return this.operations.getAndClearContentChanges();
    }
  }, {
    key: "ensureScopeIdIsValid",
    value: function ensureScopeIdIsValid(scopeId) {
      if (scopeId !== undefined && !this.sheetMapping.hasSheetWithId(scopeId)) {
        throw new _errors.NoSheetWithIdError(scopeId);
      }
    }
  }, {
    key: "validateRowOrColumnMapping",
    value: function validateRowOrColumnMapping(sheetId, rowMapping, rowOrColumn) {
      var limit = rowOrColumn === 'row' ? this.dependencyGraph.getSheetHeight(sheetId) : this.dependencyGraph.getSheetWidth(sheetId);
      var sources = rowMapping.map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            a = _ref2[0],
            _ = _ref2[1];

        return a;
      }).sort(function (a, b) {
        return a - b;
      });
      var targets = rowMapping.map(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            _ = _ref4[0],
            b = _ref4[1];

        return b;
      }).sort(function (a, b) {
        return a - b;
      });

      for (var i = 0; i < sources.length; i++) {
        if (!isNonnegativeInteger(sources[i]) || sources[i] >= limit) {
          throw new _errors.InvalidArgumentsError("".concat(rowOrColumn, " numbers to be nonnegative integers and less than sheet ").concat(rowOrColumn === 'row' ? 'height' : 'width', "."));
        }

        if (sources[i] === sources[i + 1]) {
          throw new _errors.InvalidArgumentsError("source ".concat(rowOrColumn, " numbers to be unique."));
        }

        if (sources[i] !== targets[i]) {
          throw new _errors.InvalidArgumentsError("target ".concat(rowOrColumn, " numbers to be permutation of source ").concat(rowOrColumn, " numbers."));
        }
      }
    }
  }, {
    key: "ensureNamedExpressionNameIsValid",
    value: function ensureNamedExpressionNameIsValid(expressionName, sheetId) {
      if (!this.namedExpressions.isNameValid(expressionName)) {
        throw new _errors.NamedExpressionNameIsInvalidError(expressionName);
      }

      if (!this.namedExpressions.isNameAvailable(expressionName, sheetId)) {
        throw new _errors.NamedExpressionNameIsAlreadyTakenError(expressionName);
      }
    }
  }, {
    key: "ensureNamedExpressionIsValid",
    value: function ensureNamedExpressionIsValid(expression) {
      var parsedExpression = this.cellContentParser.parse(expression);

      if (parsedExpression instanceof _CellContentParser.CellContent.Formula) {
        var parsingResult = this.parser.parse(parsedExpression.formula, (0, _Cell.simpleCellAddress)(-1, 0, 0));

        if ((0, _NamedExpressions.doesContainRelativeReferences)(parsingResult.ast)) {
          throw new _errors.NoRelativeAddressesAllowedError();
        }
      }
    }
  }]);

  return CrudOperations;
}();

exports.CrudOperations = CrudOperations;

function isPositiveInteger(x) {
  return Number.isInteger(x) && x > 0;
}

function isNonnegativeInteger(x) {
  return Number.isInteger(x) && x >= 0;
}

/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.doesContainRelativeReferences = exports.NamedExpressions = exports.InternalNamedExpression = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(157);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(150);

__webpack_require__(154);

var _Cell = __webpack_require__(143);

var _parser = __webpack_require__(169);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var InternalNamedExpression = /*#__PURE__*/function () {
  function InternalNamedExpression(displayName, address, added, options) {
    _classCallCheck(this, InternalNamedExpression);

    this.displayName = displayName;
    this.address = address;
    this.added = added;
    this.options = options;
  }

  _createClass(InternalNamedExpression, [{
    key: "normalizeExpressionName",
    value: function normalizeExpressionName() {
      return this.displayName.toLowerCase();
    }
  }, {
    key: "copy",
    value: function copy() {
      return new InternalNamedExpression(this.displayName, this.address, this.added, this.options);
    }
  }]);

  return InternalNamedExpression;
}();

exports.InternalNamedExpression = InternalNamedExpression;

var WorkbookStore = /*#__PURE__*/function () {
  function WorkbookStore() {
    _classCallCheck(this, WorkbookStore);

    this.mapping = new Map();
  }

  _createClass(WorkbookStore, [{
    key: "has",
    value: function has(expressionName) {
      return this.mapping.has(this.normalizeExpressionName(expressionName));
    }
  }, {
    key: "isNameAvailable",
    value: function isNameAvailable(expressionName) {
      var normalizedExpressionName = this.normalizeExpressionName(expressionName);
      var namedExpression = this.mapping.get(normalizedExpressionName);
      return !(namedExpression && namedExpression.added);
    }
  }, {
    key: "add",
    value: function add(namedExpression) {
      this.mapping.set(namedExpression.normalizeExpressionName(), namedExpression);
    }
  }, {
    key: "get",
    value: function get(expressionName) {
      return this.mapping.get(this.normalizeExpressionName(expressionName));
    }
  }, {
    key: "getExisting",
    value: function getExisting(expressionName) {
      var namedExpression = this.mapping.get(this.normalizeExpressionName(expressionName));

      if (namedExpression && namedExpression.added) {
        return namedExpression;
      } else {
        return undefined;
      }
    }
  }, {
    key: "remove",
    value: function remove(expressionName) {
      var normalizedExpressionName = this.normalizeExpressionName(expressionName);
      var namedExpression = this.mapping.get(normalizedExpressionName);

      if (namedExpression) {
        namedExpression.added = false;
      }
    }
  }, {
    key: "getAllNamedExpressions",
    value: function getAllNamedExpressions() {
      return Array.from(this.mapping.values()).filter(function (ne) {
        return ne.added;
      });
    }
  }, {
    key: "normalizeExpressionName",
    value: function normalizeExpressionName(expressionName) {
      return expressionName.toLowerCase();
    }
  }]);

  return WorkbookStore;
}();

var WorksheetStore = /*#__PURE__*/function () {
  function WorksheetStore() {
    _classCallCheck(this, WorksheetStore);

    this.mapping = new Map();
  }

  _createClass(WorksheetStore, [{
    key: "add",
    value: function add(namedExpression) {
      this.mapping.set(this.normalizeExpressionName(namedExpression.displayName), namedExpression);
    }
  }, {
    key: "get",
    value: function get(expressionName) {
      return this.mapping.get(this.normalizeExpressionName(expressionName));
    }
  }, {
    key: "has",
    value: function has(expressionName) {
      return this.mapping.has(this.normalizeExpressionName(expressionName));
    }
  }, {
    key: "getAllNamedExpressions",
    value: function getAllNamedExpressions() {
      return Array.from(this.mapping.values()).filter(function (ne) {
        return ne.added;
      });
    }
  }, {
    key: "isNameAvailable",
    value: function isNameAvailable(expressionName) {
      var normalizedExpressionName = this.normalizeExpressionName(expressionName);
      return !this.mapping.has(normalizedExpressionName);
    }
  }, {
    key: "remove",
    value: function remove(expressionName) {
      var normalizedExpressionName = this.normalizeExpressionName(expressionName);
      var namedExpression = this.mapping.get(normalizedExpressionName);

      if (namedExpression) {
        this.mapping.delete(normalizedExpressionName);
      }
    }
  }, {
    key: "normalizeExpressionName",
    value: function normalizeExpressionName(expressionName) {
      return expressionName.toLowerCase();
    }
  }]);

  return WorksheetStore;
}();

var NamedExpressions = /*#__PURE__*/function () {
  function NamedExpressions() {
    _classCallCheck(this, NamedExpressions);

    this.nextNamedExpressionRow = 0;
    this.workbookStore = new WorkbookStore();
    this.worksheetStores = new Map();
    this.addressCache = new Map();
  }

  _createClass(NamedExpressions, [{
    key: "isNameAvailable",
    value: function isNameAvailable(expressionName, sheetId) {
      var _a, _b;

      if (sheetId === undefined) {
        return this.workbookStore.isNameAvailable(expressionName);
      } else {
        return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.isNameAvailable(expressionName)) !== null && _b !== void 0 ? _b : true;
      }
    }
  }, {
    key: "namedExpressionInAddress",
    value: function namedExpressionInAddress(row) {
      var namedExpression = this.addressCache.get(row);

      if (namedExpression && namedExpression.added) {
        return namedExpression;
      } else {
        return undefined;
      }
    }
  }, {
    key: "namedExpressionForScope",
    value: function namedExpressionForScope(expressionName, sheetId) {
      var _a;

      if (sheetId === undefined) {
        return this.workbookStore.getExisting(expressionName);
      } else {
        return (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName);
      }
    }
  }, {
    key: "nearestNamedExpression",
    value: function nearestNamedExpression(expressionName, sheetId) {
      var _a, _b;

      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.get(expressionName)) !== null && _b !== void 0 ? _b : this.workbookStore.getExisting(expressionName);
    }
  }, {
    key: "isExpressionInScope",
    value: function isExpressionInScope(expressionName, sheetId) {
      var _a, _b;

      return (_b = (_a = this.worksheetStore(sheetId)) === null || _a === void 0 ? void 0 : _a.has(expressionName)) !== null && _b !== void 0 ? _b : false;
    }
  }, {
    key: "isNameValid",
    value: function isNameValid(expressionName) {
      if (/^[A-Za-z]+[0-9]+$/.test(expressionName)) {
        return false;
      }

      return /^[A-Za-z\u00C0-\u02AF_][A-Za-z0-9\u00C0-\u02AF._]*$/.test(expressionName);
    }
  }, {
    key: "addNamedExpression",
    value: function addNamedExpression(expressionName, sheetId, options) {
      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);
      var namedExpression = store.get(expressionName);

      if (namedExpression !== undefined) {
        namedExpression.added = true;
        namedExpression.displayName = expressionName;
        namedExpression.options = options;
      } else {
        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), true, options);
        store.add(namedExpression);
      }

      this.addressCache.set(namedExpression.address.row, namedExpression);
      return namedExpression;
    }
  }, {
    key: "restoreNamedExpression",
    value: function restoreNamedExpression(namedExpression, sheetId) {
      var store = sheetId === undefined ? this.workbookStore : this.worksheetStoreOrCreate(sheetId);
      namedExpression.added = true;
      store.add(namedExpression);
      this.addressCache.set(namedExpression.address.row, namedExpression);
      return namedExpression;
    }
  }, {
    key: "namedExpressionOrPlaceholder",
    value: function namedExpressionOrPlaceholder(expressionName, sheetId) {
      var _a;

      return (_a = this.worksheetStoreOrCreate(sheetId).get(expressionName)) !== null && _a !== void 0 ? _a : this.workbookNamedExpressionOrPlaceholder(expressionName);
    }
  }, {
    key: "workbookNamedExpressionOrPlaceholder",
    value: function workbookNamedExpressionOrPlaceholder(expressionName) {
      var namedExpression = this.workbookStore.get(expressionName);

      if (namedExpression === undefined) {
        namedExpression = new InternalNamedExpression(expressionName, this.nextAddress(), false);
        this.workbookStore.add(namedExpression);
      }

      return namedExpression;
    }
  }, {
    key: "remove",
    value: function remove(expressionName, sheetId) {
      var store;

      if (sheetId === undefined) {
        store = this.workbookStore;
      } else {
        store = this.worksheetStore(sheetId);
      }

      var namedExpression = store === null || store === void 0 ? void 0 : store.get(expressionName);

      if (store === undefined || namedExpression === undefined || !namedExpression.added) {
        throw 'Named expression does not exist';
      }

      store.remove(expressionName);

      if (store instanceof WorksheetStore && store.mapping.size === 0) {
        this.worksheetStores.delete(sheetId);
      }

      this.addressCache.delete(namedExpression.address.row);
    }
  }, {
    key: "getAllNamedExpressionsNamesInScope",
    value: function getAllNamedExpressionsNamesInScope(sheetId) {
      return this.getAllNamedExpressions().filter(function (_ref) {
        var scope = _ref.scope;
        return scope === sheetId;
      }).map(function (ne) {
        return ne.expression.displayName;
      });
    }
  }, {
    key: "getAllNamedExpressionsNames",
    value: function getAllNamedExpressionsNames() {
      return this.getAllNamedExpressions().map(function (ne) {
        return ne.expression.displayName;
      });
    }
  }, {
    key: "getAllNamedExpressions",
    value: function getAllNamedExpressions() {
      var storedNamedExpressions = [];
      this.workbookStore.getAllNamedExpressions().forEach(function (expr) {
        storedNamedExpressions.push({
          expression: expr,
          scope: undefined
        });
      });
      this.worksheetStores.forEach(function (store, sheetNum) {
        store.getAllNamedExpressions().forEach(function (expr) {
          storedNamedExpressions.push({
            expression: expr,
            scope: sheetNum
          });
        });
      });
      return storedNamedExpressions;
    }
  }, {
    key: "getAllNamedExpressionsForScope",
    value: function getAllNamedExpressionsForScope(scope) {
      var _a, _b;

      if (scope === undefined) {
        return this.workbookStore.getAllNamedExpressions();
      } else {
        return (_b = (_a = this.worksheetStores.get(scope)) === null || _a === void 0 ? void 0 : _a.getAllNamedExpressions()) !== null && _b !== void 0 ? _b : [];
      }
    }
  }, {
    key: "worksheetStoreOrCreate",
    value: function worksheetStoreOrCreate(sheetId) {
      var store = this.worksheetStores.get(sheetId);

      if (!store) {
        store = new WorksheetStore();
        this.worksheetStores.set(sheetId, store);
      }

      return store;
    }
  }, {
    key: "worksheetStore",
    value: function worksheetStore(sheetId) {
      return this.worksheetStores.get(sheetId);
    }
  }, {
    key: "nextAddress",
    value: function nextAddress() {
      return (0, _Cell.simpleCellAddress)(NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS, 0, this.nextNamedExpressionRow++);
    }
  }]);

  return NamedExpressions;
}();

exports.NamedExpressions = NamedExpressions;
NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS = -1;

var doesContainRelativeReferences = function doesContainRelativeReferences(ast) {
  switch (ast.type) {
    case _parser.AstNodeType.EMPTY:
    case _parser.AstNodeType.NUMBER:
    case _parser.AstNodeType.STRING:
    case _parser.AstNodeType.ERROR:
    case _parser.AstNodeType.ERROR_WITH_RAW_INPUT:
      return false;

    case _parser.AstNodeType.CELL_REFERENCE:
      return !ast.reference.isAbsolute();

    case _parser.AstNodeType.CELL_RANGE:
    case _parser.AstNodeType.COLUMN_RANGE:
    case _parser.AstNodeType.ROW_RANGE:
      return !ast.start.isAbsolute();

    case _parser.AstNodeType.NAMED_EXPRESSION:
      return false;

    case _parser.AstNodeType.PERCENT_OP:
    case _parser.AstNodeType.PLUS_UNARY_OP:
    case _parser.AstNodeType.MINUS_UNARY_OP:
      {
        return doesContainRelativeReferences(ast.value);
      }

    case _parser.AstNodeType.CONCATENATE_OP:
    case _parser.AstNodeType.EQUALS_OP:
    case _parser.AstNodeType.NOT_EQUAL_OP:
    case _parser.AstNodeType.LESS_THAN_OP:
    case _parser.AstNodeType.GREATER_THAN_OP:
    case _parser.AstNodeType.LESS_THAN_OR_EQUAL_OP:
    case _parser.AstNodeType.GREATER_THAN_OR_EQUAL_OP:
    case _parser.AstNodeType.MINUS_OP:
    case _parser.AstNodeType.PLUS_OP:
    case _parser.AstNodeType.TIMES_OP:
    case _parser.AstNodeType.DIV_OP:
    case _parser.AstNodeType.POWER_OP:
      return doesContainRelativeReferences(ast.left) || doesContainRelativeReferences(ast.right);

    case _parser.AstNodeType.PARENTHESIS:
      return doesContainRelativeReferences(ast.expression);

    case _parser.AstNodeType.FUNCTION_CALL:
      {
        return ast.args.some(function (arg) {
          return doesContainRelativeReferences(arg);
        });
      }

    case _parser.AstNodeType.ARRAY:
      {
        return ast.args.some(function (row) {
          return row.some(function (arg) {
            return doesContainRelativeReferences(arg);
          });
        });
      }
  }
};

exports.doesContainRelativeReferences = doesContainRelativeReferences;

/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.RemoveRowsCommand = exports.RemoveColumnsCommand = exports.Operations = exports.AddRowsCommand = exports.AddColumnsCommand = void 0;
exports.normalizeAddedIndexes = normalizeAddedIndexes;
exports.normalizeRemovedIndexes = normalizeRemovedIndexes;

__webpack_require__(150);

__webpack_require__(161);

__webpack_require__(1);

__webpack_require__(120);

__webpack_require__(122);

__webpack_require__(146);

__webpack_require__(144);

__webpack_require__(157);

__webpack_require__(81);

__webpack_require__(272);

__webpack_require__(176);

__webpack_require__(236);

var _AbsoluteCellRange = __webpack_require__(158);

var _absolutizeDependencies = __webpack_require__(243);

var _ArraySize = __webpack_require__(246);

var _Cell = __webpack_require__(143);

var _CellContentParser = __webpack_require__(308);

var _ClipboardOperations = __webpack_require__(309);

var _ContentChanges = __webpack_require__(244);

var _DependencyGraph = __webpack_require__(147);

var _FormulaCellVertex = __webpack_require__(265);

var _AddColumnsTransformer = __webpack_require__(313);

var _AddRowsTransformer = __webpack_require__(315);

var _CleanOutOfScopeDependenciesTransformer = __webpack_require__(316);

var _MoveCellsTransformer = __webpack_require__(317);

var _RemoveColumnsTransformer = __webpack_require__(318);

var _RemoveRowsTransformer = __webpack_require__(319);

var _RemoveSheetTransformer = __webpack_require__(320);

var _errors = __webpack_require__(165);

var _InterpreterValue = __webpack_require__(255);

var _NamedExpressions = __webpack_require__(311);

var _parser = __webpack_require__(169);

var _Sheet = __webpack_require__(321);

var _Span = __webpack_require__(242);

var _statistics = __webpack_require__(256);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var RemoveRowsCommand = /*#__PURE__*/function () {
  function RemoveRowsCommand(sheet, indexes) {
    _classCallCheck(this, RemoveRowsCommand);

    this.sheet = sheet;
    this.indexes = indexes;
  }

  _createClass(RemoveRowsCommand, [{
    key: "normalizedIndexes",
    value: function normalizedIndexes() {
      return normalizeRemovedIndexes(this.indexes);
    }
  }, {
    key: "rowsSpans",
    value: function rowsSpans() {
      var _this = this;

      return this.normalizedIndexes().map(function (normalizedIndex) {
        return _Span.RowsSpan.fromNumberOfRows(_this.sheet, normalizedIndex[0], normalizedIndex[1]);
      });
    }
  }]);

  return RemoveRowsCommand;
}();

exports.RemoveRowsCommand = RemoveRowsCommand;

var AddRowsCommand = /*#__PURE__*/function () {
  function AddRowsCommand(sheet, indexes) {
    _classCallCheck(this, AddRowsCommand);

    this.sheet = sheet;
    this.indexes = indexes;
  }

  _createClass(AddRowsCommand, [{
    key: "normalizedIndexes",
    value: function normalizedIndexes() {
      return normalizeAddedIndexes(this.indexes);
    }
  }, {
    key: "rowsSpans",
    value: function rowsSpans() {
      var _this2 = this;

      return this.normalizedIndexes().map(function (normalizedIndex) {
        return _Span.RowsSpan.fromNumberOfRows(_this2.sheet, normalizedIndex[0], normalizedIndex[1]);
      });
    }
  }]);

  return AddRowsCommand;
}();

exports.AddRowsCommand = AddRowsCommand;

var AddColumnsCommand = /*#__PURE__*/function () {
  function AddColumnsCommand(sheet, indexes) {
    _classCallCheck(this, AddColumnsCommand);

    this.sheet = sheet;
    this.indexes = indexes;
  }

  _createClass(AddColumnsCommand, [{
    key: "normalizedIndexes",
    value: function normalizedIndexes() {
      return normalizeAddedIndexes(this.indexes);
    }
  }, {
    key: "columnsSpans",
    value: function columnsSpans() {
      var _this3 = this;

      return this.normalizedIndexes().map(function (normalizedIndex) {
        return _Span.ColumnsSpan.fromNumberOfColumns(_this3.sheet, normalizedIndex[0], normalizedIndex[1]);
      });
    }
  }]);

  return AddColumnsCommand;
}();

exports.AddColumnsCommand = AddColumnsCommand;

var RemoveColumnsCommand = /*#__PURE__*/function () {
  function RemoveColumnsCommand(sheet, indexes) {
    _classCallCheck(this, RemoveColumnsCommand);

    this.sheet = sheet;
    this.indexes = indexes;
  }

  _createClass(RemoveColumnsCommand, [{
    key: "normalizedIndexes",
    value: function normalizedIndexes() {
      return normalizeRemovedIndexes(this.indexes);
    }
  }, {
    key: "columnsSpans",
    value: function columnsSpans() {
      var _this4 = this;

      return this.normalizedIndexes().map(function (normalizedIndex) {
        return _Span.ColumnsSpan.fromNumberOfColumns(_this4.sheet, normalizedIndex[0], normalizedIndex[1]);
      });
    }
  }]);

  return RemoveColumnsCommand;
}();

exports.RemoveColumnsCommand = RemoveColumnsCommand;

var Operations = /*#__PURE__*/function () {
  function Operations(config, dependencyGraph, columnSearch, cellContentParser, parser, stats, lazilyTransformingAstService, namedExpressions, arraySizePredictor) {
    _classCallCheck(this, Operations);

    this.dependencyGraph = dependencyGraph;
    this.columnSearch = columnSearch;
    this.cellContentParser = cellContentParser;
    this.parser = parser;
    this.stats = stats;
    this.lazilyTransformingAstService = lazilyTransformingAstService;
    this.namedExpressions = namedExpressions;
    this.arraySizePredictor = arraySizePredictor;
    this.changes = _ContentChanges.ContentChanges.empty();
    this.allocateNamedExpressionAddressSpace();
    this.maxColumns = config.maxColumns;
    this.maxRows = config.maxRows;
  }

  _createClass(Operations, [{
    key: "sheetMapping",
    get: function get() {
      return this.dependencyGraph.sheetMapping;
    }
  }, {
    key: "addressMapping",
    get: function get() {
      return this.dependencyGraph.addressMapping;
    }
  }, {
    key: "removeRows",
    value: function removeRows(cmd) {
      var rowsRemovals = [];

      var _iterator = _createForOfIteratorHelper(cmd.rowsSpans()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var rowsToRemove = _step.value;
          var rowsRemoval = this.doRemoveRows(rowsToRemove);

          if (rowsRemoval) {
            rowsRemovals.push(rowsRemoval);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return rowsRemovals;
    }
  }, {
    key: "addRows",
    value: function addRows(cmd) {
      var _iterator2 = _createForOfIteratorHelper(cmd.rowsSpans()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var addedRows = _step2.value;
          this.doAddRows(addedRows);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  }, {
    key: "addColumns",
    value: function addColumns(cmd) {
      var _iterator3 = _createForOfIteratorHelper(cmd.columnsSpans()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var addedColumns = _step3.value;
          this.doAddColumns(addedColumns);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(cmd) {
      var columnsRemovals = [];

      var _iterator4 = _createForOfIteratorHelper(cmd.columnsSpans()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var columnsToRemove = _step4.value;
          var columnsRemoval = this.doRemoveColumns(columnsToRemove);

          if (columnsRemoval) {
            columnsRemovals.push(columnsRemoval);
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return columnsRemovals;
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      var _this5 = this;

      this.dependencyGraph.removeSheet(sheetId);
      var version;
      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _RemoveSheetTransformer.RemoveSheetTransformer(sheetId);
        transformation.performEagerTransformations(_this5.dependencyGraph, _this5.parser);
        version = _this5.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.sheetMapping.removeSheet(sheetId);
      this.columnSearch.removeSheet(sheetId);
      var scopedNamedExpressions = this.namedExpressions.getAllNamedExpressionsForScope(sheetId).map(function (namedexpression) {
        return _this5.removeNamedExpression(namedexpression.normalizeExpressionName(), sheetId);
      });
      return {
        version: version,
        scopedNamedExpressions: scopedNamedExpressions
      };
    }
  }, {
    key: "removeSheetByName",
    value: function removeSheetByName(sheetName) {
      var sheetId = this.sheetMapping.fetch(sheetName);
      return this.removeSheet(sheetId);
    }
  }, {
    key: "clearSheet",
    value: function clearSheet(sheetId) {
      this.dependencyGraph.clearSheet(sheetId);
      this.columnSearch.removeSheet(sheetId);
    }
  }, {
    key: "addSheet",
    value: function addSheet(name) {
      var sheetId = this.sheetMapping.addSheet(name);
      var sheet = [];
      this.dependencyGraph.addressMapping.autoAddSheet(sheetId, sheet, (0, _Sheet.findBoundaries)(sheet));
      return this.sheetMapping.fetchDisplayName(sheetId);
    }
  }, {
    key: "renameSheet",
    value: function renameSheet(sheetId, newName) {
      return this.sheetMapping.renameSheet(sheetId, newName);
    }
  }, {
    key: "moveRows",
    value: function moveRows(sheet, startRow, numberOfRows, targetRow) {
      var rowsToAdd = _Span.RowsSpan.fromNumberOfRows(sheet, targetRow, numberOfRows);

      this.lazilyTransformingAstService.beginCombinedMode(sheet);
      this.doAddRows(rowsToAdd);

      if (targetRow < startRow) {
        startRow += numberOfRows;
      }

      var startAddress = (0, _Cell.simpleCellAddress)(sheet, 0, startRow);
      var targetAddress = (0, _Cell.simpleCellAddress)(sheet, 0, targetRow);
      this.moveCells(startAddress, Number.POSITIVE_INFINITY, numberOfRows, targetAddress);

      var rowsToRemove = _Span.RowsSpan.fromNumberOfRows(sheet, startRow, numberOfRows);

      this.doRemoveRows(rowsToRemove);
      return this.lazilyTransformingAstService.commitCombinedMode();
    }
  }, {
    key: "moveColumns",
    value: function moveColumns(sheet, startColumn, numberOfColumns, targetColumn) {
      var columnsToAdd = _Span.ColumnsSpan.fromNumberOfColumns(sheet, targetColumn, numberOfColumns);

      this.lazilyTransformingAstService.beginCombinedMode(sheet);
      this.doAddColumns(columnsToAdd);

      if (targetColumn < startColumn) {
        startColumn += numberOfColumns;
      }

      var startAddress = (0, _Cell.simpleCellAddress)(sheet, startColumn, 0);
      var targetAddress = (0, _Cell.simpleCellAddress)(sheet, targetColumn, 0);
      this.moveCells(startAddress, numberOfColumns, Number.POSITIVE_INFINITY, targetAddress);

      var columnsToRemove = _Span.ColumnsSpan.fromNumberOfColumns(sheet, startColumn, numberOfColumns);

      this.doRemoveColumns(columnsToRemove);
      return this.lazilyTransformingAstService.commitCombinedMode();
    }
  }, {
    key: "moveCells",
    value: function moveCells(sourceLeftCorner, width, height, destinationLeftCorner) {
      var _this6 = this;

      this.ensureItIsPossibleToMoveCells(sourceLeftCorner, width, height, destinationLeftCorner);

      var sourceRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(sourceLeftCorner, width, height);

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(destinationLeftCorner, width, height);

      var toRight = destinationLeftCorner.col - sourceLeftCorner.col;
      var toBottom = destinationLeftCorner.row - sourceLeftCorner.row;
      var toSheet = destinationLeftCorner.sheet;
      var currentDataAtTarget = this.getRangeClipboardCells(targetRange);
      var valuesToRemove = this.dependencyGraph.rawValuesFromRange(targetRange);
      this.columnSearch.removeValues(valuesToRemove);
      var valuesToMove = this.dependencyGraph.rawValuesFromRange(sourceRange);
      this.columnSearch.moveValues(valuesToMove, toRight, toBottom, toSheet);
      var version;
      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _MoveCellsTransformer.MoveCellsTransformer(sourceRange, toRight, toBottom, toSheet);
        transformation.performEagerTransformations(_this6.dependencyGraph, _this6.parser);
        version = _this6.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.dependencyGraph.moveCells(sourceRange, toRight, toBottom, toSheet);
      var addedGlobalNamedExpressions = this.updateNamedExpressionsForMovedCells(sourceLeftCorner, width, height, destinationLeftCorner);
      return {
        version: version,
        overwrittenCellsData: currentDataAtTarget,
        addedGlobalNamedExpressions: addedGlobalNamedExpressions
      };
    }
  }, {
    key: "setRowOrder",
    value: function setRowOrder(sheetId, rowMapping) {
      var _this7 = this;

      var buffer = [];
      var oldContent = [];

      var _iterator5 = _createForOfIteratorHelper(rowMapping),
          _step5;

      try {
        var _loop = function _loop() {
          var _step5$value = _slicedToArray(_step5.value, 2),
              source = _step5$value[0],
              target = _step5$value[1];

          if (source !== target) {
            var rowRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom({
              sheet: sheetId,
              col: 0,
              row: source
            }, Infinity, 1);

            var row = _this7.getRangeClipboardCells(rowRange);

            oldContent = oldContent.concat(row);
            buffer.push(row.map(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                  _ref2$ = _ref2[0],
                  sheet = _ref2$.sheet,
                  col = _ref2$.col,
                  cell = _ref2[1];

              return [{
                sheet: sheet,
                col: col,
                row: target
              }, cell];
            }));
          }
        };

        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      buffer.forEach(function (row) {
        return _this7.restoreClipboardCells(sheetId, row.values());
      });
      return oldContent;
    }
  }, {
    key: "setColumnOrder",
    value: function setColumnOrder(sheetId, columnMapping) {
      var _this8 = this;

      var buffer = [];
      var oldContent = [];

      var _iterator6 = _createForOfIteratorHelper(columnMapping),
          _step6;

      try {
        var _loop2 = function _loop2() {
          var _step6$value = _slicedToArray(_step6.value, 2),
              source = _step6$value[0],
              target = _step6$value[1];

          if (source !== target) {
            var rowRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom({
              sheet: sheetId,
              col: source,
              row: 0
            }, 1, Infinity);

            var column = _this8.getRangeClipboardCells(rowRange);

            oldContent = oldContent.concat(column);
            buffer.push(column.map(function (_ref3) {
              var _ref4 = _slicedToArray(_ref3, 2),
                  _ref4$ = _ref4[0],
                  sheet = _ref4$.sheet,
                  _col = _ref4$.col,
                  row = _ref4$.row,
                  cell = _ref4[1];

              return [{
                sheet: sheet,
                col: target,
                row: row
              }, cell];
            }));
          }
        };

        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      buffer.forEach(function (column) {
        return _this8.restoreClipboardCells(sheetId, column.values());
      });
      return oldContent;
    }
  }, {
    key: "addNamedExpression",
    value: function addNamedExpression(expressionName, expression, sheetId, options) {
      var namedExpression = this.namedExpressions.addNamedExpression(expressionName, sheetId, options);
      this.storeNamedExpressionInCell(namedExpression.address, expression);
      this.adjustNamedExpressionEdges(namedExpression, expressionName, sheetId);
    }
  }, {
    key: "restoreNamedExpression",
    value: function restoreNamedExpression(namedExpression, content, sheetId) {
      var expressionName = namedExpression.displayName;
      this.restoreCell(namedExpression.address, content);
      var restoredNamedExpression = this.namedExpressions.restoreNamedExpression(namedExpression, sheetId);
      this.adjustNamedExpressionEdges(restoredNamedExpression, expressionName, sheetId);
    }
  }, {
    key: "changeNamedExpressionExpression",
    value: function changeNamedExpressionExpression(expressionName, newExpression, sheetId, options) {
      var namedExpression = this.namedExpressions.namedExpressionForScope(expressionName, sheetId);

      if (!namedExpression) {
        throw new _errors.NamedExpressionDoesNotExistError(expressionName);
      }

      var oldNamedExpression = namedExpression.copy();
      namedExpression.options = options;
      var content = this.getClipboardCell(namedExpression.address);
      this.storeNamedExpressionInCell(namedExpression.address, newExpression);
      return [oldNamedExpression, content];
    }
  }, {
    key: "removeNamedExpression",
    value: function removeNamedExpression(expressionName, sheetId) {
      var namedExpression = this.namedExpressions.namedExpressionForScope(expressionName, sheetId);

      if (!namedExpression) {
        throw new _errors.NamedExpressionDoesNotExistError(expressionName);
      }

      this.namedExpressions.remove(namedExpression.displayName, sheetId);
      var content = this.getClipboardCell(namedExpression.address);

      if (sheetId !== undefined) {
        var globalNamedExpression = this.namedExpressions.workbookNamedExpressionOrPlaceholder(expressionName);
        this.dependencyGraph.exchangeNode(namedExpression.address, globalNamedExpression.address);
      } else {
        this.dependencyGraph.setCellEmpty(namedExpression.address);
      }

      return [namedExpression, content];
    }
  }, {
    key: "ensureItIsPossibleToMoveCells",
    value: function ensureItIsPossibleToMoveCells(sourceLeftCorner, width, height, destinationLeftCorner) {
      if ((0, _Cell.invalidSimpleCellAddress)(sourceLeftCorner) || !(isPositiveInteger(width) && isPositiveInteger(height) || isRowOrColumnRange(sourceLeftCorner, width, height)) || (0, _Cell.invalidSimpleCellAddress)(destinationLeftCorner) || !this.sheetMapping.hasSheetWithId(sourceLeftCorner.sheet) || !this.sheetMapping.hasSheetWithId(destinationLeftCorner.sheet)) {
        throw new _errors.InvalidArgumentsError('a valid range of cells to move.');
      }

      var sourceRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(sourceLeftCorner, width, height);

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(destinationLeftCorner, width, height);

      if (targetRange.exceedsSheetSizeLimits(this.maxColumns, this.maxRows)) {
        throw new _errors.SheetSizeLimitExceededError();
      }

      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(sourceRange)) {
        throw new _errors.SourceLocationHasArrayError();
      }

      if (this.dependencyGraph.arrayMapping.isFormulaArrayInRange(targetRange)) {
        throw new _errors.TargetLocationHasArrayError();
      }
    }
  }, {
    key: "restoreClipboardCells",
    value: function restoreClipboardCells(sourceSheetId, cells) {
      var addedNamedExpressions = [];

      var _iterator7 = _createForOfIteratorHelper(cells),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              address = _step7$value[0],
              clipboardCell = _step7$value[1];

          this.restoreCell(address, clipboardCell);

          if (clipboardCell.type === _ClipboardOperations.ClipboardCellType.FORMULA) {
            var _this$parser$fetchCac = this.parser.fetchCachedResult(clipboardCell.hash),
                dependencies = _this$parser$fetchCac.dependencies;

            addedNamedExpressions.push.apply(addedNamedExpressions, _toConsumableArray(this.updateNamedExpressionsForTargetAddress(sourceSheetId, address, dependencies)));
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return addedNamedExpressions;
    }
  }, {
    key: "restoreCell",
    value: function restoreCell(address, clipboardCell) {
      switch (clipboardCell.type) {
        case _ClipboardOperations.ClipboardCellType.VALUE:
          {
            this.setValueToCell(clipboardCell, address);
            break;
          }

        case _ClipboardOperations.ClipboardCellType.FORMULA:
          {
            this.setFormulaToCellFromCache(clipboardCell.hash, address);
            break;
          }

        case _ClipboardOperations.ClipboardCellType.EMPTY:
          {
            this.setCellEmpty(address);
            break;
          }

        case _ClipboardOperations.ClipboardCellType.PARSING_ERROR:
          {
            this.setParsingErrorToCell(clipboardCell.rawInput, clipboardCell.errors, address);
            break;
          }
      }
    }
  }, {
    key: "getOldContent",
    value: function getOldContent(address) {
      var vertex = this.dependencyGraph.getCell(address);

      if (vertex === undefined || vertex instanceof _DependencyGraph.EmptyCellVertex) {
        return [address, {
          type: _ClipboardOperations.ClipboardCellType.EMPTY
        }];
      } else if (vertex instanceof _DependencyGraph.ValueCellVertex) {
        return [address, Object.assign({
          type: _ClipboardOperations.ClipboardCellType.VALUE
        }, vertex.getValues())];
      } else if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
        return [vertex.getAddress(this.lazilyTransformingAstService), {
          type: _ClipboardOperations.ClipboardCellType.FORMULA,
          hash: this.parser.computeHashFromAst(vertex.getFormula(this.lazilyTransformingAstService))
        }];
      } else if (vertex instanceof _DependencyGraph.ParsingErrorVertex) {
        return [address, {
          type: _ClipboardOperations.ClipboardCellType.PARSING_ERROR,
          rawInput: vertex.rawInput,
          errors: vertex.errors
        }];
      }

      throw Error('Trying to copy unsupported type');
    }
  }, {
    key: "getClipboardCell",
    value: function getClipboardCell(address) {
      var vertex = this.dependencyGraph.getCell(address);

      if (vertex === undefined || vertex instanceof _DependencyGraph.EmptyCellVertex) {
        return {
          type: _ClipboardOperations.ClipboardCellType.EMPTY
        };
      } else if (vertex instanceof _DependencyGraph.ValueCellVertex) {
        return Object.assign({
          type: _ClipboardOperations.ClipboardCellType.VALUE
        }, vertex.getValues());
      } else if (vertex instanceof _DependencyGraph.ArrayVertex) {
        var val = vertex.getArrayCellValue(address);

        if (val === _InterpreterValue.EmptyValue) {
          return {
            type: _ClipboardOperations.ClipboardCellType.EMPTY
          };
        }

        return {
          type: _ClipboardOperations.ClipboardCellType.VALUE,
          parsedValue: val,
          rawValue: vertex.getArrayCellRawValue(address)
        };
      } else if (vertex instanceof _DependencyGraph.FormulaCellVertex) {
        return {
          type: _ClipboardOperations.ClipboardCellType.FORMULA,
          hash: this.parser.computeHashFromAst(vertex.getFormula(this.lazilyTransformingAstService))
        };
      } else if (vertex instanceof _DependencyGraph.ParsingErrorVertex) {
        return {
          type: _ClipboardOperations.ClipboardCellType.PARSING_ERROR,
          rawInput: vertex.rawInput,
          errors: vertex.errors
        };
      }

      throw Error('Trying to copy unsupported type');
    }
  }, {
    key: "getSheetClipboardCells",
    value: function getSheetClipboardCells(sheet) {
      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);
      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);
      var arr = new Array(sheetHeight);

      for (var i = 0; i < sheetHeight; i++) {
        arr[i] = new Array(sheetWidth);

        for (var j = 0; j < sheetWidth; j++) {
          var address = (0, _Cell.simpleCellAddress)(sheet, j, i);
          arr[i][j] = this.getClipboardCell(address);
        }
      }

      return arr;
    }
  }, {
    key: "getRangeClipboardCells",
    value: function getRangeClipboardCells(range) {
      var result = [];

      var _iterator8 = _createForOfIteratorHelper(range.addresses(this.dependencyGraph)),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var address = _step8.value;
          result.push([address, this.getClipboardCell(address)]);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return result;
    }
  }, {
    key: "setCellContent",
    value: function setCellContent(address, newCellContent) {
      var parsedCellContent = this.cellContentParser.parse(newCellContent);
      var oldContent = this.getOldContent(address);

      if (parsedCellContent instanceof _CellContentParser.CellContent.Formula) {
        var parserResult = this.parser.parse(parsedCellContent.formula, address);
        var ast = parserResult.ast,
            errors = parserResult.errors;

        if (errors.length > 0) {
          this.setParsingErrorToCell(parsedCellContent.formula, errors, address);
        } else {
          var size = this.arraySizePredictor.checkArraySize(ast, address);
          this.setFormulaToCell(address, size, parserResult);
        }
      } else if (parsedCellContent instanceof _CellContentParser.CellContent.Empty) {
        this.setCellEmpty(address);
      } else {
        this.setValueToCell({
          parsedValue: parsedCellContent.value,
          rawValue: newCellContent
        }, address);
      }

      return oldContent;
    }
  }, {
    key: "setSheetContent",
    value: function setSheetContent(sheetId, newSheetContent) {
      this.clearSheet(sheetId);

      for (var i = 0; i < newSheetContent.length; i++) {
        for (var j = 0; j < newSheetContent[i].length; j++) {
          var address = (0, _Cell.simpleCellAddress)(sheetId, j, i);
          this.setCellContent(address, newSheetContent[i][j]);
        }
      }
    }
  }, {
    key: "setParsingErrorToCell",
    value: function setParsingErrorToCell(rawInput, errors, address) {
      var oldValue = this.dependencyGraph.getCellValue(address);
      var vertex = new _DependencyGraph.ParsingErrorVertex(errors, rawInput);
      var arrayChanges = this.dependencyGraph.setParsingErrorToCell(address, vertex);
      this.columnSearch.remove((0, _InterpreterValue.getRawValue)(oldValue), address);
      this.columnSearch.applyChanges(arrayChanges.getChanges());
      this.changes.addAll(arrayChanges);
      this.changes.addChange(vertex.getCellValue(), address);
    }
  }, {
    key: "setFormulaToCell",
    value: function setFormulaToCell(address, size, _ref5) {
      var ast = _ref5.ast,
          hasVolatileFunction = _ref5.hasVolatileFunction,
          hasStructuralChangeFunction = _ref5.hasStructuralChangeFunction,
          dependencies = _ref5.dependencies;
      var oldValue = this.dependencyGraph.getCellValue(address);
      var arrayChanges = this.dependencyGraph.setFormulaToCell(address, ast, (0, _absolutizeDependencies.absolutizeDependencies)(dependencies, address), size, hasVolatileFunction, hasStructuralChangeFunction);
      this.columnSearch.remove((0, _InterpreterValue.getRawValue)(oldValue), address);
      this.columnSearch.applyChanges(arrayChanges.getChanges());
      this.changes.addAll(arrayChanges);
    }
  }, {
    key: "setValueToCell",
    value: function setValueToCell(value, address) {
      var oldValue = this.dependencyGraph.getCellValue(address);
      var arrayChanges = this.dependencyGraph.setValueToCell(address, value);
      this.columnSearch.change((0, _InterpreterValue.getRawValue)(oldValue), (0, _InterpreterValue.getRawValue)(value.parsedValue), address);
      this.columnSearch.applyChanges(arrayChanges.getChanges().filter(function (change) {
        return !(0, _Cell.equalSimpleCellAddress)(change.address, address);
      }));
      this.changes.addAll(arrayChanges);
      this.changes.addChange(value.parsedValue, address);
    }
  }, {
    key: "setCellEmpty",
    value: function setCellEmpty(address) {
      if (this.dependencyGraph.isArrayInternalCell(address)) {
        return;
      }

      var oldValue = this.dependencyGraph.getCellValue(address);
      var arrayChanges = this.dependencyGraph.setCellEmpty(address);
      this.columnSearch.remove((0, _InterpreterValue.getRawValue)(oldValue), address);
      this.columnSearch.applyChanges(arrayChanges.getChanges());
      this.changes.addAll(arrayChanges);
      this.changes.addChange(_InterpreterValue.EmptyValue, address);
    }
  }, {
    key: "setFormulaToCellFromCache",
    value: function setFormulaToCellFromCache(formulaHash, address) {
      var _this$parser$fetchCac2 = this.parser.fetchCachedResult(formulaHash),
          ast = _this$parser$fetchCac2.ast,
          hasVolatileFunction = _this$parser$fetchCac2.hasVolatileFunction,
          hasStructuralChangeFunction = _this$parser$fetchCac2.hasStructuralChangeFunction,
          dependencies = _this$parser$fetchCac2.dependencies;

      var absoluteDependencies = (0, _absolutizeDependencies.absolutizeDependencies)(dependencies, address);

      var _CleanOutOfScopeDepen = new _CleanOutOfScopeDependenciesTransformer.CleanOutOfScopeDependenciesTransformer(address.sheet).transformSingleAst(ast, address),
          _CleanOutOfScopeDepen2 = _slicedToArray(_CleanOutOfScopeDepen, 1),
          cleanedAst = _CleanOutOfScopeDepen2[0];

      this.parser.rememberNewAst(cleanedAst);
      var cleanedDependencies = (0, _absolutizeDependencies.filterDependenciesOutOfScope)(absoluteDependencies);
      var size = this.arraySizePredictor.checkArraySize(ast, address);
      this.dependencyGraph.setFormulaToCell(address, cleanedAst, cleanedDependencies, size, hasVolatileFunction, hasStructuralChangeFunction);
    }
    /**
     * Returns true if row number is outside of given sheet.
     *
     * @param row - row number
     * @param sheet - sheet id number
     */

  }, {
    key: "rowEffectivelyNotInSheet",
    value: function rowEffectivelyNotInSheet(row, sheet) {
      var height = this.dependencyGraph.addressMapping.getHeight(sheet);
      return row >= height;
    }
  }, {
    key: "getAndClearContentChanges",
    value: function getAndClearContentChanges() {
      var changes = this.changes;
      this.changes = _ContentChanges.ContentChanges.empty();
      return changes;
    }
  }, {
    key: "forceApplyPostponedTransformations",
    value: function forceApplyPostponedTransformations() {
      this.dependencyGraph.forceApplyPostponedTransformations();
    }
    /**
     * Removes multiple rows from sheet. </br>
     * Does nothing if rows are outside of effective sheet size.
     *
     * @param sheet - sheet id from which rows will be removed
     * @param rowStart - number of the first row to be deleted
     * @param rowEnd - number of the last row to be deleted
     * */

  }, {
    key: "doRemoveRows",
    value: function doRemoveRows(rowsToRemove) {
      var _this9 = this;

      if (this.rowEffectivelyNotInSheet(rowsToRemove.rowStart, rowsToRemove.sheet)) {
        return;
      }

      var removedCells = [];

      var _iterator9 = _createForOfIteratorHelper(this.dependencyGraph.entriesFromRowsSpan(rowsToRemove)),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 1),
              address = _step9$value[0];

          removedCells.push({
            address: address,
            cellType: this.getClipboardCell(address)
          });
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      var _this$dependencyGraph = this.dependencyGraph.removeRows(rowsToRemove),
          affectedArrays = _this$dependencyGraph.affectedArrays,
          contentChanges = _this$dependencyGraph.contentChanges;

      this.columnSearch.applyChanges(contentChanges.getChanges());
      var version;
      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _RemoveRowsTransformer.RemoveRowsTransformer(rowsToRemove);
        transformation.performEagerTransformations(_this9.dependencyGraph, _this9.parser);
        version = _this9.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.rewriteAffectedArrays(affectedArrays);
      return {
        version: version,
        removedCells: removedCells,
        rowFrom: rowsToRemove.rowStart,
        rowCount: rowsToRemove.numberOfRows
      };
    }
    /**
     * Removes multiple columns from sheet. </br>
     * Does nothing if columns are outside of effective sheet size.
     *
     * @param sheet - sheet id from which columns will be removed
     * @param columnStart - number of the first column to be deleted
     * @param columnEnd - number of the last row to be deleted
     */

  }, {
    key: "doRemoveColumns",
    value: function doRemoveColumns(columnsToRemove) {
      var _this10 = this;

      if (this.columnEffectivelyNotInSheet(columnsToRemove.columnStart, columnsToRemove.sheet)) {
        return;
      }

      var removedCells = [];

      var _iterator10 = _createForOfIteratorHelper(this.dependencyGraph.entriesFromColumnsSpan(columnsToRemove)),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 1),
              address = _step10$value[0];

          removedCells.push({
            address: address,
            cellType: this.getClipboardCell(address)
          });
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }

      var _this$dependencyGraph2 = this.dependencyGraph.removeColumns(columnsToRemove),
          affectedArrays = _this$dependencyGraph2.affectedArrays,
          contentChanges = _this$dependencyGraph2.contentChanges;

      this.columnSearch.applyChanges(contentChanges.getChanges());
      this.columnSearch.removeColumns(columnsToRemove);
      var version;
      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _RemoveColumnsTransformer.RemoveColumnsTransformer(columnsToRemove);
        transformation.performEagerTransformations(_this10.dependencyGraph, _this10.parser);
        version = _this10.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.rewriteAffectedArrays(affectedArrays);
      return {
        version: version,
        removedCells: removedCells,
        columnFrom: columnsToRemove.columnStart,
        columnCount: columnsToRemove.numberOfColumns
      };
    }
    /**
     * Add multiple rows to sheet. </br>
     * Does nothing if rows are outside of effective sheet size.
     *
     * @param sheet - sheet id in which rows will be added
     * @param row - row number above which the rows will be added
     * @param numberOfRowsToAdd - number of rows to add
     */

  }, {
    key: "doAddRows",
    value: function doAddRows(addedRows) {
      var _this11 = this;

      if (this.rowEffectivelyNotInSheet(addedRows.rowStart, addedRows.sheet)) {
        return;
      }

      var _this$dependencyGraph3 = this.dependencyGraph.addRows(addedRows),
          affectedArrays = _this$dependencyGraph3.affectedArrays;

      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _AddRowsTransformer.AddRowsTransformer(addedRows);
        transformation.performEagerTransformations(_this11.dependencyGraph, _this11.parser);

        _this11.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.rewriteAffectedArrays(affectedArrays);
    }
  }, {
    key: "rewriteAffectedArrays",
    value: function rewriteAffectedArrays(affectedArrays) {
      var _iterator11 = _createForOfIteratorHelper(affectedArrays.values()),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var arrayVertex = _step11.value;

          if (arrayVertex.array.size.isRef) {
            continue;
          }

          var ast = arrayVertex.getFormula(this.lazilyTransformingAstService);
          var address = arrayVertex.getAddress(this.lazilyTransformingAstService);
          var hash = this.parser.computeHashFromAst(ast);
          this.setFormulaToCellFromCache(hash, address);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
    /**
     * Add multiple columns to sheet </br>
     * Does nothing if columns are outside of effective sheet size
     *
     * @param sheet - sheet id in which columns will be added
     * @param column - column number above which the columns will be added
     * @param numberOfColumns - number of columns to add
     */

  }, {
    key: "doAddColumns",
    value: function doAddColumns(addedColumns) {
      var _this12 = this;

      if (this.columnEffectivelyNotInSheet(addedColumns.columnStart, addedColumns.sheet)) {
        return;
      }

      var _this$dependencyGraph4 = this.dependencyGraph.addColumns(addedColumns),
          affectedArrays = _this$dependencyGraph4.affectedArrays,
          contentChanges = _this$dependencyGraph4.contentChanges;

      this.columnSearch.addColumns(addedColumns);
      this.columnSearch.applyChanges(contentChanges.getChanges());
      this.stats.measure(_statistics.StatType.TRANSFORM_ASTS, function () {
        var transformation = new _AddColumnsTransformer.AddColumnsTransformer(addedColumns);
        transformation.performEagerTransformations(_this12.dependencyGraph, _this12.parser);

        _this12.lazilyTransformingAstService.addTransformation(transformation);
      });
      this.rewriteAffectedArrays(affectedArrays);
    }
    /**
     * Returns true if row number is outside of given sheet.
     *
     * @param column - row number
     * @param sheet - sheet id number
     */

  }, {
    key: "columnEffectivelyNotInSheet",
    value: function columnEffectivelyNotInSheet(column, sheet) {
      var width = this.dependencyGraph.addressMapping.getWidth(sheet);
      return column >= width;
    }
  }, {
    key: "adjustNamedExpressionEdges",
    value: function adjustNamedExpressionEdges(namedExpression, expressionName, sheetId) {
      if (sheetId === undefined) {
        return;
      }

      var localVertex = this.dependencyGraph.fetchCellOrCreateEmpty(namedExpression.address);
      var globalNamedExpression = this.namedExpressions.workbookNamedExpressionOrPlaceholder(expressionName);
      var globalVertex = this.dependencyGraph.fetchCellOrCreateEmpty(globalNamedExpression.address);

      var _iterator12 = _createForOfIteratorHelper(this.dependencyGraph.graph.adjacentNodes(globalVertex)),
          _step12;

      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var adjacentNode = _step12.value;

          if (adjacentNode instanceof _DependencyGraph.FormulaCellVertex && adjacentNode.getAddress(this.lazilyTransformingAstService).sheet === sheetId) {
            var ast = adjacentNode.getFormula(this.lazilyTransformingAstService);
            var formulaAddress = adjacentNode.getAddress(this.lazilyTransformingAstService);

            var _this$parser$fetchCac3 = this.parser.fetchCachedResultForAst(ast),
                dependencies = _this$parser$fetchCac3.dependencies;

            var _iterator13 = _createForOfIteratorHelper((0, _absolutizeDependencies.absolutizeDependencies)(dependencies, formulaAddress)),
                _step13;

            try {
              for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
                var dependency = _step13.value;

                if (dependency instanceof _parser.NamedExpressionDependency && dependency.name.toLowerCase() === namedExpression.displayName.toLowerCase()) {
                  this.dependencyGraph.graph.removeEdge(globalVertex, adjacentNode);
                  this.dependencyGraph.graph.addEdge(localVertex, adjacentNode);
                }
              }
            } catch (err) {
              _iterator13.e(err);
            } finally {
              _iterator13.f();
            }
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
    }
  }, {
    key: "storeNamedExpressionInCell",
    value: function storeNamedExpressionInCell(address, expression) {
      var parsedCellContent = this.cellContentParser.parse(expression);

      if (parsedCellContent instanceof _CellContentParser.CellContent.Formula) {
        var parsingResult = this.parser.parse(parsedCellContent.formula, (0, _Cell.simpleCellAddress)(-1, 0, 0));

        if ((0, _NamedExpressions.doesContainRelativeReferences)(parsingResult.ast)) {
          throw new _errors.NoRelativeAddressesAllowedError();
        }

        var ast = parsingResult.ast,
            hasVolatileFunction = parsingResult.hasVolatileFunction,
            hasStructuralChangeFunction = parsingResult.hasStructuralChangeFunction,
            dependencies = parsingResult.dependencies;
        this.dependencyGraph.setFormulaToCell(address, ast, (0, _absolutizeDependencies.absolutizeDependencies)(dependencies, address), _ArraySize.ArraySize.scalar(), hasVolatileFunction, hasStructuralChangeFunction);
      } else if (parsedCellContent instanceof _CellContentParser.CellContent.Empty) {
        this.setCellEmpty(address);
      } else {
        this.setValueToCell({
          parsedValue: parsedCellContent.value,
          rawValue: expression
        }, address);
      }
    }
  }, {
    key: "updateNamedExpressionsForMovedCells",
    value: function updateNamedExpressionsForMovedCells(sourceLeftCorner, width, height, destinationLeftCorner) {
      if (sourceLeftCorner.sheet === destinationLeftCorner.sheet) {
        return [];
      }

      var addedGlobalNamedExpressions = [];

      var targetRange = _AbsoluteCellRange.AbsoluteCellRange.spanFrom(destinationLeftCorner, width, height);

      var _iterator14 = _createForOfIteratorHelper(targetRange.addresses(this.dependencyGraph)),
          _step14;

      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var formulaAddress = _step14.value;
          var vertex = this.addressMapping.fetchCell(formulaAddress);

          if (vertex instanceof _DependencyGraph.FormulaCellVertex && formulaAddress.sheet !== sourceLeftCorner.sheet) {
            var ast = vertex.getFormula(this.lazilyTransformingAstService);

            var _this$parser$fetchCac4 = this.parser.fetchCachedResultForAst(ast),
                dependencies = _this$parser$fetchCac4.dependencies;

            addedGlobalNamedExpressions.push.apply(addedGlobalNamedExpressions, _toConsumableArray(this.updateNamedExpressionsForTargetAddress(sourceLeftCorner.sheet, formulaAddress, dependencies)));
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }

      return addedGlobalNamedExpressions;
    }
  }, {
    key: "updateNamedExpressionsForTargetAddress",
    value: function updateNamedExpressionsForTargetAddress(sourceSheet, targetAddress, dependencies) {
      if (sourceSheet === targetAddress.sheet) {
        return [];
      }

      var addedGlobalNamedExpressions = [];
      var vertex = this.addressMapping.fetchCell(targetAddress);

      var _iterator15 = _createForOfIteratorHelper((0, _absolutizeDependencies.absolutizeDependencies)(dependencies, targetAddress)),
          _step15;

      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var namedExpressionDependency = _step15.value;

          if (!(namedExpressionDependency instanceof _parser.NamedExpressionDependency)) {
            continue;
          }

          var expressionName = namedExpressionDependency.name;
          var sourceVertex = this.dependencyGraph.fetchNamedExpressionVertex(expressionName, sourceSheet);
          var namedExpressionInTargetScope = this.namedExpressions.isExpressionInScope(expressionName, targetAddress.sheet);
          var targetScopeExpressionVertex = namedExpressionInTargetScope ? this.dependencyGraph.fetchNamedExpressionVertex(expressionName, targetAddress.sheet) : this.copyOrFetchGlobalNamedExpressionVertex(expressionName, sourceVertex, addedGlobalNamedExpressions);

          if (targetScopeExpressionVertex !== sourceVertex) {
            this.dependencyGraph.graph.softRemoveEdge(sourceVertex, vertex);
            this.dependencyGraph.graph.addEdge(targetScopeExpressionVertex, vertex);
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }

      return addedGlobalNamedExpressions;
    }
  }, {
    key: "allocateNamedExpressionAddressSpace",
    value: function allocateNamedExpressionAddressSpace() {
      this.dependencyGraph.addressMapping.addSheet(-1, new _DependencyGraph.SparseStrategy(0, 0));
    }
  }, {
    key: "copyOrFetchGlobalNamedExpressionVertex",
    value: function copyOrFetchGlobalNamedExpressionVertex(expressionName, sourceVertex, addedNamedExpressions) {
      var expression = this.namedExpressions.namedExpressionForScope(expressionName);

      if (expression === undefined) {
        expression = this.namedExpressions.addNamedExpression(expressionName);
        addedNamedExpressions.push(expression.normalizeExpressionName());

        if (sourceVertex instanceof _DependencyGraph.FormulaCellVertex) {
          var parsingResult = this.parser.fetchCachedResultForAst(sourceVertex.getFormula(this.lazilyTransformingAstService));
          var ast = parsingResult.ast,
              hasVolatileFunction = parsingResult.hasVolatileFunction,
              hasStructuralChangeFunction = parsingResult.hasStructuralChangeFunction,
              dependencies = parsingResult.dependencies;
          this.dependencyGraph.setFormulaToCell(expression.address, ast, (0, _absolutizeDependencies.absolutizeDependencies)(dependencies, expression.address), _ArraySize.ArraySize.scalar(), hasVolatileFunction, hasStructuralChangeFunction);
        } else if (sourceVertex instanceof _DependencyGraph.EmptyCellVertex) {
          this.setCellEmpty(expression.address);
        } else if (sourceVertex instanceof _DependencyGraph.ValueCellVertex) {
          this.setValueToCell(sourceVertex.getValues(), expression.address);
        }
      }

      return this.dependencyGraph.fetchCellOrCreateEmpty(expression.address);
    }
  }]);

  return Operations;
}();

exports.Operations = Operations;

function normalizeRemovedIndexes(indexes) {
  if (indexes.length <= 1) {
    return indexes;
  }

  var sorted = _toConsumableArray(indexes).sort(function (_ref6, _ref7) {
    var _ref8 = _slicedToArray(_ref6, 1),
        a = _ref8[0];

    var _ref9 = _slicedToArray(_ref7, 1),
        b = _ref9[0];

    return a - b;
  });
  /* merge overlapping and adjacent indexes */


  var merged = sorted.reduce(function (acc, _ref10) {
    var _ref11 = _slicedToArray(_ref10, 2),
        startIndex = _ref11[0],
        amount = _ref11[1];

    var previous = acc[acc.length - 1];
    var lastIndex = previous[0] + previous[1];

    if (startIndex <= lastIndex) {
      previous[1] += Math.max(0, amount - (lastIndex - startIndex));
    } else {
      acc.push([startIndex, amount]);
    }

    return acc;
  }, [sorted[0]]);
  /* shift further indexes */

  var shift = 0;

  for (var i = 0; i < merged.length; ++i) {
    merged[i][0] -= shift;
    shift += merged[i][1];
  }

  return merged;
}

function normalizeAddedIndexes(indexes) {
  if (indexes.length <= 1) {
    return indexes;
  }

  var sorted = _toConsumableArray(indexes).sort(function (_ref12, _ref13) {
    var _ref14 = _slicedToArray(_ref12, 1),
        a = _ref14[0];

    var _ref15 = _slicedToArray(_ref13, 1),
        b = _ref15[0];

    return a - b;
  });
  /* merge indexes with same start */


  var merged = sorted.reduce(function (acc, _ref16) {
    var _ref17 = _slicedToArray(_ref16, 2),
        startIndex = _ref17[0],
        amount = _ref17[1];

    var previous = acc[acc.length - 1];

    if (startIndex === previous[0]) {
      previous[1] = Math.max(previous[1], amount);
    } else {
      acc.push([startIndex, amount]);
    }

    return acc;
  }, [sorted[0]]);
  /* shift further indexes */

  var shift = 0;

  for (var i = 0; i < merged.length; ++i) {
    merged[i][0] += shift;
    shift += merged[i][1];
  }

  return merged;
}

function isPositiveInteger(x) {
  return Number.isInteger(x) && x > 0;
}

function isRowOrColumnRange(leftCorner, width, height) {
  return leftCorner.row === 0 && isPositiveInteger(width) && height === Number.POSITIVE_INFINITY || leftCorner.col === 0 && isPositiveInteger(height) && width === Number.POSITIVE_INFINITY;
}

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.AddColumnsTransformer = void 0;

__webpack_require__(144);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AddColumnsTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(AddColumnsTransformer, _Transformer);

  var _super = _createSuper(AddColumnsTransformer);

  function AddColumnsTransformer(columnsSpan) {
    var _this;

    _classCallCheck(this, AddColumnsTransformer);

    _this = _super.call(this);
    _this.columnsSpan = columnsSpan;
    return _this;
  }

  _createClass(AddColumnsTransformer, [{
    key: "sheet",
    get: function get() {
      return this.columnsSpan.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return false;
    }
  }, {
    key: "transformRowRangeAst",
    value: function transformRowRangeAst(ast, _formulaAddress) {
      return ast;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(_start, _end, _formulaAddress) {
      throw Error('Not implemented');
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      var absoluteDependencySheet = (0, _Cell.absoluteSheetReference)(dependencyAddress, formulaAddress); // Case 4 and 5

      if (absoluteDependencySheet !== this.columnsSpan.sheet && formulaAddress.sheet !== this.columnsSpan.sheet) {
        return false;
      }

      var absolutizedDependencyAddress = dependencyAddress.toSimpleColumnAddress(formulaAddress); // Case 3

      if (absoluteDependencySheet === this.columnsSpan.sheet && formulaAddress.sheet !== this.columnsSpan.sheet) {
        if (this.columnsSpan.columnStart <= absolutizedDependencyAddress.col) {
          return dependencyAddress.shiftedByColumns(this.columnsSpan.numberOfColumns);
        } else {
          return false;
        }
      } // Case 2


      if (formulaAddress.sheet === this.columnsSpan.sheet && absoluteDependencySheet !== this.columnsSpan.sheet) {
        if (dependencyAddress.isColumnAbsolute()) {
          return false;
        }

        if (formulaAddress.col < this.columnsSpan.columnStart) {
          return false;
        }

        return dependencyAddress.shiftedByColumns(-this.columnsSpan.numberOfColumns);
      } // Case 1


      if (dependencyAddress.isColumnAbsolute()) {
        if (dependencyAddress.col < this.columnsSpan.columnStart) {
          // Case Aa
          return false;
        } else {
          // Case Ab
          return dependencyAddress.shiftedByColumns(this.columnsSpan.numberOfColumns);
        }
      } else {
        var _absolutizedDependencyAddress = dependencyAddress.toSimpleColumnAddress(formulaAddress);

        if (_absolutizedDependencyAddress.col < this.columnsSpan.columnStart) {
          if (formulaAddress.col < this.columnsSpan.columnStart) {
            // Case Raa
            return false;
          } else {
            // Case Rab
            return dependencyAddress.shiftedByColumns(-this.columnsSpan.numberOfColumns);
          }
        } else {
          if (formulaAddress.col < this.columnsSpan.columnStart) {
            // Case Rba
            return dependencyAddress.shiftedByColumns(this.columnsSpan.numberOfColumns);
          } else {
            // Case Rbb
            return false;
          }
        }
      }
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      if (this.columnsSpan.sheet === address.sheet && this.columnsSpan.columnStart <= address.col) {
        return Object.assign(Object.assign({}, address), {
          col: address.col + this.columnsSpan.numberOfColumns
        });
      } else {
        return address;
      }
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var newStart = this.transformCellAddress(start, formulaAddress);
      var newEnd = this.transformCellAddress(end, formulaAddress);

      if (newStart === _Cell.ErrorType.REF || newEnd === _Cell.ErrorType.REF) {
        return _Cell.ErrorType.REF;
      } else if (newStart || newEnd) {
        return [newStart || start, newEnd || end];
      } else {
        return false;
      }
    }
  }]);

  return AddColumnsTransformer;
}(_Transformer2.Transformer);

exports.AddColumnsTransformer = AddColumnsTransformer;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(1);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.Transformer = void 0;

__webpack_require__(144);

__webpack_require__(150);

var _Cell = __webpack_require__(143);

var _parser = __webpack_require__(169);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Transformer = /*#__PURE__*/function () {
  function Transformer() {
    _classCallCheck(this, Transformer);
  }

  _createClass(Transformer, [{
    key: "performEagerTransformations",
    value: function performEagerTransformations(graph, parser) {
      var _iterator = _createForOfIteratorHelper(graph.arrayFormulaNodes()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;

          var _this$transformSingle = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService)),
              _this$transformSingle2 = _slicedToArray(_this$transformSingle, 2),
              newAst = _this$transformSingle2[0],
              newAddress = _this$transformSingle2[1];

          var cachedAst = parser.rememberNewAst(newAst);
          node.setFormula(cachedAst);
          node.setAddress(newAddress);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "transformSingleAst",
    value: function transformSingleAst(ast, address) {
      var newAst = this.transformAst(ast, address);
      var newAddress = this.fixNodeAddress(address);
      return [newAst, newAddress];
    }
  }, {
    key: "transformAst",
    value: function transformAst(ast, address) {
      var _this = this;

      switch (ast.type) {
        case _parser.AstNodeType.CELL_REFERENCE:
          {
            return this.transformCellReferenceAst(ast, address);
          }

        case _parser.AstNodeType.CELL_RANGE:
          {
            return this.transformCellRangeAst(ast, address);
          }

        case _parser.AstNodeType.COLUMN_RANGE:
          {
            return this.transformColumnRangeAst(ast, address);
          }

        case _parser.AstNodeType.ROW_RANGE:
          {
            return this.transformRowRangeAst(ast, address);
          }

        case _parser.AstNodeType.EMPTY:
        case _parser.AstNodeType.ERROR:
        case _parser.AstNodeType.NUMBER:
        case _parser.AstNodeType.NAMED_EXPRESSION:
        case _parser.AstNodeType.ERROR_WITH_RAW_INPUT:
        case _parser.AstNodeType.STRING:
          {
            return ast;
          }

        case _parser.AstNodeType.PERCENT_OP:
        case _parser.AstNodeType.MINUS_UNARY_OP:
        case _parser.AstNodeType.PLUS_UNARY_OP:
          {
            return Object.assign(Object.assign({}, ast), {
              value: this.transformAst(ast.value, address)
            });
          }

        case _parser.AstNodeType.FUNCTION_CALL:
          {
            return Object.assign(Object.assign({}, ast), {
              procedureName: ast.procedureName,
              args: ast.args.map(function (arg) {
                return _this.transformAst(arg, address);
              })
            });
          }

        case _parser.AstNodeType.PARENTHESIS:
          {
            return Object.assign(Object.assign({}, ast), {
              expression: this.transformAst(ast.expression, address)
            });
          }

        case _parser.AstNodeType.ARRAY:
          {
            return Object.assign(Object.assign({}, ast), {
              args: ast.args.map(function (row) {
                return row.map(function (val) {
                  return _this.transformAst(val, address);
                });
              })
            });
          }

        default:
          {
            return Object.assign(Object.assign({}, ast), {
              left: this.transformAst(ast.left, address),
              right: this.transformAst(ast.right, address)
            });
          }
      }
    }
  }, {
    key: "transformCellReferenceAst",
    value: function transformCellReferenceAst(ast, formulaAddress) {
      var newCellAddress = this.transformCellAddress(ast.reference, formulaAddress);

      if (newCellAddress instanceof _parser.CellAddress) {
        return Object.assign(Object.assign({}, ast), {
          reference: newCellAddress
        });
      } else if (newCellAddress === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformCellRangeAst",
    value: function transformCellRangeAst(ast, formulaAddress) {
      var newRange = this.transformCellRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformColumnRangeAst",
    value: function transformColumnRangeAst(ast, formulaAddress) {
      var newRange = this.transformColumnRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformRowRangeAst",
    value: function transformRowRangeAst(ast, formulaAddress) {
      var newRange = this.transformRowRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }]);

  return Transformer;
}();

exports.Transformer = Transformer;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.AddRowsTransformer = void 0;

__webpack_require__(144);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AddRowsTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(AddRowsTransformer, _Transformer);

  var _super = _createSuper(AddRowsTransformer);

  function AddRowsTransformer(rowsSpan) {
    var _this;

    _classCallCheck(this, AddRowsTransformer);

    _this = _super.call(this);
    _this.rowsSpan = rowsSpan;
    return _this;
  }

  _createClass(AddRowsTransformer, [{
    key: "sheet",
    get: function get() {
      return this.rowsSpan.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return false;
    }
  }, {
    key: "transformColumnRangeAst",
    value: function transformColumnRangeAst(ast, _formulaAddress) {
      return ast;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(_start, _end, _formulaAddress) {
      throw Error('Not implemented');
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      var absoluteDependencySheet = (0, _Cell.absoluteSheetReference)(dependencyAddress, formulaAddress); // Case 4 and 5

      if (absoluteDependencySheet !== this.rowsSpan.sheet && formulaAddress.sheet !== this.rowsSpan.sheet) {
        return false;
      }

      var absolutizedDependencyAddress = dependencyAddress.toSimpleRowAddress(formulaAddress); // Case 3

      if (absoluteDependencySheet === this.rowsSpan.sheet && formulaAddress.sheet !== this.rowsSpan.sheet) {
        if (this.rowsSpan.rowStart <= absolutizedDependencyAddress.row) {
          return dependencyAddress.shiftedByRows(this.rowsSpan.numberOfRows);
        } else {
          return false;
        }
      } // Case 2


      if (formulaAddress.sheet === this.rowsSpan.sheet && absoluteDependencySheet !== this.rowsSpan.sheet) {
        if (dependencyAddress.isRowAbsolute()) {
          return false;
        }

        if (formulaAddress.row < this.rowsSpan.rowStart) {
          return false;
        }

        return dependencyAddress.shiftedByRows(-this.rowsSpan.numberOfRows);
      } // Case 1


      if (dependencyAddress.isRowAbsolute()) {
        if (dependencyAddress.row < this.rowsSpan.rowStart) {
          // Case Aa
          return false;
        } else {
          // Case Ab
          return dependencyAddress.shiftedByRows(this.rowsSpan.numberOfRows);
        }
      } else {
        if (absolutizedDependencyAddress.row < this.rowsSpan.rowStart) {
          if (formulaAddress.row < this.rowsSpan.rowStart) {
            // Case Raa
            return false;
          } else {
            // Case Rab
            return dependencyAddress.shiftedByRows(-this.rowsSpan.numberOfRows);
          }
        } else {
          if (formulaAddress.row < this.rowsSpan.rowStart) {
            // Case Rba
            return dependencyAddress.shiftedByRows(this.rowsSpan.numberOfRows);
          } else {
            // Case Rbb
            return false;
          }
        }
      }
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      if (this.rowsSpan.sheet === address.sheet && this.rowsSpan.rowStart <= address.row) {
        return Object.assign(Object.assign({}, address), {
          row: address.row + this.rowsSpan.numberOfRows
        });
      } else {
        return address;
      }
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var newStart = this.transformCellAddress(start, formulaAddress);
      var newEnd = this.transformCellAddress(end, formulaAddress);

      if (newStart === _Cell.ErrorType.REF || newEnd === _Cell.ErrorType.REF) {
        return _Cell.ErrorType.REF;
      } else if (newStart || newEnd) {
        return [newStart || start, newEnd || end];
      } else {
        return false;
      }
    }
  }]);

  return AddRowsTransformer;
}(_Transformer2.Transformer);

exports.AddRowsTransformer = AddRowsTransformer;

/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.CleanOutOfScopeDependenciesTransformer = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CleanOutOfScopeDependenciesTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(CleanOutOfScopeDependenciesTransformer, _Transformer);

  var _super = _createSuper(CleanOutOfScopeDependenciesTransformer);

  function CleanOutOfScopeDependenciesTransformer(sheet) {
    var _this;

    _classCallCheck(this, CleanOutOfScopeDependenciesTransformer);

    _this = _super.call(this);
    _this.sheet = sheet;
    return _this;
  }

  _createClass(CleanOutOfScopeDependenciesTransformer, [{
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      return address;
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      return dependencyAddress.isInvalid(formulaAddress) ? _Cell.ErrorType.REF : false;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? _Cell.ErrorType.REF : false;
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, end, formulaAddress) {
      return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? _Cell.ErrorType.REF : false;
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, end, formulaAddress) {
      return start.isInvalid(formulaAddress) || end.isInvalid(formulaAddress) ? _Cell.ErrorType.REF : false;
    }
  }]);

  return CleanOutOfScopeDependenciesTransformer;
}(_Transformer2.Transformer);

exports.CleanOutOfScopeDependenciesTransformer = CleanOutOfScopeDependenciesTransformer;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.MoveCellsTransformer = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _parser = __webpack_require__(169);

var _RowAddress = __webpack_require__(227);

var _Transformer3 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MoveCellsTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(MoveCellsTransformer, _Transformer);

  var _super = _createSuper(MoveCellsTransformer);

  function MoveCellsTransformer(sourceRange, toRight, toBottom, toSheet) {
    var _this;

    _classCallCheck(this, MoveCellsTransformer);

    _this = _super.call(this);
    _this.sourceRange = sourceRange;
    _this.toRight = toRight;
    _this.toBottom = toBottom;
    _this.toSheet = toSheet;
    _this.dependentFormulaTransformer = new DependentFormulaTransformer(sourceRange, toRight, toBottom, toSheet);
    return _this;
  }

  _createClass(MoveCellsTransformer, [{
    key: "sheet",
    get: function get() {
      return this.sourceRange.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "transformSingleAst",
    value: function transformSingleAst(ast, address) {
      if (this.sourceRange.addressInRange(address)) {
        var newAst = this.transformAst(ast, address);
        return [newAst, this.fixNodeAddress(address)];
      } else {
        return this.dependentFormulaTransformer.transformSingleAst(ast, address);
      }
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      return (0, _Cell.simpleCellAddress)(this.toSheet, address.col + this.toRight, address.row + this.toBottom);
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      return this.transformAddress(dependencyAddress, formulaAddress);
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformAddress",
    value: function transformAddress(dependencyAddress, formulaAddress) {
      var sourceRange = this.sourceRange;

      if (dependencyAddress instanceof _parser.CellAddress) {
        var absoluteDependencyAddress = dependencyAddress.toSimpleCellAddress(formulaAddress);

        if (sourceRange.addressInRange(absoluteDependencyAddress)) {
          // If dependency is internal, move only absolute dimensions
          return dependencyAddress.shiftAbsoluteDimensions(this.toRight, this.toBottom);
        }
      }

      return dependencyAddress.shiftRelativeDimensions(-this.toRight, -this.toBottom);
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var sourceRange = this.sourceRange;

      if (start instanceof _parser.CellAddress && end instanceof _parser.CellAddress) {
        var absoluteStart = start.toSimpleCellAddress(formulaAddress);
        var absoluteEnd = end.toSimpleCellAddress(formulaAddress);

        if (sourceRange.addressInRange(absoluteStart) && sourceRange.addressInRange(absoluteEnd)) {
          return [start.shiftAbsoluteDimensions(this.toRight, this.toBottom), end.shiftAbsoluteDimensions(this.toRight, this.toBottom)];
        }
      }

      return [start.shiftRelativeDimensions(-this.toRight, -this.toBottom), end.shiftRelativeDimensions(-this.toRight, -this.toBottom)];
    }
  }]);

  return MoveCellsTransformer;
}(_Transformer3.Transformer);

exports.MoveCellsTransformer = MoveCellsTransformer;

var DependentFormulaTransformer = /*#__PURE__*/function (_Transformer2) {
  _inherits(DependentFormulaTransformer, _Transformer2);

  var _super2 = _createSuper(DependentFormulaTransformer);

  function DependentFormulaTransformer(sourceRange, toRight, toBottom, toSheet) {
    var _this2;

    _classCallCheck(this, DependentFormulaTransformer);

    _this2 = _super2.call(this);
    _this2.sourceRange = sourceRange;
    _this2.toRight = toRight;
    _this2.toBottom = toBottom;
    _this2.toSheet = toSheet;
    return _this2;
  }

  _createClass(DependentFormulaTransformer, [{
    key: "sheet",
    get: function get() {
      return this.sourceRange.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      return address;
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      if (this.shouldMove(dependencyAddress, formulaAddress)) {
        return dependencyAddress.moved(this.toSheet, this.toRight, this.toBottom);
      }

      return false;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "shouldMove",
    value: function shouldMove(dependencyAddress, formulaAddress) {
      if (dependencyAddress instanceof _parser.CellAddress) {
        return this.sourceRange.addressInRange(dependencyAddress.toSimpleCellAddress(formulaAddress));
      } else if (dependencyAddress instanceof _RowAddress.RowAddress) {
        return this.sourceRange.rowInRange(dependencyAddress.toSimpleRowAddress(formulaAddress)) && !this.sourceRange.isFinite();
      } else {
        return this.sourceRange.columnInRange(dependencyAddress.toSimpleColumnAddress(formulaAddress)) && !this.sourceRange.isFinite();
      }
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var newStart = this.transformCellAddress(start, formulaAddress);
      var newEnd = this.transformCellAddress(end, formulaAddress);

      if (newStart && newEnd) {
        return [newStart, newEnd];
      }

      return false;
    }
  }]);

  return DependentFormulaTransformer;
}(_Transformer3.Transformer);

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RemoveColumnsTransformer = void 0;

__webpack_require__(144);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RemoveColumnsTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(RemoveColumnsTransformer, _Transformer);

  var _super = _createSuper(RemoveColumnsTransformer);

  function RemoveColumnsTransformer(columnsSpan) {
    var _this;

    _classCallCheck(this, RemoveColumnsTransformer);

    _this = _super.call(this);
    _this.columnsSpan = columnsSpan;
    return _this;
  }

  _createClass(RemoveColumnsTransformer, [{
    key: "sheet",
    get: function get() {
      return this.columnsSpan.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "transformRowRangeAst",
    value: function transformRowRangeAst(ast, _formulaAddress) {
      return ast;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(_start, _end, _formulaAddress) {
      throw Error('Not implemented');
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      var absoluteDependencySheet = (0, _Cell.absoluteSheetReference)(dependencyAddress, formulaAddress); // Case 4

      if (this.columnsSpan.sheet !== formulaAddress.sheet && this.columnsSpan.sheet !== absoluteDependencySheet) {
        return false;
      } // Case 3 -- removed column in same sheet where dependency is but formula in different


      if (this.columnsSpan.sheet !== formulaAddress.sheet && this.columnsSpan.sheet === absoluteDependencySheet) {
        var absoluteDependencyAddress = dependencyAddress.toSimpleColumnAddress(formulaAddress);

        if (absoluteDependencyAddress.col < this.columnsSpan.columnStart) {
          // 3.ARa
          return false;
        } else if (absoluteDependencyAddress.col > this.columnsSpan.columnEnd) {
          // 3.ARb
          return dependencyAddress.shiftedByColumns(-this.columnsSpan.numberOfColumns);
        }
      } // Case 2 -- removed column in same sheet where formula but dependency in different sheet


      if (this.columnsSpan.sheet === formulaAddress.sheet && this.columnsSpan.sheet !== absoluteDependencySheet) {
        if (dependencyAddress.isColumnAbsolute()) {
          // 2.A
          return false;
        } else {
          if (formulaAddress.col < this.columnsSpan.columnStart) {
            // 2.Ra
            return false;
          } else if (formulaAddress.col > this.columnsSpan.columnEnd) {
            // 2.Rb
            return dependencyAddress.shiftedByColumns(this.columnsSpan.numberOfColumns);
          }
        }
      } // Case 1 -- same sheet


      if (this.columnsSpan.sheet === formulaAddress.sheet && this.columnsSpan.sheet === absoluteDependencySheet) {
        if (dependencyAddress.isColumnAbsolute()) {
          if (dependencyAddress.col < this.columnsSpan.columnStart) {
            // 1.Aa
            return false;
          } else if (dependencyAddress.col > this.columnsSpan.columnEnd) {
            // 1.Ab
            return dependencyAddress.shiftedByColumns(-this.columnsSpan.numberOfColumns);
          }
        } else {
          var _absoluteDependencyAddress = dependencyAddress.toSimpleColumnAddress(formulaAddress);

          if (_absoluteDependencyAddress.col < this.columnsSpan.columnStart) {
            if (formulaAddress.col < this.columnsSpan.columnStart) {
              // 1.Raa
              return false;
            } else if (formulaAddress.col > this.columnsSpan.columnEnd) {
              // 1.Rab
              return dependencyAddress.shiftedByColumns(this.columnsSpan.numberOfColumns);
            }
          } else if (_absoluteDependencyAddress.col > this.columnsSpan.columnEnd) {
            if (formulaAddress.col < this.columnsSpan.columnStart) {
              // 1.Rba
              return dependencyAddress.shiftedByColumns(-this.columnsSpan.numberOfColumns);
            } else if (formulaAddress.col > this.columnsSpan.columnEnd) {
              // 1.Rbb
              return false;
            }
          }
        }
      } // 1.Ac, 1.Rca, 1.Rcb, 3.Ac, 3.Rca, 3.Rcb


      return _Cell.ErrorType.REF;
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      if (this.columnsSpan.sheet === address.sheet && this.columnsSpan.columnStart <= address.col) {
        return Object.assign(Object.assign({}, address), {
          col: address.col - this.columnsSpan.numberOfColumns
        });
      } else {
        return address;
      }
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var startSheet = (0, _Cell.absoluteSheetReference)(start, formulaAddress);
      var actualStart = start;
      var actualEnd = end;

      if (this.columnsSpan.sheet === startSheet) {
        var startSCA = start.toSimpleColumnAddress(formulaAddress);
        var endSCA = end.toSimpleColumnAddress(formulaAddress);

        if (this.columnsSpan.columnStart <= startSCA.col && this.columnsSpan.columnEnd >= endSCA.col) {
          return _Cell.ErrorType.REF;
        }

        if (startSCA.col >= this.columnsSpan.columnStart && startSCA.col <= this.columnsSpan.columnEnd) {
          actualStart = start.shiftedByColumns(this.columnsSpan.columnEnd - startSCA.col + 1);
        }

        if (endSCA.col >= this.columnsSpan.columnStart && endSCA.col <= this.columnsSpan.columnEnd) {
          actualEnd = end.shiftedByColumns(-(endSCA.col - this.columnsSpan.columnStart + 1));
        }
      }

      var newStart = this.transformCellAddress(actualStart, formulaAddress);
      var newEnd = this.transformCellAddress(actualEnd, formulaAddress);

      if (newStart === false && newEnd === false) {
        return [actualStart, actualEnd];
      } else if (newStart === _Cell.ErrorType.REF || newEnd === _Cell.ErrorType.REF) {
        throw Error('Cannot happen');
      } else {
        return [newStart || actualStart, newEnd || actualEnd];
      }
    }
  }]);

  return RemoveColumnsTransformer;
}(_Transformer2.Transformer);

exports.RemoveColumnsTransformer = RemoveColumnsTransformer;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RemoveRowsTransformer = void 0;

__webpack_require__(144);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RemoveRowsTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(RemoveRowsTransformer, _Transformer);

  var _super = _createSuper(RemoveRowsTransformer);

  function RemoveRowsTransformer(rowsSpan) {
    var _this;

    _classCallCheck(this, RemoveRowsTransformer);

    _this = _super.call(this);
    _this.rowsSpan = rowsSpan;
    return _this;
  }

  _createClass(RemoveRowsTransformer, [{
    key: "sheet",
    get: function get() {
      return this.rowsSpan.sheet;
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "transformColumnRangeAst",
    value: function transformColumnRangeAst(ast, _formulaAddress) {
      return ast;
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, formulaAddress) {
      var absoluteDependencySheet = (0, _Cell.absoluteSheetReference)(dependencyAddress, formulaAddress); // Case 4

      if (this.rowsSpan.sheet !== formulaAddress.sheet && this.rowsSpan.sheet !== absoluteDependencySheet) {
        return false;
      } // Case 3 -- removed row in same sheet where dependency is but formula in different


      if (this.rowsSpan.sheet !== formulaAddress.sheet && this.rowsSpan.sheet === absoluteDependencySheet) {
        var absoluteDependencyAddress = dependencyAddress.toSimpleRowAddress(formulaAddress);

        if (absoluteDependencyAddress.row < this.rowsSpan.rowStart) {
          // 3.ARa
          return false;
        } else if (absoluteDependencyAddress.row > this.rowsSpan.rowEnd) {
          // 3.ARb
          return dependencyAddress.shiftedByRows(-this.rowsSpan.numberOfRows);
        }
      } // Case 2 -- removed row in same sheet where formula but dependency in different sheet


      if (this.rowsSpan.sheet === formulaAddress.sheet && this.rowsSpan.sheet !== absoluteDependencySheet) {
        if (dependencyAddress.isRowAbsolute()) {
          // 2.A
          return false;
        } else {
          if (formulaAddress.row < this.rowsSpan.rowStart) {
            // 2.Ra
            return false;
          } else if (formulaAddress.row > this.rowsSpan.rowEnd) {
            // 2.Rb
            return dependencyAddress.shiftedByRows(this.rowsSpan.numberOfRows);
          }
        }
      } // Case 1 -- same sheet


      if (this.rowsSpan.sheet === formulaAddress.sheet && this.rowsSpan.sheet === absoluteDependencySheet) {
        if (dependencyAddress.isRowAbsolute()) {
          if (dependencyAddress.row < this.rowsSpan.rowStart) {
            // 1.Aa
            return false;
          } else if (dependencyAddress.row > this.rowsSpan.rowEnd) {
            // 1.Ab
            return dependencyAddress.shiftedByRows(-this.rowsSpan.numberOfRows);
          }
        } else {
          var _absoluteDependencyAddress = dependencyAddress.toSimpleRowAddress(formulaAddress);

          if (_absoluteDependencyAddress.row < this.rowsSpan.rowStart) {
            if (formulaAddress.row < this.rowsSpan.rowStart) {
              // 1.Raa
              return false;
            } else if (formulaAddress.row > this.rowsSpan.rowEnd) {
              // 1.Rab
              return dependencyAddress.shiftedByRows(this.rowsSpan.numberOfRows);
            }
          } else if (_absoluteDependencyAddress.row > this.rowsSpan.rowEnd) {
            if (formulaAddress.row < this.rowsSpan.rowStart) {
              // 1.Rba
              return dependencyAddress.shiftedByRows(-this.rowsSpan.numberOfRows);
            } else if (formulaAddress.row > this.rowsSpan.rowEnd) {
              // 1.Rbb
              return false;
            }
          }
        }
      } // 1.Ac, 1.Rca, 1.Rcb, 3.Ac, 3.Rca, 3.Rcb


      return _Cell.ErrorType.REF;
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, end, formulaAddress) {
      return this.transformRange(start, end, formulaAddress);
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(_start, _end, _formulaAddress) {
      throw Error('Not implemented');
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      if (this.rowsSpan.sheet === address.sheet && this.rowsSpan.rowStart <= address.row) {
        return Object.assign(Object.assign({}, address), {
          row: address.row - this.rowsSpan.numberOfRows
        });
      } else {
        return address;
      }
    }
  }, {
    key: "transformRange",
    value: function transformRange(start, end, formulaAddress) {
      var startSheet = (0, _Cell.absoluteSheetReference)(start, formulaAddress);
      var actualStart = start;
      var actualEnd = end;

      if (this.rowsSpan.sheet === startSheet) {
        var startSCA = start.toSimpleRowAddress(formulaAddress);
        var endSCA = end.toSimpleRowAddress(formulaAddress);

        if (this.rowsSpan.rowStart <= startSCA.row && this.rowsSpan.rowEnd >= endSCA.row) {
          return _Cell.ErrorType.REF;
        }

        if (startSCA.row >= this.rowsSpan.rowStart && startSCA.row <= this.rowsSpan.rowEnd) {
          actualStart = start.shiftedByRows(this.rowsSpan.rowEnd - startSCA.row + 1);
        }

        if (endSCA.row >= this.rowsSpan.rowStart && endSCA.row <= this.rowsSpan.rowEnd) {
          actualEnd = end.shiftedByRows(-(endSCA.row - this.rowsSpan.rowStart + 1));
        }
      }

      var newStart = this.transformCellAddress(actualStart, formulaAddress);
      var newEnd = this.transformCellAddress(actualEnd, formulaAddress);

      if (newStart === false && newEnd === false) {
        return [actualStart, actualEnd];
      } else if (newStart === _Cell.ErrorType.REF || newEnd === _Cell.ErrorType.REF) {
        return _Cell.ErrorType.REF;
      } else {
        return [newStart || actualStart, newEnd || actualEnd];
      }
    }
  }]);

  return RemoveRowsTransformer;
}(_Transformer2.Transformer);

exports.RemoveRowsTransformer = RemoveRowsTransformer;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.RemoveSheetTransformer = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _Transformer2 = __webpack_require__(314);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RemoveSheetTransformer = /*#__PURE__*/function (_Transformer) {
  _inherits(RemoveSheetTransformer, _Transformer);

  var _super = _createSuper(RemoveSheetTransformer);

  function RemoveSheetTransformer(sheet) {
    var _this;

    _classCallCheck(this, RemoveSheetTransformer);

    _this = _super.call(this);
    _this.sheet = sheet;
    return _this;
  }

  _createClass(RemoveSheetTransformer, [{
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }, {
    key: "performEagerTransformations",
    value: function performEagerTransformations(graph, _parser) {
      var _iterator = _createForOfIteratorHelper(graph.arrayFormulaNodes()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;

          var _this$transformSingle = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService)),
              _this$transformSingle2 = _slicedToArray(_this$transformSingle, 1),
              newAst = _this$transformSingle2[0];

          node.setFormula(newAst);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "fixNodeAddress",
    value: function fixNodeAddress(address) {
      return address;
    }
  }, {
    key: "transformCellAddress",
    value: function transformCellAddress(dependencyAddress, _formulaAddress) {
      return this.transformAddress(dependencyAddress);
    }
  }, {
    key: "transformCellRange",
    value: function transformCellRange(start, _end, _formulaAddress) {
      return this.transformAddress(start);
    }
  }, {
    key: "transformColumnRange",
    value: function transformColumnRange(start, _end, _formulaAddress) {
      return this.transformAddress(start);
    }
  }, {
    key: "transformRowRange",
    value: function transformRowRange(start, _end, _formulaAddress) {
      return this.transformAddress(start);
    }
  }, {
    key: "transformAddress",
    value: function transformAddress(address) {
      if (address.sheet === this.sheet) {
        return _Cell.ErrorType.REF;
      }

      return false;
    }
  }]);

  return RemoveSheetTransformer;
}(_Transformer2.Transformer);

exports.RemoveSheetTransformer = RemoveSheetTransformer;

/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.findBoundaries = findBoundaries;
exports.validateAsSheet = validateAsSheet;

var _errors = __webpack_require__(165);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function validateAsSheet(sheet) {
  if (!Array.isArray(sheet)) {
    throw new _errors.InvalidArgumentsError('an array of arrays.');
  }

  for (var i = 0; i < sheet.length; i++) {
    if (!Array.isArray(sheet[i])) {
      throw new _errors.InvalidArgumentsError('an array of arrays.');
    }
  }
}
/**
 * Returns actual width, height and fill ratio of a sheet
 *
 * @param sheet - two-dimmensional array sheet representation
 */


function findBoundaries(sheet) {
  var width = 0;
  var height = 0;
  var cellsCount = 0;

  for (var currentRow = 0; currentRow < sheet.length; currentRow++) {
    var currentRowWidth = 0;

    for (var currentCol = 0; currentCol < sheet[currentRow].length; currentCol++) {
      var currentValue = sheet[currentRow][currentCol];

      if (currentValue === undefined || currentValue === null) {
        continue;
      }

      currentRowWidth = currentCol + 1;
      ++cellsCount;
    }

    width = Math.max(width, currentRowWidth);

    if (currentRowWidth > 0) {
      height = currentRow + 1;
    }
  }

  var sheetSize = width * height;
  return {
    height: height,
    width: width,
    fill: sheetSize === 0 ? 0 : cellsCount / sheetSize
  };
}

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(137);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.UndoRedo = exports.SetSheetContentUndoEntry = exports.SetRowOrderUndoEntry = exports.SetColumnOrderUndoEntry = exports.SetCellContentsUndoEntry = exports.RenameSheetUndoEntry = exports.RemoveSheetUndoEntry = exports.RemoveRowsUndoEntry = exports.RemoveNamedExpressionUndoEntry = exports.RemoveColumnsUndoEntry = exports.PasteUndoEntry = exports.MoveRowsUndoEntry = exports.MoveColumnsUndoEntry = exports.MoveCellsUndoEntry = exports.ClearSheetUndoEntry = exports.ChangeNamedExpressionUndoEntry = exports.BatchUndoEntry = exports.BaseUndoEntry = exports.AddSheetUndoEntry = exports.AddRowsUndoEntry = exports.AddNamedExpressionUndoEntry = exports.AddColumnsUndoEntry = void 0;

__webpack_require__(149);

__webpack_require__(81);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(267);

var _Cell = __webpack_require__(143);

var _Operations = __webpack_require__(312);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var BaseUndoEntry = /*#__PURE__*/_createClass(function BaseUndoEntry() {
  _classCallCheck(this, BaseUndoEntry);
});

exports.BaseUndoEntry = BaseUndoEntry;

var RemoveRowsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry) {
  _inherits(RemoveRowsUndoEntry, _BaseUndoEntry);

  var _super = _createSuper(RemoveRowsUndoEntry);

  function RemoveRowsUndoEntry(command, rowsRemovals) {
    var _this;

    _classCallCheck(this, RemoveRowsUndoEntry);

    _this = _super.call(this);
    _this.command = command;
    _this.rowsRemovals = rowsRemovals;
    return _this;
  }

  _createClass(RemoveRowsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoRemoveRows(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoRemoveRows(this);
    }
  }]);

  return RemoveRowsUndoEntry;
}(BaseUndoEntry);

exports.RemoveRowsUndoEntry = RemoveRowsUndoEntry;

var MoveCellsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry2) {
  _inherits(MoveCellsUndoEntry, _BaseUndoEntry2);

  var _super2 = _createSuper(MoveCellsUndoEntry);

  function MoveCellsUndoEntry(sourceLeftCorner, width, height, destinationLeftCorner, overwrittenCellsData, addedGlobalNamedExpressions, version) {
    var _this2;

    _classCallCheck(this, MoveCellsUndoEntry);

    _this2 = _super2.call(this);
    _this2.sourceLeftCorner = sourceLeftCorner;
    _this2.width = width;
    _this2.height = height;
    _this2.destinationLeftCorner = destinationLeftCorner;
    _this2.overwrittenCellsData = overwrittenCellsData;
    _this2.addedGlobalNamedExpressions = addedGlobalNamedExpressions;
    _this2.version = version;
    return _this2;
  }

  _createClass(MoveCellsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoMoveCells(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoMoveCells(this);
    }
  }]);

  return MoveCellsUndoEntry;
}(BaseUndoEntry);

exports.MoveCellsUndoEntry = MoveCellsUndoEntry;

var AddRowsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry3) {
  _inherits(AddRowsUndoEntry, _BaseUndoEntry3);

  var _super3 = _createSuper(AddRowsUndoEntry);

  function AddRowsUndoEntry(command) {
    var _this3;

    _classCallCheck(this, AddRowsUndoEntry);

    _this3 = _super3.call(this);
    _this3.command = command;
    return _this3;
  }

  _createClass(AddRowsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoAddRows(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoAddRows(this);
    }
  }]);

  return AddRowsUndoEntry;
}(BaseUndoEntry);

exports.AddRowsUndoEntry = AddRowsUndoEntry;

var SetRowOrderUndoEntry = /*#__PURE__*/function (_BaseUndoEntry4) {
  _inherits(SetRowOrderUndoEntry, _BaseUndoEntry4);

  var _super4 = _createSuper(SetRowOrderUndoEntry);

  function SetRowOrderUndoEntry(sheetId, rowMapping, oldContent) {
    var _this4;

    _classCallCheck(this, SetRowOrderUndoEntry);

    _this4 = _super4.call(this);
    _this4.sheetId = sheetId;
    _this4.rowMapping = rowMapping;
    _this4.oldContent = oldContent;
    return _this4;
  }

  _createClass(SetRowOrderUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoSetRowOrder(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoSetRowOrder(this);
    }
  }]);

  return SetRowOrderUndoEntry;
}(BaseUndoEntry);

exports.SetRowOrderUndoEntry = SetRowOrderUndoEntry;

var SetColumnOrderUndoEntry = /*#__PURE__*/function (_BaseUndoEntry5) {
  _inherits(SetColumnOrderUndoEntry, _BaseUndoEntry5);

  var _super5 = _createSuper(SetColumnOrderUndoEntry);

  function SetColumnOrderUndoEntry(sheetId, columnMapping, oldContent) {
    var _this5;

    _classCallCheck(this, SetColumnOrderUndoEntry);

    _this5 = _super5.call(this);
    _this5.sheetId = sheetId;
    _this5.columnMapping = columnMapping;
    _this5.oldContent = oldContent;
    return _this5;
  }

  _createClass(SetColumnOrderUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoSetColumnOrder(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoSetColumnOrder(this);
    }
  }]);

  return SetColumnOrderUndoEntry;
}(BaseUndoEntry);

exports.SetColumnOrderUndoEntry = SetColumnOrderUndoEntry;

var SetSheetContentUndoEntry = /*#__PURE__*/function (_BaseUndoEntry6) {
  _inherits(SetSheetContentUndoEntry, _BaseUndoEntry6);

  var _super6 = _createSuper(SetSheetContentUndoEntry);

  function SetSheetContentUndoEntry(sheetId, oldSheetContent, newSheetContent) {
    var _this6;

    _classCallCheck(this, SetSheetContentUndoEntry);

    _this6 = _super6.call(this);
    _this6.sheetId = sheetId;
    _this6.oldSheetContent = oldSheetContent;
    _this6.newSheetContent = newSheetContent;
    return _this6;
  }

  _createClass(SetSheetContentUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoSetSheetContent(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoSetSheetContent(this);
    }
  }]);

  return SetSheetContentUndoEntry;
}(BaseUndoEntry);

exports.SetSheetContentUndoEntry = SetSheetContentUndoEntry;

var MoveRowsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry7) {
  _inherits(MoveRowsUndoEntry, _BaseUndoEntry7);

  var _super7 = _createSuper(MoveRowsUndoEntry);

  function MoveRowsUndoEntry(sheet, startRow, numberOfRows, targetRow, version) {
    var _this7;

    _classCallCheck(this, MoveRowsUndoEntry);

    _this7 = _super7.call(this);
    _this7.sheet = sheet;
    _this7.startRow = startRow;
    _this7.numberOfRows = numberOfRows;
    _this7.targetRow = targetRow;
    _this7.version = version;
    _this7.undoStart = _this7.startRow < _this7.targetRow ? _this7.targetRow - _this7.numberOfRows : _this7.targetRow;
    _this7.undoEnd = _this7.startRow > _this7.targetRow ? _this7.startRow + _this7.numberOfRows : _this7.startRow;
    return _this7;
  }

  _createClass(MoveRowsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoMoveRows(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoMoveRows(this);
    }
  }]);

  return MoveRowsUndoEntry;
}(BaseUndoEntry);

exports.MoveRowsUndoEntry = MoveRowsUndoEntry;

var MoveColumnsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry8) {
  _inherits(MoveColumnsUndoEntry, _BaseUndoEntry8);

  var _super8 = _createSuper(MoveColumnsUndoEntry);

  function MoveColumnsUndoEntry(sheet, startColumn, numberOfColumns, targetColumn, version) {
    var _this8;

    _classCallCheck(this, MoveColumnsUndoEntry);

    _this8 = _super8.call(this);
    _this8.sheet = sheet;
    _this8.startColumn = startColumn;
    _this8.numberOfColumns = numberOfColumns;
    _this8.targetColumn = targetColumn;
    _this8.version = version;
    _this8.undoStart = _this8.startColumn < _this8.targetColumn ? _this8.targetColumn - _this8.numberOfColumns : _this8.targetColumn;
    _this8.undoEnd = _this8.startColumn > _this8.targetColumn ? _this8.startColumn + _this8.numberOfColumns : _this8.startColumn;
    return _this8;
  }

  _createClass(MoveColumnsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoMoveColumns(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoMoveColumns(this);
    }
  }]);

  return MoveColumnsUndoEntry;
}(BaseUndoEntry);

exports.MoveColumnsUndoEntry = MoveColumnsUndoEntry;

var AddColumnsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry9) {
  _inherits(AddColumnsUndoEntry, _BaseUndoEntry9);

  var _super9 = _createSuper(AddColumnsUndoEntry);

  function AddColumnsUndoEntry(command) {
    var _this9;

    _classCallCheck(this, AddColumnsUndoEntry);

    _this9 = _super9.call(this);
    _this9.command = command;
    return _this9;
  }

  _createClass(AddColumnsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoAddColumns(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoAddColumns(this);
    }
  }]);

  return AddColumnsUndoEntry;
}(BaseUndoEntry);

exports.AddColumnsUndoEntry = AddColumnsUndoEntry;

var RemoveColumnsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry10) {
  _inherits(RemoveColumnsUndoEntry, _BaseUndoEntry10);

  var _super10 = _createSuper(RemoveColumnsUndoEntry);

  function RemoveColumnsUndoEntry(command, columnsRemovals) {
    var _this10;

    _classCallCheck(this, RemoveColumnsUndoEntry);

    _this10 = _super10.call(this);
    _this10.command = command;
    _this10.columnsRemovals = columnsRemovals;
    return _this10;
  }

  _createClass(RemoveColumnsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoRemoveColumns(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoRemoveColumns(this);
    }
  }]);

  return RemoveColumnsUndoEntry;
}(BaseUndoEntry);

exports.RemoveColumnsUndoEntry = RemoveColumnsUndoEntry;

var AddSheetUndoEntry = /*#__PURE__*/function (_BaseUndoEntry11) {
  _inherits(AddSheetUndoEntry, _BaseUndoEntry11);

  var _super11 = _createSuper(AddSheetUndoEntry);

  function AddSheetUndoEntry(sheetName) {
    var _this11;

    _classCallCheck(this, AddSheetUndoEntry);

    _this11 = _super11.call(this);
    _this11.sheetName = sheetName;
    return _this11;
  }

  _createClass(AddSheetUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoAddSheet(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoAddSheet(this);
    }
  }]);

  return AddSheetUndoEntry;
}(BaseUndoEntry);

exports.AddSheetUndoEntry = AddSheetUndoEntry;

var RemoveSheetUndoEntry = /*#__PURE__*/function (_BaseUndoEntry12) {
  _inherits(RemoveSheetUndoEntry, _BaseUndoEntry12);

  var _super12 = _createSuper(RemoveSheetUndoEntry);

  function RemoveSheetUndoEntry(sheetName, sheetId, oldSheetContent, scopedNamedExpressions, version) {
    var _this12;

    _classCallCheck(this, RemoveSheetUndoEntry);

    _this12 = _super12.call(this);
    _this12.sheetName = sheetName;
    _this12.sheetId = sheetId;
    _this12.oldSheetContent = oldSheetContent;
    _this12.scopedNamedExpressions = scopedNamedExpressions;
    _this12.version = version;
    return _this12;
  }

  _createClass(RemoveSheetUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoRemoveSheet(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoRemoveSheet(this);
    }
  }]);

  return RemoveSheetUndoEntry;
}(BaseUndoEntry);

exports.RemoveSheetUndoEntry = RemoveSheetUndoEntry;

var RenameSheetUndoEntry = /*#__PURE__*/function (_BaseUndoEntry13) {
  _inherits(RenameSheetUndoEntry, _BaseUndoEntry13);

  var _super13 = _createSuper(RenameSheetUndoEntry);

  function RenameSheetUndoEntry(sheetId, oldName, newName) {
    var _this13;

    _classCallCheck(this, RenameSheetUndoEntry);

    _this13 = _super13.call(this);
    _this13.sheetId = sheetId;
    _this13.oldName = oldName;
    _this13.newName = newName;
    return _this13;
  }

  _createClass(RenameSheetUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoRenameSheet(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoRenameSheet(this);
    }
  }]);

  return RenameSheetUndoEntry;
}(BaseUndoEntry);

exports.RenameSheetUndoEntry = RenameSheetUndoEntry;

var ClearSheetUndoEntry = /*#__PURE__*/function (_BaseUndoEntry14) {
  _inherits(ClearSheetUndoEntry, _BaseUndoEntry14);

  var _super14 = _createSuper(ClearSheetUndoEntry);

  function ClearSheetUndoEntry(sheetId, oldSheetContent) {
    var _this14;

    _classCallCheck(this, ClearSheetUndoEntry);

    _this14 = _super14.call(this);
    _this14.sheetId = sheetId;
    _this14.oldSheetContent = oldSheetContent;
    return _this14;
  }

  _createClass(ClearSheetUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoClearSheet(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoClearSheet(this);
    }
  }]);

  return ClearSheetUndoEntry;
}(BaseUndoEntry);

exports.ClearSheetUndoEntry = ClearSheetUndoEntry;

var SetCellContentsUndoEntry = /*#__PURE__*/function (_BaseUndoEntry15) {
  _inherits(SetCellContentsUndoEntry, _BaseUndoEntry15);

  var _super15 = _createSuper(SetCellContentsUndoEntry);

  function SetCellContentsUndoEntry(cellContents) {
    var _this15;

    _classCallCheck(this, SetCellContentsUndoEntry);

    _this15 = _super15.call(this);
    _this15.cellContents = cellContents;
    return _this15;
  }

  _createClass(SetCellContentsUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoSetCellContents(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoSetCellContents(this);
    }
  }]);

  return SetCellContentsUndoEntry;
}(BaseUndoEntry);

exports.SetCellContentsUndoEntry = SetCellContentsUndoEntry;

var PasteUndoEntry = /*#__PURE__*/function (_BaseUndoEntry16) {
  _inherits(PasteUndoEntry, _BaseUndoEntry16);

  var _super16 = _createSuper(PasteUndoEntry);

  function PasteUndoEntry(targetLeftCorner, oldContent, newContent, addedGlobalNamedExpressions) {
    var _this16;

    _classCallCheck(this, PasteUndoEntry);

    _this16 = _super16.call(this);
    _this16.targetLeftCorner = targetLeftCorner;
    _this16.oldContent = oldContent;
    _this16.newContent = newContent;
    _this16.addedGlobalNamedExpressions = addedGlobalNamedExpressions;
    return _this16;
  }

  _createClass(PasteUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoPaste(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoPaste(this);
    }
  }]);

  return PasteUndoEntry;
}(BaseUndoEntry);

exports.PasteUndoEntry = PasteUndoEntry;

var AddNamedExpressionUndoEntry = /*#__PURE__*/function (_BaseUndoEntry17) {
  _inherits(AddNamedExpressionUndoEntry, _BaseUndoEntry17);

  var _super17 = _createSuper(AddNamedExpressionUndoEntry);

  function AddNamedExpressionUndoEntry(name, newContent, scope, options) {
    var _this17;

    _classCallCheck(this, AddNamedExpressionUndoEntry);

    _this17 = _super17.call(this);
    _this17.name = name;
    _this17.newContent = newContent;
    _this17.scope = scope;
    _this17.options = options;
    return _this17;
  }

  _createClass(AddNamedExpressionUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoAddNamedExpression(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoAddNamedExpression(this);
    }
  }]);

  return AddNamedExpressionUndoEntry;
}(BaseUndoEntry);

exports.AddNamedExpressionUndoEntry = AddNamedExpressionUndoEntry;

var RemoveNamedExpressionUndoEntry = /*#__PURE__*/function (_BaseUndoEntry18) {
  _inherits(RemoveNamedExpressionUndoEntry, _BaseUndoEntry18);

  var _super18 = _createSuper(RemoveNamedExpressionUndoEntry);

  function RemoveNamedExpressionUndoEntry(namedExpression, content, scope) {
    var _this18;

    _classCallCheck(this, RemoveNamedExpressionUndoEntry);

    _this18 = _super18.call(this);
    _this18.namedExpression = namedExpression;
    _this18.content = content;
    _this18.scope = scope;
    return _this18;
  }

  _createClass(RemoveNamedExpressionUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoRemoveNamedExpression(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoRemoveNamedExpression(this);
    }
  }]);

  return RemoveNamedExpressionUndoEntry;
}(BaseUndoEntry);

exports.RemoveNamedExpressionUndoEntry = RemoveNamedExpressionUndoEntry;

var ChangeNamedExpressionUndoEntry = /*#__PURE__*/function (_BaseUndoEntry19) {
  _inherits(ChangeNamedExpressionUndoEntry, _BaseUndoEntry19);

  var _super19 = _createSuper(ChangeNamedExpressionUndoEntry);

  function ChangeNamedExpressionUndoEntry(namedExpression, newContent, oldContent, scope, options) {
    var _this19;

    _classCallCheck(this, ChangeNamedExpressionUndoEntry);

    _this19 = _super19.call(this);
    _this19.namedExpression = namedExpression;
    _this19.newContent = newContent;
    _this19.oldContent = oldContent;
    _this19.scope = scope;
    _this19.options = options;
    return _this19;
  }

  _createClass(ChangeNamedExpressionUndoEntry, [{
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoChangeNamedExpression(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoChangeNamedExpression(this);
    }
  }]);

  return ChangeNamedExpressionUndoEntry;
}(BaseUndoEntry);

exports.ChangeNamedExpressionUndoEntry = ChangeNamedExpressionUndoEntry;

var BatchUndoEntry = /*#__PURE__*/function (_BaseUndoEntry20) {
  _inherits(BatchUndoEntry, _BaseUndoEntry20);

  var _super20 = _createSuper(BatchUndoEntry);

  function BatchUndoEntry() {
    var _this20;

    _classCallCheck(this, BatchUndoEntry);

    _this20 = _super20.apply(this, arguments);
    _this20.operations = [];
    return _this20;
  }

  _createClass(BatchUndoEntry, [{
    key: "add",
    value: function add(operation) {
      this.operations.push(operation);
    }
  }, {
    key: "reversedOperations",
    value: /*#__PURE__*/regeneratorRuntime.mark(function reversedOperations() {
      var i;
      return regeneratorRuntime.wrap(function reversedOperations$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              i = this.operations.length - 1;

            case 1:
              if (!(i >= 0)) {
                _context.next = 7;
                break;
              }

              _context.next = 4;
              return this.operations[i];

            case 4:
              i--;
              _context.next = 1;
              break;

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, reversedOperations, this);
    })
  }, {
    key: "doUndo",
    value: function doUndo(undoRedo) {
      undoRedo.undoBatch(this);
    }
  }, {
    key: "doRedo",
    value: function doRedo(undoRedo) {
      undoRedo.redoBatch(this);
    }
  }]);

  return BatchUndoEntry;
}(BaseUndoEntry);

exports.BatchUndoEntry = BatchUndoEntry;

var UndoRedo = /*#__PURE__*/function () {
  function UndoRedo(config, operations) {
    _classCallCheck(this, UndoRedo);

    this.operations = operations;
    this.oldData = new Map();
    this.undoStack = [];
    this.redoStack = [];
    this.undoLimit = config.undoLimit;
  }

  _createClass(UndoRedo, [{
    key: "saveOperation",
    value: function saveOperation(operation) {
      if (this.batchUndoEntry !== undefined) {
        this.batchUndoEntry.add(operation);
      } else {
        this.addUndoEntry(operation);
      }
    }
  }, {
    key: "beginBatchMode",
    value: function beginBatchMode() {
      this.batchUndoEntry = new BatchUndoEntry();
    }
  }, {
    key: "commitBatchMode",
    value: function commitBatchMode() {
      if (this.batchUndoEntry === undefined) {
        throw 'Batch mode wasn\'t started';
      }

      this.addUndoEntry(this.batchUndoEntry);
      this.batchUndoEntry = undefined;
    }
  }, {
    key: "storeDataForVersion",
    value: function storeDataForVersion(version, address, astHash) {
      if (!this.oldData.has(version)) {
        this.oldData.set(version, []);
      }

      var currentOldData = this.oldData.get(version);
      currentOldData.push([address, astHash]);
    }
  }, {
    key: "clearRedoStack",
    value: function clearRedoStack() {
      this.redoStack = [];
    }
  }, {
    key: "clearUndoStack",
    value: function clearUndoStack() {
      this.undoStack = [];
    }
  }, {
    key: "isUndoStackEmpty",
    value: function isUndoStackEmpty() {
      return this.undoStack.length === 0;
    }
  }, {
    key: "isRedoStackEmpty",
    value: function isRedoStackEmpty() {
      return this.redoStack.length === 0;
    }
  }, {
    key: "undo",
    value: function undo() {
      var operation = this.undoStack.pop();

      if (!operation) {
        throw 'Attempted to undo without operation on stack';
      }

      this.undoEntry(operation);
      this.redoStack.push(operation);
    }
  }, {
    key: "undoBatch",
    value: function undoBatch(batchOperation) {
      var _iterator = _createForOfIteratorHelper(batchOperation.reversedOperations()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var operation = _step.value;
          this.undoEntry(operation);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "undoRemoveRows",
    value: function undoRemoveRows(operation) {
      this.operations.forceApplyPostponedTransformations();
      var sheet = operation.command.sheet,
          rowsRemovals = operation.rowsRemovals;

      for (var i = rowsRemovals.length - 1; i >= 0; --i) {
        var rowsRemoval = rowsRemovals[i];
        this.operations.addRows(new _Operations.AddRowsCommand(sheet, [[rowsRemoval.rowFrom, rowsRemoval.rowCount]]));

        var _iterator2 = _createForOfIteratorHelper(rowsRemoval.removedCells),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _step2.value,
                address = _step2$value.address,
                cellType = _step2$value.cellType;
            this.operations.restoreCell(address, cellType);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        this.restoreOldDataFromVersion(rowsRemoval.version - 1);
      }
    }
  }, {
    key: "undoRemoveColumns",
    value: function undoRemoveColumns(operation) {
      this.operations.forceApplyPostponedTransformations();
      var sheet = operation.command.sheet,
          columnsRemovals = operation.columnsRemovals;

      for (var i = columnsRemovals.length - 1; i >= 0; --i) {
        var columnsRemoval = columnsRemovals[i];
        this.operations.addColumns(new _Operations.AddColumnsCommand(sheet, [[columnsRemoval.columnFrom, columnsRemoval.columnCount]]));

        var _iterator3 = _createForOfIteratorHelper(columnsRemoval.removedCells),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _step3$value = _step3.value,
                address = _step3$value.address,
                cellType = _step3$value.cellType;
            this.operations.restoreCell(address, cellType);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        this.restoreOldDataFromVersion(columnsRemoval.version - 1);
      }
    }
  }, {
    key: "undoAddRows",
    value: function undoAddRows(operation) {
      var addedRowsSpans = operation.command.rowsSpans();

      for (var i = addedRowsSpans.length - 1; i >= 0; --i) {
        var addedRows = addedRowsSpans[i];
        this.operations.removeRows(new _Operations.RemoveRowsCommand(operation.command.sheet, [[addedRows.rowStart, addedRows.numberOfRows]]));
      }
    }
  }, {
    key: "undoAddColumns",
    value: function undoAddColumns(operation) {
      var addedColumnsSpans = operation.command.columnsSpans();

      for (var i = addedColumnsSpans.length - 1; i >= 0; --i) {
        var addedColumns = addedColumnsSpans[i];
        this.operations.removeColumns(new _Operations.RemoveColumnsCommand(operation.command.sheet, [[addedColumns.columnStart, addedColumns.numberOfColumns]]));
      }
    }
  }, {
    key: "undoSetCellContents",
    value: function undoSetCellContents(operation) {
      var _iterator4 = _createForOfIteratorHelper(operation.cellContents),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var cellContentData = _step4.value;
          var address = cellContentData.address;

          var _cellContentData$oldC = _slicedToArray(cellContentData.oldContent, 2),
              oldContentAddress = _cellContentData$oldC[0],
              oldContent = _cellContentData$oldC[1];

          if (!(0, _Cell.equalSimpleCellAddress)(address, oldContentAddress)) {
            this.operations.setCellEmpty(address);
          }

          this.operations.restoreCell(oldContentAddress, oldContent);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "undoPaste",
    value: function undoPaste(operation) {
      this.restoreOperationOldContent(operation.oldContent);

      var _iterator5 = _createForOfIteratorHelper(operation.addedGlobalNamedExpressions),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var namedExpression = _step5.value;
          this.operations.removeNamedExpression(namedExpression);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "undoMoveRows",
    value: function undoMoveRows(operation) {
      var sheet = operation.sheet;
      this.operations.moveRows(sheet, operation.undoStart, operation.numberOfRows, operation.undoEnd);
      this.restoreOldDataFromVersion(operation.version - 1);
    }
  }, {
    key: "undoMoveColumns",
    value: function undoMoveColumns(operation) {
      var sheet = operation.sheet;
      this.operations.moveColumns(sheet, operation.undoStart, operation.numberOfColumns, operation.undoEnd);
      this.restoreOldDataFromVersion(operation.version - 1);
    }
  }, {
    key: "undoMoveCells",
    value: function undoMoveCells(operation) {
      this.operations.forceApplyPostponedTransformations();
      this.operations.moveCells(operation.destinationLeftCorner, operation.width, operation.height, operation.sourceLeftCorner);
      this.restoreOperationOldContent(operation.overwrittenCellsData);
      this.restoreOldDataFromVersion(operation.version - 1);

      var _iterator6 = _createForOfIteratorHelper(operation.addedGlobalNamedExpressions),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var namedExpression = _step6.value;
          this.operations.removeNamedExpression(namedExpression);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
    }
  }, {
    key: "undoAddSheet",
    value: function undoAddSheet(operation) {
      var sheetName = operation.sheetName;
      this.operations.removeSheetByName(sheetName);
    }
  }, {
    key: "undoRemoveSheet",
    value: function undoRemoveSheet(operation) {
      this.operations.forceApplyPostponedTransformations();
      var oldSheetContent = operation.oldSheetContent,
          sheetId = operation.sheetId;
      this.operations.addSheet(operation.sheetName);

      for (var rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {
        var row = oldSheetContent[rowIndex];

        for (var col = 0; col < row.length; col++) {
          var cellType = row[col];
          var address = (0, _Cell.simpleCellAddress)(sheetId, col, rowIndex);
          this.operations.restoreCell(address, cellType);
        }
      }

      var _iterator7 = _createForOfIteratorHelper(operation.scopedNamedExpressions),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              namedexpression = _step7$value[0],
              content = _step7$value[1];

          this.operations.restoreNamedExpression(namedexpression, content, sheetId);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      this.restoreOldDataFromVersion(operation.version - 1);
    }
  }, {
    key: "undoRenameSheet",
    value: function undoRenameSheet(operation) {
      this.operations.renameSheet(operation.sheetId, operation.oldName);
    }
  }, {
    key: "undoClearSheet",
    value: function undoClearSheet(operation) {
      var oldSheetContent = operation.oldSheetContent,
          sheetId = operation.sheetId;

      for (var rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {
        var row = oldSheetContent[rowIndex];

        for (var col = 0; col < row.length; col++) {
          var cellType = row[col];
          var address = (0, _Cell.simpleCellAddress)(sheetId, col, rowIndex);
          this.operations.restoreCell(address, cellType);
        }
      }
    }
  }, {
    key: "undoSetSheetContent",
    value: function undoSetSheetContent(operation) {
      var oldSheetContent = operation.oldSheetContent,
          sheetId = operation.sheetId;
      this.operations.clearSheet(sheetId);

      for (var rowIndex = 0; rowIndex < oldSheetContent.length; rowIndex++) {
        var row = oldSheetContent[rowIndex];

        for (var col = 0; col < row.length; col++) {
          var cellType = row[col];
          var address = (0, _Cell.simpleCellAddress)(sheetId, col, rowIndex);
          this.operations.restoreCell(address, cellType);
        }
      }
    }
  }, {
    key: "undoAddNamedExpression",
    value: function undoAddNamedExpression(operation) {
      this.operations.removeNamedExpression(operation.name, operation.scope);
    }
  }, {
    key: "undoRemoveNamedExpression",
    value: function undoRemoveNamedExpression(operation) {
      this.operations.restoreNamedExpression(operation.namedExpression, operation.content, operation.scope);
    }
  }, {
    key: "undoChangeNamedExpression",
    value: function undoChangeNamedExpression(operation) {
      this.operations.restoreNamedExpression(operation.namedExpression, operation.oldContent, operation.scope);
    }
  }, {
    key: "undoSetRowOrder",
    value: function undoSetRowOrder(operation) {
      this.restoreOperationOldContent(operation.oldContent);
    }
  }, {
    key: "undoSetColumnOrder",
    value: function undoSetColumnOrder(operation) {
      this.restoreOperationOldContent(operation.oldContent);
    }
  }, {
    key: "redo",
    value: function redo() {
      var operation = this.redoStack.pop();

      if (!operation) {
        throw 'Attempted to redo without operation on stack';
      }

      this.redoEntry(operation);
      this.undoStack.push(operation);
    }
  }, {
    key: "redoBatch",
    value: function redoBatch(batchOperation) {
      var _iterator8 = _createForOfIteratorHelper(batchOperation.operations),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var operation = _step8.value;
          this.redoEntry(operation);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    }
  }, {
    key: "redoRemoveRows",
    value: function redoRemoveRows(operation) {
      this.operations.removeRows(operation.command);
    }
  }, {
    key: "redoMoveCells",
    value: function redoMoveCells(operation) {
      this.operations.moveCells(operation.sourceLeftCorner, operation.width, operation.height, operation.destinationLeftCorner);
    }
  }, {
    key: "redoRemoveColumns",
    value: function redoRemoveColumns(operation) {
      this.operations.removeColumns(operation.command);
    }
  }, {
    key: "redoPaste",
    value: function redoPaste(operation) {
      var targetLeftCorner = operation.targetLeftCorner,
          newContent = operation.newContent;
      var height = newContent.length;
      var width = newContent[0].length;

      for (var y = 0; y < height; ++y) {
        for (var x = 0; x < width; ++x) {
          var address = (0, _Cell.simpleCellAddress)(targetLeftCorner.sheet, targetLeftCorner.col + x, targetLeftCorner.row + y);
          this.operations.restoreCell(address, newContent[y][x]);
        }
      }
    }
  }, {
    key: "redoSetCellContents",
    value: function redoSetCellContents(operation) {
      var _iterator9 = _createForOfIteratorHelper(operation.cellContents),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var cellContentData = _step9.value;
          this.operations.setCellContent(cellContentData.address, cellContentData.newContent);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
    }
  }, {
    key: "redoAddRows",
    value: function redoAddRows(operation) {
      this.operations.addRows(operation.command);
    }
  }, {
    key: "redoAddColumns",
    value: function redoAddColumns(operation) {
      this.operations.addColumns(operation.command);
    }
  }, {
    key: "redoRemoveSheet",
    value: function redoRemoveSheet(operation) {
      this.operations.removeSheetByName(operation.sheetName);
    }
  }, {
    key: "redoAddSheet",
    value: function redoAddSheet(operation) {
      this.operations.addSheet(operation.sheetName);
    }
  }, {
    key: "redoRenameSheet",
    value: function redoRenameSheet(operation) {
      this.operations.renameSheet(operation.sheetId, operation.newName);
    }
  }, {
    key: "redoMoveRows",
    value: function redoMoveRows(operation) {
      this.operations.moveRows(operation.sheet, operation.startRow, operation.numberOfRows, operation.targetRow);
    }
  }, {
    key: "redoMoveColumns",
    value: function redoMoveColumns(operation) {
      this.operations.moveColumns(operation.sheet, operation.startColumn, operation.numberOfColumns, operation.targetColumn);
    }
  }, {
    key: "redoClearSheet",
    value: function redoClearSheet(operation) {
      this.operations.clearSheet(operation.sheetId);
    }
  }, {
    key: "redoSetSheetContent",
    value: function redoSetSheetContent(operation) {
      var sheetId = operation.sheetId,
          newSheetContent = operation.newSheetContent;
      this.operations.setSheetContent(sheetId, newSheetContent);
    }
  }, {
    key: "redoAddNamedExpression",
    value: function redoAddNamedExpression(operation) {
      this.operations.addNamedExpression(operation.name, operation.newContent, operation.scope, operation.options);
    }
  }, {
    key: "redoRemoveNamedExpression",
    value: function redoRemoveNamedExpression(operation) {
      this.operations.removeNamedExpression(operation.namedExpression.displayName, operation.scope);
    }
  }, {
    key: "redoChangeNamedExpression",
    value: function redoChangeNamedExpression(operation) {
      this.operations.changeNamedExpressionExpression(operation.namedExpression.displayName, operation.newContent, operation.scope, operation.options);
    }
  }, {
    key: "redoSetRowOrder",
    value: function redoSetRowOrder(operation) {
      this.operations.setRowOrder(operation.sheetId, operation.rowMapping);
    }
  }, {
    key: "redoSetColumnOrder",
    value: function redoSetColumnOrder(operation) {
      this.operations.setColumnOrder(operation.sheetId, operation.columnMapping);
    }
  }, {
    key: "addUndoEntry",
    value: function addUndoEntry(operation) {
      this.undoStack.push(operation);
      this.undoStack.splice(0, Math.max(0, this.undoStack.length - this.undoLimit));
    }
  }, {
    key: "undoEntry",
    value: function undoEntry(operation) {
      operation.doUndo(this);
    }
  }, {
    key: "restoreOperationOldContent",
    value: function restoreOperationOldContent(oldContent) {
      var _iterator10 = _createForOfIteratorHelper(oldContent),
          _step10;

      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _slicedToArray(_step10.value, 2),
              address = _step10$value[0],
              clipboardCell = _step10$value[1];

          this.operations.restoreCell(address, clipboardCell);
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    }
  }, {
    key: "redoEntry",
    value: function redoEntry(operation) {
      operation.doRedo(this);
    }
  }, {
    key: "restoreOldDataFromVersion",
    value: function restoreOldDataFromVersion(version) {
      var oldDataToRestore = this.oldData.get(version) || [];

      var _iterator11 = _createForOfIteratorHelper(oldDataToRestore),
          _step11;

      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var entryToRestore = _step11.value;

          var _entryToRestore = _slicedToArray(entryToRestore, 2),
              address = _entryToRestore[0],
              hash = _entryToRestore[1];

          this.operations.setFormulaToCellFromCache(hash, address);
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
    }
  }]);

  return UndoRedo;
}();

exports.UndoRedo = UndoRedo;

/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.Evaluator = void 0;

__webpack_require__(1);

__webpack_require__(154);

var _AbsoluteCellRange = __webpack_require__(158);

var _absolutizeDependencies = __webpack_require__(243);

var _Cell = __webpack_require__(143);

var _ContentChanges = __webpack_require__(244);

var _DependencyGraph = __webpack_require__(147);

var _FormulaCellVertex = __webpack_require__(265);

var _InterpreterState = __webpack_require__(247);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _statistics = __webpack_require__(256);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Evaluator = /*#__PURE__*/function () {
  function Evaluator(config, stats, interpreter, lazilyTransformingAstService, dependencyGraph, columnSearch) {
    _classCallCheck(this, Evaluator);

    this.config = config;
    this.stats = stats;
    this.interpreter = interpreter;
    this.lazilyTransformingAstService = lazilyTransformingAstService;
    this.dependencyGraph = dependencyGraph;
    this.columnSearch = columnSearch;
  }

  _createClass(Evaluator, [{
    key: "run",
    value: function run() {
      var _this = this;

      this.stats.start(_statistics.StatType.TOP_SORT);

      var _this$dependencyGraph = this.dependencyGraph.topSortWithScc(),
          sorted = _this$dependencyGraph.sorted,
          cycled = _this$dependencyGraph.cycled;

      this.stats.end(_statistics.StatType.TOP_SORT);
      this.stats.measure(_statistics.StatType.EVALUATION, function () {
        _this.recomputeFormulas(cycled, sorted);
      });
    }
  }, {
    key: "partialRun",
    value: function partialRun(vertices) {
      var _this2 = this;

      var changes = _ContentChanges.ContentChanges.empty();

      this.stats.measure(_statistics.StatType.EVALUATION, function () {
        _this2.dependencyGraph.graph.getTopSortedWithSccSubgraphFrom(vertices, function (vertex) {
          if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
            var currentValue = vertex.isComputed() ? vertex.getCellValue() : undefined;

            var newCellValue = _this2.recomputeFormulaVertexValue(vertex);

            if (newCellValue !== currentValue) {
              var address = vertex.getAddress(_this2.lazilyTransformingAstService);
              changes.addChange(newCellValue, address);

              _this2.columnSearch.change((0, _InterpreterValue.getRawValue)(currentValue), (0, _InterpreterValue.getRawValue)(newCellValue), address);

              return true;
            }

            return false;
          } else if (vertex instanceof _DependencyGraph.RangeVertex) {
            vertex.clearCache();
            return true;
          } else {
            return true;
          }
        }, function (vertex) {
          if (vertex instanceof _DependencyGraph.RangeVertex) {
            vertex.clearCache();
          } else if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
            var address = vertex.getAddress(_this2.lazilyTransformingAstService);

            _this2.columnSearch.remove((0, _InterpreterValue.getRawValue)(vertex.valueOrUndef()), address);

            var error = new _Cell.CellError(_Cell.ErrorType.CYCLE, undefined, vertex);
            vertex.setCellValue(error);
            changes.addChange(error, address);
          }
        });
      });
      return changes;
    }
  }, {
    key: "runAndForget",
    value: function runAndForget(ast, address, dependencies) {
      var _this3 = this;

      var tmpRanges = [];

      var _iterator = _createForOfIteratorHelper((0, _absolutizeDependencies.absolutizeDependencies)(dependencies, address)),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var dep = _step.value;

          if (dep instanceof _AbsoluteCellRange.AbsoluteCellRange) {
            var range = dep;

            if (this.dependencyGraph.getRange(range.start, range.end) === undefined) {
              var rangeVertex = new _DependencyGraph.RangeVertex(range);
              this.dependencyGraph.rangeMapping.setRange(rangeVertex);
              tmpRanges.push(rangeVertex);
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var ret = this.evaluateAstToCellValue(ast, new _InterpreterState.InterpreterState(address, this.config.useArrayArithmetic));
      tmpRanges.forEach(function (rangeVertex) {
        _this3.dependencyGraph.rangeMapping.removeRange(rangeVertex);
      });
      return ret;
    }
    /**
     * Recalculates formulas in the topological sort order
     */

  }, {
    key: "recomputeFormulas",
    value: function recomputeFormulas(cycled, sorted) {
      var _this4 = this;

      cycled.forEach(function (vertex) {
        if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
          vertex.setCellValue(new _Cell.CellError(_Cell.ErrorType.CYCLE, undefined, vertex));
        }
      });
      sorted.forEach(function (vertex) {
        if (vertex instanceof _FormulaCellVertex.FormulaVertex) {
          var newCellValue = _this4.recomputeFormulaVertexValue(vertex);

          var address = vertex.getAddress(_this4.lazilyTransformingAstService);

          _this4.columnSearch.add((0, _InterpreterValue.getRawValue)(newCellValue), address);
        } else if (vertex instanceof _DependencyGraph.RangeVertex) {
          vertex.clearCache();
        }
      });
    }
  }, {
    key: "recomputeFormulaVertexValue",
    value: function recomputeFormulaVertexValue(vertex) {
      var address = vertex.getAddress(this.lazilyTransformingAstService);

      if (vertex instanceof _DependencyGraph.ArrayVertex && (vertex.array.size.isRef || !this.dependencyGraph.isThereSpaceForArray(vertex))) {
        return vertex.setNoSpace();
      } else {
        var formula = vertex.getFormula(this.lazilyTransformingAstService);
        var newCellValue = this.evaluateAstToCellValue(formula, new _InterpreterState.InterpreterState(address, this.config.useArrayArithmetic, vertex));
        return vertex.setCellValue(newCellValue);
      }
    }
  }, {
    key: "evaluateAstToCellValue",
    value: function evaluateAstToCellValue(ast, state) {
      var interpreterValue = this.interpreter.evaluateAst(ast, state);

      if (interpreterValue instanceof _SimpleRangeValue.SimpleRangeValue) {
        return interpreterValue;
      } else if (interpreterValue === _InterpreterValue.EmptyValue && this.config.evaluateNullToZero) {
        return 0;
      } else {
        return interpreterValue;
      }
    }
  }]);

  return Evaluator;
}();

exports.Evaluator = Evaluator;

/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(1);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.Exporter = exports.ExportedNamedExpressionChange = exports.ExportedCellChange = void 0;

__webpack_require__(81);

__webpack_require__(150);

__webpack_require__(325);

var _Cell = __webpack_require__(143);

var _CellValue = __webpack_require__(288);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _NamedExpressions = __webpack_require__(311);

var _addressRepresentationConverters = __webpack_require__(170);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * A list of cells which values changed after the operation, their absolute addresses and new values.
 */
var ExportedCellChange = /*#__PURE__*/function () {
  function ExportedCellChange(address, newValue) {
    _classCallCheck(this, ExportedCellChange);

    this.address = address;
    this.newValue = newValue;
  }

  _createClass(ExportedCellChange, [{
    key: "col",
    get: function get() {
      return this.address.col;
    }
  }, {
    key: "row",
    get: function get() {
      return this.address.row;
    }
  }, {
    key: "sheet",
    get: function get() {
      return this.address.sheet;
    }
  }, {
    key: "value",
    get: function get() {
      return this.newValue;
    }
  }]);

  return ExportedCellChange;
}();

exports.ExportedCellChange = ExportedCellChange;

var ExportedNamedExpressionChange = /*#__PURE__*/_createClass(function ExportedNamedExpressionChange(name, newValue) {
  _classCallCheck(this, ExportedNamedExpressionChange);

  this.name = name;
  this.newValue = newValue;
});

exports.ExportedNamedExpressionChange = ExportedNamedExpressionChange;

var Exporter = /*#__PURE__*/function () {
  function Exporter(config, namedExpressions, sheetIndexMapping, lazilyTransformingService) {
    _classCallCheck(this, Exporter);

    this.config = config;
    this.namedExpressions = namedExpressions;
    this.sheetIndexMapping = sheetIndexMapping;
    this.lazilyTransformingService = lazilyTransformingService;
  }

  _createClass(Exporter, [{
    key: "exportChange",
    value: function exportChange(change) {
      var value = change.value;
      var address = change.address;

      if (address.sheet === _NamedExpressions.NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS) {
        var namedExpression = this.namedExpressions.namedExpressionInAddress(address.row);

        if (!namedExpression) {
          throw new Error('Missing named expression');
        }

        return new ExportedNamedExpressionChange(namedExpression.displayName, this.exportScalarOrRange(value));
      } else if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        var result = [];

        var _iterator = _createForOfIteratorHelper(value.entriesFromTopLeftCorner(address)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                cellValue = _step$value[0],
                cellAddress = _step$value[1];

            result.push(new ExportedCellChange(cellAddress, this.exportValue(cellValue)));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return result;
      } else {
        return new ExportedCellChange(address, this.exportValue(value));
      }
    }
  }, {
    key: "exportValue",
    value: function exportValue(value) {
      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return this.detailedError(new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected));
      } else if (this.config.smartRounding && (0, _InterpreterValue.isExtendedNumber)(value)) {
        return this.cellValueRounding((0, _InterpreterValue.getRawValue)(value));
      } else if (value instanceof _Cell.CellError) {
        return this.detailedError(value);
      } else if (value === _InterpreterValue.EmptyValue) {
        return null;
      } else {
        return (0, _InterpreterValue.getRawValue)(value);
      }
    }
  }, {
    key: "exportScalarOrRange",
    value: function exportScalarOrRange(value) {
      var _this = this;

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return value.rawData().map(function (row) {
          return row.map(function (v) {
            return _this.exportValue(v);
          });
        });
      } else {
        return this.exportValue(value);
      }
    }
  }, {
    key: "detailedError",
    value: function detailedError(error) {
      var _a, _b;

      var address = undefined;
      var originAddress = (_a = error.root) === null || _a === void 0 ? void 0 : _a.getAddress(this.lazilyTransformingService);

      if (originAddress !== undefined) {
        if (originAddress.sheet === _NamedExpressions.NamedExpressions.SHEET_FOR_WORKBOOK_EXPRESSIONS) {
          address = (_b = this.namedExpressions.namedExpressionInAddress(originAddress.row)) === null || _b === void 0 ? void 0 : _b.displayName;
        } else {
          address = (0, _addressRepresentationConverters.simpleCellAddressToString)(this.sheetIndexMapping, originAddress, -1);
        }
      }

      return new _CellValue.DetailedCellError(error, this.config.translationPackage.getErrorTranslation(error.type), address);
    }
  }, {
    key: "cellValueRounding",
    value: function cellValueRounding(value) {
      if (value === 0) {
        return value;
      }

      var magnitudeMultiplierExponent = Math.floor(Math.log10(Math.abs(value)));
      var placesMultiplier = Math.pow(10, this.config.precisionRounding - magnitudeMultiplierExponent);

      if (value < 0) {
        return -Math.round(-value * placesMultiplier) / placesMultiplier;
      } else {
        return Math.round(value * placesMultiplier) / placesMultiplier;
      }
    }
  }]);

  return Exporter;
}();

exports.Exporter = Exporter;

/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var log10 = __webpack_require__(326);

// `Math.log10` method
// https://tc39.es/ecma262/#sec-math.log10
$({ target: 'Math', stat: true }, {
  log10: log10
});


/***/ }),
/* 326 */
/***/ (function(module, exports) {

var log = Math.log;
var LOG10E = Math.LOG10E;

// eslint-disable-next-line es/no-math-log10 -- safe
module.exports = Math.log10 || function log10(x) {
  return log(x) * LOG10E;
};


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.SimpleStrategy = exports.GraphBuilder = void 0;

__webpack_require__(1);

__webpack_require__(154);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(92);

__webpack_require__(122);

var _absolutizeDependencies = __webpack_require__(243);

var _ArraySize = __webpack_require__(246);

var _Cell = __webpack_require__(143);

var _CellContentParser = __webpack_require__(308);

var _DependencyGraph = __webpack_require__(147);

var _InterpreterValue = __webpack_require__(255);

var _statistics = __webpack_require__(256);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * Service building the graph and mappings.
 */
var GraphBuilder = /*#__PURE__*/function () {
  /**
   * Configures the building service.
   */
  function GraphBuilder(dependencyGraph, columnSearch, parser, cellContentParser, stats, arraySizePredictor) {
    _classCallCheck(this, GraphBuilder);

    this.dependencyGraph = dependencyGraph;
    this.columnSearch = columnSearch;
    this.parser = parser;
    this.cellContentParser = cellContentParser;
    this.stats = stats;
    this.arraySizePredictor = arraySizePredictor;
    this.buildStrategy = new SimpleStrategy(dependencyGraph, columnSearch, parser, stats, cellContentParser, arraySizePredictor);
  }
  /**
   * Builds graph.
   */


  _createClass(GraphBuilder, [{
    key: "buildGraph",
    value: function buildGraph(sheets, stats) {
      var _this = this;

      var dependencies = stats.measure(_statistics.StatType.COLLECT_DEPENDENCIES, function () {
        return _this.buildStrategy.run(sheets);
      });
      this.dependencyGraph.getAndClearContentChanges();
      stats.measure(_statistics.StatType.PROCESS_DEPENDENCIES, function () {
        return _this.processDependencies(dependencies);
      });
    }
  }, {
    key: "processDependencies",
    value: function processDependencies(dependencies) {
      var _this2 = this;

      dependencies.forEach(function (cellDependencies, endVertex) {
        _this2.dependencyGraph.processCellDependencies(cellDependencies, endVertex);
      });
    }
  }]);

  return GraphBuilder;
}();

exports.GraphBuilder = GraphBuilder;

var SimpleStrategy = /*#__PURE__*/function () {
  function SimpleStrategy(dependencyGraph, columnIndex, parser, stats, cellContentParser, arraySizePredictor) {
    _classCallCheck(this, SimpleStrategy);

    this.dependencyGraph = dependencyGraph;
    this.columnIndex = columnIndex;
    this.parser = parser;
    this.stats = stats;
    this.cellContentParser = cellContentParser;
    this.arraySizePredictor = arraySizePredictor;
  }

  _createClass(SimpleStrategy, [{
    key: "run",
    value: function run(sheets) {
      var _this3 = this;

      var dependencies = new Map();

      for (var sheetName in sheets) {
        var sheetId = this.dependencyGraph.getSheetId(sheetName);
        var sheet = sheets[sheetName];

        for (var i = 0; i < sheet.length; ++i) {
          var row = sheet[i];

          var _loop = function _loop(j) {
            var cellContent = row[j];
            var address = (0, _Cell.simpleCellAddress)(sheetId, j, i);

            var parsedCellContent = _this3.cellContentParser.parse(cellContent);

            if (parsedCellContent instanceof _CellContentParser.CellContent.Formula) {
              var parseResult = _this3.stats.measure(_statistics.StatType.PARSER, function () {
                return _this3.parser.parse(parsedCellContent.formula, address);
              });

              if (parseResult.errors.length > 0) {
                _this3.shrinkArrayIfNeeded(address);

                var vertex = new _DependencyGraph.ParsingErrorVertex(parseResult.errors, parsedCellContent.formula);

                _this3.dependencyGraph.addVertex(address, vertex);
              } else {
                _this3.shrinkArrayIfNeeded(address);

                var size = _this3.arraySizePredictor.checkArraySize(parseResult.ast, address);

                if (size.isScalar()) {
                  var _vertex = new _DependencyGraph.FormulaCellVertex(parseResult.ast, address, 0);

                  dependencies.set(_vertex, (0, _absolutizeDependencies.absolutizeDependencies)(parseResult.dependencies, address));

                  _this3.dependencyGraph.addVertex(address, _vertex);

                  if (parseResult.hasVolatileFunction) {
                    _this3.dependencyGraph.markAsVolatile(_vertex);
                  }

                  if (parseResult.hasStructuralChangeFunction) {
                    _this3.dependencyGraph.markAsDependentOnStructureChange(_vertex);
                  }
                } else {
                  var _vertex2 = new _DependencyGraph.ArrayVertex(parseResult.ast, address, new _ArraySize.ArraySize(size.width, size.height));

                  dependencies.set(_vertex2, (0, _absolutizeDependencies.absolutizeDependencies)(parseResult.dependencies, address));

                  _this3.dependencyGraph.addArrayVertex(address, _vertex2);
                }
              }
            } else if (parsedCellContent instanceof _CellContentParser.CellContent.Empty) {
              /* we don't care about empty cells here */
            } else {
              _this3.shrinkArrayIfNeeded(address);

              var _vertex3 = new _DependencyGraph.ValueCellVertex(parsedCellContent.value, cellContent);

              _this3.columnIndex.add((0, _InterpreterValue.getRawValue)(parsedCellContent.value), address);

              _this3.dependencyGraph.addVertex(address, _vertex3);
            }
          };

          for (var j = 0; j < row.length; ++j) {
            _loop(j);
          }
        }
      }

      return dependencies;
    }
  }, {
    key: "shrinkArrayIfNeeded",
    value: function shrinkArrayIfNeeded(address) {
      var vertex = this.dependencyGraph.getCell(address);

      if (vertex instanceof _DependencyGraph.ArrayVertex) {
        this.dependencyGraph.shrinkArrayToCorner(vertex);
      }
    }
  }]);

  return SimpleStrategy;
}();

exports.SimpleStrategy = SimpleStrategy;

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.FunctionRegistry = void 0;

__webpack_require__(149);

__webpack_require__(81);

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(151);

__webpack_require__(329);

__webpack_require__(82);

__webpack_require__(146);

__webpack_require__(154);

__webpack_require__(280);

var _errors = __webpack_require__(165);

var _HyperFormula = __webpack_require__(306);

var _VersionPlugin = __webpack_require__(330);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function validateAndReturnMetadataFromName(functionId, plugin) {
  var _a;

  var entry = plugin.implementedFunctions[functionId];
  var key = (_a = plugin.aliases) === null || _a === void 0 ? void 0 : _a[functionId];

  if (key !== undefined) {
    if (entry !== undefined) {
      throw new _errors.AliasAlreadyExisting(functionId, plugin.name);
    }

    entry = plugin.implementedFunctions[key];
  }

  if (entry === undefined) {
    throw _errors.FunctionPluginValidationError.functionNotDeclaredInPlugin(functionId, plugin.name);
  }

  return entry;
}

var FunctionRegistry = /*#__PURE__*/function () {
  function FunctionRegistry(config) {
    var _this = this;

    _classCallCheck(this, FunctionRegistry);

    this.config = config;
    this.functions = new Map();
    this.arraySizeFunctions = new Map();
    this.volatileFunctions = new Set();
    this.arrayFunctions = new Set();
    this.structuralChangeFunctions = new Set();
    this.functionsWhichDoesNotNeedArgumentsToBeComputed = new Set();
    this.functionsMetadata = new Map();

    this.doesFunctionNeedArgumentToBeComputed = function (functionId) {
      return _this.functionsWhichDoesNotNeedArgumentsToBeComputed.has(functionId);
    };

    this.isFunctionVolatile = function (functionId) {
      return _this.volatileFunctions.has(functionId);
    };

    this.isArrayFunction = function (functionId) {
      return _this.arrayFunctions.has(functionId);
    };

    this.isFunctionDependentOnSheetStructureChange = function (functionId) {
      return _this.structuralChangeFunctions.has(functionId);
    };

    if (config.functionPlugins.length > 0) {
      this.instancePlugins = new Map();

      var _iterator = _createForOfIteratorHelper(config.functionPlugins),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var plugin = _step.value;
          FunctionRegistry.loadPluginFunctions(plugin, this.instancePlugins);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    } else {
      this.instancePlugins = new Map(FunctionRegistry.plugins);
    }

    var _iterator2 = _createForOfIteratorHelper(FunctionRegistry.protectedFunctions()),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _slicedToArray(_step2.value, 2),
            functionId = _step2$value[0],
            _plugin = _step2$value[1];

        FunctionRegistry.loadFunctionUnprotected(_plugin, functionId, this.instancePlugins);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }

    var _iterator3 = _createForOfIteratorHelper(this.instancePlugins.entries()),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _slicedToArray(_step3.value, 2),
            _functionId = _step3$value[0],
            _plugin2 = _step3$value[1];

        this.categorizeFunction(_functionId, validateAndReturnMetadataFromName(_functionId, _plugin2));
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  }

  _createClass(FunctionRegistry, [{
    key: "initializePlugins",
    value: function initializePlugins(interpreter) {
      var _this2 = this;

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var instances = [];

      var _iterator4 = _createForOfIteratorHelper(this.instancePlugins.entries()),
          _step4;

      try {
        var _loop = function _loop() {
          var _step4$value = _slicedToArray(_step4.value, 2),
              functionId = _step4$value[0],
              plugin = _step4$value[1];

          var foundPluginInstance = instances.find(function (pluginInstance) {
            return pluginInstance instanceof plugin;
          });

          if (foundPluginInstance === undefined) {
            foundPluginInstance = new plugin(interpreter);
            instances.push(foundPluginInstance);
          }

          var metadata = validateAndReturnMetadataFromName(functionId, plugin);
          var methodName = metadata.method;

          _this2.functions.set(functionId, [methodName, foundPluginInstance]);

          var arraySizeMethodName = metadata.arraySizeMethod;

          if (arraySizeMethodName !== undefined) {
            _this2.arraySizeFunctions.set(functionId, [arraySizeMethodName, foundPluginInstance]);
          }
        };

        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "getFunctionPlugin",
    value: function getFunctionPlugin(functionId) {
      if (FunctionRegistry.functionIsProtected(functionId)) {
        return undefined;
      }

      return this.instancePlugins.get(functionId);
    }
  }, {
    key: "getFunction",
    value: function getFunction(functionId) {
      var pluginEntry = this.functions.get(functionId);

      if (pluginEntry !== undefined && this.config.translationPackage.isFunctionTranslated(functionId)) {
        var _pluginEntry = _slicedToArray(pluginEntry, 2),
            pluginFunction = _pluginEntry[0],
            pluginInstance = _pluginEntry[1];

        return function (ast, state) {
          return pluginInstance[pluginFunction](ast, state);
        };
      } else {
        return undefined;
      }
    }
  }, {
    key: "getArraySizeFunction",
    value: function getArraySizeFunction(functionId) {
      var pluginEntry = this.arraySizeFunctions.get(functionId);

      if (pluginEntry !== undefined && this.config.translationPackage.isFunctionTranslated(functionId)) {
        var _pluginEntry2 = _slicedToArray(pluginEntry, 2),
            pluginArraySizeFunction = _pluginEntry2[0],
            pluginInstance = _pluginEntry2[1];

        return function (ast, state) {
          return pluginInstance[pluginArraySizeFunction](ast, state);
        };
      } else {
        return undefined;
      }
    }
  }, {
    key: "getMetadata",
    value: function getMetadata(functionId) {
      return this.functionsMetadata.get(functionId);
    }
  }, {
    key: "getPlugins",
    value: function getPlugins() {
      var plugins = new Set();

      var _iterator5 = _createForOfIteratorHelper(this.instancePlugins),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              functionId = _step5$value[0],
              plugin = _step5$value[1];

          if (!FunctionRegistry.functionIsProtected(functionId)) {
            plugins.add(plugin);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return Array.from(plugins);
    }
  }, {
    key: "getRegisteredFunctionIds",
    value: function getRegisteredFunctionIds() {
      return Array.from(this.functions.keys());
    }
  }, {
    key: "categorizeFunction",
    value: function categorizeFunction(functionId, functionMetadata) {
      if (functionMetadata.isVolatile) {
        this.volatileFunctions.add(functionId);
      }

      if (functionMetadata.arrayFunction) {
        this.arrayFunctions.add(functionId);
      }

      if (functionMetadata.doesNotNeedArgumentsToBeComputed) {
        this.functionsWhichDoesNotNeedArgumentsToBeComputed.add(functionId);
      }

      if (functionMetadata.isDependentOnSheetStructureChange) {
        this.structuralChangeFunctions.add(functionId);
      }

      this.functionsMetadata.set(functionId, functionMetadata);
    }
  }], [{
    key: "registerFunctionPlugin",
    value: function registerFunctionPlugin(plugin, translations) {
      this.loadPluginFunctions(plugin, this.plugins);

      if (translations !== undefined) {
        this.loadTranslations(translations);
      }
    }
  }, {
    key: "registerFunction",
    value: function registerFunction(functionId, plugin, translations) {
      this.loadPluginFunction(plugin, functionId, this.plugins);

      if (translations !== undefined) {
        this.loadTranslations(translations);
      }
    }
  }, {
    key: "unregisterFunction",
    value: function unregisterFunction(functionId) {
      if (this.functionIsProtected(functionId)) {
        throw _errors.ProtectedFunctionError.cannotUnregisterFunctionWithId(functionId);
      }

      this.plugins.delete(functionId);
    }
  }, {
    key: "unregisterFunctionPlugin",
    value: function unregisterFunctionPlugin(plugin) {
      var _iterator6 = _createForOfIteratorHelper(this.protectedPlugins()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var protectedPlugin = _step6.value;

          if (protectedPlugin === plugin) {
            throw _errors.ProtectedFunctionError.cannotUnregisterProtectedPlugin();
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(this.plugins.entries()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _step7$value = _slicedToArray(_step7.value, 2),
              functionId = _step7$value[0],
              registeredPlugin = _step7$value[1];

          if (registeredPlugin === plugin) {
            this.plugins.delete(functionId);
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }, {
    key: "unregisterAll",
    value: function unregisterAll() {
      this.plugins.clear();
    }
  }, {
    key: "getRegisteredFunctionIds",
    value: function getRegisteredFunctionIds() {
      return [].concat(_toConsumableArray(Array.from(this.plugins.keys())), _toConsumableArray(Array.from(this._protectedPlugins.keys())));
    }
  }, {
    key: "getPlugins",
    value: function getPlugins() {
      return Array.from(new Set(this.plugins.values()).values());
    }
  }, {
    key: "getFunctionPlugin",
    value: function getFunctionPlugin(functionId) {
      if (this.functionIsProtected(functionId)) {
        return undefined;
      } else {
        return this.plugins.get(functionId);
      }
    }
  }, {
    key: "functionIsProtected",
    value: function functionIsProtected(functionId) {
      return this._protectedPlugins.has(functionId);
    }
  }, {
    key: "loadTranslations",
    value: function loadTranslations(translations) {
      var registeredLanguages = new Set(_HyperFormula.HyperFormula.getRegisteredLanguagesCodes());
      Object.keys(translations).forEach(function (code) {
        if (registeredLanguages.has(code)) {
          _HyperFormula.HyperFormula.getLanguage(code).extendFunctions(translations[code]);
        }
      });
    }
  }, {
    key: "loadPluginFunctions",
    value: function loadPluginFunctions(plugin, registry) {
      var _this3 = this;

      Object.keys(plugin.implementedFunctions).forEach(function (functionName) {
        _this3.loadPluginFunction(plugin, functionName, registry);
      });

      if (plugin.aliases !== undefined) {
        Object.keys(plugin.aliases).forEach(function (functionName) {
          _this3.loadPluginFunction(plugin, functionName, registry);
        });
      }
    }
  }, {
    key: "loadPluginFunction",
    value: function loadPluginFunction(plugin, functionId, registry) {
      if (this.functionIsProtected(functionId)) {
        throw _errors.ProtectedFunctionError.cannotRegisterFunctionWithId(functionId);
      } else {
        this.loadFunctionUnprotected(plugin, functionId, registry);
      }
    }
  }, {
    key: "loadFunctionUnprotected",
    value: function loadFunctionUnprotected(plugin, functionId, registry) {
      var methodName = validateAndReturnMetadataFromName(functionId, plugin).method;

      if (Object.prototype.hasOwnProperty.call(plugin.prototype, methodName)) {
        registry.set(functionId, plugin);
      } else {
        throw _errors.FunctionPluginValidationError.functionMethodNotFound(methodName, plugin.name);
      }
    }
  }, {
    key: "protectedFunctions",
    value: /*#__PURE__*/regeneratorRuntime.mark(function protectedFunctions() {
      var _iterator8, _step8, _step8$value, functionId, plugin;

      return regeneratorRuntime.wrap(function protectedFunctions$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator8 = _createForOfIteratorHelper(this._protectedPlugins);
              _context.prev = 1;

              _iterator8.s();

            case 3:
              if ((_step8 = _iterator8.n()).done) {
                _context.next = 10;
                break;
              }

              _step8$value = _slicedToArray(_step8.value, 2), functionId = _step8$value[0], plugin = _step8$value[1];

              if (!(plugin !== undefined)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [functionId, plugin];

            case 8:
              _context.next = 3;
              break;

            case 10:
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);

              _iterator8.e(_context.t0);

            case 15:
              _context.prev = 15;

              _iterator8.f();

              return _context.finish(15);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, protectedFunctions, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "protectedPlugins",
    value: /*#__PURE__*/regeneratorRuntime.mark(function protectedPlugins() {
      var _iterator9, _step9, _step9$value, plugin;

      return regeneratorRuntime.wrap(function protectedPlugins$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator9 = _createForOfIteratorHelper(this._protectedPlugins);
              _context2.prev = 1;

              _iterator9.s();

            case 3:
              if ((_step9 = _iterator9.n()).done) {
                _context2.next = 10;
                break;
              }

              _step9$value = _slicedToArray(_step9.value, 2), plugin = _step9$value[1];

              if (!(plugin !== undefined)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 8;
              return plugin;

            case 8:
              _context2.next = 3;
              break;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);

              _iterator9.e(_context2.t0);

            case 15:
              _context2.prev = 15;

              _iterator9.f();

              return _context2.finish(15);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, protectedPlugins, this, [[1, 12, 15, 18]]);
    })
  }]);

  return FunctionRegistry;
}();

exports.FunctionRegistry = FunctionRegistry;
FunctionRegistry.plugins = new Map();
FunctionRegistry._protectedPlugins = new Map([['VERSION', _VersionPlugin.VersionPlugin], ['OFFSET', undefined]]);

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $find = __webpack_require__(115).find;
var addToUnscopables = __webpack_require__(121);

var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.es/ecma262/#sec-array.prototype.find
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND);


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(137);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.VersionPlugin = void 0;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(146);

var _HyperFormula = __webpack_require__(306);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LICENSE_STATUS_MAP = new Map([['gpl-v3', 1], ["missing"
/* MISSING */
, 2], ["invalid"
/* INVALID */
, 3], ["expired"
/* EXPIRED */
, 4]]);

var VersionPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(VersionPlugin, _FunctionPlugin);

  var _super = _createSuper(VersionPlugin);

  function VersionPlugin() {
    _classCallCheck(this, VersionPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(VersionPlugin, [{
    key: "version",
    value: function version(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('VERSION'), function () {
        var _this$config = _this.config,
            validityState = _this$config.licenseKeyValidityState,
            licenseKey = _this$config.licenseKey;
        var status;

        if (LICENSE_STATUS_MAP.has(licenseKey)) {
          status = LICENSE_STATUS_MAP.get(licenseKey);
        } else if (LICENSE_STATUS_MAP.has(validityState)) {
          status = LICENSE_STATUS_MAP.get(validityState);
        } else if (validityState === "valid"
        /* VALID */
        ) {
          status = licenseKey.slice(-5);
        }

        return "HyperFormula v".concat(_HyperFormula.HyperFormula.version, ", ").concat(status);
      });
    }
  }]);

  return VersionPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.VersionPlugin = VersionPlugin;
VersionPlugin.implementedFunctions = {
  'VERSION': {
    method: 'version',
    parameters: []
  }
};

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.Interpreter = void 0;

__webpack_require__(146);

__webpack_require__(150);

var _AbsoluteCellRange = __webpack_require__(158);

var _ArrayValue = __webpack_require__(266);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _Ast = __webpack_require__(230);

var _ArithmeticHelper = __webpack_require__(249);

var _Criterion = __webpack_require__(332);

var _FunctionRegistry = __webpack_require__(328);

var _InterpreterState = __webpack_require__(247);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Interpreter = /*#__PURE__*/function () {
  function Interpreter(config, dependencyGraph, columnSearch, stats, arithmeticHelper, functionRegistry, namedExpressions, serialization, arraySizePredictor, dateTimeHelper) {
    var _this = this;

    _classCallCheck(this, Interpreter);

    this.config = config;
    this.dependencyGraph = dependencyGraph;
    this.columnSearch = columnSearch;
    this.stats = stats;
    this.arithmeticHelper = arithmeticHelper;
    this.functionRegistry = functionRegistry;
    this.namedExpressions = namedExpressions;
    this.serialization = serialization;
    this.arraySizePredictor = arraySizePredictor;
    this.dateTimeHelper = dateTimeHelper;

    this.equalOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.eq, arg1, arg2);
    };

    this.notEqualOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.neq, arg1, arg2);
    };

    this.greaterThanOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.gt, arg1, arg2);
    };

    this.lessThanOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.lt, arg1, arg2);
    };

    this.greaterThanOrEqualOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.geq, arg1, arg2);
    };

    this.lessThanOrEqualOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.leq, arg1, arg2);
    };

    this.concatOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.concat, (0, _ArithmeticHelper.coerceScalarToString)(arg1), (0, _ArithmeticHelper.coerceScalarToString)(arg2));
    };

    this.plusOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.addWithEpsilon, _this.arithmeticHelper.coerceScalarToNumberOrError(arg1), _this.arithmeticHelper.coerceScalarToNumberOrError(arg2));
    };

    this.minusOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.subtract, _this.arithmeticHelper.coerceScalarToNumberOrError(arg1), _this.arithmeticHelper.coerceScalarToNumberOrError(arg2));
    };

    this.timesOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.multiply, _this.arithmeticHelper.coerceScalarToNumberOrError(arg1), _this.arithmeticHelper.coerceScalarToNumberOrError(arg2));
    };

    this.powerOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.pow, _this.arithmeticHelper.coerceScalarToNumberOrError(arg1), _this.arithmeticHelper.coerceScalarToNumberOrError(arg2));
    };

    this.divOp = function (arg1, arg2) {
      return binaryErrorWrapper(_this.arithmeticHelper.divide, _this.arithmeticHelper.coerceScalarToNumberOrError(arg1), _this.arithmeticHelper.coerceScalarToNumberOrError(arg2));
    };

    this.unaryMinusOp = function (arg) {
      return unaryErrorWrapper(_this.arithmeticHelper.unaryMinus, _this.arithmeticHelper.coerceScalarToNumberOrError(arg));
    };

    this.percentOp = function (arg) {
      return unaryErrorWrapper(_this.arithmeticHelper.unaryPercent, _this.arithmeticHelper.coerceScalarToNumberOrError(arg));
    };

    this.unaryPlusOp = function (arg) {
      return _this.arithmeticHelper.unaryPlus(arg);
    };

    this.functionRegistry.initializePlugins(this);
    this.criterionBuilder = new _Criterion.CriterionBuilder(config);
  }

  _createClass(Interpreter, [{
    key: "evaluateAst",
    value: function evaluateAst(ast, state) {
      var val = this.evaluateAstWithoutPostprocessing(ast, state);

      if ((0, _InterpreterValue.isExtendedNumber)(val)) {
        if ((0, _ArithmeticHelper.isNumberOverflow)((0, _InterpreterValue.getRawValue)(val))) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NaN);
        } else {
          val = (0, _InterpreterValue.cloneNumber)(val, (0, _ArithmeticHelper.fixNegativeZero)((0, _InterpreterValue.getRawValue)(val)));
        }
      }

      if (val instanceof _SimpleRangeValue.SimpleRangeValue && val.height() === 1 && val.width() === 1) {
        var _val$data = _slicedToArray(val.data, 1);

        var _val$data$ = _slicedToArray(_val$data[0], 1);

        val = _val$data$[0];
      }

      return wrapperForRootVertex(val, state.formulaVertex);
    }
  }, {
    key: "getGpuInstance",
    value: function getGpuInstance() {
      var mode = this.config.gpuMode;
      var gpujs = this.config.gpujs;

      if (gpujs === undefined) {
        throw Error('Cannot instantiate GPU.js. Constructor not provided.');
      }

      if (!this.gpu) {
        this.gpu = new gpujs({
          mode: mode
        });
      }

      return this.gpu;
    }
  }, {
    key: "destroyGpu",
    value: function destroyGpu() {
      var _a;

      (_a = this.gpu) === null || _a === void 0 ? void 0 : _a.destroy();
    }
    /**
     * Calculates cell value from formula abstract syntax tree
     *
     * @param formula - abstract syntax tree of formula
     * @param formulaAddress - address of the cell in which formula is located
     */

  }, {
    key: "evaluateAstWithoutPostprocessing",
    value: function evaluateAstWithoutPostprocessing(ast, state) {
      switch (ast.type) {
        case _Ast.AstNodeType.EMPTY:
          {
            return _InterpreterValue.EmptyValue;
          }

        case _Ast.AstNodeType.CELL_REFERENCE:
          {
            var address = ast.reference.toSimpleCellAddress(state.formulaAddress);

            if ((0, _Cell.invalidSimpleCellAddress)(address)) {
              return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.BadRef);
            }

            return this.dependencyGraph.getCellValue(address);
          }

        case _Ast.AstNodeType.NUMBER:
        case _Ast.AstNodeType.STRING:
          {
            return ast.value;
          }

        case _Ast.AstNodeType.CONCATENATE_OP:
          {
            var leftResult = this.evaluateAst(ast.left, state);
            var rightResult = this.evaluateAst(ast.right, state);
            return this.binaryRangeWrapper(this.concatOp, leftResult, rightResult, state);
          }

        case _Ast.AstNodeType.EQUALS_OP:
          {
            var _leftResult = this.evaluateAst(ast.left, state);

            var _rightResult = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.equalOp, _leftResult, _rightResult, state);
          }

        case _Ast.AstNodeType.NOT_EQUAL_OP:
          {
            var _leftResult2 = this.evaluateAst(ast.left, state);

            var _rightResult2 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.notEqualOp, _leftResult2, _rightResult2, state);
          }

        case _Ast.AstNodeType.GREATER_THAN_OP:
          {
            var _leftResult3 = this.evaluateAst(ast.left, state);

            var _rightResult3 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.greaterThanOp, _leftResult3, _rightResult3, state);
          }

        case _Ast.AstNodeType.LESS_THAN_OP:
          {
            var _leftResult4 = this.evaluateAst(ast.left, state);

            var _rightResult4 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.lessThanOp, _leftResult4, _rightResult4, state);
          }

        case _Ast.AstNodeType.GREATER_THAN_OR_EQUAL_OP:
          {
            var _leftResult5 = this.evaluateAst(ast.left, state);

            var _rightResult5 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.greaterThanOrEqualOp, _leftResult5, _rightResult5, state);
          }

        case _Ast.AstNodeType.LESS_THAN_OR_EQUAL_OP:
          {
            var _leftResult6 = this.evaluateAst(ast.left, state);

            var _rightResult6 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.lessThanOrEqualOp, _leftResult6, _rightResult6, state);
          }

        case _Ast.AstNodeType.PLUS_OP:
          {
            var _leftResult7 = this.evaluateAst(ast.left, state);

            var _rightResult7 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.plusOp, _leftResult7, _rightResult7, state);
          }

        case _Ast.AstNodeType.MINUS_OP:
          {
            var _leftResult8 = this.evaluateAst(ast.left, state);

            var _rightResult8 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.minusOp, _leftResult8, _rightResult8, state);
          }

        case _Ast.AstNodeType.TIMES_OP:
          {
            var _leftResult9 = this.evaluateAst(ast.left, state);

            var _rightResult9 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.timesOp, _leftResult9, _rightResult9, state);
          }

        case _Ast.AstNodeType.POWER_OP:
          {
            var _leftResult10 = this.evaluateAst(ast.left, state);

            var _rightResult10 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.powerOp, _leftResult10, _rightResult10, state);
          }

        case _Ast.AstNodeType.DIV_OP:
          {
            var _leftResult11 = this.evaluateAst(ast.left, state);

            var _rightResult11 = this.evaluateAst(ast.right, state);

            return this.binaryRangeWrapper(this.divOp, _leftResult11, _rightResult11, state);
          }

        case _Ast.AstNodeType.PLUS_UNARY_OP:
          {
            var result = this.evaluateAst(ast.value, state);
            return this.unaryRangeWrapper(this.unaryPlusOp, result, state);
          }

        case _Ast.AstNodeType.MINUS_UNARY_OP:
          {
            var _result = this.evaluateAst(ast.value, state);

            return this.unaryRangeWrapper(this.unaryMinusOp, _result, state);
          }

        case _Ast.AstNodeType.PERCENT_OP:
          {
            var _result2 = this.evaluateAst(ast.value, state);

            return this.unaryRangeWrapper(this.percentOp, _result2, state);
          }

        case _Ast.AstNodeType.FUNCTION_CALL:
          {
            if (this.config.licenseKeyValidityState !== "valid"
            /* VALID */
            && !_FunctionRegistry.FunctionRegistry.functionIsProtected(ast.procedureName)) {
              return new _Cell.CellError(_Cell.ErrorType.LIC, _errorMessage.ErrorMessage.LicenseKey(this.config.licenseKeyValidityState));
            }

            var pluginFunction = this.functionRegistry.getFunction(ast.procedureName);

            if (pluginFunction !== undefined) {
              return pluginFunction(ast, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || this.functionRegistry.isArrayFunction(ast.procedureName), state.formulaVertex));
            } else {
              return new _Cell.CellError(_Cell.ErrorType.NAME, _errorMessage.ErrorMessage.FunctionName(ast.procedureName));
            }
          }

        case _Ast.AstNodeType.NAMED_EXPRESSION:
          {
            var namedExpression = this.namedExpressions.nearestNamedExpression(ast.expressionName, state.formulaAddress.sheet);

            if (namedExpression) {
              return this.dependencyGraph.getCellValue(namedExpression.address);
            } else {
              return new _Cell.CellError(_Cell.ErrorType.NAME, _errorMessage.ErrorMessage.NamedExpressionName(ast.expressionName));
            }
          }

        case _Ast.AstNodeType.CELL_RANGE:
          {
            if (!this.rangeSpansOneSheet(ast)) {
              return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.RangeManySheets);
            }

            var range = _AbsoluteCellRange.AbsoluteCellRange.fromCellRange(ast, state.formulaAddress);

            var arrayVertex = this.dependencyGraph.getArray(range);

            if (arrayVertex) {
              var array = arrayVertex.array;

              if (array instanceof _ArrayValue.NotComputedArray) {
                throw new Error('Array should be already computed');
              } else if (array instanceof _Cell.CellError) {
                return array;
              } else if (array instanceof _ArrayValue.ArrayValue) {
                return _SimpleRangeValue.SimpleRangeValue.fromRange(array.raw(), range, this.dependencyGraph);
              } else {
                throw new Error('Unknown array');
              }
            } else {
              return _SimpleRangeValue.SimpleRangeValue.onlyRange(range, this.dependencyGraph);
            }
          }

        case _Ast.AstNodeType.COLUMN_RANGE:
          {
            if (!this.rangeSpansOneSheet(ast)) {
              return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.RangeManySheets);
            }

            var _range = _AbsoluteCellRange.AbsoluteColumnRange.fromColumnRange(ast, state.formulaAddress);

            return _SimpleRangeValue.SimpleRangeValue.onlyRange(_range, this.dependencyGraph);
          }

        case _Ast.AstNodeType.ROW_RANGE:
          {
            if (!this.rangeSpansOneSheet(ast)) {
              return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.RangeManySheets);
            }

            var _range2 = _AbsoluteCellRange.AbsoluteRowRange.fromRowRangeAst(ast, state.formulaAddress);

            return _SimpleRangeValue.SimpleRangeValue.onlyRange(_range2, this.dependencyGraph);
          }

        case _Ast.AstNodeType.PARENTHESIS:
          {
            return this.evaluateAst(ast.expression, state);
          }

        case _Ast.AstNodeType.ARRAY:
          {
            var totalWidth = undefined;
            var ret = [];

            var _iterator = _createForOfIteratorHelper(ast.args),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var astRow = _step.value;
                var rowHeight = undefined;
                var rowRet = [];

                var _iterator2 = _createForOfIteratorHelper(astRow),
                    _step2;

                try {
                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                    var astIt = _step2.value;
                    var arr = (0, _ArithmeticHelper.coerceToRange)(this.evaluateAst(astIt, state));
                    var height = arr.height();

                    if (rowHeight === undefined) {
                      rowHeight = height;
                      rowRet.push.apply(rowRet, _toConsumableArray(arr.data));
                    } else if (rowHeight === height) {
                      for (var i = 0; i < height; i++) {
                        var _rowRet$i;

                        (_rowRet$i = rowRet[i]).push.apply(_rowRet$i, _toConsumableArray(arr.data[i]));
                      }
                    } else {
                      return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.SizeMismatch);
                    }
                  }
                } catch (err) {
                  _iterator2.e(err);
                } finally {
                  _iterator2.f();
                }

                var width = rowRet[0].length;

                if (totalWidth === undefined) {
                  totalWidth = width;
                  ret.push.apply(ret, rowRet);
                } else if (totalWidth === width) {
                  ret.push.apply(ret, rowRet);
                } else {
                  return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.SizeMismatch);
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
          }

        case _Ast.AstNodeType.ERROR_WITH_RAW_INPUT:
        case _Ast.AstNodeType.ERROR:
          {
            return ast.error;
          }
      }
    }
  }, {
    key: "rangeSpansOneSheet",
    value: function rangeSpansOneSheet(ast) {
      return ast.start.sheet === ast.end.sheet;
    }
  }, {
    key: "unaryRangeWrapper",
    value: function unaryRangeWrapper(op, arg, state) {
      var _a;

      if (arg instanceof _SimpleRangeValue.SimpleRangeValue && !state.arraysFlag) {
        arg = (_a = (0, _ArithmeticHelper.coerceRangeToScalar)(arg, state)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
      }

      if (arg instanceof _Cell.CellError) {
        return arg;
      }

      if (arg instanceof _SimpleRangeValue.SimpleRangeValue) {
        var newRaw = arg.data.map(function (row) {
          return row.map(op);
        });
        return _SimpleRangeValue.SimpleRangeValue.onlyValues(newRaw);
      }

      return op(arg);
    }
  }, {
    key: "binaryRangeWrapper",
    value: function binaryRangeWrapper(op, arg1, arg2, state) {
      var _a, _b;

      if (arg1 instanceof _SimpleRangeValue.SimpleRangeValue && !state.arraysFlag) {
        arg1 = (_a = (0, _ArithmeticHelper.coerceRangeToScalar)(arg1, state)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
      }

      if (arg1 instanceof _Cell.CellError) {
        return arg1;
      }

      if (arg2 instanceof _SimpleRangeValue.SimpleRangeValue && !state.arraysFlag) {
        arg2 = (_b = (0, _ArithmeticHelper.coerceRangeToScalar)(arg2, state)) !== null && _b !== void 0 ? _b : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
      }

      if (arg2 instanceof _Cell.CellError) {
        return arg2;
      }

      if (arg1 instanceof _SimpleRangeValue.SimpleRangeValue || arg2 instanceof _SimpleRangeValue.SimpleRangeValue) {
        if (!(arg1 instanceof _SimpleRangeValue.SimpleRangeValue)) {
          if (arg2.isAdHoc()) {
            var raw2 = arg2.data;

            for (var i = 0; i < raw2.length; i++) {
              for (var j = 0; j < raw2[0].length; j++) {
                raw2[i][j] = op(arg1, raw2[i][j]);
              }
            }

            return _SimpleRangeValue.SimpleRangeValue.onlyValues(raw2);
          } else {
            arg1 = _SimpleRangeValue.SimpleRangeValue.fromScalar(arg1);
          }
        }

        if (!(arg2 instanceof _SimpleRangeValue.SimpleRangeValue)) {
          if (arg1.isAdHoc()) {
            var raw1 = arg1.data;

            for (var _i2 = 0; _i2 < raw1.length; _i2++) {
              for (var _j = 0; _j < raw1[0].length; _j++) {
                raw1[_i2][_j] = op(raw1[_i2][_j], arg2);
              }
            }

            return _SimpleRangeValue.SimpleRangeValue.onlyValues(raw1);
          } else {
            arg2 = _SimpleRangeValue.SimpleRangeValue.fromScalar(arg2);
          }
        }

        if (arg1.width() === arg2.width() && arg1.height() === arg2.height()) {
          if (arg1.isAdHoc()) {
            var _raw = arg1.data;
            var _raw2 = arg2.data;

            for (var _i3 = 0; _i3 < _raw.length; _i3++) {
              for (var _j2 = 0; _j2 < _raw[0].length; _j2++) {
                _raw[_i3][_j2] = op(_raw[_i3][_j2], _raw2[_i3][_j2]);
              }
            }

            return _SimpleRangeValue.SimpleRangeValue.onlyValues(_raw);
          }

          if (arg2.isAdHoc()) {
            var _raw3 = arg1.data;
            var _raw4 = arg2.data;

            for (var _i4 = 0; _i4 < _raw3.length; _i4++) {
              for (var _j3 = 0; _j3 < _raw3[0].length; _j3++) {
                _raw4[_i4][_j3] = op(_raw3[_i4][_j3], _raw4[_i4][_j3]);
              }
            }

            return _SimpleRangeValue.SimpleRangeValue.onlyValues(_raw4);
          }
        }

        var width = Math.max(arg1.width(), arg2.width());
        var height = Math.max(arg1.height(), arg2.height());
        var ret = Array(height);

        for (var _i5 = 0; _i5 < height; _i5++) {
          ret[_i5] = Array(width);
        }

        for (var _i6 = 0; _i6 < height; _i6++) {
          var i1 = arg1.height() !== 1 ? _i6 : 0;
          var i2 = arg2.height() !== 1 ? _i6 : 0;

          for (var _j4 = 0; _j4 < width; _j4++) {
            var j1 = arg1.width() !== 1 ? _j4 : 0;
            var j2 = arg2.width() !== 1 ? _j4 : 0;

            if (i1 < arg1.height() && i2 < arg2.height() && j1 < arg1.width() && j2 < arg2.width()) {
              ret[_i6][_j4] = op(arg1.data[i1][j1], arg2.data[i2][j2]);
            } else {
              ret[_i6][_j4] = new _Cell.CellError(_Cell.ErrorType.NA);
            }
          }
        }

        return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
      }

      return op(arg1, arg2);
    }
  }]);

  return Interpreter;
}();

exports.Interpreter = Interpreter;

function unaryErrorWrapper(op, arg) {
  if (arg instanceof _Cell.CellError) {
    return arg;
  } else {
    return op(arg);
  }
}

function binaryErrorWrapper(op, arg1, arg2) {
  if (arg1 instanceof _Cell.CellError) {
    return arg1;
  } else if (arg2 instanceof _Cell.CellError) {
    return arg2;
  } else {
    return op(arg1, arg2);
  }
}

function wrapperForRootVertex(val, vertex) {
  if (val instanceof _Cell.CellError && vertex !== undefined) {
    return val.attachRootVertex(vertex);
  }

  return val;
}

/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.buildCriterionLambda = exports.buildCriterion = exports.CriterionType = exports.CriterionBuilder = void 0;

__webpack_require__(103);

var _InterpreterValue = __webpack_require__(255);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var CriterionType;
exports.CriterionType = CriterionType;

(function (CriterionType) {
  CriterionType["GREATER_THAN"] = "GREATER_THAN";
  CriterionType["GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL";
  CriterionType["LESS_THAN"] = "LESS_THAN";
  CriterionType["LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL";
  CriterionType["NOT_EQUAL"] = "NOT_EQUAL";
  CriterionType["EQUAL"] = "EQUAL";
})(CriterionType || (exports.CriterionType = CriterionType = {}));

var buildCriterion = function buildCriterion(operator, value) {
  return {
    operator: operator,
    value: value
  };
};

exports.buildCriterion = buildCriterion;

var CriterionBuilder = /*#__PURE__*/function () {
  function CriterionBuilder(config) {
    _classCallCheck(this, CriterionBuilder);

    var _a, _b, _c, _d;

    this.trueString = (_b = (_a = config.translationPackage.getMaybeFunctionTranslation('TRUE')) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== null && _b !== void 0 ? _b : 'true';
    this.falseString = (_d = (_c = config.translationPackage.getMaybeFunctionTranslation('FALSE')) === null || _c === void 0 ? void 0 : _c.toLowerCase()) !== null && _d !== void 0 ? _d : 'false';
  }

  _createClass(CriterionBuilder, [{
    key: "fromCellValue",
    value: function fromCellValue(raw, arithmeticHelper) {
      if (typeof raw !== 'string' && typeof raw !== 'boolean' && typeof raw !== 'number') {
        return undefined;
      }

      var criterion = this.parseCriterion(raw, arithmeticHelper);

      if (criterion === undefined) {
        return undefined;
      }

      return {
        raw: raw,
        lambda: buildCriterionLambda(criterion, arithmeticHelper)
      };
    }
  }, {
    key: "parseCriterion",
    value: function parseCriterion(criterion, arithmeticHelper) {
      if (typeof criterion === 'number' || typeof criterion === 'boolean') {
        return buildCriterion(CriterionType.EQUAL, criterion);
      } else if (typeof criterion === 'string') {
        var regexResult = ANY_CRITERION_REGEX.exec(criterion);
        var criterionValue;
        var criterionType;

        if (regexResult) {
          criterionType = StrToCriterionType(regexResult[1]);
          criterionValue = regexResult[2];
        } else {
          criterionType = CriterionType.EQUAL;
          criterionValue = criterion;
        }

        var value = arithmeticHelper.coerceToMaybeNumber(criterionValue);
        var boolvalue = criterionValue.toLowerCase() === this.trueString ? true : criterionValue.toLowerCase() === this.falseString ? false : undefined;

        if (criterionType === undefined) {
          return undefined;
        }

        if (criterionValue === '') {
          return buildCriterion(criterionType, null);
        } else if (value === undefined) {
          if (criterionType === CriterionType.EQUAL || criterionType === CriterionType.NOT_EQUAL) {
            return buildCriterion(criterionType, boolvalue !== null && boolvalue !== void 0 ? boolvalue : criterionValue);
          }
        } else {
          return buildCriterion(criterionType, (0, _InterpreterValue.getRawValue)(value));
        }
      }

      return undefined;
    }
  }]);

  return CriterionBuilder;
}();

exports.CriterionBuilder = CriterionBuilder;
var ANY_CRITERION_REGEX = /([<>=]+)(.*)/;

function StrToCriterionType(str) {
  switch (str) {
    case '>':
      return CriterionType.GREATER_THAN;

    case '>=':
      return CriterionType.GREATER_THAN_OR_EQUAL;

    case '<':
      return CriterionType.LESS_THAN;

    case '<=':
      return CriterionType.LESS_THAN_OR_EQUAL;

    case '<>':
      return CriterionType.NOT_EQUAL;

    case '=':
      return CriterionType.EQUAL;

    default:
      return undefined;
  }
}

var buildCriterionLambda = function buildCriterionLambda(criterion, arithmeticHelper) {
  switch (criterion.operator) {
    case CriterionType.GREATER_THAN:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            return typeof cellValue === 'number' && arithmeticHelper.floatCmp(cellValue, criterion.value) > 0;
          };
        } else {
          return function (_cellValue) {
            return false;
          };
        }
      }

    case CriterionType.GREATER_THAN_OR_EQUAL:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            return typeof cellValue === 'number' && arithmeticHelper.floatCmp(cellValue, criterion.value) >= 0;
          };
        } else {
          return function (_cellValue) {
            return false;
          };
        }
      }

    case CriterionType.LESS_THAN:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            return typeof cellValue === 'number' && arithmeticHelper.floatCmp(cellValue, criterion.value) < 0;
          };
        } else {
          return function (_cellValue) {
            return false;
          };
        }
      }

    case CriterionType.LESS_THAN_OR_EQUAL:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            return typeof cellValue === 'number' && arithmeticHelper.floatCmp(cellValue, criterion.value) <= 0;
          };
        } else {
          return function (_cellValue) {
            return false;
          };
        }
      }

    case CriterionType.EQUAL:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            if (typeof cellValue === 'number') {
              return arithmeticHelper.floatCmp(cellValue, criterion.value) === 0;
            } else if (typeof cellValue === 'string') {
              if (cellValue === '') {
                return false;
              }

              var val = arithmeticHelper.coerceToMaybeNumber(cellValue);

              if (val === undefined) {
                return false;
              }

              return arithmeticHelper.floatCmp(val, criterion.value) === 0;
            } else {
              return false;
            }
          };
        } else if (typeof criterion.value === 'string') {
          return arithmeticHelper.eqMatcherFunction(criterion.value);
        } else if (typeof criterion.value === 'boolean') {
          return function (cellValue) {
            return typeof cellValue === 'boolean' && cellValue === criterion.value;
          };
        } else {
          return function (cellValue) {
            return cellValue === _InterpreterValue.EmptyValue;
          };
        }
      }

    case CriterionType.NOT_EQUAL:
      {
        if (typeof criterion.value === 'number') {
          return function (cellValue) {
            if (typeof cellValue === 'number') {
              return arithmeticHelper.floatCmp(cellValue, criterion.value) !== 0;
            } else if (typeof cellValue === 'string') {
              if (cellValue === '') {
                return true;
              }

              var val = arithmeticHelper.coerceToMaybeNumber(cellValue);

              if (val === undefined) {
                return true;
              }

              return arithmeticHelper.floatCmp(val, criterion.value) !== 0;
            } else {
              return true;
            }
          };
        } else if (typeof criterion.value === 'string') {
          return arithmeticHelper.neqMatcherFunction(criterion.value);
        } else if (typeof criterion.value === 'boolean') {
          return function (cellValue) {
            return typeof cellValue !== 'boolean' || cellValue !== criterion.value;
          };
        } else {
          return function (cellValue) {
            return cellValue !== _InterpreterValue.EmptyValue;
          };
        }
      }
  }
};

exports.buildCriterionLambda = buildCriterionLambda;

/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.LazilyTransformingAstService = void 0;

__webpack_require__(149);

var _CombinedTransformer = __webpack_require__(334);

var _statistics = __webpack_require__(256);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var LazilyTransformingAstService = /*#__PURE__*/function () {
  function LazilyTransformingAstService(stats) {
    _classCallCheck(this, LazilyTransformingAstService);

    this.stats = stats;
    this.transformations = [];
  }

  _createClass(LazilyTransformingAstService, [{
    key: "version",
    value: function version() {
      return this.transformations.length;
    }
  }, {
    key: "addTransformation",
    value: function addTransformation(transformation) {
      if (this.combinedTransformer !== undefined) {
        this.combinedTransformer.add(transformation);
      } else {
        this.transformations.push(transformation);
      }

      return this.version();
    }
  }, {
    key: "beginCombinedMode",
    value: function beginCombinedMode(sheet) {
      this.combinedTransformer = new _CombinedTransformer.CombinedTransformer(sheet);
    }
  }, {
    key: "commitCombinedMode",
    value: function commitCombinedMode() {
      if (this.combinedTransformer === undefined) {
        throw 'Combined mode wasn\'t started';
      }

      this.transformations.push(this.combinedTransformer);
      this.combinedTransformer = undefined;
      return this.version();
    }
  }, {
    key: "applyTransformations",
    value: function applyTransformations(ast, address, version) {
      this.stats.start(_statistics.StatType.TRANSFORM_ASTS_POSTPONED);

      for (var v = version; v < this.transformations.length; v++) {
        var transformation = this.transformations[v];

        if (transformation.isIrreversible()) {
          this.undoRedo.storeDataForVersion(v, address, this.parser.computeHashFromAst(ast));
          this.parser.rememberNewAst(ast);
        }

        var _transformation$trans = transformation.transformSingleAst(ast, address),
            _transformation$trans2 = _slicedToArray(_transformation$trans, 2),
            newAst = _transformation$trans2[0],
            newAddress = _transformation$trans2[1];

        ast = newAst;
        address = newAddress;
      }

      var cachedAst = this.parser.rememberNewAst(ast);
      this.stats.end(_statistics.StatType.TRANSFORM_ASTS_POSTPONED);
      return [cachedAst, address, this.transformations.length];
    }
  }, {
    key: "getTransformationsFrom",
    value: /*#__PURE__*/regeneratorRuntime.mark(function getTransformationsFrom(version, filter) {
      var v, transformation;
      return regeneratorRuntime.wrap(function getTransformationsFrom$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              v = version;

            case 1:
              if (!(v < this.transformations.length)) {
                _context.next = 9;
                break;
              }

              transformation = this.transformations[v];

              if (!(!filter || filter(transformation))) {
                _context.next = 6;
                break;
              }

              _context.next = 6;
              return transformation;

            case 6:
              v++;
              _context.next = 1;
              break;

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, getTransformationsFrom, this);
    })
  }]);

  return LazilyTransformingAstService;
}();

exports.LazilyTransformingAstService = LazilyTransformingAstService;

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.CombinedTransformer = void 0;

__webpack_require__(1);

__webpack_require__(154);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var CombinedTransformer = /*#__PURE__*/function () {
  function CombinedTransformer(sheet) {
    _classCallCheck(this, CombinedTransformer);

    this.sheet = sheet;
    this.transformations = [];
  }

  _createClass(CombinedTransformer, [{
    key: "add",
    value: function add(transformation) {
      this.transformations.push(transformation);
    }
  }, {
    key: "performEagerTransformations",
    value: function performEagerTransformations(graph, parser) {
      this.transformations.forEach(function (transformation) {
        return transformation.performEagerTransformations(graph, parser);
      });
    }
  }, {
    key: "transformSingleAst",
    value: function transformSingleAst(ast, address) {
      var transformedAst = ast,
          transformedAddress = address;
      this.transformations.forEach(function (transformation) {
        var _transformation$trans = transformation.transformSingleAst(transformedAst, transformedAddress);

        var _transformation$trans2 = _slicedToArray(_transformation$trans, 2);

        transformedAst = _transformation$trans2[0];
        transformedAddress = _transformation$trans2[1];
      });
      return [transformedAst, transformedAddress];
    }
  }, {
    key: "isIrreversible",
    value: function isIrreversible() {
      return true;
    }
  }]);

  return CombinedTransformer;
}();

exports.CombinedTransformer = CombinedTransformer;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.buildColumnSearchStrategy = buildColumnSearchStrategy;

var _ColumnBinarySearch = __webpack_require__(336);

var _ColumnIndex = __webpack_require__(340);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function buildColumnSearchStrategy(dependencyGraph, config, statistics) {
  if (config.useColumnIndex) {
    return new _ColumnIndex.ColumnIndex(dependencyGraph, config, statistics);
  } else {
    return new _ColumnBinarySearch.ColumnBinarySearch(dependencyGraph, config);
  }
}

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.ColumnBinarySearch = void 0;

__webpack_require__(150);

__webpack_require__(337);

__webpack_require__(137);

var _ArithmeticHelper = __webpack_require__(249);

var _binarySearch = __webpack_require__(338);

var _InterpreterValue = __webpack_require__(255);

var _AdvancedFind2 = __webpack_require__(339);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ColumnBinarySearch = /*#__PURE__*/function (_AdvancedFind) {
  _inherits(ColumnBinarySearch, _AdvancedFind);

  var _super = _createSuper(ColumnBinarySearch);

  function ColumnBinarySearch(dependencyGraph, config) {
    var _this;

    _classCallCheck(this, ColumnBinarySearch);

    _this = _super.call(this, dependencyGraph);
    _this.dependencyGraph = dependencyGraph;
    _this.config = config;
    return _this;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars 


  _createClass(ColumnBinarySearch, [{
    key: "add",
    value: function add(value, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "remove",
    value: function remove(value, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "change",
    value: function change(oldValue, newValue, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "applyChanges",
    value: function applyChanges(contentChanges) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "addColumns",
    value: function addColumns(columnsSpan) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeColumns",
    value: function removeColumns(columnsSpan) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "moveValues",
    value: function moveValues(sourceRange, toRight, toBottom, toSheet) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeValues",
    value: function removeValues(range) {}
  }, {
    key: "find",
    value: function find(key, rangeValue, sorted) {
      if (typeof key === 'string') {
        key = (0, _ArithmeticHelper.forceNormalizeString)(key);
      }

      var range = rangeValue.range;

      if (range === undefined) {
        return rangeValue.valuesFromTopLeftCorner().map(_InterpreterValue.getRawValue).map(function (arg) {
          return typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
        }).indexOf(key);
      } else if (!sorted) {
        return this.dependencyGraph.computeListOfValuesInRange(range).findIndex(function (arg) {
          arg = (0, _InterpreterValue.getRawValue)(arg);
          arg = typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
          return arg === key;
        });
      } else {
        return (0, _binarySearch.rangeLowerBound)(range, key, this.dependencyGraph, 'row');
      }
    }
  }]);

  return ColumnBinarySearch;
}(_AdvancedFind2.AdvancedFind);

exports.ColumnBinarySearch = ColumnBinarySearch;

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $ = __webpack_require__(51);
var $findIndex = __webpack_require__(115).findIndex;
var addToUnscopables = __webpack_require__(121);

var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.es/ecma262/#sec-array.prototype.findindex
$({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables(FIND_INDEX);


/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.compare = compare;
exports.lowerBound = lowerBound;
exports.rangeLowerBound = rangeLowerBound;

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

var _Cell = __webpack_require__(143);

var _InterpreterValue = __webpack_require__(255);

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

/*
* If key exists returns first index of key element in range of sorted values
* Otherwise returns first index of greatest element smaller than key
* assuming sorted values in range
* */
function rangeLowerBound(range, key, dependencyGraph, coordinate) {
  //IMPORTANT: this function does not normalize input strings
  var end;

  if (coordinate === 'col') {
    end = range.effectiveEndColumn(dependencyGraph);
  } else {
    end = range.effectiveEndRow(dependencyGraph);
  }

  var start = range.start[coordinate];
  var centerValueFn;

  if (coordinate === 'row') {
    centerValueFn = function centerValueFn(center) {
      return (0, _InterpreterValue.getRawValue)(dependencyGraph.getCellValue((0, _Cell.simpleCellAddress)(range.sheet, range.start.col, center)));
    };
  } else {
    centerValueFn = function centerValueFn(center) {
      return (0, _InterpreterValue.getRawValue)(dependencyGraph.getCellValue((0, _Cell.simpleCellAddress)(range.sheet, center, range.start.row)));
    };
  }

  var pos = lowerBound(centerValueFn, key, start, end);

  if (_typeof(centerValueFn(pos)) !== _typeof(key)) {
    return -1;
  } else {
    return pos - start;
  }
}
/*
* If key exists returns first index of key element
* Otherwise returns first index of greatest element smaller than key
* assuming sorted values
* */


function lowerBound(value, key, start, end) {
  while (start <= end) {
    var center = Math.floor((start + end) / 2);
    var cmp = compare(key, value(center));

    if (cmp > 0) {
      start = center + 1;
    } else if (cmp < 0) {
      end = center - 1;
    } else if (start != center) {
      end = center;
    } else {
      return center;
    }
  }

  return end;
}
/*
* numbers < strings < false < true
* */


function compare(left, right) {
  if (_typeof(left) === _typeof(right)) {
    if (left === _InterpreterValue.EmptyValue) {
      return 0;
    }

    return left < right ? -1 : left > right ? 1 : 0;
  }

  if (left === _InterpreterValue.EmptyValue) {
    return -1;
  }

  if (right === _InterpreterValue.EmptyValue) {
    return 1;
  }

  if (right instanceof _Cell.CellError) {
    return -1;
  }

  if (typeof left === 'number' && typeof right === 'string') {
    return -1;
  }

  if (typeof left === 'number' && typeof right === 'boolean') {
    return -1;
  }

  if (typeof left === 'string' && typeof right === 'number') {
    return 1;
  }

  if (typeof left === 'string' && typeof right === 'boolean') {
    return -1;
  }

  return 1;
}

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.AdvancedFind = void 0;

var _InterpreterValue = __webpack_require__(255);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var AdvancedFind = /*#__PURE__*/function () {
  function AdvancedFind(dependencyGraph) {
    _classCallCheck(this, AdvancedFind);

    this.dependencyGraph = dependencyGraph;
  }

  _createClass(AdvancedFind, [{
    key: "advancedFind",
    value: function advancedFind(keyMatcher, rangeValue) {
      var values;
      var range = rangeValue.range;

      if (range === undefined) {
        values = rangeValue.valuesFromTopLeftCorner();
      } else {
        values = this.dependencyGraph.computeListOfValuesInRange(range);
      }

      for (var i = 0; i < values.length; i++) {
        if (keyMatcher((0, _InterpreterValue.getRawValue)(values[i]))) {
          return i;
        }
      }

      return -1;
    }
  }]);

  return AdvancedFind;
}();

exports.AdvancedFind = AdvancedFind;

/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.ColumnIndex = void 0;
exports.lowerBound = lowerBound;
exports.upperBound = upperBound;

__webpack_require__(120);

__webpack_require__(166);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(329);

__webpack_require__(267);

__webpack_require__(146);

var _Cell = __webpack_require__(143);

var _AddRowsTransformer = __webpack_require__(315);

var _RemoveRowsTransformer = __webpack_require__(319);

var _ArithmeticHelper = __webpack_require__(249);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _statistics = __webpack_require__(256);

var _ColumnBinarySearch = __webpack_require__(336);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ColumnIndex = /*#__PURE__*/function () {
  function ColumnIndex(dependencyGraph, config, stats) {
    _classCallCheck(this, ColumnIndex);

    this.dependencyGraph = dependencyGraph;
    this.config = config;
    this.stats = stats;
    this.index = new Map();
    this.transformingService = this.dependencyGraph.lazilyTransformingAstService;
    this.binarySearchStrategy = new _ColumnBinarySearch.ColumnBinarySearch(dependencyGraph, config);
  }

  _createClass(ColumnIndex, [{
    key: "add",
    value: function add(value, address) {
      if (value === _InterpreterValue.EmptyValue || value instanceof _Cell.CellError) {
        return;
      } else if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        var _iterator = _createForOfIteratorHelper(value.entriesFromTopLeftCorner(address)),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _step$value = _slicedToArray(_step.value, 2),
                arrayValue = _step$value[0],
                cellAddress = _step$value[1];

            this.addSingleCellValue((0, _InterpreterValue.getRawValue)(arrayValue), cellAddress);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        this.addSingleCellValue(value, address);
      }
    }
  }, {
    key: "remove",
    value: function remove(value, address) {
      if (value === undefined) {
        return;
      }

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        var _iterator2 = _createForOfIteratorHelper(value.entriesFromTopLeftCorner(address)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _step2$value = _slicedToArray(_step2.value, 2),
                arrayValue = _step2$value[0],
                cellAddress = _step2$value[1];

            this.removeSingleValue((0, _InterpreterValue.getRawValue)(arrayValue), cellAddress);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      } else {
        this.removeSingleValue(value, address);
      }
    }
  }, {
    key: "change",
    value: function change(oldValue, newValue, address) {
      if (oldValue === newValue) {
        return;
      }

      this.remove(oldValue, address);
      this.add(newValue, address);
    }
  }, {
    key: "applyChanges",
    value: function applyChanges(contentChanges) {
      var _iterator3 = _createForOfIteratorHelper(contentChanges),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var change = _step3.value;

          if (change.oldValue !== undefined) {
            this.change((0, _InterpreterValue.getRawValue)(change.oldValue), (0, _InterpreterValue.getRawValue)(change.value), change.address);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "moveValues",
    value: function moveValues(sourceRange, toRight, toBottom, toSheet) {
      var _iterator4 = _createForOfIteratorHelper(sourceRange),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var _step4$value = _slicedToArray(_step4.value, 2),
              value = _step4$value[0],
              address = _step4$value[1];

          var targetAddress = (0, _Cell.movedSimpleCellAddress)(address, toSheet, toRight, toBottom);
          this.remove(value, address);
          this.add(value, targetAddress);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }, {
    key: "removeValues",
    value: function removeValues(range) {
      var _iterator5 = _createForOfIteratorHelper(range),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _step5$value = _slicedToArray(_step5.value, 2),
              value = _step5$value[0],
              address = _step5$value[1];

          this.remove(value, address);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  }, {
    key: "find",
    value: function find(key, rangeValue, sorted) {
      var range = rangeValue.range;

      if (range === undefined) {
        return this.binarySearchStrategy.find(key, rangeValue, sorted);
      }

      this.ensureRecentData(range.sheet, range.start.col, key);
      var columnMap = this.getColumnMap(range.sheet, range.start.col);

      if (!columnMap) {
        return -1;
      }

      if (typeof key === 'string') {
        key = (0, _ArithmeticHelper.forceNormalizeString)(key);
      }

      var valueIndex = columnMap.get(key);

      if (!valueIndex) {
        return this.binarySearchStrategy.find(key, rangeValue, sorted);
      }

      var index = upperBound(valueIndex.index, range.start.row);
      var rowNumber = valueIndex.index[index];
      return rowNumber <= range.end.row ? rowNumber - range.start.row : this.binarySearchStrategy.find(key, rangeValue, sorted);
    }
  }, {
    key: "advancedFind",
    value: function advancedFind(keyMatcher, range) {
      return this.binarySearchStrategy.advancedFind(keyMatcher, range);
    }
  }, {
    key: "addColumns",
    value: function addColumns(columnsSpan) {
      var sheetIndex = this.index.get(columnsSpan.sheet);

      if (!sheetIndex) {
        return;
      }

      sheetIndex.splice.apply(sheetIndex, [columnsSpan.columnStart, 0].concat(_toConsumableArray(Array(columnsSpan.numberOfColumns))));
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(columnsSpan) {
      var sheetIndex = this.index.get(columnsSpan.sheet);

      if (!sheetIndex) {
        return;
      }

      sheetIndex.splice(columnsSpan.columnStart, columnsSpan.numberOfColumns);
    }
  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {
      this.index.delete(sheetId);
    }
  }, {
    key: "getColumnMap",
    value: function getColumnMap(sheet, col) {
      if (!this.index.has(sheet)) {
        this.index.set(sheet, []);
      }

      var sheetMap = this.index.get(sheet); // eslint-disable-line @typescript-eslint/no-non-null-assertion

      var columnMap = sheetMap[col];

      if (!columnMap) {
        columnMap = new Map();
        sheetMap[col] = columnMap;
      }

      return columnMap;
    }
  }, {
    key: "getValueIndex",
    value: function getValueIndex(sheet, col, value) {
      var columnMap = this.getColumnMap(sheet, col);
      var index = this.getColumnMap(sheet, col).get(value);

      if (!index) {
        index = {
          version: this.transformingService.version(),
          index: []
        };
        columnMap.set(value, index);
      }

      return index;
    }
  }, {
    key: "ensureRecentData",
    value: function ensureRecentData(sheet, col, value) {
      var valueIndex = this.getValueIndex(sheet, col, value);
      var actualVersion = this.transformingService.version();

      if (valueIndex.version === actualVersion) {
        return;
      }

      var relevantTransformations = this.transformingService.getTransformationsFrom(valueIndex.version, function (transformation) {
        return transformation.sheet === sheet && (transformation instanceof _AddRowsTransformer.AddRowsTransformer || transformation instanceof _RemoveRowsTransformer.RemoveRowsTransformer);
      });

      var _iterator6 = _createForOfIteratorHelper(relevantTransformations),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var transformation = _step6.value;

          if (transformation instanceof _AddRowsTransformer.AddRowsTransformer) {
            this.addRows(col, transformation.rowsSpan, value);
          } else if (transformation instanceof _RemoveRowsTransformer.RemoveRowsTransformer) {
            this.removeRows(col, transformation.rowsSpan, value);
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      valueIndex.version = actualVersion;
    }
  }, {
    key: "addSingleCellValue",
    value: function addSingleCellValue(value, address) {
      var _this = this;

      this.stats.measure(_statistics.StatType.BUILD_COLUMN_INDEX, function () {
        _this.ensureRecentData(address.sheet, address.col, value);

        if (typeof value === 'string') {
          value = (0, _ArithmeticHelper.forceNormalizeString)(value);
        }

        var valueIndex = _this.getValueIndex(address.sheet, address.col, value);

        _this.addValue(valueIndex, address.row);
      });
    }
  }, {
    key: "removeSingleValue",
    value: function removeSingleValue(value, address) {
      var _this2 = this;

      this.stats.measure(_statistics.StatType.BUILD_COLUMN_INDEX, function () {
        _this2.ensureRecentData(address.sheet, address.col, value);

        var columnMap = _this2.getColumnMap(address.sheet, address.col);

        if (typeof value === 'string') {
          value = (0, _ArithmeticHelper.forceNormalizeString)(value);
        }

        var valueIndex = columnMap.get(value);

        if (!valueIndex) {
          return;
        }

        var index = upperBound(valueIndex.index, address.row);
        valueIndex.index.splice(index, 1);

        if (valueIndex.index.length === 0) {
          columnMap.delete(value);
        }

        if (columnMap.size === 0) {
          delete _this2.index.get(address.sheet)[address.col]; // eslint-disable-line @typescript-eslint/no-non-null-assertion
        }
      });
    }
  }, {
    key: "addRows",
    value: function addRows(col, rowsSpan, value) {
      var valueIndex = this.getValueIndex(rowsSpan.sheet, col, value);
      this.shiftRows(valueIndex, rowsSpan.rowStart, rowsSpan.numberOfRows);
    }
  }, {
    key: "removeRows",
    value: function removeRows(col, rowsSpan, value) {
      var valueIndex = this.getValueIndex(rowsSpan.sheet, col, value);
      this.removeRowsFromValues(valueIndex, rowsSpan);
      this.shiftRows(valueIndex, rowsSpan.rowEnd + 1, -rowsSpan.numberOfRows);
    }
  }, {
    key: "addValue",
    value: function addValue(valueIndex, rowNumber) {
      var rowIndex = lowerBound(valueIndex.index, rowNumber);
      var value = valueIndex.index[rowIndex];

      if (value === rowNumber) {
        /* do not add same row twice */
        return;
      }

      if (rowIndex === valueIndex.index.length - 1) {
        valueIndex.index.push(rowNumber);
      } else {
        valueIndex.index.splice(rowIndex + 1, 0, rowNumber);
      }
    }
  }, {
    key: "removeRowsFromValues",
    value: function removeRowsFromValues(rows, rowsSpan) {
      var start = upperBound(rows.index, rowsSpan.rowStart);
      var end = lowerBound(rows.index, rowsSpan.rowEnd);

      if (rows.index[start] <= rowsSpan.rowEnd) {
        rows.index.splice(start, end - start + 1);
      }
    }
  }, {
    key: "shiftRows",
    value: function shiftRows(rows, afterRow, numberOfRows) {
      var index = upperBound(rows.index, afterRow);

      for (var i = index; i < rows.index.length; ++i) {
        rows.index[i] += numberOfRows;
      }
    }
  }]);

  return ColumnIndex;
}();
/*
* If key exists returns index of key
* Otherwise returns index of smallest element greater than key
* assuming sorted array and no repetitions
* */


exports.ColumnIndex = ColumnIndex;

function upperBound(values, key) {
  var start = 0;
  var end = values.length - 1;

  while (start <= end) {
    var center = Math.floor((start + end) / 2);

    if (key > values[center]) {
      start = center + 1;
    } else if (key < values[center]) {
      end = center - 1;
    } else {
      return center;
    }
  }

  return start;
}
/*
* If key exists returns index of key
* Otherwise returns index of greatest element smaller than key
* assuming sorted array and no repetitions
* */


function lowerBound(values, key) {
  var start = 0;
  var end = values.length - 1;

  while (start <= end) {
    var center = Math.floor((start + end) / 2);

    if (key > values[center]) {
      start = center + 1;
    } else if (key < values[center]) {
      end = center - 1;
    } else {
      return center;
    }
  }

  return end;
}

/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.NumberLiteralHelper = void 0;

__webpack_require__(168);

__webpack_require__(103);

__webpack_require__(167);

__webpack_require__(146);

__webpack_require__(179);

__webpack_require__(161);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
var NumberLiteralHelper = /*#__PURE__*/function () {
  function NumberLiteralHelper(config) {
    _classCallCheck(this, NumberLiteralHelper);

    this.config = config;
    var thousandSeparator = this.config.thousandSeparator === '.' ? "\\".concat(this.config.thousandSeparator) : this.config.thousandSeparator;
    var decimalSeparator = this.config.decimalSeparator === '.' ? "\\".concat(this.config.decimalSeparator) : this.config.decimalSeparator;
    this.numberPattern = new RegExp("^([+-]?((".concat(decimalSeparator, "\\d+)|(\\d+(").concat(thousandSeparator, "\\d{3,})*(").concat(decimalSeparator, "\\d*)?)))(e[+-]?\\d+)?$"));
    this.allThousandSeparatorsRegex = new RegExp("".concat(thousandSeparator), 'g');
  }

  _createClass(NumberLiteralHelper, [{
    key: "numericStringToMaybeNumber",
    value: function numericStringToMaybeNumber(input) {
      if (this.numberPattern.test(input)) {
        var num = this.numericStringToNumber(input);

        if (isNaN(num)) {
          return undefined;
        }

        return num;
      }

      return undefined;
    }
  }, {
    key: "numericStringToNumber",
    value: function numericStringToNumber(input) {
      var normalized = input.replace(this.allThousandSeparatorsRegex, '').replace(this.config.decimalSeparator, '.');
      return Number(normalized);
    }
  }]);

  return NumberLiteralHelper;
}();

exports.NumberLiteralHelper = NumberLiteralHelper;

/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(77);

__webpack_require__(1);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.Serialization = void 0;

__webpack_require__(150);

var _Cell = __webpack_require__(143);

var _DependencyGraph = __webpack_require__(147);

var _parser = __webpack_require__(169);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Serialization = /*#__PURE__*/function () {
  function Serialization(dependencyGraph, unparser, exporter) {
    _classCallCheck(this, Serialization);

    this.dependencyGraph = dependencyGraph;
    this.unparser = unparser;
    this.exporter = exporter;
  }

  _createClass(Serialization, [{
    key: "getCellFormula",
    value: function getCellFormula(address, targetAddress) {
      var formulaVertex = this.dependencyGraph.getCell(address);

      if (formulaVertex instanceof _DependencyGraph.FormulaCellVertex) {
        var formula = formulaVertex.getFormula(this.dependencyGraph.lazilyTransformingAstService);
        targetAddress = targetAddress !== null && targetAddress !== void 0 ? targetAddress : address;
        return this.unparser.unparse(formula, targetAddress);
      } else if (formulaVertex instanceof _DependencyGraph.ArrayVertex) {
        var arrayVertexAddress = formulaVertex.getAddress(this.dependencyGraph.lazilyTransformingAstService);

        if (arrayVertexAddress.row !== address.row || arrayVertexAddress.col !== address.col || arrayVertexAddress.sheet !== address.sheet) {
          return undefined;
        }

        targetAddress = targetAddress !== null && targetAddress !== void 0 ? targetAddress : address;

        var _formula = formulaVertex.getFormula(this.dependencyGraph.lazilyTransformingAstService);

        if (_formula !== undefined) {
          return this.unparser.unparse(_formula, targetAddress);
        }
      } else if (formulaVertex instanceof _DependencyGraph.ParsingErrorVertex) {
        return formulaVertex.getFormula();
      }

      return undefined;
    }
  }, {
    key: "getCellSerialized",
    value: function getCellSerialized(address, targetAddress) {
      var _a;

      return (_a = this.getCellFormula(address, targetAddress)) !== null && _a !== void 0 ? _a : this.getRawValue(address);
    }
  }, {
    key: "getCellValue",
    value: function getCellValue(address) {
      return this.exporter.exportValue(this.dependencyGraph.getScalarValue(address));
    }
  }, {
    key: "getRawValue",
    value: function getRawValue(address) {
      return this.dependencyGraph.getRawValue(address);
    }
  }, {
    key: "getSheetValues",
    value: function getSheetValues(sheet) {
      var _this = this;

      return this.genericSheetGetter(sheet, function (arg) {
        return _this.getCellValue(arg);
      });
    }
  }, {
    key: "getSheetFormulas",
    value: function getSheetFormulas(sheet) {
      var _this2 = this;

      return this.genericSheetGetter(sheet, function (arg) {
        return _this2.getCellFormula(arg);
      });
    }
  }, {
    key: "genericSheetGetter",
    value: function genericSheetGetter(sheet, getter) {
      var sheetHeight = this.dependencyGraph.getSheetHeight(sheet);
      var sheetWidth = this.dependencyGraph.getSheetWidth(sheet);
      var arr = new Array(sheetHeight);

      for (var i = 0; i < sheetHeight; i++) {
        arr[i] = new Array(sheetWidth);

        for (var j = 0; j < sheetWidth; j++) {
          var address = (0, _Cell.simpleCellAddress)(sheet, j, i);
          arr[i][j] = getter(address);
        }

        for (var _j = sheetWidth - 1; _j >= 0; _j--) {
          if (arr[i][_j] === null || arr[i][_j] === undefined) {
            arr[i].pop();
          } else {
            break;
          }
        }
      }

      for (var _i = sheetHeight - 1; _i >= 0; _i--) {
        if (arr[_i].length === 0) {
          arr.pop();
        } else {
          break;
        }
      }

      return arr;
    }
  }, {
    key: "genericAllSheetsGetter",
    value: function genericAllSheetsGetter(sheetGetter) {
      var result = {};

      var _iterator = _createForOfIteratorHelper(this.dependencyGraph.sheetMapping.displayNames()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var sheetName = _step.value;
          var sheetId = this.dependencyGraph.sheetMapping.fetch(sheetName);
          result[sheetName] = sheetGetter(sheetId);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return result;
    }
  }, {
    key: "getSheetSerialized",
    value: function getSheetSerialized(sheet) {
      var _this3 = this;

      return this.genericSheetGetter(sheet, function (arg) {
        return _this3.getCellSerialized(arg);
      });
    }
  }, {
    key: "getAllSheetsValues",
    value: function getAllSheetsValues() {
      var _this4 = this;

      return this.genericAllSheetsGetter(function (arg) {
        return _this4.getSheetValues(arg);
      });
    }
  }, {
    key: "getAllSheetsFormulas",
    value: function getAllSheetsFormulas() {
      var _this5 = this;

      return this.genericAllSheetsGetter(function (arg) {
        return _this5.getSheetFormulas(arg);
      });
    }
  }, {
    key: "getAllSheetsSerialized",
    value: function getAllSheetsSerialized() {
      var _this6 = this;

      return this.genericAllSheetsGetter(function (arg) {
        return _this6.getSheetSerialized(arg);
      });
    }
  }, {
    key: "getAllNamedExpressionsSerialized",
    value: function getAllNamedExpressionsSerialized() {
      var _this7 = this;

      var idMap = [];
      var id = 0;

      var _iterator2 = _createForOfIteratorHelper(this.dependencyGraph.sheetMapping.displayNames()),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var sheetName = _step2.value;
          var sheetId = this.dependencyGraph.sheetMapping.fetch(sheetName);
          idMap[sheetId] = id;
          id++;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return this.dependencyGraph.namedExpressions.getAllNamedExpressions().map(function (entry) {
        return {
          name: entry.expression.displayName,
          expression: _this7.getCellSerialized(entry.expression.address),
          scope: entry.scope !== undefined ? idMap[entry.scope] : undefined,
          options: entry.expression.options
        };
      });
    }
  }, {
    key: "withNewConfig",
    value: function withNewConfig(newConfig, namedExpressions) {
      var newUnparser = new _parser.Unparser(newConfig, (0, _parser.buildLexerConfig)(newConfig), this.dependencyGraph.sheetMapping.fetchDisplayName, namedExpressions);
      return new Serialization(this.dependencyGraph, newUnparser, this.exporter);
    }
  }]);

  return Serialization;
}();

exports.Serialization = Serialization;

/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.objectDestroy = objectDestroy;

__webpack_require__(344);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function objectDestroy(object) {
  for (var _i = 0, _Object$entries = Object.entries(object); _i < _Object$entries.length; _i++) {
    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1];

    if (value instanceof Function) {
      object[key] = postMortem(value);
    } else {
      delete object[key];
    }
  }
}

function postMortem(method) {
  return function () {
    throw new Error("The \"".concat(method, "\" method cannot be called because this HyperFormula instance has been destroyed"));
  };
}

/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var $entries = __webpack_require__(282).entries;

// `Object.entries` method
// https://tc39.es/ecma262/#sec-object.entries
$({ target: 'Object', stat: true }, {
  entries: function entries(O) {
    return $entries(O);
  }
});


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(234);

__webpack_require__(136);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.Events = exports.Emitter = void 0;

__webpack_require__(146);

__webpack_require__(137);

var _tinyEmitter = __webpack_require__(346);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Events;
exports.Events = Events;

(function (Events) {
  Events["SheetAdded"] = "sheetAdded";
  Events["SheetRemoved"] = "sheetRemoved";
  Events["SheetRenamed"] = "sheetRenamed";
  Events["NamedExpressionAdded"] = "namedExpressionAdded";
  Events["NamedExpressionRemoved"] = "namedExpressionRemoved";
  Events["ValuesUpdated"] = "valuesUpdated";
  Events["EvaluationSuspended"] = "evaluationSuspended";
  Events["EvaluationResumed"] = "evaluationResumed";
})(Events || (exports.Events = Events = {}));

var Emitter = /*#__PURE__*/function (_TinyEmitter) {
  _inherits(Emitter, _TinyEmitter);

  var _super = _createSuper(Emitter);

  function Emitter() {
    _classCallCheck(this, Emitter);

    return _super.apply(this, arguments);
  }

  _createClass(Emitter, [{
    key: "emit",
    value: function emit(event) {
      var _get2;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_get2 = _get(_getPrototypeOf(Emitter.prototype), "emit", this)).call.apply(_get2, [this, event].concat(args));

      return this;
    }
  }]);

  return Emitter;
}(_tinyEmitter.TinyEmitter);

exports.Emitter = Emitter;

/***/ }),
/* 346 */
/***/ (function(module, exports) {

function E () {
  // Keep this empty so it's easier to inherit from
  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
}

E.prototype = {
  on: function (name, callback, ctx) {
    var e = this.e || (this.e = {});

    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx: ctx
    });

    return this;
  },

  once: function (name, callback, ctx) {
    var self = this;
    function listener () {
      self.off(name, listener);
      callback.apply(ctx, arguments);
    };

    listener._ = callback
    return this.on(name, listener, ctx);
  },

  emit: function (name) {
    var data = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i = 0;
    var len = evtArr.length;

    for (i; i < len; i++) {
      evtArr[i].fn.apply(evtArr[i].ctx, data);
    }

    return this;
  },

  off: function (name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];

    if (evts && callback) {
      for (var i = 0, len = evts.length; i < len; i++) {
        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
          liveEvents.push(evts[i]);
      }
    }

    // Remove event from queue to prevent memory leak
    // Suggested by https://github.com/lazd
    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

    (liveEvents.length)
      ? e[name] = liveEvents
      : delete e[name];

    return this;
  }
};

module.exports = E;
module.exports.TinyEmitter = E;


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.default = void 0;

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
// import
var dictionary = {
  errors: {
    CYCLE: '#CYCLE!',
    DIV_BY_ZERO: '#DIV/0!',
    ERROR: '#ERROR!',
    NA: '#N/A',
    NAME: '#NAME?',
    NUM: '#NUM!',
    REF: '#REF!',
    SPILL: '#SPILL!',
    VALUE: '#VALUE!'
  },
  functions: {
    FILTER: 'FILTER',
    'ARRAY_CONSTRAIN': 'ARRAY_CONSTRAIN',
    ARRAYFORMULA: 'ARRAYFORMULA',
    ABS: 'ABS',
    ACOS: 'ACOS',
    ACOSH: 'ACOSH',
    ACOT: 'ACOT',
    ACOTH: 'ACOTH',
    AND: 'AND',
    ARABIC: 'ARABIC',
    ASIN: 'ASIN',
    ASINH: 'ASINH',
    ATAN2: 'ATAN2',
    ATAN: 'ATAN',
    ATANH: 'ATANH',
    AVERAGE: 'AVERAGE',
    AVERAGEA: 'AVERAGEA',
    AVERAGEIF: 'AVERAGEIF',
    BASE: 'BASE',
    BIN2DEC: 'BIN2DEC',
    BIN2HEX: 'BIN2HEX',
    BIN2OCT: 'BIN2OCT',
    BITAND: 'BITAND',
    BITLSHIFT: 'BITLSHIFT',
    BITOR: 'BITOR',
    BITRSHIFT: 'BITRSHIFT',
    BITXOR: 'BITXOR',
    CEILING: 'CEILING',
    CHAR: 'CHAR',
    CHOOSE: 'CHOOSE',
    CLEAN: 'CLEAN',
    CODE: 'CODE',
    COLUMN: 'COLUMN',
    COLUMNS: 'COLUMNS',
    CONCATENATE: 'CONCATENATE',
    CORREL: 'CORREL',
    COS: 'COS',
    COSH: 'COSH',
    COT: 'COT',
    COTH: 'COTH',
    COUNT: 'COUNT',
    COUNTA: 'COUNTA',
    COUNTBLANK: 'COUNTBLANK',
    COUNTIF: 'COUNTIF',
    COUNTIFS: 'COUNTIFS',
    COUNTUNIQUE: 'COUNTUNIQUE',
    CSC: 'CSC',
    CSCH: 'CSCH',
    CUMIPMT: 'CUMIPMT',
    CUMPRINC: 'CUMPRINC',
    DATE: 'DATE',
    DATEDIF: 'DATEDIF',
    DATEVALUE: 'DATEVALUE',
    DAY: 'DAY',
    DAYS360: 'DAYS360',
    DAYS: 'DAYS',
    DB: 'DB',
    DDB: 'DDB',
    DEC2BIN: 'DEC2BIN',
    DEC2HEX: 'DEC2HEX',
    DEC2OCT: 'DEC2OCT',
    DECIMAL: 'DECIMAL',
    DEGREES: 'DEGREES',
    DELTA: 'DELTA',
    DOLLARDE: 'DOLLARDE',
    DOLLARFR: 'DOLLARFR',
    EDATE: 'EDATE',
    EFFECT: 'EFFECT',
    EOMONTH: 'EOMONTH',
    ERF: 'ERF',
    ERFC: 'ERFC',
    EVEN: 'EVEN',
    EXACT: 'EXACT',
    EXP: 'EXP',
    FALSE: 'FALSE',
    FIND: 'FIND',
    FORMULATEXT: 'FORMULATEXT',
    FV: 'FV',
    FVSCHEDULE: 'FVSCHEDULE',
    HEX2BIN: 'HEX2BIN',
    HEX2DEC: 'HEX2DEC',
    HEX2OCT: 'HEX2OCT',
    HLOOKUP: 'HLOOKUP',
    HOUR: 'HOUR',
    IF: 'IF',
    IFERROR: 'IFERROR',
    IFNA: 'IFNA',
    INDEX: 'INDEX',
    INT: 'INT',
    INTERVAL: 'INTERVAL',
    IPMT: 'IPMT',
    ISBINARY: 'ISBINARY',
    ISBLANK: 'ISBLANK',
    ISERR: 'ISERR',
    ISERROR: 'ISERROR',
    ISEVEN: 'ISEVEN',
    ISFORMULA: 'ISFORMULA',
    ISLOGICAL: 'ISLOGICAL',
    ISNA: 'ISNA',
    ISNONTEXT: 'ISNONTEXT',
    ISNUMBER: 'ISNUMBER',
    ISODD: 'ISODD',
    ISOWEEKNUM: 'ISOWEEKNUM',
    ISPMT: 'ISPMT',
    ISREF: 'ISREF',
    ISTEXT: 'ISTEXT',
    LEFT: 'LEFT',
    LEN: 'LEN',
    LN: 'LN',
    LOG10: 'LOG10',
    LOG: 'LOG',
    LOWER: 'LOWER',
    MATCH: 'MATCH',
    MAX: 'MAX',
    MAXA: 'MAXA',
    MAXPOOL: 'MAXPOOL',
    MEDIAN: 'MEDIAN',
    MEDIANPOOL: 'MEDIANPOOL',
    MID: 'MID',
    MIN: 'MIN',
    MINA: 'MINA',
    MINUTE: 'MINUTE',
    MIRR: 'MIRR',
    MMULT: 'MMULT',
    MOD: 'MOD',
    MONTH: 'MONTH',
    NA: 'NA',
    NETWORKDAYS: 'NETWORKDAYS',
    'NETWORKDAYS.INTL': 'NETWORKDAYS.INTL',
    NOMINAL: 'NOMINAL',
    NOT: 'NOT',
    NOW: 'NOW',
    NPER: 'NPER',
    NPV: 'NPV',
    OCT2BIN: 'OCT2BIN',
    OCT2DEC: 'OCT2DEC',
    OCT2HEX: 'OCT2HEX',
    ODD: 'ODD',
    OFFSET: 'OFFSET',
    OR: 'OR',
    PI: 'PI',
    PMT: 'PMT',
    PDURATION: 'PDURATION',
    PRODUCT: 'PRODUCT',
    POWER: 'POWER',
    PPMT: 'PPMT',
    PROPER: 'PROPER',
    PV: 'PV',
    RADIANS: 'RADIANS',
    RAND: 'RAND',
    RATE: 'RATE',
    REPLACE: 'REPLACE',
    REPT: 'REPT',
    RIGHT: 'RIGHT',
    ROMAN: 'ROMAN',
    ROUND: 'ROUND',
    ROUNDDOWN: 'ROUNDDOWN',
    ROUNDUP: 'ROUNDUP',
    ROW: 'ROW',
    ROWS: 'ROWS',
    RRI: 'RRI',
    SEARCH: 'SEARCH',
    SEC: 'SEC',
    SECH: 'SECH',
    SECOND: 'SECOND',
    SHEET: 'SHEET',
    SHEETS: 'SHEETS',
    SIN: 'SIN',
    SINH: 'SINH',
    SLN: 'SLN',
    SPLIT: 'SPLIT',
    SQRT: 'SQRT',
    STDEVA: 'STDEVA',
    'STDEV.P': 'STDEV.P',
    STDEVPA: 'STDEVPA',
    'STDEV.S': 'STDEV.S',
    SUBSTITUTE: 'SUBSTITUTE',
    SUBTOTAL: 'SUBTOTAL',
    SUM: 'SUM',
    SUMIF: 'SUMIF',
    SUMIFS: 'SUMIFS',
    SUMPRODUCT: 'SUMPRODUCT',
    SUMSQ: 'SUMSQ',
    SWITCH: 'SWITCH',
    SYD: 'SYD',
    T: 'T',
    TAN: 'TAN',
    TANH: 'TANH',
    TBILLEQ: 'TBILLEQ',
    TBILLPRICE: 'TBILLPRICE',
    TBILLYIELD: 'TBILLYIELD',
    TEXT: 'TEXT',
    TIME: 'TIME',
    TIMEVALUE: 'TIMEVALUE',
    TODAY: 'TODAY',
    TRANSPOSE: 'TRANSPOSE',
    TRIM: 'TRIM',
    TRUE: 'TRUE',
    TRUNC: 'TRUNC',
    UNICHAR: 'UNICHAR',
    UNICODE: 'UNICODE',
    UPPER: 'UPPER',
    VARA: 'VARA',
    'VAR.P': 'VAR.P',
    VARPA: 'VARPA',
    'VAR.S': 'VAR.S',
    VLOOKUP: 'VLOOKUP',
    WEEKDAY: 'WEEKDAY',
    WEEKNUM: 'WEEKNUM',
    WORKDAY: 'WORKDAY',
    'WORKDAY.INTL': 'WORKDAY.INTL',
    XNPV: 'XNPV',
    XOR: 'XOR',
    YEAR: 'YEAR',
    YEARFRAC: 'YEARFRAC',
    'HF.ADD': 'HF.ADD',
    'HF.CONCAT': 'HF.CONCAT',
    'HF.DIVIDE': 'HF.DIVIDE',
    'HF.EQ': 'HF.EQ',
    'HF.GT': 'HF.GT',
    'HF.GTE': 'HF.GTE',
    'HF.LT': 'HF.LT',
    'HF.LTE': 'HF.LTE',
    'HF.MINUS': 'HF.MINUS',
    'HF.MULTIPLY': 'HF.MULTIPLY',
    'HF.NE': 'HF.NE',
    'HF.POW': 'HF.POW',
    'HF.UMINUS': 'HF.UMINUS',
    'HF.UNARY_PERCENT': 'HF.UNARY_PERCENT',
    'HF.UPLUS': 'HF.UPLUS',
    VARP: 'VARP',
    VAR: 'VAR',
    STDEVP: 'STDEVP',
    STDEV: 'STDEV',
    'EXPON.DIST': 'EXPON.DIST',
    FISHER: 'FISHER',
    FISHERINV: 'FISHERINV',
    GAMMA: 'GAMMA',
    'GAMMA.DIST': 'GAMMA.DIST',
    GAMMALN: 'GAMMALN',
    'GAMMALN.PRECISE': 'GAMMALN.PRECISE',
    'GAMMA.INV': 'GAMMA.INV',
    GAUSS: 'GAUSS',
    FACT: 'FACT',
    FACTDOUBLE: 'FACTDOUBLE',
    COMBIN: 'COMBIN',
    COMBINA: 'COMBINA',
    GCD: 'GCD',
    LCM: 'LCM',
    MROUND: 'MROUND',
    MULTINOMIAL: 'MULTINOMIAL',
    QUOTIENT: 'QUOTIENT',
    RANDBETWEEN: 'RANDBETWEEN',
    SERIESSUM: 'SERIESSUM',
    SIGN: 'SIGN',
    SQRTPI: 'SQRTPI',
    SUMX2MY2: 'SUMX2MY2',
    SUMX2PY2: 'SUMX2PY2',
    SUMXMY2: 'SUMXMY2',
    'EXPONDIST': 'EXPONDIST',
    GAMMADIST: 'GAMMADIST',
    GAMMAINV: 'GAMMAINV',
    'BETA.DIST': 'BETA.DIST',
    BETADIST: 'BETADIST',
    'BETA.INV': 'BETA.INV',
    BETAINV: 'BETAINV',
    'BINOM.DIST': 'BINOM.DIST',
    BINOMDIST: 'BINOMDIST',
    'BINOM.INV': 'BINOM.INV',
    BESSELI: 'BESSELI',
    BESSELJ: 'BESSELJ',
    BESSELK: 'BESSELK',
    BESSELY: 'BESSELY',
    'CHISQ.DIST': 'CHISQ.DIST',
    'CHISQ.DIST.RT': 'CHISQ.DIST.RT',
    'CHISQ.INV': 'CHISQ.INV',
    'CHISQ.INV.RT': 'CHISQ.INV.RT',
    CHIDIST: 'CHIDIST',
    CHIINV: 'CHIINV',
    'F.DIST': 'F.DIST',
    'F.DIST.RT': 'F.DIST.RT',
    'F.INV': 'F.INV',
    'F.INV.RT': 'F.INV.RT',
    FDIST: 'FDIST',
    FINV: 'FINV',
    WEIBULL: 'WEIBULL',
    'WEIBULL.DIST': 'WEIBULL.DIST',
    POISSON: 'POISSON',
    'POISSON.DIST': 'POISSON.DIST',
    'HYPGEOM.DIST': 'HYPGEOM.DIST',
    HYPGEOMDIST: 'HYPGEOMDIST',
    'T.DIST': 'T.DIST',
    'T.DIST.2T': 'T.DIST.2T',
    'T.DIST.RT': 'T.DIST.RT',
    'T.INV': 'T.INV',
    'T.INV.2T': 'T.INV.2T',
    TDIST: 'TDIST',
    TINV: 'TINV',
    LOGINV: 'LOGINV',
    'LOGNORM.DIST': 'LOGNORM.DIST',
    'LOGNORM.INV': 'LOGNORM.INV',
    LOGNORMDIST: 'LOGNORMDIST',
    'NORM.DIST': 'NORM.DIST',
    'NORM.INV': 'NORM.INV',
    'NORM.S.DIST': 'NORM.S.DIST',
    'NORM.S.INV': 'NORM.S.INV',
    NORMDIST: 'NORMDIST',
    NORMINV: 'NORMINV',
    NORMSDIST: 'NORMSDIST',
    NORMSINV: 'NORMSINV',
    PHI: 'PHI',
    'NEGBINOM.DIST': 'NEGBINOM.DIST',
    'NEGBINOMDIST': 'NEGBINOMDIST',
    COMPLEX: 'COMPLEX',
    IMABS: 'IMABS',
    IMAGINARY: 'IMAGINARY',
    IMARGUMENT: 'IMARGUMENT',
    IMCONJUGATE: 'IMCONJUGATE',
    IMCOS: 'IMCOS',
    IMCOSH: 'IMCOSH',
    IMCOT: 'IMCOT',
    IMCSC: 'IMCSC',
    IMCSCH: 'IMCSCH',
    IMDIV: 'IMDIV',
    IMEXP: 'IMEXP',
    IMLN: 'IMLN',
    IMLOG10: 'IMLOG10',
    IMLOG2: 'IMLOG2',
    IMPOWER: 'IMPOWER',
    IMPRODUCT: 'IMPRODUCT',
    IMREAL: 'IMREAL',
    IMSEC: 'IMSEC',
    IMSECH: 'IMSECH',
    IMSIN: 'IMSIN',
    IMSINH: 'IMSINH',
    IMSQRT: 'IMSQRT',
    IMSUB: 'IMSUB',
    IMSUM: 'IMSUM',
    IMTAN: 'IMTAN',
    LARGE: 'LARGE',
    SMALL: 'SMALL',
    AVEDEV: 'AVEDEV',
    CONFIDENCE: 'CONFIDENCE',
    'CONFIDENCE.NORM': 'CONFIDENCE.NORM',
    'CONFIDENCE.T': 'CONFIDENCE.T',
    DEVSQ: 'DEVSQ',
    GEOMEAN: 'GEOMEAN',
    HARMEAN: 'HARMEAN',
    CRITBINOM: 'CRITBINOM',
    'COVARIANCE.P': 'COVARIANCE.P',
    'COVARIANCE.S': 'COVARIANCE.S',
    'COVAR': 'COVAR',
    PEARSON: 'PEARSON',
    RSQ: 'RSQ',
    STANDARDIZE: 'STANDARDIZE',
    'Z.TEST': 'Z.TEST',
    ZTEST: 'ZTEST',
    'F.TEST': 'F.TEST',
    FTEST: 'FTEST',
    STEYX: 'STEYX',
    SLOPE: 'SLOPE',
    'CHISQ.TEST': 'CHISQ.TEST',
    CHITEST: 'CHITEST',
    'T.TEST': 'T.TEST',
    TTEST: 'TTEST',
    SKEW: 'SKEW',
    'SKEW.P': 'SKEW.P',
    WEIBULLDIST: 'WEIBULLDIST',
    VARS: 'VARS',
    TINV2T: 'TINV2T',
    TDISTRT: 'TDISTRT',
    TDIST2T: 'TDIST2T',
    STDEVS: 'STDEVS',
    FINVRT: 'FINVRT',
    FDISTRT: 'FDISTRT',
    CHIDISTRT: 'CHIDISTRT',
    CHIINVRT: 'CHIINVRT',
    COVARIANCEP: 'COVARIANCEP',
    COVARIANCES: 'COVARIANCES',
    LOGNORMINV: 'LOGNORMINV',
    POISSONDIST: 'POISSONDIST',
    SKEWP: 'SKEWP',
    'CEILING.MATH': 'CEILING.MATH',
    FLOOR: 'FLOOR',
    'FLOOR.MATH': 'FLOOR.MATH',
    'CEILING.PRECISE': 'CEILING.PRECISE',
    'FLOOR.PRECISE': 'FLOOR.PRECISE',
    'ISO.CEILING': 'ISO.CEILING'
  },
  langCode: 'enGB',
  ui: {
    NEW_SHEET_PREFIX: 'Sheet'
  }
};
var _default = dictionary;
exports.default = _default;

/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _FunctionPlugin = __webpack_require__(248);

exports.FunctionPlugin = _FunctionPlugin.FunctionPlugin;

/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.TrigonometryPlugin = exports.TextPlugin = exports.SumprodPlugin = exports.SumifPlugin = exports.StatisticalPlugin = exports.StatisticalAggregationPlugin = exports.SqrtPlugin = exports.SimpleArithmerticPlugin = exports.RoundingPlugin = exports.RomanPlugin = exports.RandomPlugin = exports.RadixConversionPlugin = exports.RadiansPlugin = exports.PowerPlugin = exports.NumericAggregationPlugin = exports.ModuloPlugin = exports.MedianPlugin = exports.MatrixPlugin = exports.MathPlugin = exports.MathConstantsPlugin = exports.LookupPlugin = exports.LogarithmPlugin = exports.IsOddPlugin = exports.IsEvenPlugin = exports.InformationPlugin = exports.FormulaTextPlugin = exports.FinancialPlugin = exports.ExpPlugin = exports.DeltaPlugin = exports.DegreesPlugin = exports.DateTimePlugin = exports.CountUniquePlugin = exports.CountBlankPlugin = exports.ComplexPlugin = exports.CodePlugin = exports.CharPlugin = exports.BooleanPlugin = exports.BitwiseLogicOperationsPlugin = exports.BitShiftPlugin = exports.ArrayPlugin = exports.AbsPlugin = void 0;

var _ArrayPlugin = __webpack_require__(350);

exports.ArrayPlugin = _ArrayPlugin.ArrayPlugin;

var _AbsPlugin = __webpack_require__(351);

exports.AbsPlugin = _AbsPlugin.AbsPlugin;

var _BitShiftPlugin = __webpack_require__(352);

exports.BitShiftPlugin = _BitShiftPlugin.BitShiftPlugin;

var _BitwiseLogicOperationsPlugin = __webpack_require__(353);

exports.BitwiseLogicOperationsPlugin = _BitwiseLogicOperationsPlugin.BitwiseLogicOperationsPlugin;

var _BooleanPlugin = __webpack_require__(354);

exports.BooleanPlugin = _BooleanPlugin.BooleanPlugin;

var _CharPlugin = __webpack_require__(355);

exports.CharPlugin = _CharPlugin.CharPlugin;

var _CodePlugin = __webpack_require__(358);

exports.CodePlugin = _CodePlugin.CodePlugin;

var _CountBlankPlugin = __webpack_require__(359);

exports.CountBlankPlugin = _CountBlankPlugin.CountBlankPlugin;

var _CountUniquePlugin = __webpack_require__(360);

exports.CountUniquePlugin = _CountUniquePlugin.CountUniquePlugin;

var _DateTimePlugin = __webpack_require__(361);

exports.DateTimePlugin = _DateTimePlugin.DateTimePlugin;

var _DegreesPlugin = __webpack_require__(362);

exports.DegreesPlugin = _DegreesPlugin.DegreesPlugin;

var _DeltaPlugin = __webpack_require__(363);

exports.DeltaPlugin = _DeltaPlugin.DeltaPlugin;

var _ExpPlugin = __webpack_require__(364);

exports.ExpPlugin = _ExpPlugin.ExpPlugin;

var _FinancialPlugin = __webpack_require__(365);

exports.FinancialPlugin = _FinancialPlugin.FinancialPlugin;

var _FormulaTextPlugin = __webpack_require__(366);

exports.FormulaTextPlugin = _FormulaTextPlugin.FormulaTextPlugin;

var _InformationPlugin = __webpack_require__(367);

exports.InformationPlugin = _InformationPlugin.InformationPlugin;

var _IsEvenPlugin = __webpack_require__(368);

exports.IsEvenPlugin = _IsEvenPlugin.IsEvenPlugin;

var _IsOddPlugin = __webpack_require__(369);

exports.IsOddPlugin = _IsOddPlugin.IsOddPlugin;

var _LogarithmPlugin = __webpack_require__(370);

exports.LogarithmPlugin = _LogarithmPlugin.LogarithmPlugin;

var _MathConstantsPlugin = __webpack_require__(371);

exports.MathConstantsPlugin = _MathConstantsPlugin.MathConstantsPlugin;

var _MatrixPlugin = __webpack_require__(372);

exports.MatrixPlugin = _MatrixPlugin.MatrixPlugin;

var _MedianPlugin = __webpack_require__(373);

exports.MedianPlugin = _MedianPlugin.MedianPlugin;

var _ModuloPlugin = __webpack_require__(374);

exports.ModuloPlugin = _ModuloPlugin.ModuloPlugin;

var _NumericAggregationPlugin = __webpack_require__(375);

exports.NumericAggregationPlugin = _NumericAggregationPlugin.NumericAggregationPlugin;

var _PowerPlugin = __webpack_require__(376);

exports.PowerPlugin = _PowerPlugin.PowerPlugin;

var _RadiansPlugin = __webpack_require__(377);

exports.RadiansPlugin = _RadiansPlugin.RadiansPlugin;

var _RadixConversionPlugin = __webpack_require__(378);

exports.RadixConversionPlugin = _RadixConversionPlugin.RadixConversionPlugin;

var _RandomPlugin = __webpack_require__(379);

exports.RandomPlugin = _RandomPlugin.RandomPlugin;

var _RoundingPlugin = __webpack_require__(380);

exports.RoundingPlugin = _RoundingPlugin.RoundingPlugin;

var _SqrtPlugin = __webpack_require__(381);

exports.SqrtPlugin = _SqrtPlugin.SqrtPlugin;

var _SumifPlugin = __webpack_require__(382);

exports.SumifPlugin = _SumifPlugin.SumifPlugin;

var _SumprodPlugin = __webpack_require__(385);

exports.SumprodPlugin = _SumprodPlugin.SumprodPlugin;

var _TextPlugin = __webpack_require__(386);

exports.TextPlugin = _TextPlugin.TextPlugin;

var _TrigonometryPlugin = __webpack_require__(388);

exports.TrigonometryPlugin = _TrigonometryPlugin.TrigonometryPlugin;

var _LookupPlugin = __webpack_require__(397);

exports.LookupPlugin = _LookupPlugin.LookupPlugin;

var _RomanPlugin = __webpack_require__(399);

exports.RomanPlugin = _RomanPlugin.RomanPlugin;

var _SimpleArithmertic = __webpack_require__(400);

exports.SimpleArithmerticPlugin = _SimpleArithmertic.SimpleArithmerticPlugin;

var _StatisticalPlugin = __webpack_require__(401);

exports.StatisticalPlugin = _StatisticalPlugin.StatisticalPlugin;

var _MathPlugin = __webpack_require__(404);

exports.MathPlugin = _MathPlugin.MathPlugin;

var _ComplexPlugin = __webpack_require__(406);

exports.ComplexPlugin = _ComplexPlugin.ComplexPlugin;

var _StatisticalAggregationPlugin = __webpack_require__(407);

exports.StatisticalAggregationPlugin = _StatisticalAggregationPlugin.StatisticalAggregationPlugin;

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.ArrayPlugin = void 0;

__webpack_require__(150);

__webpack_require__(77);

__webpack_require__(236);

__webpack_require__(161);

__webpack_require__(137);

var _ArraySize = __webpack_require__(246);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _parser = __webpack_require__(169);

var _ArithmeticHelper = __webpack_require__(249);

var _InterpreterState = __webpack_require__(247);

var _SimpleRangeValue = __webpack_require__(245);

var _FunctionPlugin2 = __webpack_require__(248);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArrayPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(ArrayPlugin, _FunctionPlugin);

  var _super = _createSuper(ArrayPlugin);

  function ArrayPlugin() {
    _classCallCheck(this, ArrayPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ArrayPlugin, [{
    key: "arrayformula",
    value: function arrayformula(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ARRAYFORMULA'), function (value) {
        return value;
      });
    }
  }, {
    key: "arrayformulaArraySize",
    value: function arrayformulaArraySize(ast, state) {
      var _this = this;

      if (ast.args.length !== 1) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('ARRAYFORMULA');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      return subChecks[0];
    }
  }, {
    key: "arrayconstrain",
    value: function arrayconstrain(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ARRAY_CONSTRAIN'), function (range, numRows, numCols) {
        numRows = Math.min(numRows, range.height());
        numCols = Math.min(numCols, range.width());
        var data = range.data;
        var ret = [];

        for (var i = 0; i < numRows; i++) {
          ret.push(data[i].slice(0, numCols));
        }

        return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
      });
    }
  }, {
    key: "arrayconstrainArraySize",
    value: function arrayconstrainArraySize(ast, state) {
      var _this2 = this;

      if (ast.args.length !== 3) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('ARRAY_CONSTRAIN');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this2.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var _subChecks$ = subChecks[0],
          height = _subChecks$.height,
          width = _subChecks$.width;

      if (ast.args[1].type === _parser.AstNodeType.NUMBER) {
        height = Math.min(height, ast.args[1].value);
      }

      if (ast.args[2].type === _parser.AstNodeType.NUMBER) {
        width = Math.min(width, ast.args[2].value);
      }

      if (height < 1 || width < 1 || !Number.isInteger(height) || !Number.isInteger(width)) {
        return _ArraySize.ArraySize.error();
      }

      return new _ArraySize.ArraySize(width, height);
    }
  }, {
    key: "filter",
    value: function filter(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FILTER'), function (rangeVals) {
        for (var _len = arguments.length, rangeFilters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rangeFilters[_key - 1] = arguments[_key];
        }

        for (var _i = 0, _rangeFilters = rangeFilters; _i < _rangeFilters.length; _i++) {
          var filter = _rangeFilters[_i];

          if (rangeVals.width() !== filter.width() || rangeVals.height() !== filter.height()) {
            return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
          }
        }

        if (rangeVals.width() > 1 && rangeVals.height() > 1) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongDimension);
        }

        var vals = rangeVals.data;
        var ret = [];

        for (var i = 0; i < rangeVals.height(); i++) {
          var row = [];

          for (var j = 0; j < rangeVals.width(); j++) {
            var ok = true;

            var _iterator = _createForOfIteratorHelper(rangeFilters),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _filter = _step.value;
                var val = (0, _ArithmeticHelper.coerceScalarToBoolean)(_filter.data[i][j]);

                if (val !== true) {
                  ok = false;
                  break;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (ok) {
              row.push(vals[i][j]);
            }
          }

          if (row.length > 0) {
            ret.push(row);
          }
        }

        if (ret.length > 0) {
          return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
        } else {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EmptyRange);
        }
      });
    }
  }, {
    key: "filterArraySize",
    value: function filterArraySize(ast, state) {
      var _this3 = this;

      if (ast.args.length <= 1) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('FILTER');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this3.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var width = Math.max.apply(Math, _toConsumableArray(subChecks.map(function (val) {
        return val.width;
      })));
      var height = Math.max.apply(Math, _toConsumableArray(subChecks.map(function (val) {
        return val.height;
      })));
      return new _ArraySize.ArraySize(width, height);
    }
  }]);

  return ArrayPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.ArrayPlugin = ArrayPlugin;
ArrayPlugin.implementedFunctions = {
  'ARRAYFORMULA': {
    method: 'arrayformula',
    arraySizeMethod: 'arrayformulaArraySize',
    arrayFunction: true,
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }]
  },
  'ARRAY_CONSTRAIN': {
    method: 'arrayconstrain',
    arraySizeMethod: 'arrayconstrainArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }],
    vectorizationForbidden: true
  },
  'FILTER': {
    method: 'filter',
    arraySizeMethod: 'filterArraySize',
    arrayFunction: true,
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    repeatLastArgs: 1
  }
};

/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.AbsPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var AbsPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(AbsPlugin, _FunctionPlugin);

  var _super = _createSuper(AbsPlugin);

  function AbsPlugin() {
    _classCallCheck(this, AbsPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(AbsPlugin, [{
    key: "abs",
    value: function abs(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ABS'), Math.abs);
    }
  }]);

  return AbsPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.AbsPlugin = AbsPlugin;
AbsPlugin.implementedFunctions = {
  'ABS': {
    method: 'abs',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.BitShiftPlugin = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MAX_48BIT_INTEGER = 281474976710655;
var SHIFT_MIN_POSITIONS = -53;
var SHIFT_MAX_POSITIONS = 53;

var BitShiftPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(BitShiftPlugin, _FunctionPlugin);

  var _super = _createSuper(BitShiftPlugin);

  function BitShiftPlugin() {
    _classCallCheck(this, BitShiftPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(BitShiftPlugin, [{
    key: "bitlshift",
    value: function bitlshift(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BITLSHIFT'), shiftLeft);
    }
  }, {
    key: "bitrshift",
    value: function bitrshift(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BITRSHIFT'), shiftRight);
    }
  }]);

  return BitShiftPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.BitShiftPlugin = BitShiftPlugin;
BitShiftPlugin.implementedFunctions = {
  'BITLSHIFT': {
    method: 'bitlshift',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: SHIFT_MIN_POSITIONS,
      maxValue: SHIFT_MAX_POSITIONS
    }]
  },
  'BITRSHIFT': {
    method: 'bitrshift',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: SHIFT_MIN_POSITIONS,
      maxValue: SHIFT_MAX_POSITIONS
    }]
  }
};

function shiftLeft(value, positions) {
  if (positions < 0) {
    return shiftRight(value, -positions);
  } else {
    return validate(value * Math.pow(2, positions));
  }
}

function shiftRight(value, positions) {
  if (positions < 0) {
    return shiftLeft(value, -positions);
  } else {
    return validate(Math.floor(value / Math.pow(2, positions)));
  }
}

function validate(result) {
  if (result > MAX_48BIT_INTEGER) {
    return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.BitshiftLong);
  } else {
    return result;
  }
}

/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.BitwiseLogicOperationsPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var BitwiseLogicOperationsPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(BitwiseLogicOperationsPlugin, _FunctionPlugin);

  var _super = _createSuper(BitwiseLogicOperationsPlugin);

  function BitwiseLogicOperationsPlugin() {
    _classCallCheck(this, BitwiseLogicOperationsPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(BitwiseLogicOperationsPlugin, [{
    key: "bitand",
    value: function bitand(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BITAND'), function (left, right) {
        return left & right;
      });
    }
  }, {
    key: "bitor",
    value: function bitor(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BITOR'), function (left, right) {
        return left | right;
      });
    }
  }, {
    key: "bitxor",
    value: function bitxor(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BITXOR'), function (left, right) {
        return left ^ right;
      });
    }
  }]);

  return BitwiseLogicOperationsPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.BitwiseLogicOperationsPlugin = BitwiseLogicOperationsPlugin;
BitwiseLogicOperationsPlugin.implementedFunctions = {
  'BITAND': {
    method: 'bitand',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }]
  },
  'BITOR': {
    method: 'bitor',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }]
  },
  'BITXOR': {
    method: 'bitxor',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }]
  }
};

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.BooleanPlugin = void 0;

__webpack_require__(1);

__webpack_require__(154);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing boolean functions
 */
var BooleanPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(BooleanPlugin, _FunctionPlugin);

  var _super = _createSuper(BooleanPlugin);

  function BooleanPlugin() {
    _classCallCheck(this, BooleanPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(BooleanPlugin, [{
    key: "literalTrue",
    value:
    /**
     * Corresponds to TRUE()
     *
     * Returns the logical true
     *
     * @param ast
     * @param state
     */
    function literalTrue(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TRUE'), function () {
        return true;
      });
    }
    /**
     * Corresponds to FALSE()
     *
     * Returns the logical false
     *
     * @param ast
     * @param state
     */

  }, {
    key: "literalFalse",
    value: function literalFalse(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FALSE'), function () {
        return false;
      });
    }
    /**
     * Corresponds to IF(expression, value_if_true, value_if_false)
     *
     * Returns value specified as second argument if expression is true and third argument if expression is false
     *
     * @param ast
     * @param state
     */

  }, {
    key: "conditionalIf",
    value: function conditionalIf(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IF'), function (condition, arg2, arg3) {
        return condition ? arg2 : arg3;
      });
    }
    /**
     * Corresponds to AND(expression1, [expression2, ...])
     *
     * Returns true if all of the provided arguments are logically true, and false if any of it is logically false
     *
     * @param ast
     * @param state
     */

  }, {
    key: "and",
    value: function and(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('AND'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return !args.some(function (arg) {
          return !arg;
        });
      });
    }
    /**
     * Corresponds to OR(expression1, [expression2, ...])
     *
     * Returns true if any of the provided arguments are logically true, and false otherwise
     *
     * @param ast
     * @param state
     */

  }, {
    key: "or",
    value: function or(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('OR'), function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        return args.some(function (arg) {
          return arg;
        });
      });
    }
  }, {
    key: "not",
    value: function not(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NOT'), function (arg) {
        return !arg;
      });
    }
  }, {
    key: "xor",
    value: function xor(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('XOR'), function () {
        var cnt = 0;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        args.forEach(function (arg) {
          if (arg) {
            cnt++;
          }
        });
        return cnt % 2 === 1;
      });
    }
  }, {
    key: "switch",
    value: function _switch(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('SWITCH'), function (selector) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }

        var n = args.length;
        var i = 0;

        for (; i + 1 < n; i += 2) {
          if (args[i] instanceof _Cell.CellError) {
            continue;
          }

          if (_this.arithmeticHelper.eq(selector, args[i])) {
            return args[i + 1];
          }
        }

        if (i < n) {
          return args[i];
        } else {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.NoDefault);
        }
      });
    }
  }, {
    key: "iferror",
    value: function iferror(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IFERROR'), function (arg1, arg2) {
        if (arg1 instanceof _Cell.CellError) {
          return arg2;
        } else {
          return arg1;
        }
      });
    }
  }, {
    key: "ifna",
    value: function ifna(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IFNA'), function (arg1, arg2) {
        if (arg1 instanceof _Cell.CellError && arg1.type === _Cell.ErrorType.NA) {
          return arg2;
        } else {
          return arg1;
        }
      });
    }
  }, {
    key: "choose",
    value: function choose(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHOOSE'), function (selector) {
        if (selector > (arguments.length <= 1 ? 0 : arguments.length - 1)) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.Selector);
        }

        return selector - 1 + 1 < 1 || arguments.length <= selector - 1 + 1 ? undefined : arguments[selector - 1 + 1];
      });
    }
  }]);

  return BooleanPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.BooleanPlugin = BooleanPlugin;
BooleanPlugin.implementedFunctions = {
  'TRUE': {
    method: 'literalTrue',
    parameters: []
  },
  'FALSE': {
    method: 'literalFalse',
    parameters: []
  },
  'IF': {
    method: 'conditionalIf',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      defaultValue: false,
      passSubtype: true
    }]
  },
  'AND': {
    method: 'and',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'OR': {
    method: 'or',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'XOR': {
    method: 'xor',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'NOT': {
    method: 'not',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'SWITCH': {
    method: 'switch',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }],
    repeatLastArgs: 1
  },
  'IFERROR': {
    method: 'iferror',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }]
  },
  'IFNA': {
    method: 'ifna',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }]
  },
  'CHOOSE': {
    method: 'choose',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR,
      passSubtype: true
    }],
    repeatLastArgs: 1
  }
};

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.CharPlugin = void 0;

__webpack_require__(356);

__webpack_require__(357);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CharPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(CharPlugin, _FunctionPlugin);

  var _super = _createSuper(CharPlugin);

  function CharPlugin() {
    _classCallCheck(this, CharPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(CharPlugin, [{
    key: "char",
    value: function char(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHAR'), function (value) {
        if (value < 1 || value >= 256) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.CharacterCodeBounds);
        }

        return String.fromCharCode(Math.trunc(value));
      });
    }
  }, {
    key: "unichar",
    value: function unichar(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHAR'), function (value) {
        if (value < 1 || value >= 1114112) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.CharacterCodeBounds);
        }

        return String.fromCodePoint(Math.trunc(value));
      });
    }
  }]);

  return CharPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.CharPlugin = CharPlugin;
CharPlugin.implementedFunctions = {
  'CHAR': {
    method: 'char',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'UNICHAR': {
    method: 'unichar',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);

var ceil = Math.ceil;
var floor = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
$({ target: 'Math', stat: true }, {
  trunc: function trunc(it) {
    return (it > 0 ? floor : ceil)(it);
  }
});


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var global = __webpack_require__(4);
var uncurryThis = __webpack_require__(11);
var toAbsoluteIndex = __webpack_require__(61);

var RangeError = global.RangeError;
var fromCharCode = String.fromCharCode;
// eslint-disable-next-line es/no-string-fromcodepoint -- required for testing
var $fromCodePoint = String.fromCodePoint;
var join = uncurryThis([].join);

// length should be 1, old FF problem
var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;

// `String.fromCodePoint` method
// https://tc39.es/ecma262/#sec-string.fromcodepoint
$({ target: 'String', stat: true, forced: INCORRECT_LENGTH }, {
  // eslint-disable-next-line no-unused-vars -- required for `.length`
  fromCodePoint: function fromCodePoint(x) {
    var elements = [];
    var length = arguments.length;
    var i = 0;
    var code;
    while (length > i) {
      code = +arguments[i++];
      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
      elements[i] = code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);
    } return join(elements, '');
  }
});


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.CodePlugin = void 0;

__webpack_require__(302);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var CodePlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(CodePlugin, _FunctionPlugin);

  var _super = _createSuper(CodePlugin);

  function CodePlugin() {
    _classCallCheck(this, CodePlugin);

    return _super.apply(this, arguments);
  }

  _createClass(CodePlugin, [{
    key: "code",
    value: function code(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CODE'), function (value) {
        if (value.length === 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.EmptyString);
        }

        return value.charCodeAt(0);
      });
    }
  }, {
    key: "unicode",
    value: function unicode(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('UNICODE'), function (value) {
        var _a;

        return (_a = value.codePointAt(0)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.EmptyString);
      });
    }
  }]);

  return CodePlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.CodePlugin = CodePlugin;
CodePlugin.implementedFunctions = {
  'CODE': {
    method: 'code',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'UNICODE': {
    method: 'unicode',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  }
};

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.CountBlankPlugin = void 0;

__webpack_require__(1);

__webpack_require__(154);

__webpack_require__(137);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing MEDIAN function
 */
var CountBlankPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(CountBlankPlugin, _FunctionPlugin);

  var _super = _createSuper(CountBlankPlugin);

  function CountBlankPlugin() {
    _classCallCheck(this, CountBlankPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(CountBlankPlugin, [{
    key: "countblank",
    value: function countblank(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COUNTBLANK'), function () {
        var counter = 0;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        args.forEach(function (arg) {
          if (arg === _InterpreterValue.EmptyValue) {
            counter++;
          }
        });
        return counter;
      });
    }
  }]);

  return CountBlankPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.CountBlankPlugin = CountBlankPlugin;
CountBlankPlugin.implementedFunctions = {
  'COUNTBLANK': {
    method: 'countblank',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }],
    repeatLastArgs: 1,
    expandRanges: true
  }
};

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

exports.__esModule = true;
exports.CountUniquePlugin = void 0;

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(151);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing COUNTUNIQUE function
 */
var CountUniquePlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(CountUniquePlugin, _FunctionPlugin);

  var _super = _createSuper(CountUniquePlugin);

  function CountUniquePlugin() {
    _classCallCheck(this, CountUniquePlugin);

    return _super.apply(this, arguments);
  }

  _createClass(CountUniquePlugin, [{
    key: "countunique",
    value:
    /**
     * Corresponds to COUNTUNIQUE(Number1, Number2, ...).
     *
     * Returns number of unique numbers from arguments
     *
     * @param ast
     * @param state
     */
    function countunique(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COUNTUNIQUE'), function () {
        var valuesSet = new Set();
        var errorsSet = new Set();

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        for (var _i = 0, _args = args; _i < _args.length; _i++) {
          var scalarValue = _args[_i];

          if (scalarValue instanceof _Cell.CellError) {
            errorsSet.add(scalarValue.type);
          } else if (scalarValue !== '') {
            valuesSet.add(scalarValue);
          }
        }

        return valuesSet.size + errorsSet.size;
      });
    }
  }]);

  return CountUniquePlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.CountUniquePlugin = CountUniquePlugin;
CountUniquePlugin.implementedFunctions = {
  'COUNTUNIQUE': {
    method: 'countunique',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }],
    repeatLastArgs: 1,
    expandRanges: true
  }
};

/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

exports.__esModule = true;
exports.DateTimePlugin = void 0;

__webpack_require__(356);

__webpack_require__(157);

__webpack_require__(1);

__webpack_require__(272);

__webpack_require__(120);

__webpack_require__(151);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(103);

__webpack_require__(166);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _DateTimeHelper = __webpack_require__(294);

var _errorMessage = __webpack_require__(238);

var _format = __webpack_require__(296);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing date-specific functions
 */
var DateTimePlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(DateTimePlugin, _FunctionPlugin);

  var _super = _createSuper(DateTimePlugin);

  function DateTimePlugin() {
    var _this;

    _classCallCheck(this, DateTimePlugin);

    _this = _super.apply(this, arguments);

    _this.isoweeknumCore = function (day) {
      var absoluteDay = Math.floor(_this.dateTimeHelper.relativeNumberToAbsoluteNumber(day));

      var date = _this.dateTimeHelper.numberToSimpleDate(day);

      var yearStart = _this.dateTimeHelper.dateToNumber({
        year: date.year,
        month: 1,
        day: 1
      });

      var yearStartAbsolute = _this.dateTimeHelper.relativeNumberToAbsoluteNumber(yearStart);

      var firstThursdayAbs = yearStartAbsolute + ((4 - yearStartAbsolute) % 7 + 7) % 7;
      var ret = Math.floor((absoluteDay - 1) / 7) - Math.floor((firstThursdayAbs - 1) / 7) + 1;

      if (ret === 0) {
        return _this.isoweeknumCore(day - 7) + 1;
      }

      return ret;
    };

    _this.days360Core = function (startDate, endDate, mode) {
      var start = _this.dateTimeHelper.numberToSimpleDate(startDate);

      var end = _this.dateTimeHelper.numberToSimpleDate(endDate);

      var nStart, nEnd;

      if (mode) {
        nStart = (0, _DateTimeHelper.toBasisEU)(start);
        nEnd = (0, _DateTimeHelper.toBasisEU)(end);
      } else {
        var _this$dateTimeHelper$ = _this.dateTimeHelper.toBasisUS(start, end);

        var _this$dateTimeHelper$2 = _slicedToArray(_this$dateTimeHelper$, 2);

        nStart = _this$dateTimeHelper$2[0];
        nEnd = _this$dateTimeHelper$2[1];
      }

      return 360 * (nEnd.year - nStart.year) + 30 * (nEnd.month - nStart.month) + nEnd.day - nStart.day;
    };

    return _this;
  }
  /**
   * Corresponds to DATE(year, month, day)
   *
   * Converts a provided year, month and day into date
   *
   * @param ast
   * @param state
   */


  _createClass(DateTimePlugin, [{
    key: "date",
    value: function date(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('DATE'), function (year, month, day) {
        var d = Math.trunc(day);
        var m = Math.trunc(month);
        var y = Math.trunc(year);

        if (y < _this2.dateTimeHelper.getEpochYearZero()) {
          y += _this2.dateTimeHelper.getEpochYearZero();
        }

        var delta = Math.floor((m - 1) / 12);
        y += delta;
        m -= delta * 12;
        var date = {
          year: y,
          month: m,
          day: 1
        };

        if (_this2.dateTimeHelper.isValidDate(date)) {
          var ret = _this2.dateTimeHelper.dateToNumber(date) + (d - 1);
          ret = _this2.dateTimeHelper.getWithinBounds(ret);

          if (ret === undefined) {
            return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DateBounds);
          }

          return ret;
        }

        return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.InvalidDate);
      });
    }
  }, {
    key: "time",
    value: function time(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TIME'), function (h, m, s) {
        var ret = (0, _DateTimeHelper.timeToNumber)({
          hours: Math.trunc(h),
          minutes: Math.trunc(m),
          seconds: Math.trunc(s)
        });

        if (ret < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NegativeTime);
        }

        return ret % 1;
      });
    }
  }, {
    key: "eomonth",
    value: function eomonth(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('EOMONTH'), function (dateNumber, numberOfMonthsToShift) {
        var date = _this3.dateTimeHelper.numberToSimpleDate(dateNumber);

        var ret = _this3.dateTimeHelper.dateToNumber(_this3.dateTimeHelper.endOfMonth((0, _DateTimeHelper.offsetMonth)(date, numberOfMonthsToShift)));

        ret = _this3.dateTimeHelper.getWithinBounds(ret);

        if (ret === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DateBounds);
        }

        return ret;
      });
    }
  }, {
    key: "day",
    value: function day(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('DAY'), function (dateNumber) {
        return _this4.dateTimeHelper.numberToSimpleDate(dateNumber).day;
      });
    }
  }, {
    key: "days",
    value: function days(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DAYS'), function (endDate, startDate) {
        return Math.trunc(endDate) - Math.trunc(startDate);
      });
    }
    /**
     * Corresponds to MONTH(date)
     *
     * Returns the month of the year specified by a given date
     *
     * @param ast
     * @param state
     */

  }, {
    key: "month",
    value: function month(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('MONTH'), function (dateNumber) {
        return _this5.dateTimeHelper.numberToSimpleDate(dateNumber).month;
      });
    }
    /**
     * Corresponds to YEAR(date)
     *
     * Returns the year specified by a given date
     *
     * @param ast
     * @param state
     */

  }, {
    key: "year",
    value: function year(ast, state) {
      var _this6 = this;

      return this.runFunction(ast.args, state, this.metadata('YEAR'), function (dateNumber) {
        return _this6.dateTimeHelper.numberToSimpleDate(dateNumber).year;
      });
    }
  }, {
    key: "hour",
    value: function hour(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HOUR'), function (timeNumber) {
        return (0, _DateTimeHelper.numberToSimpleTime)((0, _DateTimeHelper.roundToNearestSecond)(timeNumber) % 1).hours;
      });
    }
  }, {
    key: "minute",
    value: function minute(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MINUTE'), function (timeNumber) {
        return (0, _DateTimeHelper.numberToSimpleTime)((0, _DateTimeHelper.roundToNearestSecond)(timeNumber) % 1).minutes;
      });
    }
  }, {
    key: "second",
    value: function second(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SECOND'), function (timeNumber) {
        return (0, _DateTimeHelper.numberToSimpleTime)((0, _DateTimeHelper.roundToNearestSecond)(timeNumber) % 1).seconds;
      });
    }
    /**
     * Corresponds to TEXT(number, format)
     *
     * Tries to convert number to specified date format.
     *
     * @param ast
     * @param state
     */

  }, {
    key: "text",
    value: function text(ast, state) {
      var _this7 = this;

      return this.runFunction(ast.args, state, this.metadata('TEXT'), function (numberRepresentation, formatArg) {
        return (0, _format.format)(numberRepresentation, formatArg, _this7.config, _this7.dateTimeHelper);
      });
    }
  }, {
    key: "weekday",
    value: function weekday(ast, state) {
      var _this8 = this;

      return this.runFunction(ast.args, state, this.metadata('WEEKDAY'), function (day, type) {
        var absoluteDay = Math.floor(_this8.dateTimeHelper.relativeNumberToAbsoluteNumber(day));

        if (type === 3) {
          return (absoluteDay - 1) % 7;
        }

        var offset = weekdayOffsets.get(type);

        if (offset === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.BadMode);
        }

        return (absoluteDay - offset) % 7 + 1;
      });
    }
  }, {
    key: "weeknum",
    value: function weeknum(ast, state) {
      var _this9 = this;

      return this.runFunction(ast.args, state, this.metadata('WEEKNUM'), function (day, type) {
        var absoluteDay = Math.floor(_this9.dateTimeHelper.relativeNumberToAbsoluteNumber(day));

        var date = _this9.dateTimeHelper.numberToSimpleDate(day);

        var yearStart = _this9.dateTimeHelper.dateToNumber({
          year: date.year,
          month: 1,
          day: 1
        });

        var yearStartAbsolute = _this9.dateTimeHelper.relativeNumberToAbsoluteNumber(yearStart);

        if (type === 21) {
          return _this9.isoweeknumCore(day);
        }

        var offset = weekdayOffsets.get(type);

        if (offset === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.BadMode);
        }

        return Math.floor((absoluteDay - offset) / 7) - Math.floor((yearStartAbsolute - offset) / 7) + 1;
      });
    }
  }, {
    key: "isoweeknum",
    value: function isoweeknum(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISOWEEKNUM'), this.isoweeknumCore);
    }
  }, {
    key: "datevalue",
    value: function datevalue(ast, state) {
      var _this10 = this;

      return this.runFunction(ast.args, state, this.metadata('DATEVALUE'), function (date) {
        var _this10$dateTimeHelpe = _this10.dateTimeHelper.parseDateTimeFromConfigFormats(date),
            dateTime = _this10$dateTimeHelpe.dateTime;

        if (dateTime === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.IncorrectDateTime);
        }

        if (!(0, _DateTimeHelper.instanceOfSimpleDate)(dateTime)) {
          return 0;
        }

        return ((0, _DateTimeHelper.instanceOfSimpleTime)(dateTime) ? Math.trunc((0, _DateTimeHelper.timeToNumber)(dateTime)) : 0) + _this10.dateTimeHelper.dateToNumber(dateTime);
      });
    }
  }, {
    key: "timevalue",
    value: function timevalue(ast, state) {
      var _this11 = this;

      return this.runFunction(ast.args, state, this.metadata('TIMEVALUE'), function (date) {
        var dateNumber = _this11.dateTimeHelper.dateStringToDateNumber(date);

        if (dateNumber === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.IncorrectDateTime);
        }

        return (0, _InterpreterValue.getRawValue)(dateNumber) % 1;
      });
    }
  }, {
    key: "now",
    value: function now(ast, state) {
      var _this12 = this;

      return this.runFunction(ast.args, state, this.metadata('NOW'), function () {
        var now = new Date(Date.now());
        return (0, _DateTimeHelper.timeToNumber)({
          hours: now.getHours(),
          minutes: now.getMinutes(),
          seconds: now.getSeconds()
        }) + _this12.dateTimeHelper.dateToNumber({
          year: now.getFullYear(),
          month: now.getMonth() + 1,
          day: now.getDate()
        });
      });
    }
  }, {
    key: "today",
    value: function today(ast, state) {
      var _this13 = this;

      return this.runFunction(ast.args, state, this.metadata('TODAY'), function () {
        var now = new Date(Date.now());
        return _this13.dateTimeHelper.dateToNumber({
          year: now.getFullYear(),
          month: now.getMonth() + 1,
          day: now.getDate()
        });
      });
    }
  }, {
    key: "edate",
    value: function edate(ast, state) {
      var _this14 = this;

      return this.runFunction(ast.args, state, this.metadata('EDATE'), function (dateNumber, delta) {
        var date = _this14.dateTimeHelper.numberToSimpleDate(dateNumber);

        var newDate = (0, _DateTimeHelper.truncateDayInMonth)((0, _DateTimeHelper.offsetMonth)(date, delta));

        var ret = _this14.dateTimeHelper.dateToNumber(newDate);

        ret = _this14.dateTimeHelper.getWithinBounds(ret);

        if (ret === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DateBounds);
        }

        return ret;
      });
    }
  }, {
    key: "datedif",
    value: function datedif(ast, state) {
      var _this15 = this;

      return this.runFunction(ast.args, state, this.metadata('DATEDIF'), function (startDate, endDate, unit) {
        if (startDate > endDate) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.StartEndDate);
        }

        if (unit === 'D') {
          return Math.floor(endDate) - Math.floor(startDate);
        }

        var start = _this15.dateTimeHelper.numberToSimpleDate(startDate);

        var end = _this15.dateTimeHelper.numberToSimpleDate(endDate);

        switch (unit) {
          case 'M':
            return (end.year - start.year) * 12 + (end.month - start.month) - (end.day < start.day ? 1 : 0);

          case 'YM':
            return (12 + (end.month - start.month) - (end.day < start.day ? 1 : 0)) % 12;

          case 'Y':
            if (end.month > start.month || end.month === start.month && end.day >= start.day) {
              return end.year - start.year;
            } else {
              return end.year - start.year - 1;
            }

          case 'MD':
            if (end.day >= start.day) {
              return end.day - start.day;
            } else {
              var m = end.month === 1 ? 12 : end.month - 1;
              var y = end.month === 1 ? end.year - 1 : end.year;
              return _this15.dateTimeHelper.daysInMonth(y, m) + end.day - start.day;
            }

          case 'YD':
            if (end.month > start.month || end.month === start.month && end.day >= start.day) {
              return Math.floor(endDate) - _this15.dateTimeHelper.dateToNumber({
                year: end.year,
                month: start.month,
                day: start.day
              });
            } else {
              return Math.floor(endDate) - Math.floor(startDate) - 365 * (end.year - start.year - 1) - _this15.dateTimeHelper.leapYearsCount(end.year - 1) + _this15.dateTimeHelper.leapYearsCount(start.year);
            }

          default:
            return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.BadMode);
        }
      });
    }
  }, {
    key: "days360",
    value: function days360(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DAYS360'), this.days360Core);
    }
  }, {
    key: "yearfrac",
    value: function yearfrac(ast, state) {
      var _this16 = this;

      return this.runFunction(ast.args, state, this.metadata('YEARFRAC'), function (startDate, endDate, mode) {
        startDate = Math.trunc(startDate);
        endDate = Math.trunc(endDate);

        if (startDate > endDate) {
          var _ref = [endDate, startDate];
          startDate = _ref[0];
          endDate = _ref[1];
        }

        switch (mode) {
          case 0:
            return _this16.days360Core(startDate, endDate, false) / 360;

          case 1:
            return (endDate - startDate) / _this16.dateTimeHelper.yearLengthForBasis(_this16.dateTimeHelper.numberToSimpleDate(startDate), _this16.dateTimeHelper.numberToSimpleDate(endDate));

          case 2:
            return (endDate - startDate) / 360;

          case 3:
            return (endDate - startDate) / 365;

          case 4:
            return _this16.days360Core(startDate, endDate, true) / 360;
        }

        throw new Error('Should not be reachable.');
      });
    }
  }, {
    key: "interval",
    value: function interval(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('INTERVAL'), function (arg) {
        arg = Math.trunc(arg);
        var second = arg % 60;
        arg = Math.trunc(arg / 60);
        var minute = arg % 60;
        arg = Math.trunc(arg / 60);
        var hour = arg % 24;
        arg = Math.trunc(arg / 24);
        var day = arg % 30;
        arg = Math.trunc(arg / 30);
        var month = arg % 12;
        var year = Math.trunc(arg / 12);
        return 'P' + (year > 0 ? year + 'Y' : '') + (month > 0 ? month + 'M' : '') + (day > 0 ? day + 'D' : '') + 'T' + (hour > 0 ? hour + 'H' : '') + (minute > 0 ? minute + 'M' : '') + (second > 0 ? second + 'S' : '');
      });
    }
  }, {
    key: "networkdays",
    value: function networkdays(ast, state) {
      var _this17 = this;

      return this.runFunction(ast.args, state, this.metadata('NETWORKDAYS'), function (start, end, holidays) {
        return _this17.networkdayscore(start, end, 1, holidays);
      });
    }
  }, {
    key: "networkdaysintl",
    value: function networkdaysintl(ast, state) {
      var _this18 = this;

      return this.runFunction(ast.args, state, this.metadata('NETWORKDAYS.INTL'), function (start, end, weekend, holidays) {
        return _this18.networkdayscore(start, end, weekend, holidays);
      });
    }
  }, {
    key: "workday",
    value: function workday(ast, state) {
      var _this19 = this;

      return this.runFunction(ast.args, state, this.metadata('WORKDAY'), function (start, end, holidays) {
        return _this19.workdaycore(start, end, 1, holidays);
      });
    }
  }, {
    key: "workdayintl",
    value: function workdayintl(ast, state) {
      var _this20 = this;

      return this.runFunction(ast.args, state, this.metadata('WORKDAY.INTL'), function (start, end, weekend, holidays) {
        return _this20.workdaycore(start, end, weekend, holidays);
      });
    }
  }, {
    key: "networkdayscore",
    value: function networkdayscore(start, end, weekend, holidays) {
      start = Math.trunc(start);
      end = Math.trunc(end);
      var multiplier = 1;

      if (start > end) {
        var _ref2 = [end, start];
        start = _ref2[0];
        end = _ref2[1];
        multiplier = -1;
      }

      var weekendPattern = computeWeekendPattern(weekend);

      if (weekendPattern instanceof _Cell.CellError) {
        return weekendPattern;
      }

      var filteredHolidays = this.simpleRangeToFilteredHolidays(weekendPattern, holidays);

      if (filteredHolidays instanceof _Cell.CellError) {
        return filteredHolidays;
      }

      return multiplier * this.countWorkdays(start, end, weekendPattern, filteredHolidays);
    }
  }, {
    key: "workdaycore",
    value: function workdaycore(start, delta, weekend, holidays) {
      start = Math.trunc(start);
      delta = Math.trunc(delta);
      var weekendPattern = computeWeekendPattern(weekend);

      if (weekendPattern instanceof _Cell.CellError) {
        return weekendPattern;
      }

      var filteredHolidays = this.simpleRangeToFilteredHolidays(weekendPattern, holidays);

      if (filteredHolidays instanceof _Cell.CellError) {
        return filteredHolidays;
      }

      if (delta > 0) {
        var upper = 1;

        while (this.countWorkdays(start + 1, start + upper, weekendPattern, filteredHolidays) < delta) {
          upper *= 2;
        }

        var lower = 1;

        while (lower + 1 < upper) {
          var mid = Math.trunc((lower + upper) / 2);

          if (this.countWorkdays(start + 1, start + mid, weekendPattern, filteredHolidays) < delta) {
            lower = mid;
          } else {
            upper = mid;
          }
        }

        return start + upper;
      } else if (delta < 0) {
        delta *= -1;
        var _upper = 1;

        while (this.countWorkdays(start - _upper, start - 1, weekendPattern, filteredHolidays) < delta) {
          _upper *= 2;
        }

        var _lower = 1;

        while (_lower + 1 < _upper) {
          var _mid = Math.trunc((_lower + _upper) / 2);

          if (this.countWorkdays(start - _mid, start - 1, weekendPattern, filteredHolidays) < delta) {
            _lower = _mid;
          } else {
            _upper = _mid;
          }
        }

        return start - _upper;
      } else {
        return start;
      }
    }
  }, {
    key: "countWorkdays",
    value: function countWorkdays(start, end, weekendPattern, sortedHolidays) {
      var absoluteEnd = Math.floor(this.dateTimeHelper.relativeNumberToAbsoluteNumber(end));
      var absoluteStart = Math.floor(this.dateTimeHelper.relativeNumberToAbsoluteNumber(start));
      var ans = 0;

      for (var i = 0; i < 7; i++) {
        if (weekendPattern.charAt(i) === '0') {
          ans += Math.floor((absoluteEnd + 6 - i) / 7);
          ans -= Math.floor((absoluteStart - 1 + 6 - i) / 7);
        }
      }

      ans -= lowerBound(end + 1, sortedHolidays) - lowerBound(start, sortedHolidays);
      return ans;
    }
  }, {
    key: "simpleRangeToFilteredHolidays",
    value: function simpleRangeToFilteredHolidays(weekendPattern, holidays) {
      var _this21 = this;

      var _a;

      var holidaysArr = (_a = holidays === null || holidays === void 0 ? void 0 : holidays.valuesFromTopLeftCorner()) !== null && _a !== void 0 ? _a : [];

      var _iterator = _createForOfIteratorHelper(holidaysArr),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var val = _step.value;

          if (val instanceof _Cell.CellError) {
            return val;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var processedHolidays = [];

      var _iterator2 = _createForOfIteratorHelper(holidaysArr),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _val = _step2.value;

          if (_val === _InterpreterValue.EmptyValue) {
            continue;
          }

          if ((0, _InterpreterValue.isExtendedNumber)(_val)) {
            processedHolidays.push(Math.trunc((0, _InterpreterValue.getRawValue)(_val)));
          } else {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return _toConsumableArray(new Set(processedHolidays)).sort(function (a, b) {
        return a - b;
      }).filter(function (arg) {
        var val = _this21.dateTimeHelper.relativeNumberToAbsoluteNumber(arg);

        var i = (val - 1) % 7;
        return weekendPattern.charAt(i) === '0';
      });
    }
  }]);

  return DateTimePlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.DateTimePlugin = DateTimePlugin;
DateTimePlugin.implementedFunctions = {
  'DATE': {
    method: 'date',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATE
  },
  'TIME': {
    method: 'time',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_TIME
  },
  'MONTH': {
    method: 'month',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'YEAR': {
    method: 'year',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'HOUR': {
    method: 'hour',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'MINUTE': {
    method: 'minute',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'SECOND': {
    method: 'second',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'TEXT': {
    method: 'text',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'EOMONTH': {
    method: 'eomonth',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATE
  },
  'DAY': {
    method: 'day',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'DAYS': {
    method: 'days',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'WEEKDAY': {
    method: 'weekday',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'WEEKNUM': {
    method: 'weeknum',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'ISOWEEKNUM': {
    method: 'isoweeknum',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'DATEVALUE': {
    method: 'datevalue',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATE
  },
  'TIMEVALUE': {
    method: 'timevalue',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_TIME
  },
  'NOW': {
    method: 'now',
    parameters: [],
    isVolatile: true,
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATETIME
  },
  'TODAY': {
    method: 'today',
    parameters: [],
    isVolatile: true,
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATE
  },
  'EDATE': {
    method: 'edate',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_DATE
  },
  'DAYS360': {
    method: 'days360',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN,
      defaultValue: false
    }]
  },
  'DATEDIF': {
    method: 'datedif',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'YEARFRAC': {
    method: 'yearfrac',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      defaultValue: 0,
      minValue: 0,
      maxValue: 4
    }]
  },
  'INTERVAL': {
    method: 'interval',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'NETWORKDAYS': {
    method: 'networkdays',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  },
  'NETWORKDAYS.INTL': {
    method: 'networkdaysintl',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      defaultValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  },
  'WORKDAY': {
    method: 'workday',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  },
  'WORKDAY.INTL': {
    method: 'workdayintl',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      defaultValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  }
};
/**
 * Returns i such that:
 * sortedArray[i-1] < val <= sortedArray[i]
 *
 */

function lowerBound(val, sortedArray) {
  if (sortedArray.length === 0) {
    return 0;
  }

  if (val <= sortedArray[0]) {
    return 0;
  }

  if (sortedArray[sortedArray.length - 1] < val) {
    return sortedArray.length;
  }

  var lower = 0; //sortedArray[lower] < val

  var upper = sortedArray.length - 1; //sortedArray[upper] >= val

  while (lower + 1 < upper) {
    var mid = Math.floor((upper + lower) / 2);

    if (sortedArray[mid] >= val) {
      upper = mid;
    } else {
      lower = mid;
    }
  }

  return upper;
}

function computeWeekendPattern(weekend) {
  var _a;

  if (typeof weekend !== 'number' && typeof weekend !== 'string') {
    return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
  }

  if (typeof weekend === 'string') {
    if (weekend.length !== 7 || !/^(0|1)*$/.test(weekend) || weekend === '1111111') {
      return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.WeekendString);
    } else {
      return weekend;
    }
  } else {
    return (_a = workdayPatterns.get(weekend)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.BadMode);
  }
}

var weekdayOffsets = new Map([[1, 0], [2, 1], [11, 1], [12, 2], [13, 3], [14, 4], [15, 5], [16, 6], [17, 0]]);
var workdayPatterns = new Map([[1, '0000011'], [2, '1000001'], [3, '1100000'], [4, '0110000'], [5, '0011000'], [6, '0001100'], [7, '0000110'], [11, '0000001'], [12, '1000000'], [13, '0100000'], [14, '0010000'], [15, '0001000'], [16, '0000100'], [17, '0000010']]);

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.DegreesPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DegreesPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(DegreesPlugin, _FunctionPlugin);

  var _super = _createSuper(DegreesPlugin);

  function DegreesPlugin() {
    _classCallCheck(this, DegreesPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(DegreesPlugin, [{
    key: "degrees",
    value: function degrees(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DEGREES'), function (arg) {
        return arg * (180 / Math.PI);
      });
    }
  }]);

  return DegreesPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.DegreesPlugin = DegreesPlugin;
DegreesPlugin.implementedFunctions = {
  'DEGREES': {
    method: 'degrees',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.DeltaPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var DeltaPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(DeltaPlugin, _FunctionPlugin);

  var _super = _createSuper(DeltaPlugin);

  function DeltaPlugin() {
    _classCallCheck(this, DeltaPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(DeltaPlugin, [{
    key: "delta",
    value: function delta(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DELTA'), function (left, right) {
        return left === right ? 1 : 0;
      });
    }
  }]);

  return DeltaPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.DeltaPlugin = DeltaPlugin;
DeltaPlugin.implementedFunctions = {
  'DELTA': {
    method: 'delta',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  }
};

/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.ExpPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ExpPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(ExpPlugin, _FunctionPlugin);

  var _super = _createSuper(ExpPlugin);

  function ExpPlugin() {
    _classCallCheck(this, ExpPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ExpPlugin, [{
    key: "exp",
    value:
    /**
     * Corresponds to EXP(value)
     *
     * Calculates the exponent for basis e
     *
     * @param ast
     * @param state
     */
    function exp(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('EXP'), Math.exp);
    }
  }]);

  return ExpPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.ExpPlugin = ExpPlugin;
ExpPlugin.implementedFunctions = {
  'EXP': {
    method: 'exp',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.FinancialPlugin = void 0;

__webpack_require__(356);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FinancialPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(FinancialPlugin, _FunctionPlugin);

  var _super = _createSuper(FinancialPlugin);

  function FinancialPlugin() {
    _classCallCheck(this, FinancialPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(FinancialPlugin, [{
    key: "pmt",
    value: function pmt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PMT'), pmtCore);
    }
  }, {
    key: "ipmt",
    value: function ipmt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IPMT'), ipmtCore);
    }
  }, {
    key: "ppmt",
    value: function ppmt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PPMT'), ppmtCore);
    }
  }, {
    key: "fv",
    value: function fv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FV'), fvCore);
    }
  }, {
    key: "cumipmt",
    value: function cumipmt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CUMIPMT'), function (rate, periods, value, start, end, type) {
        if (start > end) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.EndStartPeriod);
        }

        var acc = 0;

        for (var i = start; i <= end; i++) {
          acc += ipmtCore(rate, i, periods, value, 0, type);
        }

        return acc;
      });
    }
  }, {
    key: "cumprinc",
    value: function cumprinc(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CUMPRINC'), function (rate, periods, value, start, end, type) {
        if (start > end) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.EndStartPeriod);
        }

        var acc = 0;

        for (var i = start; i <= end; i++) {
          acc += ppmtCore(rate, i, periods, value, 0, type);
        }

        return acc;
      });
    }
  }, {
    key: "db",
    value: function db(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DB'), function (cost, salvage, life, period, month) {
        if (month === 12 && period > life || period > life + 1) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.PeriodLong);
        }

        if (salvage >= cost) {
          return 0;
        }

        var rate = Math.round((1 - Math.pow(salvage / cost, 1 / life)) * 1000) / 1000;
        var initial = cost * rate * month / 12;

        if (period === 1) {
          return initial;
        }

        var total = initial;

        for (var i = 0; i < period - 2; i++) {
          total += (cost - total) * rate;
        }

        if (period === life + 1) {
          return (cost - total) * rate * (12 - month) / 12;
        }

        return (cost - total) * rate;
      });
    }
  }, {
    key: "ddb",
    value: function ddb(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DDB'), function (cost, salvage, life, period, factor) {
        if (period > life) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var rate = factor / life;
        var oldValue;

        if (rate >= 1) {
          rate = 1;

          if (period === 1) {
            oldValue = cost;
          } else {
            oldValue = 0;
          }
        } else {
          oldValue = cost * Math.pow(1 - rate, period - 1);
        }

        var newValue = cost * Math.pow(1 - rate, period);
        return Math.max(oldValue - Math.max(salvage, newValue), 0);
      });
    }
  }, {
    key: "dollarde",
    value: function dollarde(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DOLLARDE'), function (dollar, fraction) {
        if (fraction < 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        fraction = Math.trunc(fraction);

        while (fraction > 10) {
          fraction /= 10;
        }

        return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * 10 / fraction;
      });
    }
  }, {
    key: "dollarfr",
    value: function dollarfr(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DOLLARFR'), function (dollar, fraction) {
        if (fraction < 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        fraction = Math.trunc(fraction);

        while (fraction > 10) {
          fraction /= 10;
        }

        return Math.trunc(dollar) + (dollar - Math.trunc(dollar)) * fraction / 10;
      });
    }
  }, {
    key: "effect",
    value: function effect(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('EFFECT'), function (rate, periods) {
        periods = Math.trunc(periods);
        return Math.pow(1 + rate / periods, periods) - 1;
      });
    }
  }, {
    key: "ispmt",
    value: function ispmt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISPMT'), function (rate, period, periods, value) {
        if (periods === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return value * rate * (period / periods - 1);
      });
    }
  }, {
    key: "nominal",
    value: function nominal(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NOMINAL'), function (rate, periods) {
        periods = Math.trunc(periods);
        return (Math.pow(rate + 1, 1 / periods) - 1) * periods;
      });
    }
  }, {
    key: "nper",
    value: function nper(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NPER'), function (rate, payment, present, future, type) {
        if (rate === 0) {
          if (payment === 0) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }

          return (-present - future) / payment;
        }

        if (type) {
          payment *= 1 + rate;
        }

        return Math.log((payment - future * rate) / (present * rate + payment)) / Math.log(1 + rate);
      });
    }
  }, {
    key: "rate",
    value: function rate(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RATE'), function (periods, payment, present, future, type, guess) {
        if (guess <= -1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE);
        }

        var epsMax = 1e-10;
        var iterMax = 20;
        var rate = guess;
        type = type ? 1 : 0;

        for (var i = 0; i < iterMax; i++) {
          if (rate <= -1) {
            return new _Cell.CellError(_Cell.ErrorType.NUM);
          }

          var y = void 0;

          if (Math.abs(rate) < epsMax) {
            y = present * (1 + periods * rate) + payment * (1 + rate * type) * periods + future;
          } else {
            var f = Math.pow(1 + rate, periods);
            y = present * f + payment * (1 / rate + type) * (f - 1) + future;
          }

          if (Math.abs(y) < epsMax) {
            return rate;
          }

          var dy = void 0;

          if (Math.abs(rate) < epsMax) {
            dy = present * periods + payment * type * periods;
          } else {
            var _f = Math.pow(1 + rate, periods);

            var df = periods * Math.pow(1 + rate, periods - 1);
            dy = present * df + payment * (1 / rate + type) * df + payment * (-1 / (rate * rate)) * (_f - 1);
          }

          rate -= y / dy;
        }

        return new _Cell.CellError(_Cell.ErrorType.NUM);
      });
    }
  }, {
    key: "pv",
    value: function pv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PV'), function (rate, periods, payment, future, type) {
        type = type ? 1 : 0;

        if (rate === -1) {
          if (periods === 0) {
            return new _Cell.CellError(_Cell.ErrorType.NUM);
          } else {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }
        }

        if (rate === 0) {
          return -payment * periods - future;
        } else {
          return ((1 - Math.pow(1 + rate, periods)) * payment * (1 + rate * type) / rate - future) / Math.pow(1 + rate, periods);
        }
      });
    }
  }, {
    key: "rri",
    value: function rri(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RRI'), function (periods, present, future) {
        if (present === 0 || future < 0 && present > 0 || future > 0 && present < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        return Math.pow(future / present, 1 / periods) - 1;
      });
    }
  }, {
    key: "sln",
    value: function sln(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SLN'), function (cost, salvage, life) {
        if (life === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return (cost - salvage) / life;
      });
    }
  }, {
    key: "syd",
    value: function syd(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SYD'), function (cost, salvage, life, period) {
        if (period > life) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        return (cost - salvage) * (life - period + 1) * 2 / (life * (life + 1));
      });
    }
  }, {
    key: "tbilleq",
    value: function tbilleq(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('TBILLEQ'), function (settlement, maturity, discount) {
        settlement = Math.round(settlement);
        maturity = Math.round(maturity);

        if (settlement >= maturity) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var startDate = _this.dateTimeHelper.numberToSimpleDate(settlement);

        var endDate = _this.dateTimeHelper.numberToSimpleDate(maturity);

        if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var denom = 360 - discount * (maturity - settlement);

        if (denom === 0) {
          return 0;
        }

        if (denom < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        return 365 * discount / denom;
      });
    }
  }, {
    key: "tbillprice",
    value: function tbillprice(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('TBILLPRICE'), function (settlement, maturity, discount) {
        settlement = Math.round(settlement);
        maturity = Math.round(maturity);

        if (settlement >= maturity) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var startDate = _this2.dateTimeHelper.numberToSimpleDate(settlement);

        var endDate = _this2.dateTimeHelper.numberToSimpleDate(maturity);

        if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var denom = 360 - discount * (maturity - settlement);

        if (denom === 0) {
          return 0;
        }

        if (denom < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        return 100 * (1 - discount * (maturity - settlement) / 360);
      });
    }
  }, {
    key: "tbillyield",
    value: function tbillyield(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('TBILLYIELD'), function (settlement, maturity, price) {
        settlement = Math.round(settlement);
        maturity = Math.round(maturity);

        if (settlement >= maturity) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        var startDate = _this3.dateTimeHelper.numberToSimpleDate(settlement);

        var endDate = _this3.dateTimeHelper.numberToSimpleDate(maturity);

        if (endDate.year > startDate.year + 1 || endDate.year === startDate.year + 1 && (endDate.month > startDate.month || endDate.month === startDate.month && endDate.day > startDate.day)) {
          return new _Cell.CellError(_Cell.ErrorType.NUM);
        }

        return (100 - price) * 360 / (price * (maturity - settlement));
      });
    }
  }, {
    key: "fvschedule",
    value: function fvschedule(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FVSCHEDULE'), function (value, ratios) {
        var vals = ratios.valuesFromTopLeftCorner();

        var _iterator = _createForOfIteratorHelper(vals),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var val = _step.value;

            if (val instanceof _Cell.CellError) {
              return val;
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        var _iterator2 = _createForOfIteratorHelper(vals),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _val = _step2.value;

            if ((0, _InterpreterValue.isExtendedNumber)(_val)) {
              value *= 1 + (0, _InterpreterValue.getRawValue)(_val);
            } else if (_val !== _InterpreterValue.EmptyValue) {
              return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberExpected);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return value;
      });
    }
  }, {
    key: "npv",
    value: function npv(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('NPV'), function (rate) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var coerced = _this4.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        return npvCore(rate, coerced);
      });
    }
  }, {
    key: "mirr",
    value: function mirr(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('MIRR'), function (range, frate, rrate) {
        var vals = _this5.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());

        if (vals instanceof _Cell.CellError) {
          return vals;
        }

        var posFlag = false;
        var negFlag = false;
        var posValues = [];
        var negValues = [];

        var _iterator3 = _createForOfIteratorHelper(vals),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var val = _step3.value;

            if (val > 0) {
              posFlag = true;
              posValues.push(val);
              negValues.push(0);
            } else if (val < 0) {
              negFlag = true;
              negValues.push(val);
              posValues.push(0);
            } else {
              negValues.push(0);
              posValues.push(0);
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (!posFlag || !negFlag) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        var n = vals.length;
        var nom = npvCore(rrate, posValues);

        if (nom instanceof _Cell.CellError) {
          return nom;
        }

        var denom = npvCore(frate, negValues);

        if (denom instanceof _Cell.CellError) {
          return denom;
        }

        return Math.pow(-nom * Math.pow(1 + rrate, n) / denom / (1 + frate), 1 / (n - 1)) - 1;
      });
    }
  }, {
    key: "pduration",
    value: function pduration(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PDURATION'), function (rate, pv, fv) {
        return (Math.log(fv) - Math.log(pv)) / Math.log(1 + rate);
      });
    }
  }, {
    key: "xnpv",
    value: function xnpv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('XNPV'), function (rate, values, dates) {
        var valArr = values.valuesFromTopLeftCorner();

        var _iterator4 = _createForOfIteratorHelper(valArr),
            _step4;

        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var val = _step4.value;

            if (typeof val !== 'number') {
              return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberExpected);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }

        var valArrNum = valArr;
        var dateArr = dates.valuesFromTopLeftCorner();

        var _iterator5 = _createForOfIteratorHelper(dateArr),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var date = _step5.value;

            if (typeof date !== 'number') {
              return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberExpected);
            }
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        var dateArrNum = dateArr;

        if (dateArrNum.length !== valArrNum.length) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.EqualLength);
        }

        var n = dateArrNum.length;
        var ret = 0;

        if (dateArrNum[0] < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
        }

        for (var i = 0; i < n; i++) {
          dateArrNum[i] = Math.floor(dateArrNum[i]);

          if (dateArrNum[i] < dateArrNum[0]) {
            return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
          }

          ret += valArrNum[i] / Math.pow(1 + rate, (dateArrNum[i] - dateArrNum[0]) / 365);
        }

        return ret;
      });
    }
  }]);

  return FinancialPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.FinancialPlugin = FinancialPlugin;
FinancialPlugin.implementedFunctions = {
  'PMT': {
    method: 'pmt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'IPMT': {
    method: 'ipmt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'PPMT': {
    method: 'ppmt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'FV': {
    method: 'fv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'CUMIPMT': {
    method: 'cumipmt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0,
      maxValue: 1
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'CUMPRINC': {
    method: 'cumprinc',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0,
      maxValue: 1
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'DB': {
    method: 'db',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1,
      maxValue: 12,
      defaultValue: 12
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'DDB': {
    method: 'ddb',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      defaultValue: 2
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'DOLLARDE': {
    method: 'dollarde',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'DOLLARFR': {
    method: 'dollarfr',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'EFFECT': {
    method: 'effect',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'ISPMT': {
    method: 'ispmt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'NOMINAL': {
    method: 'nominal',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'NPER': {
    method: 'nper',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'PV': {
    method: 'pv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'RATE': {
    method: 'rate',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0.1
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'RRI': {
    method: 'rri',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'SLN': {
    method: 'sln',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'SYD': {
    method: 'syd',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'TBILLEQ': {
    method: 'tbilleq',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'TBILLPRICE': {
    method: 'tbillprice',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'TBILLYIELD': {
    method: 'tbillyield',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'FVSCHEDULE': {
    method: 'fvschedule',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'NPV': {
    method: 'npv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1,
    returnNumberType: _InterpreterValue.NumberType.NUMBER_CURRENCY
  },
  'MIRR': {
    method: 'mirr',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    returnNumberType: _InterpreterValue.NumberType.NUMBER_PERCENT
  },
  'PDURATION': {
    method: 'pduration',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  },
  'XNPV': {
    method: 'xnpv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: -1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  }
};

function pmtCore(rate, periods, present, future, type) {
  if (rate === 0) {
    return (-present - future) / periods;
  } else {
    var term = Math.pow(1 + rate, periods);
    return (future * rate + present * rate * term) * (type ? 1 / (1 + rate) : 1) / (1 - term);
  }
}

function ipmtCore(rate, period, periods, present, future, type) {
  var payment = pmtCore(rate, periods, present, future, type);

  if (period === 1) {
    return rate * (type ? 0 : -present);
  } else {
    return rate * (type ? fvCore(rate, period - 2, payment, present, type) - payment : fvCore(rate, period - 1, payment, present, type));
  }
}

function fvCore(rate, periods, payment, value, type) {
  if (rate === 0) {
    return -value - payment * periods;
  } else {
    var term = Math.pow(1 + rate, periods);
    return payment * (type ? 1 + rate : 1) * (1 - term) / rate - value * term;
  }
}

function ppmtCore(rate, period, periods, present, future, type) {
  return pmtCore(rate, periods, present, future, type) - ipmtCore(rate, period, periods, present, future, type);
}

function npvCore(rate, args) {
  var acc = 0;

  for (var i = args.length - 1; i >= 0; i--) {
    acc += args[i];

    if (rate === -1) {
      if (acc === 0) {
        continue;
      } else {
        return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }

    acc /= 1 + rate;
  }

  return acc;
}

/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.FormulaTextPlugin = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _index = __webpack_require__(348);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var FormulaTextPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(FormulaTextPlugin, _FunctionPlugin);

  var _super = _createSuper(FormulaTextPlugin);

  function FormulaTextPlugin() {
    _classCallCheck(this, FormulaTextPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(FormulaTextPlugin, [{
    key: "formulatext",
    value:
    /**
     * Corresponds to FORMULATEXT(value)
     *
     * Returns a formula in a given cell as a string.
     *
     * @param ast
     * @param state
     */
    function formulatext(ast, state) {
      var _this = this;

      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('FORMULATEXT'), function () {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }, function (cellReference) {
        var _a;

        return (_a = _this.serialization.getCellFormula(cellReference)) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.Formula);
      });
    }
  }]);

  return FormulaTextPlugin;
}(_index.FunctionPlugin);

exports.FormulaTextPlugin = FormulaTextPlugin;
FormulaTextPlugin.implementedFunctions = {
  'FORMULATEXT': {
    method: 'formulatext',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }],
    doesNotNeedArgumentsToBeComputed: true,
    isDependentOnSheetStructureChange: true,
    vectorizationForbidden: true
  }
};

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.InformationPlugin = void 0;

__webpack_require__(103);

__webpack_require__(1);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _FormulaCellVertex = __webpack_require__(265);

var _errorMessage = __webpack_require__(238);

var _parser = __webpack_require__(169);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing information functions
 */
var InformationPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(InformationPlugin, _FunctionPlugin);

  var _super = _createSuper(InformationPlugin);

  function InformationPlugin() {
    _classCallCheck(this, InformationPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(InformationPlugin, [{
    key: "isbinary",
    value:
    /**
     * Corresponds to ISBINARY(value)
     *
     * Returns true if provided value is a valid binary number
     *
     * @param ast
     * @param state
     */
    function isbinary(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISBINARY'), function (arg) {
        return /^[01]{1,10}$/.test(arg);
      });
    }
    /**
     * Corresponds to ISERR(value)
     *
     * Returns true if provided value is an error except #N/A!
     *
     * @param ast
     * @param state
     */

  }, {
    key: "iserr",
    value: function iserr(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISERR'), function (arg) {
        return arg instanceof _Cell.CellError && arg.type !== _Cell.ErrorType.NA;
      });
    }
    /**
     * Corresponds to ISERROR(value)
     *
     * Checks whether provided value is an error
     *
     * @param ast
     * @param state
     */

  }, {
    key: "iserror",
    value: function iserror(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISERROR'), function (arg) {
        return arg instanceof _Cell.CellError;
      });
    }
    /**
     * Corresponds to ISFORMULA(value)
     *
     * Checks whether referenced cell is a formula
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isformula",
    value: function isformula(ast, state) {
      var _this = this;

      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ISFORMULA'), function () {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }, function (reference) {
        var vertex = _this.dependencyGraph.addressMapping.getCell(reference);

        return vertex instanceof _FormulaCellVertex.FormulaVertex;
      });
    }
    /**
     * Corresponds to ISBLANK(value)
     *
     * Checks whether provided cell reference is empty
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isblank",
    value: function isblank(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISBLANK'), function (arg) {
        return arg === _InterpreterValue.EmptyValue;
      });
    }
    /**
     * Corresponds to ISNA(value)
     *
     * Returns true if provided value is #N/A! error
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isna",
    value: function isna(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISNA'), function (arg) {
        return arg instanceof _Cell.CellError && arg.type == _Cell.ErrorType.NA;
      });
    }
    /**
     * Corresponds to ISNUMBER(value)
     *
     * Checks whether provided cell reference is a number
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isnumber",
    value: function isnumber(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISNUMBER'), _InterpreterValue.isExtendedNumber);
    }
    /**
     * Corresponds to ISLOGICAL(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param state
     */

  }, {
    key: "islogical",
    value: function islogical(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISLOGICAL'), function (arg) {
        return typeof arg === 'boolean';
      });
    }
    /**
     * Corresponds to ISREF(value)
     *
     * Returns true if provided value is #REF! error
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isref",
    value: function isref(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISREF'), function (arg) {
        return arg instanceof _Cell.CellError && (arg.type == _Cell.ErrorType.REF || arg.type == _Cell.ErrorType.CYCLE);
      });
    }
    /**
     * Corresponds to ISTEXT(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param state
     */

  }, {
    key: "istext",
    value: function istext(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISTEXT'), function (arg) {
        return typeof arg === 'string';
      });
    }
    /**
     * Corresponds to ISNONTEXT(value)
     *
     * Checks whether provided cell reference is of logical type
     *
     * @param ast
     * @param state
     */

  }, {
    key: "isnontext",
    value: function isnontext(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISNONTEXT'), function (arg) {
        return !(typeof arg === 'string');
      });
    }
    /**
     * Corresponds to COLUMN(reference)
     *
     * Returns column number of a reference or a formula cell if reference not provided
     *
     * @param ast
     * @param state
     */

  }, {
    key: "column",
    value: function column(ast, state) {
      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('COLUMN'), function () {
        return state.formulaAddress.col + 1;
      }, function (reference) {
        return reference.col + 1;
      });
    }
    /**
     * Corresponds to COLUMNS(range)
     *
     * Returns number of columns in provided range of cells
     *
     * @param ast
     * @param _state
     */

  }, {
    key: "columns",
    value: function columns(ast, state) {
      if (ast.args.length !== 1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      if (ast.args.some(function (astIt) {
        return astIt.type === _parser.AstNodeType.EMPTY;
      })) {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.EmptyArg);
      }

      var argAst = ast.args[0];

      while (argAst.type === _parser.AstNodeType.PARENTHESIS) {
        argAst = argAst.expression;
      }

      if (argAst.type === _parser.AstNodeType.CELL_RANGE || argAst.type === _parser.AstNodeType.COLUMN_RANGE) {
        return argAst.end.col - argAst.start.col + 1;
      } else if (argAst.type === _parser.AstNodeType.CELL_REFERENCE) {
        return 1;
      } else if (argAst.type === _parser.AstNodeType.ROW_RANGE) {
        return this.config.maxColumns;
      } else {
        var val = this.evaluateAst(argAst, state);

        if (val instanceof _SimpleRangeValue.SimpleRangeValue) {
          return val.width();
        } else if (val instanceof _Cell.CellError) {
          return val;
        } else {
          return 1;
        }
      }
    }
    /**
     * Corresponds to ROW(reference)
     *
     * Returns row number of a reference or a formula cell if reference not provided
     *
     * @param ast
     * @param state
     */

  }, {
    key: "row",
    value: function row(ast, state) {
      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('ROW'), function () {
        return state.formulaAddress.row + 1;
      }, function (reference) {
        return reference.row + 1;
      });
    }
    /**
     * Corresponds to ROWS(range)
     *
     * Returns number of rows in provided range of cells
     *
     * @param ast
     * @param _state
     */

  }, {
    key: "rows",
    value: function rows(ast, state) {
      if (ast.args.length !== 1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      if (ast.args.some(function (astIt) {
        return astIt.type === _parser.AstNodeType.EMPTY;
      })) {
        return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.EmptyArg);
      }

      var argAst = ast.args[0];

      while (argAst.type === _parser.AstNodeType.PARENTHESIS) {
        argAst = argAst.expression;
      }

      if (argAst.type === _parser.AstNodeType.CELL_RANGE || argAst.type === _parser.AstNodeType.ROW_RANGE) {
        return argAst.end.row - argAst.start.row + 1;
      } else if (argAst.type === _parser.AstNodeType.CELL_REFERENCE) {
        return 1;
      } else if (argAst.type === _parser.AstNodeType.COLUMN_RANGE) {
        return this.config.maxRows;
      } else {
        var val = this.evaluateAst(argAst, state);

        if (val instanceof _SimpleRangeValue.SimpleRangeValue) {
          return val.height();
        } else if (val instanceof _Cell.CellError) {
          return val;
        } else {
          return 1;
        }
      }
    }
    /**
     * Corresponds to INDEX(range;)
     *
     * Returns specific position in 2d array.
     *
     * @param ast
     * @param state
     */

  }, {
    key: "index",
    value: function index(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('INDEX'), function (rangeValue, row, col) {
        var _a, _b, _c, _d, _e, _f;

        if (col < 1 || row < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        if (col > rangeValue.width() || row > rangeValue.height()) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        return (_f = (_c = (_b = (_a = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _a === void 0 ? void 0 : _a[row - 1]) === null || _b === void 0 ? void 0 : _b[col - 1]) !== null && _c !== void 0 ? _c : (_e = (_d = rangeValue === null || rangeValue === void 0 ? void 0 : rangeValue.data) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.CellRangeExpected);
      });
    }
    /**
     * Corresponds to NA()
     *
     * Returns #N/A!
     *
     * @param _ast
     * @param _state
     */

  }, {
    key: "na",
    value: function na(_ast, _state) {
      return new _Cell.CellError(_Cell.ErrorType.NA);
    }
    /**
     * Corresponds to SHEET(value)
     *
     * Returns sheet number of a given value or a formula sheet number if no argument is provided
     *
     * @param ast
     * @param state
     * */

  }, {
    key: "sheet",
    value: function sheet(ast, state) {
      var _this2 = this;

      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEET'), function () {
        return state.formulaAddress.sheet + 1;
      }, function (reference) {
        return reference.sheet + 1;
      }, function (value) {
        var sheetNumber = _this2.dependencyGraph.sheetMapping.get(value);

        if (sheetNumber !== undefined) {
          return sheetNumber + 1;
        } else {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.SheetRef);
        }
      });
    }
    /**
     * Corresponds to SHEETS(value)
     *
     * Returns number of sheet of a given reference or number of all sheets in workbook when no argument is provided.
     * It returns always 1 for a valid reference as 3D references are not supported.
     *
     * @param ast
     * @param state
     * */

  }, {
    key: "sheets",
    value: function sheets(ast, state) {
      var _this3 = this;

      return this.runFunctionWithReferenceArgument(ast.args, state, this.metadata('SHEETS'), function () {
        return _this3.dependencyGraph.sheetMapping.numberOfSheets();
      }, // return number of sheets if no argument
      function () {
        return 1;
      }, // return 1 for valid reference
      function () {
        return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.CellRefExpected);
      } // error otherwise
      );
    }
  }]);

  return InformationPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.InformationPlugin = InformationPlugin;
InformationPlugin.implementedFunctions = {
  'COLUMN': {
    method: 'column',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      optional: true
    }],
    isDependentOnSheetStructureChange: true,
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'COLUMNS': {
    method: 'columns',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    isDependentOnSheetStructureChange: true,
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'ISBINARY': {
    method: 'isbinary',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'ISERR': {
    method: 'iserr',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISFORMULA': {
    method: 'isformula',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }],
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'ISNA': {
    method: 'isna',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISREF': {
    method: 'isref',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }],
    vectorizationForbidden: true
  },
  'ISERROR': {
    method: 'iserror',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISBLANK': {
    method: 'isblank',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISNUMBER': {
    method: 'isnumber',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISLOGICAL': {
    method: 'islogical',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISTEXT': {
    method: 'istext',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'ISNONTEXT': {
    method: 'isnontext',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'INDEX': {
    method: 'index',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'NA': {
    method: 'na',
    parameters: []
  },
  'ROW': {
    method: 'row',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      optional: true
    }],
    isDependentOnSheetStructureChange: true,
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'ROWS': {
    method: 'rows',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    isDependentOnSheetStructureChange: true,
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'SHEET': {
    method: 'sheet',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }],
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  },
  'SHEETS': {
    method: 'sheets',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }],
    doesNotNeedArgumentsToBeComputed: true,
    vectorizationForbidden: true
  }
};

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.IsEvenPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var IsEvenPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(IsEvenPlugin, _FunctionPlugin);

  var _super = _createSuper(IsEvenPlugin);

  function IsEvenPlugin() {
    _classCallCheck(this, IsEvenPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(IsEvenPlugin, [{
    key: "iseven",
    value: function iseven(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISEVEN'), function (val) {
        return val % 2 === 0;
      });
    }
  }]);

  return IsEvenPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.IsEvenPlugin = IsEvenPlugin;
IsEvenPlugin.implementedFunctions = {
  'ISEVEN': {
    method: 'iseven',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.IsOddPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var IsOddPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(IsOddPlugin, _FunctionPlugin);

  var _super = _createSuper(IsOddPlugin);

  function IsOddPlugin() {
    _classCallCheck(this, IsOddPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(IsOddPlugin, [{
    key: "isodd",
    value: function isodd(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ISODD'), function (val) {
        return val % 2 === 1;
      });
    }
  }]);

  return IsOddPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.IsOddPlugin = IsOddPlugin;
IsOddPlugin.implementedFunctions = {
  'ISODD': {
    method: 'isodd',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.LogarithmPlugin = void 0;

__webpack_require__(325);

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LogarithmPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(LogarithmPlugin, _FunctionPlugin);

  var _super = _createSuper(LogarithmPlugin);

  function LogarithmPlugin() {
    _classCallCheck(this, LogarithmPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(LogarithmPlugin, [{
    key: "log10",
    value: function log10(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LOG10'), Math.log10);
    }
  }, {
    key: "log",
    value: function log(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LOG'), function (arg, base) {
        return Math.log(arg) / Math.log(base);
      });
    }
  }, {
    key: "ln",
    value: function ln(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LN'), Math.log);
    }
  }]);

  return LogarithmPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.LogarithmPlugin = LogarithmPlugin;
LogarithmPlugin.implementedFunctions = {
  'LOG10': {
    method: 'log10',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'LOG': {
    method: 'log',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 10,
      greaterThan: 0
    }]
  },
  'LN': {
    method: 'ln',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(137);

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.PI = exports.MathConstantsPlugin = void 0;

__webpack_require__(297);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PI = parseFloat(Math.PI.toFixed(14));
exports.PI = PI;

var MathConstantsPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MathConstantsPlugin, _FunctionPlugin);

  var _super = _createSuper(MathConstantsPlugin);

  function MathConstantsPlugin() {
    _classCallCheck(this, MathConstantsPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(MathConstantsPlugin, [{
    key: "pi",
    value: function pi(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PI'), function () {
        return PI;
      });
    }
  }, {
    key: "sqrtpi",
    value: function sqrtpi(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SQRTPI'), function (arg) {
        return Math.sqrt(PI * arg);
      });
    }
  }]);

  return MathConstantsPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.MathConstantsPlugin = MathConstantsPlugin;
MathConstantsPlugin.implementedFunctions = {
  'PI': {
    method: 'pi',
    parameters: []
  },
  'SQRTPI': {
    method: 'sqrtpi',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  }
};

/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.MatrixPlugin = void 0;

__webpack_require__(150);

__webpack_require__(137);

var _ArraySize = __webpack_require__(246);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _parser = __webpack_require__(169);

var _InterpreterState = __webpack_require__(247);

var _SimpleRangeValue = __webpack_require__(245);

var _FunctionPlugin2 = __webpack_require__(248);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function arraySizeForMultiplication(leftArraySize, rightArraySize) {
  return new _ArraySize.ArraySize(rightArraySize.width, leftArraySize.height);
}

function arraySizeForPoolFunction(inputArray, windowSize, stride) {
  return new _ArraySize.ArraySize(1 + (inputArray.width - windowSize) / stride, 1 + (inputArray.height - windowSize) / stride);
}

var MatrixPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MatrixPlugin, _FunctionPlugin);

  var _super = _createSuper(MatrixPlugin);

  function MatrixPlugin(interpreter) {
    var _this;

    _classCallCheck(this, MatrixPlugin);

    _this = _super.call(this, interpreter);

    _this.createCpuKernel = function (kernel, outputSize) {
      return function () {
        var result = [];

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        for (var y = 0; y < outputSize.height; ++y) {
          result.push([]);

          for (var x = 0; x < outputSize.width; ++x) {
            result[y][x] = kernel.apply({
              thread: {
                x: x,
                y: y
              }
            }, args);
          }
        }

        return result;
      };
    };

    _this.createGpuJsKernel = function (kernel, outputSize) {
      return _this.interpreter.getGpuInstance().createKernel(kernel).setPrecision('unsigned').setOutput([outputSize.width, outputSize.height]);
    };

    if (_this.config.gpujs === undefined) {
      _this.createKernel = _this.createCpuKernel;
    } else {
      _this.createKernel = _this.createGpuJsKernel;
    }

    return _this;
  }

  _createClass(MatrixPlugin, [{
    key: "mmult",
    value: function mmult(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('MMULT'), function (leftMatrix, rightMatrix) {
        if (!leftMatrix.hasOnlyNumbers() || !rightMatrix.hasOnlyNumbers()) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberRange);
        }

        if (rightMatrix.height() !== leftMatrix.width()) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ArrayDimensions);
        }

        var outputSize = arraySizeForMultiplication(leftMatrix.size, rightMatrix.size);

        var result = _this2.createKernel(function (a, b, width) {
          var sum = 0;

          for (var i = 0; i < width; ++i) {
            sum += a[this.thread.y][i] * b[i][this.thread.x];
          }

          return sum;
        }, outputSize)(leftMatrix.rawNumbers(), rightMatrix.rawNumbers(), leftMatrix.width());

        return _SimpleRangeValue.SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "mmultArraySize",
    value: function mmultArraySize(ast, state) {
      var _this3 = this;

      if (ast.args.length !== 2) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('MMULT');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this3.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });

      var _subChecks = _slicedToArray(subChecks, 2),
          left = _subChecks[0],
          right = _subChecks[1];

      return arraySizeForMultiplication(left, right);
    }
  }, {
    key: "maxpool",
    value: function maxpool(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('MAXPOOL'), function (matrix, windowSize) {
        var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windowSize;

        if (!matrix.hasOnlyNumbers()) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberRange);
        }

        var outputSize = arraySizeForPoolFunction(matrix.size, windowSize, stride);

        var result = _this4.createKernel(function (a, windowSize, stride) {
          var leftCornerX = this.thread.x * stride;
          var leftCornerY = this.thread.y * stride;
          var currentMax = a[leftCornerY][leftCornerX];

          for (var i = 0; i < windowSize; i++) {
            for (var j = 0; j < windowSize; j++) {
              currentMax = Math.max(currentMax, a[leftCornerY + i][leftCornerX + j]);
            }
          }

          return currentMax;
        }, outputSize)(matrix.rawNumbers(), windowSize, stride);

        return _SimpleRangeValue.SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "medianpool",
    value: function medianpool(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('MEDIANPOOL'), function (matrix, windowSize) {
        var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : windowSize;

        if (!matrix.hasOnlyNumbers()) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NumberRange);
        }

        var outputSize = arraySizeForPoolFunction(matrix.size, windowSize, stride);

        var result = _this5.createKernel(function (a, windowSize, stride) {
          var leftCornerX = this.thread.x * stride;
          var leftCornerY = this.thread.y * stride;
          var currentMax = a[leftCornerY][leftCornerX];

          for (var i = 0; i < windowSize; i++) {
            for (var j = 0; j < windowSize; j++) {
              currentMax = Math.max(currentMax, a[leftCornerY + i][leftCornerX + j]);
            }
          }

          var currentMin = a[leftCornerY][leftCornerX];

          for (var i2 = 0; i2 < windowSize; i2++) {
            for (var j2 = 0; j2 < windowSize; j2++) {
              currentMin = Math.min(currentMin, a[leftCornerY + i2][leftCornerX + j2]);
            }
          }

          var numberOfElements = windowSize * windowSize;
          var leftEnd = currentMin;
          var rightEnd = currentMax;
          var result = 42;

          for (var iter = 0; iter < 32; iter++) {
            var medianGuess = (leftEnd + rightEnd) / 2;
            var medianGuessCount = 0;

            for (var i3 = 0; i3 < windowSize; i3++) {
              for (var j3 = 0; j3 < windowSize; j3++) {
                if (a[leftCornerY + i3][leftCornerX + j3] > medianGuess) {
                  medianGuessCount++;
                }
              }
            }

            if (windowSize % 2 === 0) {
              if (medianGuessCount === numberOfElements / 2) {
                result = medianGuess;
                break;
              } else if (medianGuessCount > numberOfElements / 2) {
                leftEnd = medianGuess;
              } else {
                rightEnd = medianGuess;
              }
            } else {
              if (medianGuessCount === (numberOfElements - 1) / 2) {
                result = medianGuess;
                break;
              } else if (medianGuessCount > (numberOfElements - 1) / 2) {
                leftEnd = medianGuess;
              } else {
                rightEnd = medianGuess;
              }
            }
          }

          return result;
        }, outputSize)(matrix.rawNumbers(), windowSize, stride);

        return _SimpleRangeValue.SimpleRangeValue.onlyNumbers(result);
      });
    }
  }, {
    key: "maxpoolArraySize",
    value: function maxpoolArraySize(ast, state) {
      var _this6 = this;

      if (ast.args.length < 2 || ast.args.length > 3) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('MAXPOOL');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this6.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var array = subChecks[0];
      var windowArg = ast.args[1];
      var window;

      if (windowArg.type === _parser.AstNodeType.NUMBER) {
        window = windowArg.value;
      } else {
        window = 1;
      }

      var stride = window;

      if (ast.args.length === 3) {
        var strideArg = ast.args[2];

        if (strideArg.type === _parser.AstNodeType.NUMBER) {
          stride = strideArg.value;
        } else {
          stride = 1;
        }
      }

      if (window > array.width || window > array.height || stride > window || (array.width - window) % stride !== 0 || (array.height - window) % stride !== 0) {
        return _ArraySize.ArraySize.error();
      }

      return arraySizeForPoolFunction(array, window, stride);
    }
  }, {
    key: "medianpoolArraySize",
    value: function medianpoolArraySize(ast, state) {
      return this.maxpoolArraySize(ast, state);
    }
  }, {
    key: "transpose",
    value: function transpose(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TRANSPOSE'), function (matrix) {
        var input = matrix.rawData();
        var inputSize = matrix.size;
        var result = [];

        for (var i = 0; i < inputSize.width; ++i) {
          result[i] = [];

          for (var j = 0; j < inputSize.height; ++j) {
            result[i][j] = input[j][i];
          }
        }

        return _SimpleRangeValue.SimpleRangeValue.onlyValues(result);
      });
    }
  }, {
    key: "transposeArraySize",
    value: function transposeArraySize(ast, state) {
      var _this7 = this;

      if (ast.args.length !== 1) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('MMULT');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this7.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });

      var _subChecks2 = _slicedToArray(subChecks, 1),
          size = _subChecks2[0];

      return new _ArraySize.ArraySize(size.height, size.width);
    }
  }]);

  return MatrixPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.MatrixPlugin = MatrixPlugin;
MatrixPlugin.implementedFunctions = {
  'MMULT': {
    method: 'mmult',
    arraySizeMethod: 'mmultArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    vectorizationForbidden: true
  },
  'TRANSPOSE': {
    method: 'transpose',
    arraySizeMethod: 'transposeArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    vectorizationForbidden: true
  },
  'MAXPOOL': {
    method: 'maxpool',
    arraySizeMethod: 'maxpoolArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true
    }],
    vectorizationForbidden: true
  },
  'MEDIANPOOL': {
    method: 'medianpool',
    arraySizeMethod: 'medianpoolArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true
    }],
    vectorizationForbidden: true
  }
};

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.MedianPlugin = void 0;

__webpack_require__(272);

__webpack_require__(356);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing MEDIAN function
 */
var MedianPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MedianPlugin, _FunctionPlugin);

  var _super = _createSuper(MedianPlugin);

  function MedianPlugin() {
    _classCallCheck(this, MedianPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(MedianPlugin, [{
    key: "median",
    value:
    /**
     * Corresponds to MEDIAN(Number1, Number2, ...).
     *
     * Returns a median of given numbers.
     *
     * @param ast
     * @param state
     */
    function median(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('MEDIAN'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var values = _this.arithmeticHelper.coerceNumbersExactRanges(args);

        if (values instanceof _Cell.CellError) {
          return values;
        }

        if (values.length === 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.OneValue);
        }

        values.sort(function (a, b) {
          return a - b;
        });

        if (values.length % 2 === 0) {
          return (values[values.length / 2 - 1] + values[values.length / 2]) / 2;
        } else {
          return values[Math.floor(values.length / 2)];
        }
      });
    }
  }, {
    key: "large",
    value: function large(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('LARGE'), function (range, n) {
        var vals = _this2.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());

        if (vals instanceof _Cell.CellError) {
          return vals;
        }

        vals.sort(function (a, b) {
          return a - b;
        });
        n = Math.trunc(n);

        if (n > vals.length) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        return vals[vals.length - n];
      });
    }
  }, {
    key: "small",
    value: function small(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('SMALL'), function (range, n) {
        var vals = _this3.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());

        if (vals instanceof _Cell.CellError) {
          return vals;
        }

        vals.sort(function (a, b) {
          return a - b;
        });
        n = Math.trunc(n);

        if (n > vals.length) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        return vals[n - 1];
      });
    }
  }]);

  return MedianPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.MedianPlugin = MedianPlugin;
MedianPlugin.implementedFunctions = {
  'MEDIAN': {
    method: 'median',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'LARGE': {
    method: 'large',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'SMALL': {
    method: 'small',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  }
};

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.ModuloPlugin = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ModuloPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(ModuloPlugin, _FunctionPlugin);

  var _super = _createSuper(ModuloPlugin);

  function ModuloPlugin() {
    _classCallCheck(this, ModuloPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ModuloPlugin, [{
    key: "mod",
    value: function mod(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MOD'), function (dividend, divisor) {
        if (divisor === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        } else {
          return dividend % divisor;
        }
      });
    }
  }]);

  return ModuloPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.ModuloPlugin = ModuloPlugin;
ModuloPlugin.implementedFunctions = {
  'MOD': {
    method: 'mod',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(137);

__webpack_require__(50);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.NumericAggregationPlugin = void 0;

__webpack_require__(159);

__webpack_require__(161);

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(77);

__webpack_require__(157);

__webpack_require__(150);

__webpack_require__(82);

__webpack_require__(92);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _errors = __webpack_require__(165);

var _parser = __webpack_require__(169);

var _ArithmeticHelper = __webpack_require__(249);

var _InterpreterValue = __webpack_require__(255);

var _SimpleRangeValue = __webpack_require__(245);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function zeroForInfinite(value) {
  if ((0, _InterpreterValue.isExtendedNumber)(value) && !Number.isFinite((0, _InterpreterValue.getRawValue)(value))) {
    return 0;
  } else {
    return value;
  }
}

var MomentsAggregate = /*#__PURE__*/function () {
  function MomentsAggregate(sumsq, sum, count) {
    _classCallCheck(this, MomentsAggregate);

    this.sumsq = sumsq;
    this.sum = sum;
    this.count = count;
  }

  _createClass(MomentsAggregate, [{
    key: "compose",
    value: function compose(other) {
      return new MomentsAggregate(this.sumsq + other.sumsq, this.sum + other.sum, this.count + other.count);
    }
  }, {
    key: "averageValue",
    value: function averageValue() {
      if (this.count > 0) {
        return this.sum / this.count;
      } else {
        return undefined;
      }
    }
  }, {
    key: "varSValue",
    value: function varSValue() {
      if (this.count > 1) {
        return (this.sumsq - this.sum * this.sum / this.count) / (this.count - 1);
      } else {
        return undefined;
      }
    }
  }, {
    key: "varPValue",
    value: function varPValue() {
      if (this.count > 0) {
        return (this.sumsq - this.sum * this.sum / this.count) / this.count;
      } else {
        return undefined;
      }
    }
  }], [{
    key: "single",
    value: function single(arg) {
      return new MomentsAggregate(arg * arg, arg, 1);
    }
  }]);

  return MomentsAggregate;
}();

MomentsAggregate.empty = new MomentsAggregate(0, 0, 0);

var NumericAggregationPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(NumericAggregationPlugin, _FunctionPlugin);

  var _super = _createSuper(NumericAggregationPlugin);

  function NumericAggregationPlugin() {
    var _this;

    _classCallCheck(this, NumericAggregationPlugin);

    _this = _super.apply(this, arguments);

    _this.addWithEpsilonRaw = function (left, right) {
      return _this.arithmeticHelper.addWithEpsilonRaw(left, right);
    };

    return _this;
  }
  /**
   * Corresponds to SUM(Number1, Number2, ...).
   *
   * Returns a sum of given numbers.
   *
   * @param ast
   * @param state
   */


  _createClass(NumericAggregationPlugin, [{
    key: "sum",
    value: function sum(ast, state) {
      return this.doSum(ast.args, state);
    }
  }, {
    key: "sumsq",
    value: function sumsq(ast, state) {
      return this.reduce(ast.args, state, 0, 'SUMSQ', this.addWithEpsilonRaw, function (arg) {
        return Math.pow((0, _InterpreterValue.getRawValue)(arg), 2);
      }, strictlyNumbers);
    }
    /**
     * Corresponds to MAX(Number1, Number2, ...).
     *
     * Returns a max of given numbers.
     *
     * @param ast
     * @param state
     */

  }, {
    key: "max",
    value: function max(ast, state) {
      return this.doMax(ast.args, state);
    }
  }, {
    key: "maxa",
    value: function maxa(ast, state) {
      var value = this.reduce(ast.args, state, Number.NEGATIVE_INFINITY, 'MAXA', function (left, right) {
        return Math.max(left, right);
      }, _InterpreterValue.getRawValue, numbersBooleans);
      return zeroForInfinite(value);
    }
    /**
     * Corresponds to MIN(Number1, Number2, ...).
     *
     * Returns a min of given numbers.
     *
     * @param ast
     * @param state
     */

  }, {
    key: "min",
    value: function min(ast, state) {
      return this.doMin(ast.args, state);
    }
  }, {
    key: "mina",
    value: function mina(ast, state) {
      var value = this.reduce(ast.args, state, Number.POSITIVE_INFINITY, 'MINA', function (left, right) {
        return Math.min(left, right);
      }, _InterpreterValue.getRawValue, numbersBooleans);
      return zeroForInfinite(value);
    }
  }, {
    key: "count",
    value: function count(ast, state) {
      return this.doCount(ast.args, state);
    }
  }, {
    key: "counta",
    value: function counta(ast, state) {
      return this.doCounta(ast.args, state);
    }
  }, {
    key: "average",
    value: function average(ast, state) {
      return this.doAverage(ast.args, state);
    }
  }, {
    key: "averagea",
    value: function averagea(ast, state) {
      var _a;

      var result = this.reduce(ast.args, state, MomentsAggregate.empty, '_AGGREGATE_A', function (left, right) {
        return left.compose(right);
      }, function (arg) {
        return MomentsAggregate.single((0, _InterpreterValue.getRawValue)(arg));
      }, numbersBooleans);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.averageValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "vars",
    value: function vars(ast, state) {
      return this.doVarS(ast.args, state);
    }
  }, {
    key: "varp",
    value: function varp(ast, state) {
      return this.doVarP(ast.args, state);
    }
  }, {
    key: "vara",
    value: function vara(ast, state) {
      var _a;

      var result = this.reduceAggregateA(ast.args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.varSValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "varpa",
    value: function varpa(ast, state) {
      var _a;

      var result = this.reduceAggregateA(ast.args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.varPValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "stdevs",
    value: function stdevs(ast, state) {
      return this.doStdevS(ast.args, state);
    }
  }, {
    key: "stdevp",
    value: function stdevp(ast, state) {
      return this.doStdevP(ast.args, state);
    }
  }, {
    key: "stdeva",
    value: function stdeva(ast, state) {
      var result = this.reduceAggregateA(ast.args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        var val = result.varSValue();
        return val === undefined ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : Math.sqrt(val);
      }
    }
  }, {
    key: "stdevpa",
    value: function stdevpa(ast, state) {
      var result = this.reduceAggregateA(ast.args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        var val = result.varPValue();
        return val === undefined ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : Math.sqrt(val);
      }
    }
  }, {
    key: "product",
    value: function product(ast, state) {
      return this.doProduct(ast.args, state);
    }
  }, {
    key: "subtotal",
    value: function subtotal(ast, state) {
      if (ast.args.length < 2) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      var functionType = this.coerceToType(this.evaluateAst(ast.args[0], state), {
        argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
      }, state);
      var args = ast.args.slice(1);

      switch (functionType) {
        case 1:
        case 101:
          return this.doAverage(args, state);

        case 2:
        case 102:
          return this.doCount(args, state);

        case 3:
        case 103:
          return this.doCounta(args, state);

        case 4:
        case 104:
          return this.doMax(args, state);

        case 5:
        case 105:
          return this.doMin(args, state);

        case 6:
        case 106:
          return this.doProduct(args, state);

        case 7:
        case 107:
          return this.doStdevS(args, state);

        case 8:
        case 108:
          return this.doStdevP(args, state);

        case 9:
        case 109:
          return this.doSum(args, state);

        case 10:
        case 110:
          return this.doVarS(args, state);

        case 11:
        case 111:
          return this.doVarP(args, state);

        default:
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadMode);
      }
    }
  }, {
    key: "reduceAggregate",
    value: function reduceAggregate(args, state) {
      return this.reduce(args, state, MomentsAggregate.empty, '_AGGREGATE', function (left, right) {
        return left.compose(right);
      }, function (arg) {
        return MomentsAggregate.single((0, _InterpreterValue.getRawValue)(arg));
      }, strictlyNumbers);
    }
  }, {
    key: "reduceAggregateA",
    value: function reduceAggregateA(args, state) {
      return this.reduce(args, state, MomentsAggregate.empty, '_AGGREGATE_A', function (left, right) {
        return left.compose(right);
      }, function (arg) {
        return MomentsAggregate.single((0, _InterpreterValue.getRawValue)(arg));
      }, numbersBooleans);
    }
  }, {
    key: "doAverage",
    value: function doAverage(args, state) {
      var _a;

      var result = this.reduceAggregate(args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.averageValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "doVarS",
    value: function doVarS(args, state) {
      var _a;

      var result = this.reduceAggregate(args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.varSValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "doVarP",
    value: function doVarP(args, state) {
      var _a;

      var result = this.reduceAggregate(args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        return (_a = result.varPValue()) !== null && _a !== void 0 ? _a : new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
      }
    }
  }, {
    key: "doStdevS",
    value: function doStdevS(args, state) {
      var result = this.reduceAggregate(args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        var val = result.varSValue();
        return val === undefined ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : Math.sqrt(val);
      }
    }
  }, {
    key: "doStdevP",
    value: function doStdevP(args, state) {
      var result = this.reduceAggregate(args, state);

      if (result instanceof _Cell.CellError) {
        return result;
      } else {
        var val = result.varPValue();
        return val === undefined ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : Math.sqrt(val);
      }
    }
  }, {
    key: "doCount",
    value: function doCount(args, state) {
      return this.reduce(args, state, 0, 'COUNT', function (left, right) {
        return left + right;
      }, _InterpreterValue.getRawValue, function (arg) {
        return (0, _InterpreterValue.isExtendedNumber)(arg) ? 1 : 0;
      });
    }
  }, {
    key: "doCounta",
    value: function doCounta(args, state) {
      return this.reduce(args, state, 0, 'COUNTA', function (left, right) {
        return left + right;
      }, _InterpreterValue.getRawValue, function (arg) {
        return arg === _InterpreterValue.EmptyValue ? 0 : 1;
      });
    }
  }, {
    key: "doMax",
    value: function doMax(args, state) {
      var value = this.reduce(args, state, Number.NEGATIVE_INFINITY, 'MAX', function (left, right) {
        return Math.max(left, right);
      }, _InterpreterValue.getRawValue, strictlyNumbers);
      return zeroForInfinite(value);
    }
  }, {
    key: "doMin",
    value: function doMin(args, state) {
      var value = this.reduce(args, state, Number.POSITIVE_INFINITY, 'MIN', function (left, right) {
        return Math.min(left, right);
      }, _InterpreterValue.getRawValue, strictlyNumbers);
      return zeroForInfinite(value);
    }
  }, {
    key: "doSum",
    value: function doSum(args, state) {
      return this.reduce(args, state, 0, 'SUM', this.addWithEpsilonRaw, _InterpreterValue.getRawValue, strictlyNumbers);
    }
  }, {
    key: "doProduct",
    value: function doProduct(args, state) {
      return this.reduce(args, state, 1, 'PRODUCT', function (left, right) {
        return left * right;
      }, _InterpreterValue.getRawValue, strictlyNumbers);
    }
    /**
     * Reduces procedure arguments with given reducing function
     *
     * @param args
     * @param state
     * @param initialAccValue - "neutral" value (equivalent of 0)
     * @param functionName - function name to use as cache key
     * @param reducingFunction - reducing function
     * @param mapFunction
     * @param coercionFunction
     * */

  }, {
    key: "reduce",
    value: function reduce(args, state, initialAccValue, functionName, reducingFunction, mapFunction, coercionFunction) {
      var _this2 = this;

      if (args.length < 1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongArgNumber);
      }

      return args.reduce(function (acc, arg) {
        if (acc instanceof _Cell.CellError) {
          return acc;
        }

        if (arg.type === _parser.AstNodeType.CELL_RANGE || arg.type === _parser.AstNodeType.COLUMN_RANGE || arg.type === _parser.AstNodeType.ROW_RANGE) {
          var val = _this2.evaluateRange(arg, state, initialAccValue, functionName, reducingFunction, mapFunction, coercionFunction);

          if (val instanceof _Cell.CellError) {
            return val;
          }

          return reducingFunction(val, acc);
        }

        var value;
        value = _this2.evaluateAst(arg, state);

        if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
          var coercedRangeValues = Array.from(value.valuesFromTopLeftCorner()).map(coercionFunction).filter(function (arg) {
            return arg !== undefined;
          });
          return coercedRangeValues.map(function (arg) {
            if (arg instanceof _Cell.CellError) {
              return arg;
            } else {
              return mapFunction(arg);
            }
          }).reduce(function (left, right) {
            if (left instanceof _Cell.CellError) {
              return left;
            } else if (right instanceof _Cell.CellError) {
              return right;
            } else {
              return reducingFunction(left, right);
            }
          }, acc);
        } else if (arg.type === _parser.AstNodeType.CELL_REFERENCE) {
          value = coercionFunction(value);

          if (value === undefined) {
            return acc;
          }
        } else {
          value = _this2.coerceScalarToNumberOrError(value);
          value = coercionFunction(value);

          if (value === undefined) {
            return acc;
          }
        }

        if (value instanceof _Cell.CellError) {
          return value;
        }

        return reducingFunction(acc, mapFunction(value));
      }, initialAccValue);
    }
    /**
     * Performs range operation on given range
     *
     * @param ast - cell range ast
     * @param state
     * @param initialAccValue - initial accumulator value for reducing function
     * @param functionName - function name to use as cache key
     * @param reducingFunction - reducing function
     * @param mapFunction
     * @param coercionFunction
     */

  }, {
    key: "evaluateRange",
    value: function evaluateRange(ast, state, initialAccValue, functionName, reducingFunction, mapFunction, coercionFunction) {
      var range;

      try {
        range = _AbsoluteCellRange.AbsoluteCellRange.fromAst(ast, state.formulaAddress);
      } catch (err) {
        if (err instanceof _errors.SheetsNotEqual) {
          return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.RangeManySheets);
        } else {
          throw err;
        }
      }

      var rangeStart = range.start;
      var rangeEnd = range.end;
      var rangeVertex = this.dependencyGraph.getRange(rangeStart, rangeEnd);

      if (rangeVertex === undefined) {
        throw new Error('Range does not exists in graph');
      }

      var value = rangeVertex.getFunctionValue(functionName);

      if (value === undefined) {
        var rangeValues = this.getRangeValues(functionName, range, mapFunction, coercionFunction);
        value = rangeValues.reduce(function (arg1, arg2) {
          if (arg1 instanceof _Cell.CellError) {
            return arg1;
          } else if (arg2 instanceof _Cell.CellError) {
            return arg2;
          } else {
            return reducingFunction(arg1, arg2);
          }
        }, initialAccValue);
        rangeVertex.setFunctionValue(functionName, value);
      }

      return value;
    }
    /**
     * Returns list of values for given range and function name
     *
     * If range is dependent on smaller range, list will contain value of smaller range for this function
     * and values of cells that are not present in smaller range
     *
     * @param functionName - function name (e.g. SUM)
     * @param range - cell range
     * @param mapFunction
     * @param coercionFunction
     */

  }, {
    key: "getRangeValues",
    value: function getRangeValues(functionName, range, mapFunction, coercionFunction) {
      var rangeResult = [];

      var _this$dependencyGraph = this.dependencyGraph.rangeMapping.findSmallerRange(range),
          smallerRangeVertex = _this$dependencyGraph.smallerRangeVertex,
          restRange = _this$dependencyGraph.restRange;

      var currentRangeVertex = this.dependencyGraph.getRange(range.start, range.end);
      var actualRange;

      if (smallerRangeVertex !== undefined && this.dependencyGraph.existsEdge(smallerRangeVertex, currentRangeVertex)) {
        var cachedValue = smallerRangeVertex.getFunctionValue(functionName);

        if (cachedValue !== undefined) {
          rangeResult.push(cachedValue);
        } else {
          var _iterator = _createForOfIteratorHelper(smallerRangeVertex.range.addresses(this.dependencyGraph)),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var cellFromRange = _step.value;
              var val = coercionFunction(this.dependencyGraph.getScalarValue(cellFromRange));

              if (val instanceof _Cell.CellError) {
                rangeResult.push(val);
              } else if (val !== undefined) {
                rangeResult.push(mapFunction(val));
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        actualRange = restRange;
      } else {
        actualRange = range;
      }

      var _iterator2 = _createForOfIteratorHelper(actualRange.addresses(this.dependencyGraph)),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _cellFromRange = _step2.value;

          var _val = coercionFunction(this.dependencyGraph.getScalarValue(_cellFromRange));

          if (_val instanceof _Cell.CellError) {
            rangeResult.push(_val);
          } else if (_val !== undefined) {
            rangeResult.push(mapFunction(_val));
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return rangeResult;
    }
  }]);

  return NumericAggregationPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.NumericAggregationPlugin = NumericAggregationPlugin;
NumericAggregationPlugin.implementedFunctions = {
  'SUM': {
    method: 'sum',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'SUMSQ': {
    method: 'sumsq',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MAX': {
    method: 'max',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MIN': {
    method: 'min',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MAXA': {
    method: 'maxa',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MINA': {
    method: 'mina',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'COUNT': {
    method: 'count',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'COUNTA': {
    method: 'counta',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'AVERAGE': {
    method: 'average',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'AVERAGEA': {
    method: 'averagea',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'PRODUCT': {
    method: 'product',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'VAR.S': {
    method: 'vars',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'VAR.P': {
    method: 'varp',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'VARA': {
    method: 'vara',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'VARPA': {
    method: 'varpa',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'STDEV.S': {
    method: 'stdevs',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'STDEV.P': {
    method: 'stdevp',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'STDEVA': {
    method: 'stdeva',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'STDEVPA': {
    method: 'stdevpa',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'SUBTOTAL': {
    method: 'subtotal',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  }
};
NumericAggregationPlugin.aliases = {
  VAR: 'VAR.S',
  VARP: 'VAR.P',
  STDEV: 'STDEV.S',
  STDEVP: 'STDEV.P',
  VARS: 'VAR.S',
  STDEVS: 'STDEV.S'
};

function strictlyNumbers(arg) {
  if ((0, _InterpreterValue.isExtendedNumber)(arg) || arg instanceof _Cell.CellError) {
    return arg;
  } else {
    return undefined;
  }
}

function numbersBooleans(arg) {
  if (typeof arg === 'boolean') {
    return (0, _ArithmeticHelper.coerceBooleanToNumber)(arg);
  } else if ((0, _InterpreterValue.isExtendedNumber)(arg) || arg instanceof _Cell.CellError) {
    return arg;
  } else if (typeof arg === 'string') {
    return 0;
  } else {
    return undefined;
  }
}

/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.PowerPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var PowerPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(PowerPlugin, _FunctionPlugin);

  var _super = _createSuper(PowerPlugin);

  function PowerPlugin() {
    _classCallCheck(this, PowerPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(PowerPlugin, [{
    key: "power",
    value: function power(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('POWER'), Math.pow);
    }
  }]);

  return PowerPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.PowerPlugin = PowerPlugin;
PowerPlugin.implementedFunctions = {
  'POWER': {
    method: 'power',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 377 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RadiansPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RadiansPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(RadiansPlugin, _FunctionPlugin);

  var _super = _createSuper(RadiansPlugin);

  function RadiansPlugin() {
    _classCallCheck(this, RadiansPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(RadiansPlugin, [{
    key: "radians",
    value: function radians(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RADIANS'), function (arg) {
        return arg * (Math.PI / 180);
      });
    }
  }]);

  return RadiansPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.RadiansPlugin = RadiansPlugin;
RadiansPlugin.implementedFunctions = {
  'RADIANS': {
    method: 'radians',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RadixConversionPlugin = void 0;

__webpack_require__(168);

__webpack_require__(103);

__webpack_require__(167);

__webpack_require__(1);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _format = __webpack_require__(296);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MAX_LENGTH = 10;
var DECIMAL_NUMBER_OF_BITS = 255;
var MIN_BASE = 2;
var MAX_BASE = 36;
var ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';

var RadixConversionPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(RadixConversionPlugin, _FunctionPlugin);

  var _super = _createSuper(RadixConversionPlugin);

  function RadixConversionPlugin() {
    _classCallCheck(this, RadixConversionPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(RadixConversionPlugin, [{
    key: "dec2bin",
    value: function dec2bin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DEC2BIN'), function (value, places) {
        return decimalToBaseWithExactPadding(value, 2, places);
      });
    }
  }, {
    key: "dec2oct",
    value: function dec2oct(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DEC2OCT'), function (value, places) {
        return decimalToBaseWithExactPadding(value, 8, places);
      });
    }
  }, {
    key: "dec2hex",
    value: function dec2hex(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DEC2HEX'), function (value, places) {
        return decimalToBaseWithExactPadding(value, 16, places);
      });
    }
  }, {
    key: "bin2dec",
    value: function bin2dec(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BIN2DEC'), function (binary) {
        var binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);

        if (binaryWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotBinary);
        }

        return twoComplementToDecimal(binaryWithSign, 2);
      });
    }
  }, {
    key: "bin2oct",
    value: function bin2oct(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BIN2OCT'), function (binary, places) {
        var binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);

        if (binaryWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotBinary);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 8, places);
      });
    }
  }, {
    key: "bin2hex",
    value: function bin2hex(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BIN2HEX'), function (binary, places) {
        var binaryWithSign = coerceStringToBase(binary, 2, MAX_LENGTH);

        if (binaryWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotBinary);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(binaryWithSign, 2), 16, places);
      });
    }
  }, {
    key: "oct2dec",
    value: function oct2dec(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('OCT2DEC'), function (octal) {
        var octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);

        if (octalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotOctal);
        }

        return twoComplementToDecimal(octalWithSign, 8);
      });
    }
  }, {
    key: "oct2bin",
    value: function oct2bin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('OCT2BIN'), function (octal, places) {
        var octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);

        if (octalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotOctal);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 2, places);
      });
    }
  }, {
    key: "oct2hex",
    value: function oct2hex(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('OCT2HEX'), function (octal, places) {
        var octalWithSign = coerceStringToBase(octal, 8, MAX_LENGTH);

        if (octalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotOctal);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(octalWithSign, 8), 16, places);
      });
    }
  }, {
    key: "hex2dec",
    value: function hex2dec(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HEX2DEC'), function (hexadecimal) {
        var hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);

        if (hexadecimalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotHex);
        }

        return twoComplementToDecimal(hexadecimalWithSign, 16);
      });
    }
  }, {
    key: "hex2bin",
    value: function hex2bin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HEX2BIN'), function (hexadecimal, places) {
        var hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);

        if (hexadecimalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotHex);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 2, places);
      });
    }
  }, {
    key: "hex2oct",
    value: function hex2oct(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HEX2OCT'), function (hexadecimal, places) {
        var hexadecimalWithSign = coerceStringToBase(hexadecimal, 16, MAX_LENGTH);

        if (hexadecimalWithSign === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotHex);
        }

        return decimalToBaseWithExactPadding(twoComplementToDecimal(hexadecimalWithSign, 16), 8, places);
      });
    }
  }, {
    key: "base",
    value: function base(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BASE'), decimalToBaseWithMinimumPadding);
    }
  }, {
    key: "decimal",
    value: function decimal(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('DECIMAL'), function (arg, base) {
        var input = coerceStringToBase(arg, base, DECIMAL_NUMBER_OF_BITS);

        if (input === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NotHex);
        }

        return parseInt(input, base);
      });
    }
  }]);

  return RadixConversionPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.RadixConversionPlugin = RadixConversionPlugin;
RadixConversionPlugin.implementedFunctions = {
  'DEC2BIN': {
    method: 'dec2bin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 1,
      maxValue: 10
    }]
  },
  'DEC2OCT': {
    method: 'dec2oct',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 1,
      maxValue: 10
    }]
  },
  'DEC2HEX': {
    method: 'dec2hex',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 1,
      maxValue: 10
    }]
  },
  'BIN2DEC': {
    method: 'bin2dec',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'BIN2OCT': {
    method: 'bin2oct',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'BIN2HEX': {
    method: 'bin2hex',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'OCT2DEC': {
    method: 'oct2dec',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'OCT2BIN': {
    method: 'oct2bin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'OCT2HEX': {
    method: 'oct2hex',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'HEX2DEC': {
    method: 'hex2dec',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'HEX2BIN': {
    method: 'hex2bin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'HEX2OCT': {
    method: 'hex2oct',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: MAX_LENGTH
    }]
  },
  'DECIMAL': {
    method: 'decimal',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: MIN_BASE,
      maxValue: MAX_BASE
    }]
  },
  'BASE': {
    method: 'base',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: MIN_BASE,
      maxValue: MAX_BASE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true,
      minValue: 0,
      maxValue: DECIMAL_NUMBER_OF_BITS
    }]
  }
};

function coerceStringToBase(value, base, maxLength) {
  var baseAlphabet = ALPHABET.substr(0, base);
  var regex = new RegExp("^[".concat(baseAlphabet, "]+$"));

  if (value.length > maxLength || !regex.test(value)) {
    return undefined;
  }

  return value;
}

function decimalToBaseWithExactPadding(value, base, places) {
  if (value > maxValFromBase(base)) {
    return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueBaseLarge);
  }

  if (value < minValFromBase(base)) {
    return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueBaseSmall);
  }

  var result = decimalToRadixComplement(value, base);

  if (places === undefined || value < 0) {
    return result;
  } else if (result.length > places) {
    return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueBaseLong);
  } else {
    return (0, _format.padLeft)(result, places);
  }
}

function minValFromBase(base) {
  return -Math.pow(base, MAX_LENGTH) / 2;
}

function maxValFromBase(base) {
  return -minValFromBase(base) - 1;
}

function decimalToBaseWithMinimumPadding(value, base, places) {
  var result = decimalToRadixComplement(value, base);

  if (places !== undefined && places > result.length) {
    return (0, _format.padLeft)(result, places);
  } else {
    return result;
  }
}

function decimalToRadixComplement(value, base) {
  var offset = value < 0 ? Math.pow(base, MAX_LENGTH) : 0;
  return (value + offset).toString(base).toUpperCase();
}

function twoComplementToDecimal(value, base) {
  var parsed = parseInt(value, base);
  var offset = Math.pow(base, MAX_LENGTH);
  return parsed >= offset / 2 ? parsed - offset : parsed;
}

/***/ }),
/* 379 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RandomPlugin = void 0;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RandomPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(RandomPlugin, _FunctionPlugin);

  var _super = _createSuper(RandomPlugin);

  function RandomPlugin() {
    _classCallCheck(this, RandomPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(RandomPlugin, [{
    key: "rand",
    value:
    /**
     * Corresponds to RAND()
     *
     * Returns a pseudo-random floating-point random number
     * in the range [0,1).
     *
     * @param ast
     * @param state
     */
    function rand(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RAND'), Math.random);
    }
  }, {
    key: "randbetween",
    value: function randbetween(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RANDBETWEEN'), function (lower, upper) {
        if (upper < lower) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.WrongOrder);
        }

        lower = Math.ceil(lower);
        upper = Math.floor(upper) + 1;

        if (lower === upper) {
          upper += 1;
        }

        return lower + Math.floor(Math.random() * (upper - lower));
      });
    }
  }]);

  return RandomPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.RandomPlugin = RandomPlugin;
RandomPlugin.implementedFunctions = {
  'RAND': {
    method: 'rand',
    parameters: [],
    isVolatile: true
  },
  'RANDBETWEEN': {
    method: 'randbetween',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    isVolatile: true
  }
};

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RoundingPlugin = void 0;
exports.findNextEvenNumber = findNextEvenNumber;
exports.findNextOddNumber = findNextOddNumber;

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function findNextOddNumber(arg) {
  var ceiled = Math.ceil(arg);
  return ceiled % 2 === 1 ? ceiled : ceiled + 1;
}

function findNextEvenNumber(arg) {
  var ceiled = Math.ceil(arg);
  return ceiled % 2 === 0 ? ceiled : ceiled + 1;
}

var RoundingPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(RoundingPlugin, _FunctionPlugin);

  var _super = _createSuper(RoundingPlugin);

  function RoundingPlugin() {
    _classCallCheck(this, RoundingPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(RoundingPlugin, [{
    key: "roundup",
    value: function roundup(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), function (numberToRound, places) {
        var placesMultiplier = Math.pow(10, places);

        if (numberToRound < 0) {
          return -Math.ceil(-numberToRound * placesMultiplier) / placesMultiplier;
        } else {
          return Math.ceil(numberToRound * placesMultiplier) / placesMultiplier;
        }
      });
    }
  }, {
    key: "rounddown",
    value: function rounddown(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ROUNDDOWN'), function (numberToRound, places) {
        var placesMultiplier = Math.pow(10, places);

        if (numberToRound < 0) {
          return -Math.floor(-numberToRound * placesMultiplier) / placesMultiplier;
        } else {
          return Math.floor(numberToRound * placesMultiplier) / placesMultiplier;
        }
      });
    }
  }, {
    key: "round",
    value: function round(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ROUND'), function (numberToRound, places) {
        var placesMultiplier = Math.pow(10, places);

        if (numberToRound < 0) {
          return -Math.round(-numberToRound * placesMultiplier) / placesMultiplier;
        } else {
          return Math.round(numberToRound * placesMultiplier) / placesMultiplier;
        }
      });
    }
  }, {
    key: "intFunc",
    value: function intFunc(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('INT'), function (coercedNumberToRound) {
        if (coercedNumberToRound < 0) {
          return -Math.floor(-coercedNumberToRound);
        } else {
          return Math.floor(coercedNumberToRound);
        }
      });
    }
  }, {
    key: "even",
    value: function even(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('EVEN'), function (coercedNumberToRound) {
        if (coercedNumberToRound < 0) {
          return -findNextEvenNumber(-coercedNumberToRound);
        } else {
          return findNextEvenNumber(coercedNumberToRound);
        }
      });
    }
  }, {
    key: "odd",
    value: function odd(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ODD'), function (coercedNumberToRound) {
        if (coercedNumberToRound < 0) {
          return -findNextOddNumber(-coercedNumberToRound);
        } else {
          return findNextOddNumber(coercedNumberToRound);
        }
      });
    }
  }, {
    key: "ceilingmath",
    value: function ceilingmath(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CEILING.MATH'), function (value, significance, mode) {
        if (significance === 0 || value === 0) {
          return 0;
        }

        significance = Math.abs(significance);

        if (mode === 1 && value < 0) {
          significance = -significance;
        }

        return Math.ceil(value / significance) * significance;
      });
    }
  }, {
    key: "ceiling",
    value: function ceiling(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CEILING'), function (value, significance) {
        if (value === 0) {
          return 0;
        }

        if (significance === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        if (value > 0 && significance < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DistinctSigns);
        }

        return Math.ceil(value / significance) * significance;
      });
    }
  }, {
    key: "ceilingprecise",
    value: function ceilingprecise(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CEILING.PRECISE'), function (value, significance) {
        if (significance === 0 || value === 0) {
          return 0;
        }

        significance = Math.abs(significance);
        return Math.ceil(value / significance) * significance;
      });
    }
  }, {
    key: "floormath",
    value: function floormath(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FLOOR.MATH'), function (value, significance, mode) {
        if (significance === 0 || value === 0) {
          return 0;
        }

        significance = Math.abs(significance);

        if (mode === 1 && value < 0) {
          significance *= -1;
        }

        return Math.floor(value / significance) * significance;
      });
    }
  }, {
    key: "floor",
    value: function floor(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FLOOR'), function (value, significance) {
        if (value === 0) {
          return 0;
        }

        if (significance === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        if (value > 0 && significance < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DistinctSigns);
        }

        return Math.floor(value / significance) * significance;
      });
    }
  }, {
    key: "floorprecise",
    value: function floorprecise(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FLOOR.PRECISE'), function (value, significance) {
        if (significance === 0 || value === 0) {
          return 0;
        }

        significance = Math.abs(significance);
        return Math.floor(value / significance) * significance;
      });
    }
  }]);

  return RoundingPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.RoundingPlugin = RoundingPlugin;
RoundingPlugin.implementedFunctions = {
  'ROUNDUP': {
    method: 'roundup',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'ROUNDDOWN': {
    method: 'rounddown',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'ROUND': {
    method: 'round',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'INT': {
    method: 'intFunc',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'EVEN': {
    method: 'even',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ODD': {
    method: 'odd',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'CEILING.MATH': {
    method: 'ceilingmath',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'CEILING': {
    method: 'ceiling',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'CEILING.PRECISE': {
    method: 'ceilingprecise',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'FLOOR.MATH': {
    method: 'floormath',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }]
  },
  'FLOOR': {
    method: 'floor',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'FLOOR.PRECISE': {
    method: 'floorprecise',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  }
};
RoundingPlugin.aliases = {
  'ISO.CEILING': 'CEILING.PRECISE',
  'TRUNC': 'ROUNDDOWN'
};

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.SqrtPlugin = void 0;

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SqrtPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(SqrtPlugin, _FunctionPlugin);

  var _super = _createSuper(SqrtPlugin);

  function SqrtPlugin() {
    _classCallCheck(this, SqrtPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(SqrtPlugin, [{
    key: "sqrt",
    value: function sqrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SQRT'), Math.sqrt);
    }
  }]);

  return SqrtPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.SqrtPlugin = SqrtPlugin;
SqrtPlugin.implementedFunctions = {
  'SQRT': {
    method: 'sqrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(1);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(82);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(103);

__webpack_require__(137);

__webpack_require__(50);

exports.__esModule = true;
exports.SumifPlugin = void 0;

__webpack_require__(150);

__webpack_require__(146);

__webpack_require__(229);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _CriterionFunctionCompute = __webpack_require__(383);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var AverageResult = /*#__PURE__*/function () {
  function AverageResult(sum, count) {
    _classCallCheck(this, AverageResult);

    this.sum = sum;
    this.count = count;
  }

  _createClass(AverageResult, [{
    key: "compose",
    value: function compose(other) {
      return new AverageResult(this.sum + other.sum, this.count + other.count);
    }
  }, {
    key: "averageValue",
    value: function averageValue() {
      if (this.count > 0) {
        return this.sum / this.count;
      } else {
        return undefined;
      }
    }
  }], [{
    key: "single",
    value: function single(arg) {
      return new AverageResult(arg, 1);
    }
  }]);

  return AverageResult;
}();

AverageResult.empty = new AverageResult(0, 0);
/** Computes key for criterion function cache */

function sumifCacheKey(conditions) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var conditionsStrings = conditions.map(function (c) {
    return "".concat(c.conditionRange.range.sheet, ",").concat(c.conditionRange.range.start.col, ",").concat(c.conditionRange.range.start.row);
  });
  return ['SUMIF'].concat(_toConsumableArray(conditionsStrings)).join(',');
}

function averageifCacheKey(conditions) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var conditionsStrings = conditions.map(function (c) {
    return "".concat(c.conditionRange.range.sheet, ",").concat(c.conditionRange.range.start.col, ",").concat(c.conditionRange.range.start.row);
  });
  return ['AVERAGEIF'].concat(_toConsumableArray(conditionsStrings)).join(',');
}

function countifsCacheKey(conditions) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var conditionsStrings = conditions.map(function (c) {
    return "".concat(c.conditionRange.range.sheet, ",").concat(c.conditionRange.range.start.col, ",").concat(c.conditionRange.range.start.row);
  });
  return ['COUNTIFS'].concat(_toConsumableArray(conditionsStrings)).join(',');
}

var SumifPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(SumifPlugin, _FunctionPlugin);

  var _super = _createSuper(SumifPlugin);

  function SumifPlugin() {
    _classCallCheck(this, SumifPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(SumifPlugin, [{
    key: "sumif",
    value:
    /**
     * Corresponds to SUMIF(Range, Criterion, SumRange)
     *
     * Range is the range to which criterion is to be applied.
     * Criterion is the criteria used to choose which cells will be included in sum.
     * SumRange is the range on which adding will be performed.
     *
     * @param ast
     * @param state
     */
    function sumif(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('SUMIF'), function (conditionArg, criterionValue, valuesArg) {
        var criterion = _this.interpreter.criterionBuilder.fromCellValue(criterionValue, _this.arithmeticHelper);

        if (criterion === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadCriterion);
        }

        valuesArg = valuesArg !== null && valuesArg !== void 0 ? valuesArg : conditionArg;
        return new _CriterionFunctionCompute.CriterionFunctionCompute(_this.interpreter, sumifCacheKey, 0, function (left, right) {
          return _this.arithmeticHelper.nonstrictadd(left, right);
        }, function (arg) {
          return (0, _InterpreterValue.getRawValue)(arg);
        }).compute(valuesArg, [new _CriterionFunctionCompute.Condition(conditionArg, criterion)]);
      });
    }
  }, {
    key: "sumifs",
    value: function sumifs(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('SUMIFS'), function (values) {
        var conditions = [];

        for (var i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i += 2) {
          var conditionArg = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];

          var criterionPackage = _this2.interpreter.criterionBuilder.fromCellValue(i + 1 + 1 < 1 || arguments.length <= i + 1 + 1 ? undefined : arguments[i + 1 + 1], _this2.arithmeticHelper);

          if (criterionPackage === undefined) {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadCriterion);
          }

          conditions.push(new _CriterionFunctionCompute.Condition(conditionArg, criterionPackage));
        }

        return new _CriterionFunctionCompute.CriterionFunctionCompute(_this2.interpreter, sumifCacheKey, 0, function (left, right) {
          return _this2.arithmeticHelper.nonstrictadd(left, right);
        }, function (arg) {
          return (0, _InterpreterValue.getRawValue)(arg);
        }).compute(values, conditions);
      });
    }
  }, {
    key: "averageif",
    value: function averageif(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('AVERAGEIF'), function (conditionArg, criterionValue, valuesArg) {
        var criterion = _this3.interpreter.criterionBuilder.fromCellValue(criterionValue, _this3.arithmeticHelper);

        if (criterion === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadCriterion);
        }

        valuesArg = valuesArg !== null && valuesArg !== void 0 ? valuesArg : conditionArg;
        var averageResult = new _CriterionFunctionCompute.CriterionFunctionCompute(_this3.interpreter, averageifCacheKey, AverageResult.empty, function (left, right) {
          return left.compose(right);
        }, function (arg) {
          if ((0, _InterpreterValue.isExtendedNumber)(arg)) {
            return AverageResult.single((0, _InterpreterValue.getRawValue)(arg));
          } else {
            return AverageResult.empty;
          }
        }).compute(valuesArg, [new _CriterionFunctionCompute.Condition(conditionArg, criterion)]);

        if (averageResult instanceof _Cell.CellError) {
          return averageResult;
        } else {
          return averageResult.averageValue() || new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }
      });
    }
    /**
     * Corresponds to COUNTIF(Range, Criterion)
     *
     * Range is the range to which criterion is to be applied.
     * Criterion is the criteria used to choose which cells will be included in sum.
     *
     * Returns number of cells on which criteria evaluates to true.
     *
     * @param ast
     * @param state
     */

  }, {
    key: "countif",
    value: function countif(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('COUNTIF'), function (conditionArg, criterionValue) {
        var criterion = _this4.interpreter.criterionBuilder.fromCellValue(criterionValue, _this4.arithmeticHelper);

        if (criterion === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadCriterion);
        }

        return new _CriterionFunctionCompute.CriterionFunctionCompute(_this4.interpreter, function () {
          return 'COUNTIF';
        }, 0, function (left, right) {
          return left + right;
        }, function () {
          return 1;
        }).compute(conditionArg, [new _CriterionFunctionCompute.Condition(conditionArg, criterion)]);
      });
    }
  }, {
    key: "countifs",
    value: function countifs(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('COUNTIFS'), function () {
        var conditions = [];

        for (var i = 0; i < arguments.length; i += 2) {
          var conditionArg = i < 0 || arguments.length <= i ? undefined : arguments[i];

          var criterionPackage = _this5.interpreter.criterionBuilder.fromCellValue(i + 1 < 0 || arguments.length <= i + 1 ? undefined : arguments[i + 1], _this5.arithmeticHelper);

          if (criterionPackage === undefined) {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.BadCriterion);
          }

          conditions.push(new _CriterionFunctionCompute.Condition(conditionArg, criterionPackage));
        }

        return new _CriterionFunctionCompute.CriterionFunctionCompute(_this5.interpreter, countifsCacheKey, 0, function (left, right) {
          return left + right;
        }, function () {
          return 1;
        }).compute(conditions[0].conditionRange, conditions);
      });
    }
  }]);

  return SumifPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.SumifPlugin = SumifPlugin;
SumifPlugin.implementedFunctions = {
  'SUMIF': {
    method: 'sumif',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  },
  'COUNTIF': {
    method: 'countif',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }]
  },
  'AVERAGEIF': {
    method: 'averageif',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE,
      optionalArg: true
    }]
  },
  'SUMIFS': {
    method: 'sumifs',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }],
    repeatLastArgs: 2
  },
  'COUNTIFS': {
    method: 'countifs',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }],
    repeatLastArgs: 2
  }
};

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(77);

__webpack_require__(81);

exports.__esModule = true;
exports.CriterionFunctionCompute = exports.Condition = void 0;

__webpack_require__(149);

__webpack_require__(150);

__webpack_require__(1);

__webpack_require__(229);

__webpack_require__(154);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(166);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _generatorUtils = __webpack_require__(384);

var _InterpreterValue = __webpack_require__(255);

var _marked = /*#__PURE__*/regeneratorRuntime.mark(getRangeValues),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(ifFilter);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var findSmallerRangeForMany = function findSmallerRangeForMany(dependencyGraph, conditionRanges, valuesRange) {
  if (valuesRange.end.row > valuesRange.start.row) {
    var valuesRangeEndRowLess = (0, _Cell.simpleCellAddress)(valuesRange.end.sheet, valuesRange.end.col, valuesRange.end.row - 1);
    var rowLessVertex = dependencyGraph.getRange(valuesRange.start, valuesRangeEndRowLess);

    if (rowLessVertex !== undefined) {
      return {
        smallerRangeVertex: rowLessVertex,
        restValuesRange: valuesRange.withStart((0, _Cell.simpleCellAddress)(valuesRange.start.sheet, valuesRange.start.col, valuesRange.end.row)),
        restConditionRanges: conditionRanges.map(function (conditionRange) {
          return conditionRange.withStart((0, _Cell.simpleCellAddress)(conditionRange.start.sheet, conditionRange.start.col, conditionRange.end.row));
        })
      };
    }
  }

  return {
    restValuesRange: valuesRange,
    restConditionRanges: conditionRanges
  };
};

var CriterionFunctionCompute = /*#__PURE__*/function () {
  function CriterionFunctionCompute(interpreter, cacheKey, reduceInitialValue, composeFunction, mapFunction) {
    _classCallCheck(this, CriterionFunctionCompute);

    this.interpreter = interpreter;
    this.cacheKey = cacheKey;
    this.reduceInitialValue = reduceInitialValue;
    this.composeFunction = composeFunction;
    this.mapFunction = mapFunction;
    this.dependencyGraph = this.interpreter.dependencyGraph;
  }

  _createClass(CriterionFunctionCompute, [{
    key: "compute",
    value: function compute(simpleValuesRange, conditions) {
      var _this = this;

      var _iterator = _createForOfIteratorHelper(conditions),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var condition = _step.value;

          if (!condition.conditionRange.sameDimensionsAs(simpleValuesRange)) {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.EqualLength);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      var valuesRangeVertex = this.tryToGetRangeVertexForRangeValue(simpleValuesRange);
      var conditionsVertices = conditions.map(function (c) {
        return _this.tryToGetRangeVertexForRangeValue(c.conditionRange);
      });

      if (valuesRangeVertex && conditionsVertices.every(function (e) {
        return e !== undefined;
      })) {
        var fullCriterionString = conditions.map(function (c) {
          return c.criterionPackage.raw;
        }).join(',');
        var cachedResult = this.findAlreadyComputedValueInCache(valuesRangeVertex, this.cacheKey(conditions), fullCriterionString);

        if (cachedResult !== undefined) {
          this.interpreter.stats.incrementCriterionFunctionFullCacheUsed();
          return cachedResult;
        }

        var cache = this.buildNewCriterionCache(this.cacheKey(conditions), conditions.map(function (c) {
          return c.conditionRange.range;
        }), simpleValuesRange.range);

        if (!cache.has(fullCriterionString)) {
          cache.set(fullCriterionString, [this.evaluateRangeValue(simpleValuesRange, conditions), conditions.map(function (condition) {
            return condition.criterionPackage.lambda;
          })]);
        }

        valuesRangeVertex.setCriterionFunctionValues(this.cacheKey(conditions), cache);
        conditionsVertices.forEach(function (range) {
          if (range !== undefined) {
            range.addDependentCacheRange(valuesRangeVertex);
          }
        });
        return cache.get(fullCriterionString)[0];
      } else {
        return this.evaluateRangeValue(simpleValuesRange, conditions);
      }
    }
  }, {
    key: "tryToGetRangeVertexForRangeValue",
    value: function tryToGetRangeVertexForRangeValue(rangeValue) {
      var maybeRange = rangeValue.range;

      if (maybeRange === undefined) {
        return undefined;
      } else {
        return this.dependencyGraph.getRange(maybeRange.start, maybeRange.end);
      }
    }
  }, {
    key: "reduceFunction",
    value: function reduceFunction(iterable) {
      var acc = this.reduceInitialValue;

      var _iterator2 = _createForOfIteratorHelper(iterable),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var val = _step2.value;
          acc = this.composeFunction(acc, val);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }

      return acc;
    }
  }, {
    key: "findAlreadyComputedValueInCache",
    value: function findAlreadyComputedValueInCache(rangeVertex, cacheKey, criterionString) {
      return rangeVertex.getCriterionFunctionValue(cacheKey, criterionString);
    }
  }, {
    key: "evaluateRangeValue",
    value: function evaluateRangeValue(simpleValuesRange, conditions) {
      var criterionLambdas = conditions.map(function (condition) {
        return condition.criterionPackage.lambda;
      });
      var values = Array.from(simpleValuesRange.valuesFromTopLeftCorner()).map(this.mapFunction)[Symbol.iterator]();
      var conditionsIterators = conditions.map(function (condition) {
        return condition.conditionRange.iterateValuesFromTopLeftCorner();
      });
      var filteredValues = ifFilter(criterionLambdas, conditionsIterators, values);
      return this.reduceFunction(filteredValues);
    }
  }, {
    key: "buildNewCriterionCache",
    value: function buildNewCriterionCache(cacheKey, simpleConditionRanges, simpleValuesRange) {
      var _this2 = this;

      var currentRangeVertex = this.dependencyGraph.getRange(simpleValuesRange.start, simpleValuesRange.end);

      var _findSmallerRangeForM = findSmallerRangeForMany(this.dependencyGraph, simpleConditionRanges, simpleValuesRange),
          smallerRangeVertex = _findSmallerRangeForM.smallerRangeVertex,
          restConditionRanges = _findSmallerRangeForM.restConditionRanges,
          restValuesRange = _findSmallerRangeForM.restValuesRange;

      var smallerCache;

      if (smallerRangeVertex !== undefined && this.dependencyGraph.existsEdge(smallerRangeVertex, currentRangeVertex)) {
        smallerCache = smallerRangeVertex.getCriterionFunctionValues(cacheKey);
      } else {
        smallerCache = new Map();
      }

      var newCache = new Map();
      smallerCache.forEach(function (_ref, key) {
        var _ref2 = _slicedToArray(_ref, 2),
            value = _ref2[0],
            criterionLambdas = _ref2[1];

        var filteredValues = ifFilter(criterionLambdas, restConditionRanges.map(function (rcr) {
          return getRangeValues(_this2.dependencyGraph, rcr);
        }), Array.from(getRangeValues(_this2.dependencyGraph, restValuesRange)).map(_this2.mapFunction)[Symbol.iterator]());

        var newCacheValue = _this2.composeFunction(value, _this2.reduceFunction(filteredValues));

        _this2.interpreter.stats.incrementCriterionFunctionPartialCacheUsed();

        newCache.set(key, [newCacheValue, criterionLambdas]);
      });
      return newCache;
    }
  }]);

  return CriterionFunctionCompute;
}();

exports.CriterionFunctionCompute = CriterionFunctionCompute;

var Condition = /*#__PURE__*/_createClass(function Condition(conditionRange, criterionPackage) {
  _classCallCheck(this, Condition);

  this.conditionRange = conditionRange;
  this.criterionPackage = criterionPackage;
});

exports.Condition = Condition;

function getRangeValues(dependencyGraph, cellRange) {
  var _iterator3, _step3, cellFromRange;

  return regeneratorRuntime.wrap(function getRangeValues$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _iterator3 = _createForOfIteratorHelper(cellRange.addresses(dependencyGraph));
          _context.prev = 1;

          _iterator3.s();

        case 3:
          if ((_step3 = _iterator3.n()).done) {
            _context.next = 9;
            break;
          }

          cellFromRange = _step3.value;
          _context.next = 7;
          return (0, _InterpreterValue.getRawValue)(dependencyGraph.getScalarValue(cellFromRange));

        case 7:
          _context.next = 3;
          break;

        case 9:
          _context.next = 14;
          break;

        case 11:
          _context.prev = 11;
          _context.t0 = _context["catch"](1);

          _iterator3.e(_context.t0);

        case 14:
          _context.prev = 14;

          _iterator3.f();

          return _context.finish(14);

        case 17:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[1, 11, 14, 17]]);
}

function ifFilter(criterionLambdas, conditionalIterables, computableIterable) {
  var _iterator4, _step4, computable, conditionalSplits, conditionalFirsts;

  return regeneratorRuntime.wrap(function ifFilter$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _iterator4 = _createForOfIteratorHelper(computableIterable);
          _context2.prev = 1;

          _iterator4.s();

        case 3:
          if ((_step4 = _iterator4.n()).done) {
            _context2.next = 15;
            break;
          }

          computable = _step4.value;
          conditionalSplits = conditionalIterables.map(function (conditionalIterable) {
            return (0, _generatorUtils.split)(conditionalIterable);
          });

          if (conditionalSplits.every(function (cs) {
            return Object.prototype.hasOwnProperty.call(cs, 'value');
          })) {
            _context2.next = 8;
            break;
          }

          return _context2.abrupt("return");

        case 8:
          conditionalFirsts = conditionalSplits.map(function (cs) {
            return cs.value;
          });

          if (!zip(conditionalFirsts, criterionLambdas).every(function (_ref3) {
            var _ref4 = _slicedToArray(_ref3, 2),
                conditionalFirst = _ref4[0],
                criterionLambda = _ref4[1];

            return criterionLambda(conditionalFirst);
          })) {
            _context2.next = 12;
            break;
          }

          _context2.next = 12;
          return computable;

        case 12:
          conditionalIterables = conditionalSplits.map(function (cs) {
            return cs.rest;
          });

        case 13:
          _context2.next = 3;
          break;

        case 15:
          _context2.next = 20;
          break;

        case 17:
          _context2.prev = 17;
          _context2.t0 = _context2["catch"](1);

          _iterator4.e(_context2.t0);

        case 20:
          _context2.prev = 20;

          _iterator4.f();

          return _context2.finish(20);

        case 23:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[1, 17, 20, 23]]);
}

function zip(arr1, arr2) {
  var result = [];

  for (var i = 0; i < Math.min(arr1.length, arr2.length); i++) {
    result.push([arr1[i], arr2[i]]);
  }

  return result;
}

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(103);

__webpack_require__(171);

exports.__esModule = true;
exports.empty = empty;
exports.first = first;
exports.split = split;

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(1);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(149);

var _marked = /*#__PURE__*/regeneratorRuntime.mark(empty);

/**
 * @license
 * Copyright (c) 2021 Handsoncode. All rights reserved.
 */
function empty() {
  return regeneratorRuntime.wrap(function empty$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}

function split(iterable) {
  var iterator = iterable[Symbol.iterator]();

  var _iterator$next = iterator.next(),
      done = _iterator$next.done,
      value = _iterator$next.value;

  if (done) {
    return {
      rest: empty()
    };
  } else {
    return {
      value: value,
      rest: iterator
    };
  }
}

function first(iterable) {
  var iterator = iterable[Symbol.iterator]();

  var _iterator$next2 = iterator.next(),
      done = _iterator$next2.done,
      value = _iterator$next2.value;

  if (!done) {
    return value;
  }

  return undefined;
}

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.SumprodPlugin = void 0;

__webpack_require__(150);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SumprodPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(SumprodPlugin, _FunctionPlugin);

  var _super = _createSuper(SumprodPlugin);

  function SumprodPlugin() {
    _classCallCheck(this, SumprodPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(SumprodPlugin, [{
    key: "sumproduct",
    value: function sumproduct(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('SUMPRODUCT'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var width = args[0].width();
        var height = args[0].height();

        for (var _i = 0, _args = args; _i < _args.length; _i++) {
          var arg = _args[_i];

          if (arg.width() !== width || arg.height() !== height) {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.EqualLength);
          }
        }

        var ret = 0;
        var iterators = args.map(function (arg) {
          return arg.iterateValuesFromTopLeftCorner();
        });

        for (var i = 0; i < width * height; i++) {
          var acc = 1;

          var _iterator = _createForOfIteratorHelper(iterators),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var it = _step.value;
              var val = it.next().value;

              if (val instanceof _Cell.CellError) {
                return val;
              }

              var coercedVal = _this.coerceScalarToNumberOrError(val);

              if ((0, _InterpreterValue.isExtendedNumber)(coercedVal)) {
                acc *= (0, _InterpreterValue.getRawValue)(coercedVal);
              } else {
                acc = 0;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }

          ret += acc;
        }

        return ret;
      });
    }
  }]);

  return SumprodPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.SumprodPlugin = SumprodPlugin;
SumprodPlugin.implementedFunctions = {
  'SUMPRODUCT': {
    method: 'sumproduct',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    repeatLastArgs: 1
  }
};

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.TextPlugin = void 0;

__webpack_require__(146);

__webpack_require__(103);

__webpack_require__(171);

__webpack_require__(179);

__webpack_require__(387);

__webpack_require__(77);

__webpack_require__(168);

__webpack_require__(167);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing text-specific functions
 */
var TextPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(TextPlugin, _FunctionPlugin);

  var _super = _createSuper(TextPlugin);

  function TextPlugin() {
    _classCallCheck(this, TextPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(TextPlugin, [{
    key: "concatenate",
    value:
    /**
     * Corresponds to CONCATENATE(value1, [value2, ...])
     *
     * Concatenates provided arguments to one string.
     *
     * @param ast
     * @param state
     */
    function concatenate(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CONCATENATE'), function () {
        var _ref;

        return (_ref = '').concat.apply(_ref, arguments);
      });
    }
    /**
     * Corresponds to SPLIT(string, index)
     *
     * Splits provided string using space separator and returns chunk at zero-based position specified by second argument
     *
     * @param ast
     * @param state
     */

  }, {
    key: "split",
    value: function split(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SPLIT'), function (stringToSplit, indexToUse) {
        var splittedString = stringToSplit.split(' ');

        if (indexToUse >= splittedString.length || indexToUse < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.IndexBounds);
        }

        return splittedString[indexToUse];
      });
    }
  }, {
    key: "len",
    value: function len(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LEN'), function (arg) {
        return arg.length;
      });
    }
  }, {
    key: "lower",
    value: function lower(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LOWER'), function (arg) {
        return arg.toLowerCase();
      });
    }
  }, {
    key: "trim",
    value: function trim(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TRIM'), function (arg) {
        return arg.replace(/^ +| +$/g, '').replace(/ +/g, ' ');
      });
    }
  }, {
    key: "proper",
    value: function proper(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PROPER'), function (arg) {
        return arg.replace(/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])+/g, function (word) {
          return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
        });
      });
    }
  }, {
    key: "clean",
    value: function clean(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CLEAN'), function (arg) {
        // eslint-disable-next-line no-control-regex
        return arg.replace(/[\u0000-\u001F]/g, '');
      });
    }
  }, {
    key: "exact",
    value: function exact(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('EXACT'), function (left, right) {
        return left === right;
      });
    }
  }, {
    key: "rept",
    value: function rept(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('REPT'), function (text, count) {
        if (count < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NegativeCount);
        }

        return text.repeat(count);
      });
    }
  }, {
    key: "right",
    value: function right(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RIGHT'), function (text, length) {
        if (length < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NegativeLength);
        } else if (length === 0) {
          return '';
        }

        return text.slice(-length);
      });
    }
  }, {
    key: "left",
    value: function left(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LEFT'), function (text, length) {
        if (length < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NegativeLength);
        }

        return text.slice(0, length);
      });
    }
  }, {
    key: "mid",
    value: function mid(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MID'), function (text, startPosition, numberOfChars) {
        if (startPosition < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        if (numberOfChars < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NegativeLength);
        }

        return text.substring(startPosition - 1, startPosition + numberOfChars - 1);
      });
    }
  }, {
    key: "replace",
    value: function replace(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('REPLACE'), function (text, startPosition, numberOfChars, newText) {
        if (startPosition < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        if (numberOfChars < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.NegativeLength);
        }

        return text.substring(0, startPosition - 1) + newText + text.substring(startPosition + numberOfChars - 1);
      });
    }
  }, {
    key: "search",
    value: function search(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('SEARCH'), function (pattern, text, startIndex) {
        if (startIndex < 1 || startIndex > text.length) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LengthBounds);
        }

        var normalizedText = text.substring(startIndex - 1).toLowerCase();
        var index;

        if (_this.arithmeticHelper.requiresRegex(pattern)) {
          index = _this.arithmeticHelper.searchString(pattern, normalizedText);
        } else {
          index = normalizedText.indexOf(pattern.toLowerCase());
        }

        index = index + startIndex;
        return index > 0 ? index : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.PatternNotFound);
      });
    }
  }, {
    key: "substitute",
    value: function substitute(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUBSTITUTE'), function (text, oldText, newText, occurrence) {
        var oldTextRegexp = new RegExp(oldText, 'g');

        if (occurrence === undefined) {
          return text.replace(oldTextRegexp, newText);
        }

        if (occurrence < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        var match;
        var i = 0;

        while ((match = oldTextRegexp.exec(text)) !== null) {
          if (occurrence === ++i) {
            return text.substring(0, match.index) + newText + text.substring(oldTextRegexp.lastIndex);
          }
        }

        return text;
      });
    }
  }, {
    key: "find",
    value: function find(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FIND'), function (pattern, text, startIndex) {
        if (startIndex < 1 || startIndex > text.length) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.IndexBounds);
        }

        var shiftedText = text.substring(startIndex - 1);
        var index = shiftedText.indexOf(pattern) + startIndex;
        return index > 0 ? index : new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.PatternNotFound);
      });
    }
  }, {
    key: "t",
    value: function t(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T'), function (arg) {
        if (arg instanceof _Cell.CellError) {
          return arg;
        }

        return typeof arg === 'string' ? arg : '';
      });
    }
  }, {
    key: "upper",
    value: function upper(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('UPPER'), function (arg) {
        return arg.toUpperCase();
      });
    }
  }]);

  return TextPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.TextPlugin = TextPlugin;
TextPlugin.implementedFunctions = {
  'CONCATENATE': {
    method: 'concatenate',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'EXACT': {
    method: 'exact',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'SPLIT': {
    method: 'split',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'LEN': {
    method: 'len',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'LOWER': {
    method: 'lower',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'MID': {
    method: 'mid',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'TRIM': {
    method: 'trim',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'T': {
    method: 't',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.SCALAR
    }]
  },
  'PROPER': {
    method: 'proper',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'CLEAN': {
    method: 'clean',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'REPT': {
    method: 'rept',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'RIGHT': {
    method: 'right',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'LEFT': {
    method: 'left',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'REPLACE': {
    method: 'replace',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  },
  'SEARCH': {
    method: 'search',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'SUBSTITUTE': {
    method: 'substitute',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true
    }]
  },
  'FIND': {
    method: 'find',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'UPPER': {
    method: 'upper',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  }
};

/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var repeat = __webpack_require__(298);

// `String.prototype.repeat` method
// https://tc39.es/ecma262/#sec-string.prototype.repeat
$({ target: 'String', proto: true }, {
  repeat: repeat
});


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.TrigonometryPlugin = void 0;

__webpack_require__(389);

__webpack_require__(391);

__webpack_require__(392);

__webpack_require__(393);

__webpack_require__(395);

__webpack_require__(396);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

var _MathConstantsPlugin = __webpack_require__(371);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Interpreter plugin containing trigonometric functions
 */
var TrigonometryPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(TrigonometryPlugin, _FunctionPlugin);

  var _super = _createSuper(TrigonometryPlugin);

  function TrigonometryPlugin() {
    _classCallCheck(this, TrigonometryPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(TrigonometryPlugin, [{
    key: "acos",
    value:
    /**
     * Corresponds to ACOS(value)
     *
     * Returns the arc cosine (or inverse cosine) of a number.
     *
     * @param ast
     * @param state
     */
    function acos(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ACOS'), Math.acos);
    }
  }, {
    key: "asin",
    value: function asin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ASIN'), Math.asin);
    }
  }, {
    key: "cos",
    value: function cos(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COS'), Math.cos);
    }
  }, {
    key: "sin",
    value: function sin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SIN'), Math.sin);
    }
  }, {
    key: "tan",
    value: function tan(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TAN'), Math.tan);
    }
  }, {
    key: "atan",
    value: function atan(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ATAN'), Math.atan);
    }
  }, {
    key: "atan2",
    value: function atan2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ATAN2'), function (x, y) {
        if (x === 0 && y === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return Math.atan2(y, x);
      });
    }
  }, {
    key: "cot",
    value: function cot(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COT'), function (arg) {
        return arg === 0 ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : 1 / Math.tan(arg);
      });
    }
  }, {
    key: "acot",
    value: function acot(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ACOT'), function (arg) {
        return arg === 0 ? _MathConstantsPlugin.PI / 2 : Math.atan(1 / arg);
      });
    }
  }, {
    key: "sec",
    value: function sec(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SEC'), function (arg) {
        return 1 / Math.cos(arg);
      });
    }
  }, {
    key: "csc",
    value: function csc(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CSC'), function (arg) {
        return arg === 0 ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : 1 / Math.sin(arg);
      });
    }
  }, {
    key: "sinh",
    value: function sinh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SINH'), Math.sinh);
    }
  }, {
    key: "asinh",
    value: function asinh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ASINH'), Math.asinh);
    }
  }, {
    key: "cosh",
    value: function cosh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COSH'), Math.cosh);
    }
  }, {
    key: "acosh",
    value: function acosh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ACOSH'), Math.acosh);
    }
  }, {
    key: "tanh",
    value: function tanh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TANH'), Math.tanh);
    }
  }, {
    key: "atanh",
    value: function atanh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ATANH'), Math.atanh);
    }
  }, {
    key: "coth",
    value: function coth(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COTH'), function (arg) {
        return arg === 0 ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : 1 / Math.tanh(arg);
      });
    }
  }, {
    key: "acoth",
    value: function acoth(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ACOTH'), function (arg) {
        return arg === 0 ? new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NonZero) : Math.atanh(1 / arg);
      });
    }
  }, {
    key: "sech",
    value: function sech(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SECH'), function (arg) {
        return 1 / Math.cosh(arg);
      });
    }
  }, {
    key: "csch",
    value: function csch(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CSCH'), function (arg) {
        return arg === 0 ? new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO) : 1 / Math.sinh(arg);
      });
    }
  }]);

  return TrigonometryPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.TrigonometryPlugin = TrigonometryPlugin;
TrigonometryPlugin.implementedFunctions = {
  'ACOS': {
    method: 'acos',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ASIN': {
    method: 'asin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'COS': {
    method: 'cos',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SIN': {
    method: 'sin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'TAN': {
    method: 'tan',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ATAN': {
    method: 'atan',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ATAN2': {
    method: 'atan2',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'COT': {
    method: 'cot',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SEC': {
    method: 'sec',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'CSC': {
    method: 'csc',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SINH': {
    method: 'sinh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'COSH': {
    method: 'cosh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'TANH': {
    method: 'tanh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'COTH': {
    method: 'coth',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SECH': {
    method: 'sech',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'CSCH': {
    method: 'csch',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ACOT': {
    method: 'acot',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ASINH': {
    method: 'asinh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ACOSH': {
    method: 'acosh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ATANH': {
    method: 'atanh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'ACOTH': {
    method: 'acoth',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  }
};

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var fails = __webpack_require__(20);
var expm1 = __webpack_require__(390);

var abs = Math.abs;
var exp = Math.exp;
var E = Math.E;

var FORCED = fails(function () {
  // eslint-disable-next-line es/no-math-sinh -- required for testing
  return Math.sinh(-2e-17) != -2e-17;
});

// `Math.sinh` method
// https://tc39.es/ecma262/#sec-math.sinh
// V8 near Chromium 38 has a problem with very small numbers
$({ target: 'Math', stat: true, forced: FORCED }, {
  sinh: function sinh(x) {
    return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
  }
});


/***/ }),
/* 390 */
/***/ (function(module, exports) {

// eslint-disable-next-line es/no-math-expm1 -- safe
var $expm1 = Math.expm1;
var exp = Math.exp;

// `Math.expm1` method implementation
// https://tc39.es/ecma262/#sec-math.expm1
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x) {
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
} : $expm1;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);

// eslint-disable-next-line es/no-math-asinh -- required for testing
var $asinh = Math.asinh;
var log = Math.log;
var sqrt = Math.sqrt;

function asinh(x) {
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
}

// `Math.asinh` method
// https://tc39.es/ecma262/#sec-math.asinh
// Tor Browser bug: Math.asinh(0) -> -0
$({ target: 'Math', stat: true, forced: !($asinh && 1 / $asinh(0) > 0) }, {
  asinh: asinh
});


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var expm1 = __webpack_require__(390);

// eslint-disable-next-line es/no-math-cosh -- required for testing
var $cosh = Math.cosh;
var abs = Math.abs;
var E = Math.E;

// `Math.cosh` method
// https://tc39.es/ecma262/#sec-math.cosh
$({ target: 'Math', stat: true, forced: !$cosh || $cosh(710) === Infinity }, {
  cosh: function cosh(x) {
    var t = expm1(abs(x) - 1) + 1;
    return (t + 1 / (t * E * E)) * (E / 2);
  }
});


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var log1p = __webpack_require__(394);

// eslint-disable-next-line es/no-math-acosh -- required for testing
var $acosh = Math.acosh;
var log = Math.log;
var sqrt = Math.sqrt;
var LN2 = Math.LN2;

var FORCED = !$acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  || Math.floor($acosh(Number.MAX_VALUE)) != 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN
  || $acosh(Infinity) != Infinity;

// `Math.acosh` method
// https://tc39.es/ecma262/#sec-math.acosh
$({ target: 'Math', stat: true, forced: FORCED }, {
  acosh: function acosh(x) {
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? log(x) + LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});


/***/ }),
/* 394 */
/***/ (function(module, exports) {

var log = Math.log;

// `Math.log1p` method implementation
// https://tc39.es/ecma262/#sec-math.log1p
// eslint-disable-next-line es/no-math-log1p -- safe
module.exports = Math.log1p || function log1p(x) {
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
};


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);
var expm1 = __webpack_require__(390);

var exp = Math.exp;

// `Math.tanh` method
// https://tc39.es/ecma262/#sec-math.tanh
$({ target: 'Math', stat: true }, {
  tanh: function tanh(x) {
    var a = expm1(x = +x);
    var b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);

// eslint-disable-next-line es/no-math-atanh -- required for testing
var $atanh = Math.atanh;
var log = Math.log;

// `Math.atanh` method
// https://tc39.es/ecma262/#sec-math.atanh
// Tor Browser bug: Math.atanh(-0) -> 0
$({ target: 'Math', stat: true, forced: !($atanh && 1 / $atanh(-0) < 0) }, {
  atanh: function atanh(x) {
    return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
  }
});


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.LookupPlugin = void 0;

__webpack_require__(329);

__webpack_require__(1);

__webpack_require__(150);

__webpack_require__(137);

var _AbsoluteCellRange = __webpack_require__(158);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _RowSearchStrategy = __webpack_require__(398);

var _statistics = __webpack_require__(256);

var _ArithmeticHelper = __webpack_require__(249);

var _SimpleRangeValue = __webpack_require__(245);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LookupPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(LookupPlugin, _FunctionPlugin);

  var _super = _createSuper(LookupPlugin);

  function LookupPlugin() {
    var _this;

    _classCallCheck(this, LookupPlugin);

    _this = _super.apply(this, arguments);
    _this.rowSearch = new _RowSearchStrategy.RowSearchStrategy(_this.config, _this.dependencyGraph);
    return _this;
  }
  /**
   * Corresponds to VLOOKUP(key, range, index, [sorted])
   *
   * @param ast
   * @param state
   */


  _createClass(LookupPlugin, [{
    key: "vlookup",
    value: function vlookup(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('VLOOKUP'), function (key, rangeValue, index, sorted) {
        var range = rangeValue.range;

        if (range === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
        }

        if (index < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        if (index > range.width()) {
          return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.IndexLarge);
        }

        return _this2.doVlookup((0, _ArithmeticHelper.zeroIfEmpty)(key), rangeValue, index - 1, sorted);
      });
    }
    /**
     * Corresponds to HLOOKUP(key, range, index, [sorted])
     *
     * @param ast
     * @param formulaAddress
     */

  }, {
    key: "hlookup",
    value: function hlookup(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('HLOOKUP'), function (key, rangeValue, index, sorted) {
        var range = rangeValue.range;

        if (range === undefined) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
        }

        if (index < 1) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.LessThanOne);
        }

        if (index > range.height()) {
          return new _Cell.CellError(_Cell.ErrorType.REF, _errorMessage.ErrorMessage.IndexLarge);
        }

        return _this3.doHlookup((0, _ArithmeticHelper.zeroIfEmpty)(key), rangeValue, index - 1, sorted);
      });
    }
  }, {
    key: "match",
    value: function match(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('MATCH'), function (key, rangeValue, sorted) {
        return _this4.doMatch((0, _ArithmeticHelper.zeroIfEmpty)(key), rangeValue, sorted);
      });
    }
  }, {
    key: "searchInRange",
    value: function searchInRange(key, range, sorted, searchStrategy) {
      if (!sorted && typeof key === 'string' && this.arithmeticHelper.requiresRegex(key)) {
        return searchStrategy.advancedFind(this.arithmeticHelper.eqMatcherFunction(key), range);
      } else {
        return searchStrategy.find(key, range, sorted);
      }
    }
  }, {
    key: "doVlookup",
    value: function doVlookup(key, rangeValue, index, sorted) {
      this.dependencyGraph.stats.start(_statistics.StatType.VLOOKUP);
      var range = rangeValue.range;
      var searchedRange;

      if (range === undefined) {
        searchedRange = _SimpleRangeValue.SimpleRangeValue.onlyValues(rangeValue.data.map(function (arg) {
          return [arg[0]];
        }));
      } else {
        searchedRange = _SimpleRangeValue.SimpleRangeValue.onlyRange(_AbsoluteCellRange.AbsoluteCellRange.spanFrom(range.start, 1, range.height()), this.dependencyGraph);
      }

      var rowIndex = this.searchInRange(key, searchedRange, sorted, this.columnSearch);
      this.dependencyGraph.stats.end(_statistics.StatType.VLOOKUP);

      if (rowIndex === -1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.ValueNotFound);
      }

      var value;

      if (range === undefined) {
        value = rangeValue.data[rowIndex][index];
      } else {
        var address = (0, _Cell.simpleCellAddress)(range.sheet, range.start.col + index, range.start.row + rowIndex);
        value = this.dependencyGraph.getCellValue(address);
      }

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
      }

      return value;
    }
  }, {
    key: "doHlookup",
    value: function doHlookup(key, rangeValue, index, sorted) {
      var range = rangeValue.range;
      var searchedRange;

      if (range === undefined) {
        searchedRange = _SimpleRangeValue.SimpleRangeValue.onlyValues([rangeValue.data[0]]);
      } else {
        searchedRange = _SimpleRangeValue.SimpleRangeValue.onlyRange(_AbsoluteCellRange.AbsoluteCellRange.spanFrom(range.start, range.width(), 1), this.dependencyGraph);
      }

      var colIndex = this.searchInRange(key, searchedRange, sorted, this.rowSearch);

      if (colIndex === -1) {
        return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.ValueNotFound);
      }

      var value;

      if (range === undefined) {
        value = rangeValue.data[index][colIndex];
      } else {
        var address = (0, _Cell.simpleCellAddress)(range.sheet, range.start.col + colIndex, range.start.row + index);
        value = this.dependencyGraph.getCellValue(address);
      }

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.WrongType);
      }

      return value;
    }
  }, {
    key: "doMatch",
    value: function doMatch(key, rangeValue, sorted) {
      if (rangeValue.width() > 1 && rangeValue.height() > 1) {
        return new _Cell.CellError(_Cell.ErrorType.NA);
      }

      if (rangeValue.width() === 1) {
        var index = this.columnSearch.find(key, rangeValue, sorted !== 0);

        if (index === -1) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.ValueNotFound);
        }

        return index + 1;
      } else {
        var _index = this.rowSearch.find(key, rangeValue, sorted !== 0);

        if (_index === -1) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.ValueNotFound);
        }

        return _index + 1;
      }
    }
  }]);

  return LookupPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.LookupPlugin = LookupPlugin;
LookupPlugin.implementedFunctions = {
  'VLOOKUP': {
    method: 'vlookup',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN,
      defaultValue: true
    }]
  },
  'HLOOKUP': {
    method: 'hlookup',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN,
      defaultValue: true
    }]
  },
  'MATCH': {
    method: 'match',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  }
};

/***/ }),
/* 398 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RowSearchStrategy = void 0;

__webpack_require__(150);

__webpack_require__(337);

__webpack_require__(137);

var _ArithmeticHelper = __webpack_require__(249);

var _binarySearch = __webpack_require__(338);

var _InterpreterValue = __webpack_require__(255);

var _AdvancedFind2 = __webpack_require__(339);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RowSearchStrategy = /*#__PURE__*/function (_AdvancedFind) {
  _inherits(RowSearchStrategy, _AdvancedFind);

  var _super = _createSuper(RowSearchStrategy);

  function RowSearchStrategy(config, dependencyGraph) {
    var _this;

    _classCallCheck(this, RowSearchStrategy);

    _this = _super.call(this, dependencyGraph);
    _this.config = config;
    _this.dependencyGraph = dependencyGraph;
    return _this;
  }

  _createClass(RowSearchStrategy, [{
    key: "find",
    value: function find(key, rangeValue, sorted) {
      if (typeof key === 'string') {
        key = (0, _ArithmeticHelper.forceNormalizeString)(key);
      }

      var range = rangeValue.range;

      if (range === undefined) {
        return rangeValue.valuesFromTopLeftCorner().map(_InterpreterValue.getRawValue).indexOf(key);
      } else if (!sorted) {
        return this.dependencyGraph.computeListOfValuesInRange(range).findIndex(function (arg) {
          arg = (0, _InterpreterValue.getRawValue)(arg);
          arg = typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
          return arg === key;
        });
      } else {
        return (0, _binarySearch.rangeLowerBound)(range, key, this.dependencyGraph, 'col');
      }
    }
  }]);

  return RowSearchStrategy;
}(_AdvancedFind2.AdvancedFind);

exports.RowSearchStrategy = RowSearchStrategy;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.RomanPlugin = void 0;

__webpack_require__(356);

__webpack_require__(250);

__webpack_require__(139);

__webpack_require__(77);

__webpack_require__(387);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RomanPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(RomanPlugin, _FunctionPlugin);

  var _super = _createSuper(RomanPlugin);

  function RomanPlugin() {
    _classCallCheck(this, RomanPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(RomanPlugin, [{
    key: "roman",
    value: function roman(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('ROMAN'), function (val, mode) {
        val = Math.trunc(val);

        if (mode === false) {
          mode = 4;
        } else if (mode === true) {
          mode = 0;
        }

        mode = (0, _InterpreterValue.getRawValue)(_this.coerceScalarToNumberOrError(mode));

        if (mode instanceof _Cell.CellError) {
          return mode;
        }

        mode = Math.trunc(mode);

        if (mode < 0) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ValueSmall);
        }

        if (mode > 4) {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ValueLarge);
        }

        return romanMode(val, mode);
      });
    }
  }, {
    key: "arabic",
    value: function arabic(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ARABIC'), function (inputString) {
        inputString = inputString.trim().toUpperCase();
        var minusSign = false;

        if (inputString.startsWith('-')) {
          inputString = inputString.slice(1);
          minusSign = true;

          if (inputString === '') {
            return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.InvalidRoman);
          }
        }

        var work = {
          input: inputString,
          acc: 0
        };
        eatToken(work, {
          token: 'MMM',
          val: 3000
        }, {
          token: 'MM',
          val: 2000
        }, {
          token: 'M',
          val: 1000
        });
        eatToken(work, {
          token: 'IM',
          val: 999
        }, {
          token: 'VM',
          val: 995
        }, {
          token: 'XM',
          val: 990
        }, {
          token: 'LM',
          val: 950
        }, {
          token: 'CM',
          val: 900
        });
        eatToken(work, {
          token: 'D',
          val: 500
        }, {
          token: 'ID',
          val: 499
        }, {
          token: 'VD',
          val: 495
        }, {
          token: 'XD',
          val: 490
        }, {
          token: 'LD',
          val: 450
        }, {
          token: 'CD',
          val: 400
        });
        eatToken(work, {
          token: 'CCC',
          val: 300
        }, {
          token: 'CC',
          val: 200
        }, {
          token: 'C',
          val: 100
        });
        eatToken(work, {
          token: 'IC',
          val: 99
        }, {
          token: 'VC',
          val: 95
        }, {
          token: 'XC',
          val: 90
        });
        eatToken(work, {
          token: 'L',
          val: 50
        }, {
          token: 'IL',
          val: 49
        }, {
          token: 'VL',
          val: 45
        }, {
          token: 'XL',
          val: 40
        });
        eatToken(work, {
          token: 'XXX',
          val: 30
        }, {
          token: 'XX',
          val: 20
        }, {
          token: 'X',
          val: 10
        });
        eatToken(work, {
          token: 'IX',
          val: 9
        });
        eatToken(work, {
          token: 'V',
          val: 5
        }, {
          token: 'IV',
          val: 4
        });
        eatToken(work, {
          token: 'III',
          val: 3
        }, {
          token: 'II',
          val: 2
        }, {
          token: 'I',
          val: 1
        });

        if (work.input !== '') {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.InvalidRoman);
        } else {
          return minusSign ? -work.acc : work.acc;
        }
      });
    }
  }]);

  return RomanPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.RomanPlugin = RomanPlugin;
RomanPlugin.implementedFunctions = {
  'ROMAN': {
    method: 'roman',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1,
      lessThan: 4000
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      optionalArg: true,
      defaultValue: 0
    }]
  },
  'ARABIC': {
    method: 'arabic',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING
    }]
  }
};

function eatToken(inputAcc) {
  for (var _len = arguments.length, tokens = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    tokens[_key - 1] = arguments[_key];
  }

  for (var _i = 0, _tokens = tokens; _i < _tokens.length; _i++) {
    var token = _tokens[_i];

    if (inputAcc.input.startsWith(token.token)) {
      inputAcc.input = inputAcc.input.slice(token.token.length);
      inputAcc.acc += token.val;
      break;
    }
  }
}

function romanMode(input, mode) {
  var work = {
    val: input % 1000,
    acc: 'M'.repeat(Math.floor(input / 1000))
  };

  if (mode === 4) {
    absorb(work, 'IM', 999, 1000);
    absorb(work, 'ID', 499, 500);
  }

  if (mode >= 3) {
    absorb(work, 'VM', 995, 1000);
    absorb(work, 'VD', 495, 500);
  }

  if (mode >= 2) {
    absorb(work, 'XM', 990, 1000);
    absorb(work, 'XD', 490, 500);
  }

  if (mode >= 1) {
    absorb(work, 'LM', 950, 1000);
    absorb(work, 'LD', 450, 500);
  }

  absorb(work, 'CM', 900, 1000);
  absorb(work, 'CD', 400, 500);
  absorb(work, 'D', 500, 900);
  work.acc += 'C'.repeat(Math.floor(work.val / 100));
  work.val %= 100;

  if (mode >= 2) {
    absorb(work, 'IC', 99, 100);
    absorb(work, 'IL', 49, 50);
  }

  if (mode >= 1) {
    absorb(work, 'VC', 95, 100);
    absorb(work, 'VL', 45, 50);
  }

  absorb(work, 'XC', 90, 100);
  absorb(work, 'XL', 40, 50);
  absorb(work, 'L', 50, 90);
  work.acc += 'X'.repeat(Math.floor(work.val / 10));
  work.val %= 10;
  absorb(work, 'IX', 9, 10);
  absorb(work, 'IV', 4, 5);
  absorb(work, 'V', 5, 9);
  work.acc += 'I'.repeat(work.val);
  return work.acc;
}

function absorb(valAcc, token, lower, upper) {
  if (valAcc.val >= lower && valAcc.val < upper) {
    valAcc.val -= lower;
    valAcc.acc += token;
  }
}

/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.SimpleArithmerticPlugin = void 0;

__webpack_require__(146);

__webpack_require__(137);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SimpleArithmerticPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(SimpleArithmerticPlugin, _FunctionPlugin);

  var _super = _createSuper(SimpleArithmerticPlugin);

  function SimpleArithmerticPlugin() {
    _classCallCheck(this, SimpleArithmerticPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(SimpleArithmerticPlugin, [{
    key: "add",
    value: function add(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.ADD'), this.arithmeticHelper.addWithEpsilon);
    }
  }, {
    key: "concat",
    value: function concat(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.CONCAT'), this.arithmeticHelper.concat);
    }
  }, {
    key: "divide",
    value: function divide(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.DIVIDE'), this.arithmeticHelper.divide);
    }
  }, {
    key: "eq",
    value: function eq(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.EQ'), this.arithmeticHelper.eq);
    }
  }, {
    key: "gt",
    value: function gt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.GT'), this.arithmeticHelper.gt);
    }
  }, {
    key: "gte",
    value: function gte(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.GTE'), this.arithmeticHelper.geq);
    }
  }, {
    key: "lt",
    value: function lt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.LT'), this.arithmeticHelper.lt);
    }
  }, {
    key: "lte",
    value: function lte(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.LTE'), this.arithmeticHelper.leq);
    }
  }, {
    key: "minus",
    value: function minus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.MINUS'), this.arithmeticHelper.subtract);
    }
  }, {
    key: "multiply",
    value: function multiply(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.MULTIPLY'), this.arithmeticHelper.multiply);
    }
  }, {
    key: "ne",
    value: function ne(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.NE'), this.arithmeticHelper.neq);
    }
  }, {
    key: "pow",
    value: function pow(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.POW'), this.arithmeticHelper.pow);
    }
  }, {
    key: "uminus",
    value: function uminus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UMINUS'), this.arithmeticHelper.unaryMinus);
    }
  }, {
    key: "upercent",
    value: function upercent(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UNARY_PERCENT'), this.arithmeticHelper.unaryPercent);
    }
  }, {
    key: "uplus",
    value: function uplus(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HF.UPLUS'), this.arithmeticHelper.unaryPlus);
    }
  }]);

  return SimpleArithmerticPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.SimpleArithmerticPlugin = SimpleArithmerticPlugin;
SimpleArithmerticPlugin.implementedFunctions = {
  'HF.ADD': {
    method: 'add',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.CONCAT': {
    method: 'concat',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING,
      passSubtype: true
    }]
  },
  'HF.DIVIDE': {
    method: 'divide',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.EQ': {
    method: 'eq',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.GT': {
    method: 'gt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.GTE': {
    method: 'gte',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.LT': {
    method: 'lt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.LTE': {
    method: 'lte',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.MINUS': {
    method: 'minus',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.MULTIPLY': {
    method: 'multiply',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.NE': {
    method: 'ne',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NOERROR,
      passSubtype: true
    }]
  },
  'HF.POW': {
    method: 'pow',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UMINUS': {
    method: 'uminus',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UNARY_PERCENT': {
    method: 'upercent',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  },
  'HF.UPLUS': {
    method: 'uplus',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      passSubtype: true
    }]
  }
};

/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

exports.__esModule = true;
exports.StatisticalPlugin = void 0;

__webpack_require__(356);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _bessel = __webpack_require__(402);

var _jstat = __webpack_require__(403);

var _FunctionPlugin2 = __webpack_require__(248);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StatisticalPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(StatisticalPlugin, _FunctionPlugin);

  var _super = _createSuper(StatisticalPlugin);

  function StatisticalPlugin() {
    _classCallCheck(this, StatisticalPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(StatisticalPlugin, [{
    key: "erf",
    value: function erf(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ERF'), function (lowerBound, upperBound) {
        if (upperBound === undefined) {
          return (0, _jstat.erf)(lowerBound);
        } else {
          return (0, _jstat.erf)(upperBound) - (0, _jstat.erf)(lowerBound);
        }
      });
    }
  }, {
    key: "erfc",
    value: function erfc(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ERFC'), _jstat.erfc);
    }
  }, {
    key: "expondist",
    value: function expondist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('EXPON.DIST'), function (x, lambda, cumulative) {
        if (cumulative) {
          return _jstat.exponential.cdf(x, lambda);
        } else {
          return _jstat.exponential.pdf(x, lambda);
        }
      });
    }
  }, {
    key: "fisher",
    value: function fisher(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FISHER'), function (x) {
        return Math.log((1 + x) / (1 - x)) / 2;
      });
    }
  }, {
    key: "fisherinv",
    value: function fisherinv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FISHERINV'), function (y) {
        return 1 - 2 / (Math.exp(2 * y) + 1);
      });
    }
  }, {
    key: "gamma",
    value: function gamma(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('GAMMA'), _jstat.gammafn);
    }
  }, {
    key: "gammadist",
    value: function gammadist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('GAMMA.DIST'), function (value, alphaVal, betaVal, cumulative) {
        if (cumulative) {
          return _jstat.gamma.cdf(value, alphaVal, betaVal);
        } else {
          return _jstat.gamma.pdf(value, alphaVal, betaVal);
        }
      });
    }
  }, {
    key: "gammaln",
    value: function gammaln(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('GAMMALN'), _jstat.gammaln);
    }
  }, {
    key: "gammainv",
    value: function gammainv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('GAMMA.INV'), _jstat.gamma.inv);
    }
  }, {
    key: "gauss",
    value: function gauss(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('GAUSS'), function (z) {
        return _jstat.normal.cdf(z, 0, 1) - 0.5;
      });
    }
  }, {
    key: "betadist",
    value: function betadist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BETA.DIST'), function (x, alphaVal, betaVal, cumulative, A, B) {
        if (x <= A) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
        } else if (x >= B) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        x = (x - A) / (B - A);

        if (cumulative) {
          return _jstat.beta.cdf(x, alphaVal, betaVal);
        } else {
          return _jstat.beta.pdf(x, alphaVal, betaVal);
        }
      });
    }
  }, {
    key: "betainv",
    value: function betainv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BETA.INV'), function (x, alphaVal, betaVal, A, B) {
        if (A >= B) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.WrongOrder);
        } else {
          return _jstat.beta.inv(x, alphaVal, betaVal) * (B - A) + A;
        }
      });
    }
  }, {
    key: "binomialdist",
    value: function binomialdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BINOM.DIST'), function (succ, trials, prob, cumulative) {
        if (succ > trials) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.WrongOrder);
        }

        succ = Math.trunc(succ);
        trials = Math.trunc(trials);

        if (cumulative) {
          return _jstat.binomial.cdf(succ, trials, prob);
        } else {
          return _jstat.binomial.pdf(succ, trials, prob);
        }
      });
    }
  }, {
    key: "binomialinv",
    value: function binomialinv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BINOM.INV'), function (trials, prob, alpha) {
        trials = Math.trunc(trials);
        var lower = -1;
        var upper = trials;

        while (upper > lower + 1) {
          var mid = Math.trunc((lower + upper) / 2);

          if (_jstat.binomial.cdf(mid, trials, prob) >= alpha) {
            upper = mid;
          } else {
            lower = mid;
          }
        }

        return upper;
      });
    }
  }, {
    key: "besselifn",
    value: function besselifn(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BESSELI'), function (x, n) {
        return (0, _bessel.besseli)(x, Math.trunc(n));
      });
    }
  }, {
    key: "besseljfn",
    value: function besseljfn(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BESSELJ'), function (x, n) {
        return (0, _bessel.besselj)(x, Math.trunc(n));
      });
    }
  }, {
    key: "besselkfn",
    value: function besselkfn(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BESSELK'), function (x, n) {
        return (0, _bessel.besselk)(x, Math.trunc(n));
      });
    }
  }, {
    key: "besselyfn",
    value: function besselyfn(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('BESSELY'), function (x, n) {
        return (0, _bessel.bessely)(x, Math.trunc(n));
      });
    }
  }, {
    key: "chisqdist",
    value: function chisqdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST'), function (x, deg, cumulative) {
        deg = Math.trunc(deg);

        if (cumulative) {
          return _jstat.chisquare.cdf(x, deg);
        } else {
          return _jstat.chisquare.pdf(x, deg);
        }
      });
    }
  }, {
    key: "chisqdistrt",
    value: function chisqdistrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHISQ.DIST.RT'), function (x, deg) {
        return 1 - _jstat.chisquare.cdf(x, Math.trunc(deg));
      });
    }
  }, {
    key: "chisqinv",
    value: function chisqinv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHISQ.INV'), function (p, deg) {
        return _jstat.chisquare.inv(p, Math.trunc(deg));
      });
    }
  }, {
    key: "chisqinvrt",
    value: function chisqinvrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHISQ.INV.RT'), function (p, deg) {
        return _jstat.chisquare.inv(1.0 - p, Math.trunc(deg));
      });
    }
  }, {
    key: "fdist",
    value: function fdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('F.DIST'), function (x, deg1, deg2, cumulative) {
        deg1 = Math.trunc(deg1);
        deg2 = Math.trunc(deg2);

        if (cumulative) {
          return _jstat.centralF.cdf(x, deg1, deg2);
        } else {
          return _jstat.centralF.pdf(x, deg1, deg2);
        }
      });
    }
  }, {
    key: "fdistrt",
    value: function fdistrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('F.DIST.RT'), function (x, deg1, deg2) {
        return 1 - _jstat.centralF.cdf(x, Math.trunc(deg1), Math.trunc(deg2));
      });
    }
  }, {
    key: "finv",
    value: function finv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('F.INV'), function (p, deg1, deg2) {
        return _jstat.centralF.inv(p, Math.trunc(deg1), Math.trunc(deg2));
      });
    }
  }, {
    key: "finvrt",
    value: function finvrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('F.INV.RT'), function (p, deg1, deg2) {
        return _jstat.centralF.inv(1.0 - p, Math.trunc(deg1), Math.trunc(deg2));
      });
    }
  }, {
    key: "weibulldist",
    value: function weibulldist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('WEIBULL.DIST'), function (x, shape, scale, cumulative) {
        if (cumulative) {
          return _jstat.weibull.cdf(x, scale, shape);
        } else {
          return _jstat.weibull.pdf(x, scale, shape);
        }
      });
    }
  }, {
    key: "poissondist",
    value: function poissondist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('POISSON.DIST'), function (x, mean, cumulative) {
        x = Math.trunc(x);

        if (cumulative) {
          return _jstat.poisson.cdf(x, mean);
        } else {
          return _jstat.poisson.pdf(x, mean);
        }
      });
    }
  }, {
    key: "hypgeomdist",
    value: function hypgeomdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('HYPGEOM.DIST'), function (s, numberS, populationS, numberPop, cumulative) {
        if (s > numberS || s > populationS || numberS > numberPop || populationS > numberPop) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        if (s + numberPop < populationS + numberS) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        s = Math.trunc(s);
        numberS = Math.trunc(numberS);
        populationS = Math.trunc(populationS);
        numberPop = Math.trunc(numberPop);

        if (cumulative) {
          return _jstat.hypgeom.cdf(s, numberPop, populationS, numberS);
        } else {
          return _jstat.hypgeom.pdf(s, numberPop, populationS, numberS);
        }
      });
    }
  }, {
    key: "tdist",
    value: function tdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T.DIST'), function (x, deg, cumulative) {
        deg = Math.trunc(deg);

        if (cumulative) {
          return _jstat.studentt.cdf(x, deg);
        } else {
          return _jstat.studentt.pdf(x, deg);
        }
      });
    }
  }, {
    key: "tdist2t",
    value: function tdist2t(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T.DIST.2T'), function (x, deg) {
        return (1 - _jstat.studentt.cdf(x, Math.trunc(deg))) * 2;
      });
    }
  }, {
    key: "tdistrt",
    value: function tdistrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T.DIST.RT'), function (x, deg) {
        return 1 - _jstat.studentt.cdf(x, Math.trunc(deg));
      });
    }
  }, {
    key: "tdistold",
    value: function tdistold(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('TDIST'), function (x, deg, mode) {
        return mode * (1 - _jstat.studentt.cdf(x, Math.trunc(deg)));
      });
    }
  }, {
    key: "tinv",
    value: function tinv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T.INV'), function (p, deg) {
        return _jstat.studentt.inv(p, Math.trunc(deg));
      });
    }
  }, {
    key: "tinv2t",
    value: function tinv2t(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('T.INV.2T'), function (p, deg) {
        return _jstat.studentt.inv(1 - p / 2, Math.trunc(deg));
      });
    }
  }, {
    key: "lognormdist",
    value: function lognormdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LOGNORM.DIST'), function (x, mean, stddev, cumulative) {
        if (cumulative) {
          return _jstat.lognormal.cdf(x, mean, stddev);
        } else {
          return _jstat.lognormal.pdf(x, mean, stddev);
        }
      });
    }
  }, {
    key: "lognorminv",
    value: function lognorminv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('LOGNORM.INV'), function (p, mean, stddev) {
        return _jstat.lognormal.inv(p, mean, stddev);
      });
    }
  }, {
    key: "normdist",
    value: function normdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NORM.DIST'), function (x, mean, stddev, cumulative) {
        if (cumulative) {
          return _jstat.normal.cdf(x, mean, stddev);
        } else {
          return _jstat.normal.pdf(x, mean, stddev);
        }
      });
    }
  }, {
    key: "norminv",
    value: function norminv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NORM.INV'), function (p, mean, stddev) {
        return _jstat.normal.inv(p, mean, stddev);
      });
    }
  }, {
    key: "normsdist",
    value: function normsdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NORM.S.DIST'), function (x, cumulative) {
        if (cumulative) {
          return _jstat.normal.cdf(x, 0, 1);
        } else {
          return _jstat.normal.pdf(x, 0, 1);
        }
      });
    }
  }, {
    key: "normsinv",
    value: function normsinv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NORM.S.INV'), function (p) {
        return _jstat.normal.inv(p, 0, 1);
      });
    }
  }, {
    key: "phi",
    value: function phi(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('PHI'), function (x) {
        return _jstat.normal.pdf(x, 0, 1);
      });
    }
  }, {
    key: "negbinomdist",
    value: function negbinomdist(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('NEGBINOM.DIST'), function (nf, ns, p, cumulative) {
        nf = Math.trunc(nf);
        ns = Math.trunc(ns);

        if (cumulative) {
          return _jstat.negbin.cdf(nf, ns, p);
        } else {
          return _jstat.negbin.pdf(nf, ns, p);
        }
      });
    }
  }, {
    key: "confidencenorm",
    value: function confidencenorm(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.NORM'), // eslint-disable-next-line
      // @ts-ignore
      function (alpha, stddev, size) {
        return (0, _jstat.normalci)(1, alpha, stddev, Math.trunc(size))[1] - 1;
      });
    }
  }, {
    key: "confidencet",
    value: function confidencet(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CONFIDENCE.T'), function (alpha, stddev, size) {
        size = Math.trunc(size);

        if (size === 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        } // eslint-disable-next-line
        // @ts-ignore


        return (0, _jstat.tci)(1, alpha, stddev, size)[1] - 1;
      });
    }
  }, {
    key: "standardize",
    value: function standardize(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('STANDARDIZE'), function (x, mean, stddev) {
        return (x - mean) / stddev;
      });
    }
  }]);

  return StatisticalPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.StatisticalPlugin = StatisticalPlugin;
StatisticalPlugin.implementedFunctions = {
  'ERF': {
    method: 'erf',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true
    }]
  },
  'ERFC': {
    method: 'erfc',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'EXPON.DIST': {
    method: 'expondist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'FISHER': {
    method: 'fisher',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: -1,
      lessThan: 1
    }]
  },
  'FISHERINV': {
    method: 'fisherinv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'GAMMA': {
    method: 'gamma',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'GAMMA.DIST': {
    method: 'gammadist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'GAMMALN': {
    method: 'gammaln',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  },
  'GAMMA.INV': {
    method: 'gammainv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  },
  'GAUSS': {
    method: 'gauss',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'BETA.DIST': {
    method: 'betadist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'BETA.INV': {
    method: 'betainv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      defaultValue: 1
    }]
  },
  'BINOM.DIST': {
    method: 'binomialdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'BINOM.INV': {
    method: 'binomialinv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }]
  },
  'BESSELI': {
    method: 'besselifn',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'BESSELJ': {
    method: 'besseljfn',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'BESSELK': {
    method: 'besselkfn',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'BESSELY': {
    method: 'besselyfn',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'CHISQ.DIST': {
    method: 'chisqdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1,
      maxValue: 1e10
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'CHISQ.DIST.RT': {
    method: 'chisqdistrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1,
      maxValue: 1e10
    }]
  },
  'CHISQ.INV': {
    method: 'chisqinv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1,
      maxValue: 1e10
    }]
  },
  'CHISQ.INV.RT': {
    method: 'chisqinvrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'F.DIST': {
    method: 'fdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'F.DIST.RT': {
    method: 'fdistrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'F.INV': {
    method: 'finv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'F.INV.RT': {
    method: 'finvrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'WEIBULL.DIST': {
    method: 'weibulldist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'POISSON.DIST': {
    method: 'poissondist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'HYPGEOM.DIST': {
    method: 'hypgeomdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'T.DIST': {
    method: 'tdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'T.DIST.2T': {
    method: 'tdist2t',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'T.DIST.RT': {
    method: 'tdistrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'TDIST': {
    method: 'tdistold',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1,
      maxValue: 2
    }]
  },
  'T.INV': {
    method: 'tinv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'T.INV.2T': {
    method: 'tinv2t',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'LOGNORM.DIST': {
    method: 'lognormdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'LOGNORM.INV': {
    method: 'lognorminv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  },
  'NORM.DIST': {
    method: 'normdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'NORM.INV': {
    method: 'norminv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  },
  'NORM.S.DIST': {
    method: 'normsdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'NORM.S.INV': {
    method: 'normsinv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }]
  },
  'PHI': {
    method: 'phi',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'NEGBINOM.DIST': {
    method: 'negbinomdist',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.BOOLEAN
    }]
  },
  'CONFIDENCE.NORM': {
    method: 'confidencenorm',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'CONFIDENCE.T': {
    method: 'confidencet',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0,
      lessThan: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 1
    }]
  },
  'STANDARDIZE': {
    method: 'standardize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      greaterThan: 0
    }]
  }
};
StatisticalPlugin.aliases = {
  NEGBINOMDIST: 'NEGBINOM.DIST',
  EXPONDIST: 'EXPON.DIST',
  BETADIST: 'BETA.DIST',
  NORMDIST: 'NORM.DIST',
  NORMINV: 'NORM.INV',
  NORMSDIST: 'NORM.S.DIST',
  NORMSINV: 'NORM.S.INV',
  LOGNORMDIST: 'LOGNORM.DIST',
  LOGINV: 'LOGNORM.INV',
  TINV: 'T.INV.2T',
  HYPGEOMDIST: 'HYPGEOM.DIST',
  POISSON: 'POISSON.DIST',
  WEIBULL: 'WEIBULL.DIST',
  FINV: 'F.INV.RT',
  FDIST: 'F.DIST.RT',
  CHIDIST: 'CHISQ.DIST.RT',
  CHIINV: 'CHISQ.INV.RT',
  GAMMADIST: 'GAMMA.DIST',
  'GAMMALN.PRECISE': 'GAMMALN',
  GAMMAINV: 'GAMMA.INV',
  BETAINV: 'BETA.INV',
  BINOMDIST: 'BINOM.DIST',
  CONFIDENCE: 'CONFIDENCE.NORM',
  CRITBINOM: 'BINOM.INV',
  WEIBULLDIST: 'WEIBULL.DIST',
  TINV2T: 'T.INV.2T',
  TDISTRT: 'T.DIST.RT',
  TDIST2T: 'T.DIST.2T',
  FINVRT: 'F.INV.RT',
  FDISTRT: 'F.DIST.RT',
  CHIDISTRT: 'CHISQ.DIST.RT',
  CHIINVRT: 'CHISQ.INV.RT',
  LOGNORMINV: 'LOGNORM.INV',
  POISSONDIST: 'POISSON.DIST'
};

/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.bessely = exports.besselk = exports.besselj = exports.besseli = void 0;

__webpack_require__(270);

/**
 * @license
 bessel.js (C) 2013-present SheetJS -- http://sheetjs.com

 Apache License
 Version 2.0, January 2004
 http://www.apache.org/licenses/

 TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

 1. Definitions.

 "License" shall mean the terms and conditions for use, reproduction,
 and distribution as defined by Sections 1 through 9 of this document.

 "Licensor" shall mean the copyright owner or entity authorized by
 the copyright owner that is granting the License.

 "Legal Entity" shall mean the union of the acting entity and all
 other entities that control, are controlled by, or are under common
 control with that entity. For the purposes of this definition,
 "control" means (i) the power, direct or indirect, to cause the
 direction or management of such entity, whether by contract or
 otherwise, or (ii) ownership of fifty percent (50%) or more of the
 outstanding shares, or (iii) beneficial ownership of such entity.

 "You" (or "Your") shall mean an individual or Legal Entity
 exercising permissions granted by this License.

 "Source" form shall mean the preferred form for making modifications,
 including but not limited to software source code, documentation
 source, and configuration files.

 "Object" form shall mean any form resulting from mechanical
 transformation or translation of a Source form, including but
 not limited to compiled object code, generated documentation,
 and conversions to other media types.

 "Work" shall mean the work of authorship, whether in Source or
 Object form, made available under the License, as indicated by a
 copyright notice that is included in or attached to the work
 (an example is provided in the Appendix below).

 "Derivative Works" shall mean any work, whether in Source or Object
 form, that is based on (or derived from) the Work and for which the
 editorial revisions, annotations, elaborations, or other modifications
 represent, as a whole, an original work of authorship. For the purposes
 of this License, Derivative Works shall not include works that remain
 separable from, or merely link (or bind by name) to the interfaces of,
 the Work and Derivative Works thereof.

 "Contribution" shall mean any work of authorship, including
 the original version of the Work and any modifications or additions
 to that Work or Derivative Works thereof, that is intentionally
 submitted to Licensor for inclusion in the Work by the copyright owner
 or by an individual or Legal Entity authorized to submit on behalf of
 the copyright owner. For the purposes of this definition, "submitted"
 means any form of electronic, verbal, or written communication sent
 to the Licensor or its representatives, including but not limited to
 communication on electronic mailing lists, source code control systems,
 and issue tracking systems that are managed by, or on behalf of, the
 Licensor for the purpose of discussing and improving the Work, but
 excluding communication that is conspicuously marked or otherwise
 designated in writing by the copyright owner as "Not a Contribution."

 "Contributor" shall mean Licensor and any individual or Legal Entity
 on behalf of whom a Contribution has been received by Licensor and
 subsequently incorporated within the Work.

 2. Grant of Copyright License. Subject to the terms and conditions of
 this License, each Contributor hereby grants to You a perpetual,
 worldwide, non-exclusive, no-charge, royalty-free, irrevocable
 copyright license to reproduce, prepare Derivative Works of,
 publicly display, publicly perform, sublicense, and distribute the
 Work and such Derivative Works in Source or Object form.

 3. Grant of Patent License. Subject to the terms and conditions of
 this License, each Contributor hereby grants to You a perpetual,
 worldwide, non-exclusive, no-charge, royalty-free, irrevocable
 (except as stated in this section) patent license to make, have made,
 use, offer to sell, sell, import, and otherwise transfer the Work,
 where such license applies only to those patent claims licensable
 by such Contributor that are necessarily infringed by their
 Contribution(s) alone or by combination of their Contribution(s)
 with the Work to which such Contribution(s) was submitted. If You
 institute patent litigation against any entity (including a
 cross-claim or counterclaim in a lawsuit) alleging that the Work
 or a Contribution incorporated within the Work constitutes direct
 or contributory patent infringement, then any patent licenses
 granted to You under this License for that Work shall terminate
 as of the date such litigation is filed.

 4. Redistribution. You may reproduce and distribute copies of the
 Work or Derivative Works thereof in any medium, with or without
 modifications, and in Source or Object form, provided that You
 meet the following conditions:

 (a) You must give any other recipients of the Work or
 Derivative Works a copy of this License; and

 (b) You must cause any modified files to carry prominent notices
 stating that You changed the files; and

 (c) You must retain, in the Source form of any Derivative Works
 that You distribute, all copyright, patent, trademark, and
 attribution notices from the Source form of the Work,
 excluding those notices that do not pertain to any part of
 the Derivative Works; and

 (d) If the Work includes a "NOTICE" text file as part of its
 distribution, then any Derivative Works that You distribute must
 include a readable copy of the attribution notices contained
 within such NOTICE file, excluding those notices that do not
 pertain to any part of the Derivative Works, in at least one
 of the following places: within a NOTICE text file distributed
 as part of the Derivative Works; within the Source form or
 documentation, if provided along with the Derivative Works; or,
 within a display generated by the Derivative Works, if and
 wherever such third-party notices normally appear. The contents
 of the NOTICE file are for informational purposes only and
 do not modify the License. You may add Your own attribution
 notices within Derivative Works that You distribute, alongside
 or as an addendum to the NOTICE text from the Work, provided
 that such additional attribution notices cannot be construed
 as modifying the License.

 You may add Your own copyright statement to Your modifications and
 may provide additional or different license terms and conditions
 for use, reproduction, or distribution of Your modifications, or
 for any such Derivative Works as a whole, provided Your use,
 reproduction, and distribution of the Work otherwise complies with
 the conditions stated in this License.

 5. Submission of Contributions. Unless You explicitly state otherwise,
 any Contribution intentionally submitted for inclusion in the Work
 by You to the Licensor shall be under the terms and conditions of
 this License, without any additional terms or conditions.
 Notwithstanding the above, nothing herein shall supersede or modify
 the terms of any separate license agreement you may have executed
 with Licensor regarding such Contributions.

 6. Trademarks. This License does not grant permission to use the trade
 names, trademarks, service marks, or product names of the Licensor,
 except as required for reasonable and customary use in describing the
 origin of the Work and reproducing the content of the NOTICE file.

 7. Disclaimer of Warranty. Unless required by applicable law or
 agreed to in writing, Licensor provides the Work (and each
 Contributor provides its Contributions) on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied, including, without limitation, any warranties or conditions
 of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
 PARTICULAR PURPOSE. You are solely responsible for determining the
 appropriateness of using or redistributing the Work and assume any
 risks associated with Your exercise of permissions under this License.

 8. Limitation of Liability. In no event and under no legal theory,
 whether in tort (including negligence), contract, or otherwise,
 unless required by applicable law (such as deliberate and grossly
 negligent acts) or agreed to in writing, shall any Contributor be
 liable to You for damages, including any direct, indirect, special,
 incidental, or consequential damages of any character arising as a
 result of this License or out of the use or inability to use the
 Work (including but not limited to damages for loss of goodwill,
 work stoppage, computer failure or malfunction, or any and all
 other commercial damages or losses), even if such Contributor
 has been advised of the possibility of such damages.

 9. Accepting Warranty or Additional Liability. While redistributing
 the Work or Derivative Works thereof, You may choose to offer,
 and charge a fee for, acceptance of support, warranty, indemnity,
 or other liability obligations and/or rights consistent with this
 License. However, in accepting such obligations, You may act only
 on Your own behalf and on Your sole responsibility, not on behalf
 of any other Contributor, and only if You agree to indemnify,
 defend, and hold each Contributor harmless for any liability
 incurred by, or claims asserted against, such Contributor by reason
 of your accepting any such warranty or additional liability.

 END OF TERMS AND CONDITIONS

 APPENDIX: How to apply the Apache License to your work.

 To apply the Apache License to your work, attach the following
 boilerplate notice, with the fields enclosed by brackets "{}"
 replaced with your own identifying information. (Don't include
 the brackets!)  The text should be enclosed in the appropriate
 comment syntax for the file format. We also recommend that a
 file or class name and description of purpose be included on the
 same "printed page" as the copyright notice for easier
 identification within third-party archives.

 Copyright (C) 2013-present   SheetJS LLC

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 */
var M = Math; // @ts-ignore

function _horner(arr, v) {
  for (var i = 0, z = 0; i < arr.length; ++i) {
    z = v * z + arr[i];
  }

  return z;
} // @ts-ignore


function _bessel_iter(x, n, f0, f1, sign) {
  if (n === 0) {
    return f0;
  }

  if (n === 1) {
    return f1;
  }

  var tdx = 2 / x,
      f2 = f1;

  for (var o = 1; o < n; ++o) {
    f2 = f1 * o * tdx + sign * f0;
    f0 = f1;
    f1 = f2;
  }

  return f2;
} // @ts-ignore


function _bessel_wrap(bessel0, bessel1, name, nonzero, sign) {
  // @ts-ignore
  return function bessel(x, n) {
    if (nonzero) {
      if (x === 0) {
        return nonzero == 1 ? -Infinity : Infinity;
      } else if (x < 0) {
        return NaN;
      }
    }

    if (n === 0) {
      return bessel0(x);
    }

    if (n === 1) {
      return bessel1(x);
    }

    if (n < 0) {
      return NaN;
    }

    n |= 0;
    var b0 = bessel0(x),
        b1 = bessel1(x);
    return _bessel_iter(x, n, b0, b1, sign);
  };
}

var besselj = function () {
  var W = 0.636619772; // 2 / Math.PI

  var b0_a1a = [57568490574.0, -13362590354.0, 651619640.7, -11214424.18, 77392.33017, -184.9052456].reverse();
  var b0_a2a = [57568490411.0, 1029532985.0, 9494680.718, 59272.64853, 267.8532712, 1.0].reverse();
  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();
  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934935152e-7].reverse(); // @ts-ignore

  function bessel0(x) {
    var a = 0,
        a1 = 0,
        a2 = 0,
        y = x * x;

    if (x < 8) {
      a1 = _horner(b0_a1a, y);
      a2 = _horner(b0_a2a, y);
      a = a1 / a2;
    } else {
      var xx = x - 0.785398164;
      y = 64 / y;
      a1 = _horner(b0_a1b, y);
      a2 = _horner(b0_a2b, y);
      a = M.sqrt(W / x) * (M.cos(xx) * a1 - M.sin(xx) * a2 * 8 / x);
    }

    return a;
  }

  var b1_a1a = [72362614232.0, -7895059235.0, 242396853.1, -2972611.439, 15704.48260, -30.16036606].reverse();
  var b1_a2a = [144725228442.0, 2300535178.0, 18583304.74, 99447.43394, 376.9991397, 1.0].reverse();
  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();
  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse(); // @ts-ignore

  function bessel1(x) {
    var a = 0,
        a1 = 0,
        a2 = 0,
        y = x * x,
        xx = M.abs(x) - 2.356194491;

    if (Math.abs(x) < 8) {
      a1 = x * _horner(b1_a1a, y);
      a2 = _horner(b1_a2a, y);
      a = a1 / a2;
    } else {
      y = 64 / y;
      a1 = _horner(b1_a1b, y);
      a2 = _horner(b1_a2b, y);
      a = M.sqrt(W / M.abs(x)) * (M.cos(xx) * a1 - M.sin(xx) * a2 * 8 / M.abs(x));

      if (x < 0) {
        a = -a;
      }
    }

    return a;
  } // @ts-ignore


  return function besselj(x, n) {
    n = Math.round(n);

    if (!isFinite(x)) {
      return isNaN(x) ? x : 0;
    }

    if (n < 0) {
      return (n % 2 ? -1 : 1) * besselj(x, -n);
    }

    if (x < 0) {
      return (n % 2 ? -1 : 1) * besselj(-x, n);
    }

    if (n === 0) {
      return bessel0(x);
    }

    if (n === 1) {
      return bessel1(x);
    }

    if (x === 0) {
      return 0;
    }

    var ret = 0.0;

    if (x > n) {
      ret = _bessel_iter(x, n, bessel0(x), bessel1(x), -1);
    } else {
      var m = 2 * M.floor((n + M.floor(M.sqrt(40 * n))) / 2);
      var jsum = false;
      var bjp = 0.0,
          sum = 0.0;
      var bj = 1.0,
          bjm = 0.0;
      var tox = 2 / x;

      for (var j = m; j > 0; j--) {
        bjm = j * tox * bj - bjp;
        bjp = bj;
        bj = bjm;

        if (M.abs(bj) > 1E10) {
          bj *= 1E-10;
          bjp *= 1E-10;
          ret *= 1E-10;
          sum *= 1E-10;
        }

        if (jsum) {
          sum += bj;
        }

        jsum = !jsum;

        if (j == n) {
          ret = bjp;
        }
      }

      sum = 2.0 * sum - bj;
      ret /= sum;
    }

    return ret;
  };
}();

exports.besselj = besselj;

var bessely = function () {
  var W = 0.636619772;
  var b0_a1a = [-2957821389.0, 7062834065.0, -512359803.6, 10879881.29, -86327.92757, 228.4622733].reverse();
  var b0_a2a = [40076544269.0, 745249964.8, 7189466.438, 47447.26470, 226.1030244, 1.0].reverse();
  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();
  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934945152e-7].reverse(); // @ts-ignore

  function bessel0(x) {
    var a = 0,
        a1 = 0,
        a2 = 0,
        y = x * x,
        xx = x - 0.785398164;

    if (x < 8) {
      a1 = _horner(b0_a1a, y);
      a2 = _horner(b0_a2a, y);
      a = a1 / a2 + W * besselj(x, 0) * M.log(x);
    } else {
      y = 64 / y;
      a1 = _horner(b0_a1b, y);
      a2 = _horner(b0_a2b, y);
      a = M.sqrt(W / x) * (M.sin(xx) * a1 + M.cos(xx) * a2 * 8 / x);
    }

    return a;
  }

  var b1_a1a = [-0.4900604943e13, 0.1275274390e13, -0.5153438139e11, 0.7349264551e9, -0.4237922726e7, 0.8511937935e4].reverse();
  var b1_a2a = [0.2499580570e14, 0.4244419664e12, 0.3733650367e10, 0.2245904002e8, 0.1020426050e6, 0.3549632885e3, 1].reverse();
  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();
  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse(); // @ts-ignore

  function bessel1(x) {
    var a = 0,
        a1 = 0,
        a2 = 0,
        y = x * x,
        xx = x - 2.356194491;

    if (x < 8) {
      a1 = x * _horner(b1_a1a, y);
      a2 = _horner(b1_a2a, y);
      a = a1 / a2 + W * (besselj(x, 1) * M.log(x) - 1 / x);
    } else {
      y = 64 / y;
      a1 = _horner(b1_a1b, y);
      a2 = _horner(b1_a2b, y);
      a = M.sqrt(W / x) * (M.sin(xx) * a1 + M.cos(xx) * a2 * 8 / x);
    }

    return a;
  }

  return _bessel_wrap(bessel0, bessel1, 'BESSELY', 1, -1);
}();

exports.bessely = bessely;

var besseli = function () {
  var b0_a = [1.0, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.360768e-1, 0.45813e-2].reverse();
  var b0_b = [0.39894228, 0.1328592e-1, 0.225319e-2, -0.157565e-2, 0.916281e-2, -0.2057706e-1, 0.2635537e-1, -0.1647633e-1, 0.392377e-2].reverse(); // @ts-ignore

  function bessel0(x) {
    if (x <= 3.75) {
      return _horner(b0_a, x * x / (3.75 * 3.75));
    }

    return M.exp(M.abs(x)) / M.sqrt(M.abs(x)) * _horner(b0_b, 3.75 / M.abs(x));
  }

  var b1_a = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.2658733e-1, 0.301532e-2, 0.32411e-3].reverse();
  var b1_b = [0.39894228, -0.3988024e-1, -0.362018e-2, 0.163801e-2, -0.1031555e-1, 0.2282967e-1, -0.2895312e-1, 0.1787654e-1, -0.420059e-2].reverse(); // @ts-ignore

  function bessel1(x) {
    if (x < 3.75) {
      return x * _horner(b1_a, x * x / (3.75 * 3.75));
    }

    return (x < 0 ? -1 : 1) * M.exp(M.abs(x)) / M.sqrt(M.abs(x)) * _horner(b1_b, 3.75 / M.abs(x));
  } // @ts-ignore


  return function besseli(x, n) {
    n = Math.round(n);

    if (n === 0) {
      return bessel0(x);
    }

    if (n === 1) {
      return bessel1(x);
    }

    if (n < 0) {
      return NaN;
    }

    if (M.abs(x) === 0) {
      return 0;
    }

    if (x == Infinity) {
      return Infinity;
    }

    var ret = 0.0,
        j,
        tox = 2 / M.abs(x),
        bip = 0.0,
        bi = 1.0,
        bim = 0.0;
    var m = 2 * M.round((n + M.round(M.sqrt(40 * n))) / 2);

    for (j = m; j > 0; j--) {
      bim = j * tox * bi + bip;
      bip = bi;
      bi = bim;

      if (M.abs(bi) > 1E10) {
        bi *= 1E-10;
        bip *= 1E-10;
        ret *= 1E-10;
      }

      if (j == n) {
        ret = bip;
      }
    }

    ret *= besseli(x, 0) / bi;
    return x < 0 && n % 2 ? -ret : ret;
  };
}();

exports.besseli = besseli;

var besselk = function () {
  var b0_a = [-0.57721566, 0.42278420, 0.23069756, 0.3488590e-1, 0.262698e-2, 0.10750e-3, 0.74e-5].reverse();
  var b0_b = [1.25331414, -0.7832358e-1, 0.2189568e-1, -0.1062446e-1, 0.587872e-2, -0.251540e-2, 0.53208e-3].reverse(); // @ts-ignore

  function bessel0(x) {
    if (x <= 2) {
      return -M.log(x / 2) * besseli(x, 0) + _horner(b0_a, x * x / 4);
    }

    return M.exp(-x) / M.sqrt(x) * _horner(b0_b, 2 / x);
  }

  var b1_a = [1.0, 0.15443144, -0.67278579, -0.18156897, -0.1919402e-1, -0.110404e-2, -0.4686e-4].reverse();
  var b1_b = [1.25331414, 0.23498619, -0.3655620e-1, 0.1504268e-1, -0.780353e-2, 0.325614e-2, -0.68245e-3].reverse(); // @ts-ignore

  function bessel1(x) {
    if (x <= 2) {
      return M.log(x / 2) * besseli(x, 1) + 1 / x * _horner(b1_a, x * x / 4);
    }

    return M.exp(-x) / M.sqrt(x) * _horner(b1_b, 2 / x);
  }

  return _bessel_wrap(bessel0, bessel1, 'BESSELK', 2, 1);
}();

exports.besselk = besselk;

/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.chisquare = exports.centralF = exports.binomial = exports.beta = void 0;
exports.corrcoeff = corrcoeff;
exports.covariance = covariance;
exports.erf = erf;
exports.erfc = erfc;
exports.exponential = void 0;
exports.factorial = factorial;
exports.factorialln = factorialln;
exports.gamma = void 0;
exports.gammafn = gammafn;
exports.gammaln = gammaln;
exports.geomean = geomean;
exports.lognormal = exports.hypgeom = void 0;
exports.mean = mean;
exports.normal = exports.negbin = void 0;
exports.normalci = normalci;
exports.poisson = void 0;
exports.stdev = stdev;
exports.studentt = void 0;
exports.sumsqerr = sumsqerr;
exports.tci = tci;
exports.variance = variance;
exports.weibull = void 0;

__webpack_require__(77);

/**
 * @license
 Copyright (c) 2013 jStat

 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 */
function erf(x) {
  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2, -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4, 4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6, 1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8, 6.529054439e-9, 5.059343495e-9, -9.91364156e-10, -2.27365122e-10, 9.6467911e-11, 2.394038e-12, -6.886027e-12, 8.94487e-13, 3.13092e-13, -1.12708e-13, 3.81e-16, 7.106e-15, -1.523e-15, -9.4e-17, 1.21e-16, -2.8e-17];
  var j = cof.length - 1;
  var isneg = false;
  var d = 0;
  var dd = 0;
  var t, ty, tmp, res;

  if (x === 0) {
    return 0;
  }

  if (x < 0) {
    x = -x;
    isneg = true;
  }

  t = 2 / (2 + x);
  ty = 4 * t - 2;

  for (; j > 0; j--) {
    tmp = d;
    d = ty * d - dd + cof[j];
    dd = tmp;
  }

  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
  return isneg ? res - 1 : 1 - res;
}

function erfc(x) {
  return 1 - erf(x);
}

function erfcinv(p) {
  var j = 0;
  var x, err, t, pp;

  if (p >= 2) {
    return -100;
  }

  if (p <= 0) {
    return 100;
  }

  pp = p < 1 ? p : 2 - p;
  t = Math.sqrt(-2 * Math.log(pp / 2));
  x = -0.70711 * ((2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t);

  for (; j < 2; j++) {
    err = erfc(x) - pp;
    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
  }

  return p < 1 ? x : -x;
}

var exponential = {
  pdf: function pdf(x, rate) {
    return x < 0 ? 0 : rate * Math.exp(-rate * x);
  },
  cdf: function cdf(x, rate) {
    return x < 0 ? 0 : 1 - Math.exp(-rate * x);
  }
};
exports.exponential = exponential;

function gammafn(x) {
  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563, 629.3311553128184, 866.9662027904133, -31451.272968848367, -36144.413418691176, 66456.14382024054];
  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192, -3107.771671572311, 22538.118420980151, 4755.8462775278811, -134659.9598649693, -115132.2596755535];
  var fact = false;
  var n = 0;
  var xden = 0;
  var xnum = 0;
  var y = x;
  var i, z, yi, res;

  if (x > 171.6243769536076) {
    return Infinity;
  }

  if (y <= 0) {
    res = y % 1;

    if (res) {
      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
      y = 1 - y;
    } else {
      return Infinity;
    }
  }

  yi = y;

  if (y < 1) {
    z = y++;
  } else {
    z = (y -= n = (y | 0) - 1) - 1;
  }

  for (i = 0; i < 8; ++i) {
    xnum = (xnum + p[i]) * z;
    xden = xden * z + q[i];
  }

  res = xnum / xden + 1;

  if (yi < y) {
    res /= yi;
  } else if (yi > y) {
    for (i = 0; i < n; ++i) {
      res *= y;
      y++;
    }
  }

  if (fact) {
    res = fact / res;
  }

  return res;
}

var gamma = {
  pdf: function pdf(x, shape, scale) {
    if (x < 0) {
      return 0;
    }

    return x === 0 && shape === 1 ? 1 / scale : Math.exp((shape - 1) * Math.log(x) - x / scale - gammaln(shape) - shape * Math.log(scale));
  },
  cdf: function cdf(x, shape, scale) {
    if (x < 0) {
      return 0;
    }

    return lowRegGamma(shape, x / scale);
  },
  inv: function inv(p, shape, scale) {
    return gammapinv(p, shape) * scale;
  }
};
exports.gamma = gamma;

function gammaln(x) {
  var j = 0;
  var cof = [76.18009172947146, -86.50532032941677, 24.01409824083091, -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5];
  var ser = 1.000000000190015;
  var xx, y, tmp;
  tmp = (y = xx = x) + 5.5;
  tmp -= (xx + 0.5) * Math.log(tmp);

  for (; j < 6; j++) {
    ser += cof[j] / ++y;
  }

  return Math.log(2.5066282746310005 * ser / xx) - tmp;
}

function lowRegGamma(a, x) {
  var aln = gammaln(a);
  var ap = a;
  var sum = 1 / a;
  var del = sum;
  var b = x + 1 - a;
  var c = 1 / 1.0e-30;
  var d = 1 / b;
  var h = d;
  var i = 1; // calculate maximum number of itterations required for a

  var ITMAX = -~(Math.log(a >= 1 ? a : 1 / a) * 8.5 + a * 0.4 + 17);
  var an;

  if (x < 0 || a <= 0) {
    return NaN;
  } else if (x < a + 1) {
    for (; i <= ITMAX; i++) {
      sum += del *= x / ++ap;
    }

    return sum * Math.exp(-x + a * Math.log(x) - aln);
  }

  for (; i <= ITMAX; i++) {
    an = -i * (i - a);
    b += 2;
    d = an * d + b;
    c = b + an / c;
    d = 1 / d;
    h *= d * c;
  }

  return 1 - h * Math.exp(-x + a * Math.log(x) - aln);
}

function gammapinv(p, a) {
  var j = 0;
  var a1 = a - 1;
  var EPS = 1e-8;
  var gln = gammaln(a);
  var x, err, t, u, pp;
  var lna1;
  var afac;

  if (p >= 1) {
    return Math.max(100, a + 100 * Math.sqrt(a));
  }

  if (p <= 0) {
    return 0;
  }

  if (a > 1) {
    lna1 = Math.log(a1);
    afac = Math.exp(a1 * (lna1 - 1) - gln);
    pp = p < 0.5 ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;

    if (p < 0.5) {
      x = -x;
    }

    x = Math.max(1e-3, a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
  } else {
    t = 1 - a * (0.253 + a * 0.12);

    if (p < t) {
      x = Math.pow(p / t, 1 / a);
    } else {
      x = 1 - Math.log(1 - (p - t) / (1 - t));
    }
  }

  for (; j < 12; j++) {
    if (x <= 0) {
      return 0;
    }

    err = lowRegGamma(a, x) - p;

    if (a > 1) {
      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));
    } else {
      t = Math.exp(-x + a1 * Math.log(x) - gln);
    }

    u = err / t;
    x -= t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1)));

    if (x <= 0) {
      x = 0.5 * (x + t);
    }

    if (Math.abs(t) < EPS * x) {
      break;
    }
  }

  return x;
}

var normal = {
  pdf: function pdf(x, mean, std) {
    return Math.exp(-0.5 * Math.log(2 * Math.PI) - Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
  },
  cdf: function cdf(x, mean, std) {
    return 0.5 * (1 + erf((x - mean) / Math.sqrt(2 * std * std)));
  },
  inv: function inv(p, mean, std) {
    return -1.41421356237309505 * std * erfcinv(2 * p) + mean;
  }
};
exports.normal = normal;
var beta = {
  pdf: function pdf(x, alpha, beta) {
    // PDF is zero outside the support
    if (x > 1 || x < 0) {
      return 0;
    } // PDF is one for the uniform case


    if (alpha == 1 && beta == 1) {
      return 1;
    }

    if (alpha < 512 && beta < 512) {
      return Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1) / betafn(alpha, beta);
    } else {
      return Math.exp((alpha - 1) * Math.log(x) + (beta - 1) * Math.log(1 - x) - betaln(alpha, beta));
    }
  },
  cdf: function cdf(x, alpha, beta) {
    return x > 1 || x < 0 ? +(x > 1) : ibeta(x, alpha, beta);
  },
  inv: function inv(x, alpha, beta) {
    return ibetainv(x, alpha, beta);
  }
};
exports.beta = beta;

function betafn(x, y) {
  // ensure arguments are positive
  if (x <= 0 || y <= 0) {
    return undefined;
  } // make sure x + y doesn't exceed the upper limit of usable values


  return x + y > 170 ? Math.exp(betaln(x, y)) : gammafn(x) * gammafn(y) / gammafn(x + y);
}

function betaln(x, y) {
  return gammaln(x) + gammaln(y) - gammaln(x + y);
}

function ibetainv(p, a, b) {
  var EPS = 1e-8;
  var a1 = a - 1;
  var b1 = b - 1;
  var j = 0;
  var lna, lnb, pp, t, u, err, x, al, h, w, afac;

  if (p <= 0) {
    return 0;
  }

  if (p >= 1) {
    return 1;
  }

  if (a >= 1 && b >= 1) {
    pp = p < 0.5 ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;

    if (p < 0.5) {
      x = -x;
    }

    al = (x * x - 3) / 6;
    h = 2 / (1 / (2 * a - 1) + 1 / (2 * b - 1));
    w = x * Math.sqrt(al + h) / h - (1 / (2 * b - 1) - 1 / (2 * a - 1)) * (al + 5 / 6 - 2 / (3 * h));
    x = a / (a + b * Math.exp(2 * w));
  } else {
    lna = Math.log(a / (a + b));
    lnb = Math.log(b / (a + b));
    t = Math.exp(a * lna) / a;
    u = Math.exp(b * lnb) / b;
    w = t + u;

    if (p < t / w) {
      x = Math.pow(a * w * p, 1 / a);
    } else {
      x = 1 - Math.pow(b * w * (1 - p), 1 / b);
    }
  }

  afac = -gammaln(a) - gammaln(b) + gammaln(a + b);

  for (; j < 10; j++) {
    if (x === 0 || x === 1) {
      return x;
    } // @ts-ignore


    err = ibeta(x, a, b) - p;
    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
    u = err / t;
    x -= t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x))));

    if (x <= 0) {
      x = 0.5 * (x + t);
    }

    if (x >= 1) {
      x = 0.5 * (x + t + 1);
    }

    if (Math.abs(t) < EPS * x && j > 0) {
      break;
    }
  }

  return x;
}

function ibeta(x, a, b) {
  // Factors in front of the continued fraction.
  var bt = x === 0 || x === 1 ? 0 : Math.exp(gammaln(a + b) - gammaln(a) - gammaln(b) + a * Math.log(x) + b * Math.log(1 - x));

  if (x < 0 || x > 1) {
    return false;
  }

  if (x < (a + 1) / (a + b + 2)) // Use continued fraction directly.
    {
      return bt * betacf(x, a, b) / a;
    } // else use continued fraction after making the symmetry transformation.


  return 1 - bt * betacf(1 - x, b, a) / b;
}

function betacf(x, a, b) {
  var fpmin = 1e-30;
  var m = 1;
  var qab = a + b;
  var qap = a + 1;
  var qam = a - 1;
  var c = 1;
  var d = 1 - qab * x / qap;
  var m2, aa, del, h; // These q's will be used in factors that occur in the coefficients

  if (Math.abs(d) < fpmin) {
    d = fpmin;
  }

  d = 1 / d;
  h = d;

  for (; m <= 100; m++) {
    m2 = 2 * m;
    aa = m * (b - m) * x / ((qam + m2) * (a + m2)); // One step (the even one) of the recurrence

    d = 1 + aa * d;

    if (Math.abs(d) < fpmin) {
      d = fpmin;
    }

    c = 1 + aa / c;

    if (Math.abs(c) < fpmin) {
      c = fpmin;
    }

    d = 1 / d;
    h *= d * c;
    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2)); // Next step of the recurrence (the odd one)

    d = 1 + aa * d;

    if (Math.abs(d) < fpmin) {
      d = fpmin;
    }

    c = 1 + aa / c;

    if (Math.abs(c) < fpmin) {
      c = fpmin;
    }

    d = 1 / d;
    del = d * c;
    h *= del;

    if (Math.abs(del - 1.0) < 3e-7) {
      break;
    }
  }

  return h;
}

var binomial = {
  pdf: function pdf(k, n, p) {
    return p === 0 || p === 1 ? n * p === k ? 1 : 0 : combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
  },
  cdf: function cdf(x, n, p) {
    var betacdf;
    var eps = 1e-10;

    if (x < 0) {
      return 0;
    }

    if (x >= n) {
      return 1;
    }

    if (p < 0 || p > 1 || n <= 0) {
      return NaN;
    }

    x = Math.floor(x);
    var z = p;
    var a = x + 1;
    var b = n - x;
    var s = a + b;
    var bt = Math.exp(gammaln(s) - gammaln(b) - gammaln(a) + a * Math.log(z) + b * Math.log(1 - z));

    if (z < (a + 1) / (s + 2)) {
      betacdf = bt * betinc(z, a, b, eps);
    } else {
      betacdf = 1 - bt * betinc(1 - z, b, a, eps);
    }

    return Math.round((1 - betacdf) * (1 / eps)) / (1 / eps);
  }
};
exports.binomial = binomial;

function betinc(x, a, b, eps) {
  var a0 = 0;
  var b0 = 1;
  var a1 = 1;
  var b1 = 1;
  var m9 = 0;
  var a2 = 0;
  var c9;

  while (Math.abs((a1 - a2) / a1) > eps) {
    a2 = a1;
    c9 = -(a + m9) * (a + b + m9) * x / (a + 2 * m9) / (a + 2 * m9 + 1);
    a0 = a1 + c9 * a0;
    b0 = b1 + c9 * b0;
    m9 = m9 + 1;
    c9 = m9 * (b - m9) * x / (a + 2 * m9 - 1) / (a + 2 * m9);
    a1 = a0 + c9 * a1;
    b1 = b0 + c9 * b1;
    a0 = a0 / b1;
    b0 = b0 / b1;
    a1 = a1 / b1;
    b1 = 1;
  }

  return a1 / a;
}

function combination(n, m) {
  // make sure n or m don't exceed the upper limit of usable values
  return n > 170 || m > 170 ? Math.exp(combinationln(n, m)) : factorial(n) / factorial(m) / factorial(n - m);
}

function combinationln(n, m) {
  return factorialln(n) - factorialln(m) - factorialln(n - m);
} // natural log factorial of n


function factorialln(n) {
  return n < 0 ? NaN : gammaln(n + 1);
} // factorial of n


function factorial(n) {
  return n < 0 ? NaN : gammafn(n + 1);
}

var chisquare = {
  pdf: function pdf(x, dof) {
    if (x < 0) {
      return 0;
    }

    return x === 0 && dof === 2 ? 0.5 : Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - dof / 2 * Math.log(2) - gammaln(dof / 2));
  },
  cdf: function cdf(x, dof) {
    if (x < 0) {
      return 0;
    }

    return lowRegGamma(dof / 2, x / 2);
  },
  inv: function inv(p, dof) {
    return 2 * gammapinv(p, 0.5 * dof);
  }
};
exports.chisquare = chisquare;
var centralF = {
  // This implementation of the pdf function avoids float overflow
  // See the way that R calculates this value:
  // https://svn.r-project.org/R/trunk/src/nmath/df.c
  pdf: function pdf(x, df1, df2) {
    var p, q, f;

    if (x < 0) {
      return 0;
    }

    if (df1 <= 2) {
      if (x === 0 && df1 < 2) {
        return Infinity;
      }

      if (x === 0 && df1 === 2) {
        return 1;
      }

      return 1 / betafn(df1 / 2, df2 / 2) * Math.pow(df1 / df2, df1 / 2) * Math.pow(x, df1 / 2 - 1) * Math.pow(1 + df1 / df2 * x, -(df1 + df2) / 2);
    }

    p = df1 * x / (df2 + x * df1);
    q = df2 / (df2 + x * df1);
    f = df1 * q / 2.0;
    return f * binomial.pdf((df1 - 2) / 2, (df1 + df2 - 2) / 2, p);
  },
  cdf: function cdf(x, df1, df2) {
    if (x < 0) {
      return 0;
    }

    return ibeta(df1 * x / (df1 * x + df2), df1 / 2, df2 / 2);
  },
  inv: function inv(x, df1, df2) {
    return df2 / (df1 * (1 / ibetainv(x, df1 / 2, df2 / 2) - 1));
  }
};
exports.centralF = centralF;
var weibull = {
  pdf: function pdf(x, scale, shape) {
    if (x < 0 || scale < 0 || shape < 0) {
      return 0;
    }

    return shape / scale * Math.pow(x / scale, shape - 1) * Math.exp(-Math.pow(x / scale, shape));
  },
  cdf: function cdf(x, scale, shape) {
    return x < 0 ? 0 : 1 - Math.exp(-Math.pow(x / scale, shape));
  }
};
exports.weibull = weibull;
var poisson = {
  pdf: function pdf(k, l) {
    if (l < 0 || k % 1 !== 0 || k < 0) {
      return 0;
    }

    return Math.pow(l, k) * Math.exp(-l) / factorial(k);
  },
  cdf: function cdf(x, l) {
    var k = 0;

    if (x < 0) {
      return 0;
    }

    var sum = 0;

    for (; k <= x; k++) {
      sum += poisson.pdf(k, l);
    }

    return sum;
  }
};
exports.poisson = poisson;
var hypgeom = {
  pdf: function pdf(k, N, m, n) {
    // Hypergeometric PDF.
    // A simplification of the CDF algorithm below.
    // k = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population
    // if(k !== k | 0) {
    //   return false;
    // } else
    if (k < 0 || k < m - (N - n)) {
      // It's impossible to have this few successes drawn.
      return 0;
    } else if (k > n || k > m) {
      // It's impossible to have this many successes drawn.
      return 0;
    } else if (m * 2 > N) {
      // More than half the population is successes.
      if (n * 2 > N) {
        // More than half the population is sampled.
        return hypgeom.pdf(N - m - n + k, N, N - m, N - n);
      } else {
        // Half or less of the population is sampled.
        return hypgeom.pdf(n - k, N, N - m, n);
      }
    } else if (n * 2 > N) {
      // Half or less is successes.
      return hypgeom.pdf(m - k, N, m, N - n);
    } else if (m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return hypgeom.pdf(k, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.
      // The basic premise of the algorithm is that we partially normalize our
      // intermediate product to keep it in a numerically good region, and then
      // finish the normalization at the end.
      // This variable holds the scaled probability of the current number of
      // successes.
      var scaledPDF = 1; // This keeps track of how much we have normalized.

      var samplesDone = 0;

      for (var i = 0; i < k; i++) {
        // For every possible number of successes up to that observed...
        while (scaledPDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.
          scaledPDF *= 1 - m / (N - samplesDone); // Say we've normalized by this sample already.

          samplesDone++;
        } // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes


        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
      }

      for (; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledPDF *= 1 - m / (N - samplesDone);
      } // Bound answer sanely before returning.


      return Math.min(1, Math.max(0, scaledPDF));
    }
  },
  cdf: function cdf(x, N, m, n) {
    // Hypergeometric CDF.
    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
    // and comes from his hypergeometric test calculator at
    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.
    // x = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population
    if (x < 0 || x < m - (N - n)) {
      // It's impossible to have this few successes drawn or fewer.
      return 0;
    } else if (x >= n || x >= m) {
      // We will always have this many successes or fewer.
      return 1;
    } else if (m * 2 > N) {
      // More than half the population is successes.
      if (n * 2 > N) {
        // More than half the population is sampled.
        return cdf(N - m - n + x, N, N - m, N - n);
      } else {
        // Half or less of the population is sampled.
        return 1 - hypgeom.cdf(n - x - 1, N, N - m, n);
      }
    } else if (n * 2 > N) {
      // Half or less is successes.
      return 1 - hypgeom.cdf(m - x - 1, N, m, N - n);
    } else if (m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return hypgeom.cdf(x, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.
      // The basic premise of the algorithm is that we partially normalize our
      // intermediate sum to keep it in a numerically good region, and then
      // finish the normalization at the end.
      // Holds the intermediate, scaled total CDF.
      var scaledCDF = 1; // This variable holds the scaled probability of the current number of
      // successes.

      var scaledPDF = 1; // This keeps track of how much we have normalized.

      var samplesDone = 0;

      for (var i = 0; i < x; i++) {
        // For every possible number of successes up to that observed...
        while (scaledCDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.
          var factor = 1 - m / (N - samplesDone);
          scaledPDF *= factor;
          scaledCDF *= factor; // Say we've normalized by this sample already.

          samplesDone++;
        } // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes


        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1)); // Add to the CDF answer.

        scaledCDF += scaledPDF;
      }

      for (; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledCDF *= 1 - m / (N - samplesDone);
      } // Bound answer sanely before returning.


      return Math.min(1, Math.max(0, scaledCDF));
    }
  }
};
exports.hypgeom = hypgeom;
var studentt = {
  pdf: function pdf(x, dof) {
    dof = dof > 1e100 ? 1e100 : dof;
    return 1 / (Math.sqrt(dof) * betafn(0.5, dof / 2)) * Math.pow(1 + x * x / dof, -((dof + 1) / 2));
  },
  cdf: function cdf(x, dof) {
    var dof2 = dof / 2;
    return ibeta((x + Math.sqrt(x * x + dof)) / (2 * Math.sqrt(x * x + dof)), dof2, dof2);
  },
  inv: function inv(p, dof) {
    var x = ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
    x = Math.sqrt(dof * (1 - x) / x);
    return p > 0.5 ? x : -x;
  }
};
exports.studentt = studentt;
var lognormal = {
  pdf: function pdf(x, mu, sigma) {
    if (x <= 0) {
      return 0;
    }

    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) - Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) / (2 * sigma * sigma));
  },
  cdf: function cdf(x, mu, sigma) {
    if (x < 0) {
      return 0;
    }

    return 0.5 + 0.5 * erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma));
  },
  inv: function inv(p, mu, sigma) {
    return Math.exp(-1.41421356237309505 * sigma * erfcinv(2 * p) + mu);
  }
};
exports.lognormal = lognormal;
var negbin = {
  pdf: function pdf(k, r, p) {
    if (k !== k >>> 0) {
      return false;
    }

    if (k < 0) {
      return 0;
    }

    return combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);
  },
  cdf: function cdf(x, r, p) {
    var sum = 0,
        k = 0;

    if (x < 0) {
      return 0;
    }

    for (; k <= x; k++) {
      sum += negbin.pdf(k, r, p);
    }

    return sum;
  }
};
exports.negbin = negbin;

function sum(arr) {
  var sum = 0;
  var i = arr.length;

  while (--i >= 0) {
    sum += arr[i];
  }

  return sum;
}

function mean(arr) {
  return sum(arr) / arr.length;
}

function sumsqerr(arr) {
  var meanv = mean(arr);
  var sum = 0;
  var i = arr.length;
  var tmp;

  while (--i >= 0) {
    tmp = arr[i] - meanv;
    sum += tmp * tmp;
  }

  return sum;
}

function variance(arr, flag) {
  return sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
}

function stdev(arr, flag) {
  return Math.sqrt(variance(arr, flag));
} // 2 different parameter setups
// (value, alpha, sd, n)
// (value, alpha, array)


function normalci() {
  var args = [].slice.call(arguments),
      ans = new Array(2),
      change;

  if (args.length === 4) {
    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * args[2] / Math.sqrt(args[3]));
  } else {
    // @ts-ignore
    change = Math.abs(normal.inv(args[1] / 2, 0, 1) * stdev(args[2]) / Math.sqrt(args[2].length));
  }

  ans[0] = args[0] - change;
  ans[1] = args[0] + change;
  return ans;
}

function tci() {
  var args = [].slice.call(arguments),
      ans = new Array(2),
      change;

  if (args.length === 4) {
    change = Math.abs(studentt.inv(args[1] / 2, args[3] - 1) * args[2] / Math.sqrt(args[3]));
  } else {
    // @ts-ignore
    change = Math.abs(studentt.inv(args[1] / 2, args[2].length - 1) * stdev(args[2], true) / Math.sqrt(args[2].length));
  }

  ans[0] = args[0] - change;
  ans[1] = args[0] + change;
  return ans;
}

function product(arr) {
  var prod = 1;
  var i = arr.length;

  while (--i >= 0) {
    prod *= arr[i];
  }

  return prod;
}

function geomean(arr) {
  return Math.pow(product(arr), 1 / arr.length);
}

function covariance(arr1, arr2) {
  var u = mean(arr1);
  var v = mean(arr2);
  var arr1Len = arr1.length;
  var sq_dev = new Array(arr1Len);
  var i;

  for (i = 0; i < arr1Len; i++) {
    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);
  }

  return sum(sq_dev) / (arr1Len - 1);
}

function corrcoeff(arr1, arr2) {
  return covariance(arr1, arr2) / stdev(arr1, 1) / stdev(arr2, 1);
}

/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.MathPlugin = void 0;

__webpack_require__(356);

__webpack_require__(405);

__webpack_require__(161);

__webpack_require__(270);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MathPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(MathPlugin, _FunctionPlugin);

  var _super = _createSuper(MathPlugin);

  function MathPlugin() {
    _classCallCheck(this, MathPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(MathPlugin, [{
    key: "fact",
    value: function fact(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FACT'), function (arg) {
        arg = Math.trunc(arg);
        var ret = 1;

        for (var i = 1; i <= arg; i++) {
          ret *= i;
        }

        return ret;
      });
    }
  }, {
    key: "factdouble",
    value: function factdouble(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FACTDOUBLE'), function (arg) {
        arg = Math.trunc(arg);
        var ret = 1;

        for (var i = arg; i >= 1; i -= 2) {
          ret *= i;
        }

        return ret;
      });
    }
  }, {
    key: "combin",
    value: function combin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COMBIN'), function (n, m) {
        if (m > n) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.WrongOrder);
        }

        n = Math.trunc(n);
        m = Math.trunc(m);
        return _combin(n, m);
      });
    }
  }, {
    key: "combina",
    value: function combina(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COMBINA'), function (n, m) {
        n = Math.trunc(n);
        m = Math.trunc(m);

        if (n + m - 1 >= 1030) {
          //Product #2 does not enforce this
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        if (n === 0 && m === 0) {
          return 1;
        }

        return _combin(n + m - 1, m);
      });
    }
  }, {
    key: "gcd",
    value: function gcd(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('GCD'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var processedArgs = _this.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);

        if (processedArgs instanceof _Cell.CellError) {
          return processedArgs;
        }

        var ret = 0;

        var _iterator = _createForOfIteratorHelper(processedArgs),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var val = _step.value;

            if (val < 0) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }

            ret = binaryGCD(ret, Math.trunc(val));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        if (ret > Number.MAX_SAFE_INTEGER) {
          //inconsistency with product #1
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        return ret;
      });
    }
  }, {
    key: "lcm",
    value: function lcm(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('LCM'), function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var processedArgs = _this2.arithmeticHelper.coerceNumbersCoerceRangesDropNulls(args);

        if (processedArgs instanceof _Cell.CellError) {
          return processedArgs;
        }

        var ret = 1;

        var _iterator2 = _createForOfIteratorHelper(processedArgs),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var val = _step2.value;

            if (val < 0) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }

            ret = binaryLCM(ret, Math.trunc(val));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        if (ret > Number.MAX_SAFE_INTEGER) {
          //inconsistency with product #1
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueLarge);
        }

        return ret;
      });
    }
  }, {
    key: "mround",
    value: function mround(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MROUND'), function (nom, denom) {
        if (denom === 0) {
          return 0;
        }

        if (nom > 0 && denom < 0 || nom < 0 && denom > 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.DistinctSigns);
        }

        return Math.round(nom / denom) * denom;
      });
    }
  }, {
    key: "multinomial",
    value: function multinomial(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('MULTINOMIAL'), function () {
        var n = 0;
        var ans = 1;

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        for (var _i = 0, _args = args; _i < _args.length; _i++) {
          var arg = _args[_i];

          if (arg < 0) {
            return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
          }

          arg = Math.trunc(arg);

          for (var i = 1; i <= arg; i++) {
            ans *= (n + i) / i;
          }

          n += arg;
        }

        return Math.round(ans);
      });
    }
  }, {
    key: "quotient",
    value: function quotient(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('QUOTIENT'), function (nom, denom) {
        if (denom === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return Math.trunc(nom / denom);
      });
    }
  }, {
    key: "seriessum",
    value: function seriessum(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('SERIESSUM'), function (x, n, m, range) {
        var coefs = _this3.arithmeticHelper.manyToOnlyNumbersDropNulls(range.valuesFromTopLeftCorner());

        if (coefs instanceof _Cell.CellError) {
          return coefs;
        }

        var ret = 0;
        coefs.reverse();

        var _iterator3 = _createForOfIteratorHelper(coefs),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var coef = _step3.value;
            ret *= Math.pow(x, m);
            ret += coef;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return ret * Math.pow(x, n);
      });
    }
  }, {
    key: "sign",
    value: function sign(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SIGN'), function (arg) {
        if (arg > 0) {
          return 1;
        } else if (arg < 0) {
          return -1;
        } else {
          return 0;
        }
      });
    }
  }, {
    key: "sumx2my2",
    value: function sumx2my2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMX2MY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof _Cell.CellError) {
            return valX;
          }

          if (valY instanceof _Cell.CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX, 2) - Math.pow(valY, 2);
          }
        }

        return ret;
      });
    }
  }, {
    key: "sumx2py2",
    value: function sumx2py2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMX2PY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof _Cell.CellError) {
            return valX;
          }

          if (valY instanceof _Cell.CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX, 2) + Math.pow(valY, 2);
          }
        }

        return ret;
      });
    }
  }, {
    key: "sumxmy2",
    value: function sumxmy2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SUMXMY2'), function (rangeX, rangeY) {
        var valsX = rangeX.valuesFromTopLeftCorner();
        var valsY = rangeY.valuesFromTopLeftCorner();

        if (valsX.length !== valsY.length) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var n = valsX.length;
        var ret = 0;

        for (var i = 0; i < n; i++) {
          var valX = valsX[i];
          var valY = valsY[i];

          if (valX instanceof _Cell.CellError) {
            return valX;
          }

          if (valY instanceof _Cell.CellError) {
            return valY;
          }

          if (typeof valX === 'number' && typeof valY === 'number') {
            ret += Math.pow(valX - valY, 2);
          }
        }

        return ret;
      });
    }
  }]);

  return MathPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.MathPlugin = MathPlugin;
MathPlugin.implementedFunctions = {
  'FACT': {
    method: 'fact',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 170
    }]
  },
  'FACTDOUBLE': {
    method: 'factdouble',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      maxValue: 288
    }]
  },
  'COMBIN': {
    method: 'combin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0,
      lessThan: 1030
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'COMBINA': {
    method: 'combina',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      minValue: 0
    }]
  },
  'GCD': {
    method: 'gcd',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'LCM': {
    method: 'lcm',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'MROUND': {
    method: 'mround',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'MULTINOMIAL': {
    method: 'multinomial',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }],
    repeatLastArgs: 1,
    expandRanges: true
  },
  'QUOTIENT': {
    method: 'quotient',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SERIESSUM': {
    method: 'seriessum',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'SIGN': {
    method: 'sign',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'SUMX2MY2': {
    method: 'sumx2my2',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'SUMX2PY2': {
    method: 'sumx2py2',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'SUMXMY2': {
    method: 'sumxmy2',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  }
};

function _combin(n, m) {
  if (2 * m > n) {
    m = n - m;
  }

  var ret = 1;

  for (var i = 1; i <= m; i++) {
    ret *= (n - m + i) / i;
  }

  return Math.round(ret);
}

function binaryGCD(a, b) {
  if (a < b) {
    var _ref = [b, a];
    a = _ref[0];
    b = _ref[1];
  }

  while (b > 0) {
    var _ref2 = [b, a % b];
    a = _ref2[0];
    b = _ref2[1];
  }

  return a;
}

function binaryLCM(a, b) {
  if (a === 0 || b === 0) {
    return 0;
  }

  return a * (b / binaryGCD(a, b));
}

/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

var $ = __webpack_require__(51);

// `Number.MAX_SAFE_INTEGER` constant
// https://tc39.es/ecma262/#sec-number.max_safe_integer
$({ target: 'Number', stat: true }, {
  MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
});


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(1);

__webpack_require__(50);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(92);

__webpack_require__(122);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(103);

exports.__esModule = true;
exports.ComplexPlugin = void 0;

__webpack_require__(392);

__webpack_require__(389);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _ArithmeticHelper = __webpack_require__(249);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ComplexPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(ComplexPlugin, _FunctionPlugin);

  var _super = _createSuper(ComplexPlugin);

  function ComplexPlugin() {
    _classCallCheck(this, ComplexPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ComplexPlugin, [{
    key: "complex",
    value: function complex(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COMPLEX'), function (re, im, unit) {
        if (unit !== 'i' && unit !== 'j') {
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ShouldBeIorJ);
        }

        return (0, _ArithmeticHelper.coerceComplexToString)([re, im], unit);
      });
    }
  }, {
    key: "imabs",
    value: function imabs(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMABS'), abs);
    }
  }, {
    key: "imaginary",
    value: function imaginary(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMAGINARY'), function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            _re = _ref2[0],
            im = _ref2[1];

        return im;
      });
    }
  }, {
    key: "imreal",
    value: function imreal(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMREAL'), function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            re = _ref4[0],
            _im = _ref4[1];

        return re;
      });
    }
  }, {
    key: "imargument",
    value: function imargument(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMARGUMENT'), function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            re = _ref6[0],
            im = _ref6[1];

        if (re === 0 && im === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return Math.atan2(im, re);
      });
    }
  }, {
    key: "imconjugate",
    value: function imconjugate(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCONJUGATE'), function (_ref7) {
        var _ref8 = _slicedToArray(_ref7, 2),
            re = _ref8[0],
            im = _ref8[1];

        return (0, _ArithmeticHelper.coerceComplexToString)([re, -im]);
      });
    }
  }, {
    key: "imcos",
    value: function imcos(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCOS'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(cos(arg));
      });
    }
  }, {
    key: "imcosh",
    value: function imcosh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCOSH'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(cosh(arg));
      });
    }
  }, {
    key: "imcot",
    value: function imcot(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCOT'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div(cos(arg), sin(arg)));
      });
    }
  }, {
    key: "imcsc",
    value: function imcsc(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCSC'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div([1, 0], sin(arg)));
      });
    }
  }, {
    key: "imcsch",
    value: function imcsch(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMCSCH'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div([1, 0], sinh(arg)));
      });
    }
  }, {
    key: "imsec",
    value: function imsec(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSEC'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div([1, 0], cos(arg)));
      });
    }
  }, {
    key: "imsech",
    value: function imsech(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSECH'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div([1, 0], cosh(arg)));
      });
    }
  }, {
    key: "imsin",
    value: function imsin(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSIN'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(sin(arg));
      });
    }
  }, {
    key: "imsinh",
    value: function imsinh(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSINH'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(sinh(arg));
      });
    }
  }, {
    key: "imtan",
    value: function imtan(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMTAN'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div(sin(arg), cos(arg)));
      });
    }
  }, {
    key: "imdiv",
    value: function imdiv(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMDIV'), function (arg1, arg2) {
        return (0, _ArithmeticHelper.coerceComplexToString)(div(arg1, arg2));
      });
    }
  }, {
    key: "improduct",
    value: function improduct(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('IMPRODUCT'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var coerced = _this.arithmeticHelper.coerceComplexExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        var prod = [1, 0];

        var _iterator = _createForOfIteratorHelper(coerced),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var val = _step.value;
            prod = mul(prod, val);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return (0, _ArithmeticHelper.coerceComplexToString)(prod);
      });
    }
  }, {
    key: "imsum",
    value: function imsum(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('IMSUM'), function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var coerced = _this2.arithmeticHelper.coerceComplexExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        var sum = [0, 0];

        var _iterator2 = _createForOfIteratorHelper(coerced),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var val = _step2.value;
            sum = add(sum, val);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return (0, _ArithmeticHelper.coerceComplexToString)(sum);
      });
    }
  }, {
    key: "imsub",
    value: function imsub(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSUB'), function (arg1, arg2) {
        return (0, _ArithmeticHelper.coerceComplexToString)(sub(arg1, arg2));
      });
    }
  }, {
    key: "imexp",
    value: function imexp(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMEXP'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(exp(arg));
      });
    }
  }, {
    key: "imln",
    value: function imln(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMLN'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(ln(arg));
      });
    }
  }, {
    key: "imlog10",
    value: function imlog10(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMLOG10'), function (arg) {
        var _ln = ln(arg),
            _ln2 = _slicedToArray(_ln, 2),
            re = _ln2[0],
            im = _ln2[1];

        var c = Math.log(10);
        return (0, _ArithmeticHelper.coerceComplexToString)([re / c, im / c]);
      });
    }
  }, {
    key: "imlog2",
    value: function imlog2(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMLOG2'), function (arg) {
        var _ln3 = ln(arg),
            _ln4 = _slicedToArray(_ln3, 2),
            re = _ln4[0],
            im = _ln4[1];

        var c = Math.log(2);
        return (0, _ArithmeticHelper.coerceComplexToString)([re / c, im / c]);
      });
    }
  }, {
    key: "impower",
    value: function impower(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMPOWER'), function (arg, n) {
        return (0, _ArithmeticHelper.coerceComplexToString)(power(arg, n));
      });
    }
  }, {
    key: "imsqrt",
    value: function imsqrt(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('IMSQRT'), function (arg) {
        return (0, _ArithmeticHelper.coerceComplexToString)(power(arg, 0.5));
      });
    }
  }]);

  return ComplexPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.ComplexPlugin = ComplexPlugin;
ComplexPlugin.implementedFunctions = {
  'COMPLEX': {
    method: 'complex',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.STRING,
      defaultValue: 'i'
    }]
  },
  'IMABS': {
    method: 'imabs',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMAGINARY': {
    method: 'imaginary',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMREAL': {
    method: 'imreal',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMARGUMENT': {
    method: 'imargument',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCONJUGATE': {
    method: 'imconjugate',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCOS': {
    method: 'imcos',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCOSH': {
    method: 'imcosh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCOT': {
    method: 'imcot',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCSC': {
    method: 'imcsc',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMCSCH': {
    method: 'imcsch',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMSEC': {
    method: 'imsec',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMSECH': {
    method: 'imsech',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMSIN': {
    method: 'imsin',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMSINH': {
    method: 'imsinh',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMTAN': {
    method: 'imtan',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMDIV': {
    method: 'imdiv',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMPRODUCT': {
    method: 'improduct',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'IMSUM': {
    method: 'imsum',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'IMSUB': {
    method: 'imsub',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMEXP': {
    method: 'imexp',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMLN': {
    method: 'imln',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMLOG10': {
    method: 'imlog10',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMLOG2': {
    method: 'imlog2',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  },
  'IMPOWER': {
    method: 'impower',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }]
  },
  'IMSQRT': {
    method: 'imsqrt',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.COMPLEX
    }]
  }
};

function add(_ref9, _ref10) {
  var _ref11 = _slicedToArray(_ref9, 2),
      re1 = _ref11[0],
      im1 = _ref11[1];

  var _ref12 = _slicedToArray(_ref10, 2),
      re2 = _ref12[0],
      im2 = _ref12[1];

  return [re1 + re2, im1 + im2];
}

function sub(_ref13, _ref14) {
  var _ref15 = _slicedToArray(_ref13, 2),
      re1 = _ref15[0],
      im1 = _ref15[1];

  var _ref16 = _slicedToArray(_ref14, 2),
      re2 = _ref16[0],
      im2 = _ref16[1];

  return [re1 - re2, im1 - im2];
}

function mul(_ref17, _ref18) {
  var _ref19 = _slicedToArray(_ref17, 2),
      re1 = _ref19[0],
      im1 = _ref19[1];

  var _ref20 = _slicedToArray(_ref18, 2),
      re2 = _ref20[0],
      im2 = _ref20[1];

  return [re1 * re2 - im1 * im2, re1 * im2 + re2 * im1];
}

function div(_ref21, _ref22) {
  var _ref23 = _slicedToArray(_ref21, 2),
      re1 = _ref23[0],
      im1 = _ref23[1];

  var _ref24 = _slicedToArray(_ref22, 2),
      re2 = _ref24[0],
      im2 = _ref24[1];

  var denom = Math.pow(re2, 2) + Math.pow(im2, 2);

  var _mul = mul([re1, im1], [re2, -im2]),
      _mul2 = _slicedToArray(_mul, 2),
      nomRe = _mul2[0],
      nomIm = _mul2[1];

  return [nomRe / denom, nomIm / denom];
}

function cos(_ref25) {
  var _ref26 = _slicedToArray(_ref25, 2),
      re = _ref26[0],
      im = _ref26[1];

  return [Math.cos(re) * Math.cosh(im), -Math.sin(re) * Math.sinh(im)];
}

function cosh(_ref27) {
  var _ref28 = _slicedToArray(_ref27, 2),
      re = _ref28[0],
      im = _ref28[1];

  return [Math.cosh(re) * Math.cos(im), Math.sinh(re) * Math.sin(im)];
}

function sin(_ref29) {
  var _ref30 = _slicedToArray(_ref29, 2),
      re = _ref30[0],
      im = _ref30[1];

  return [Math.sin(re) * Math.cosh(im), Math.cos(re) * Math.sinh(im)];
}

function sinh(_ref31) {
  var _ref32 = _slicedToArray(_ref31, 2),
      re = _ref32[0],
      im = _ref32[1];

  return [Math.sinh(re) * Math.cos(im), Math.cosh(re) * Math.sin(im)];
}

function exp(_ref33) {
  var _ref34 = _slicedToArray(_ref33, 2),
      re = _ref34[0],
      im = _ref34[1];

  return [Math.exp(re) * Math.cos(im), Math.exp(re) * Math.sin(im)];
}

function abs(_ref35) {
  var _ref36 = _slicedToArray(_ref35, 2),
      re = _ref36[0],
      im = _ref36[1];

  return Math.sqrt(re * re + im * im);
}

function ln(_ref37) {
  var _ref38 = _slicedToArray(_ref37, 2),
      re = _ref38[0],
      im = _ref38[1];

  return [Math.log(abs([re, im])), Math.atan2(im, re)];
}

function power(arg, n) {
  var _ln5 = ln(arg),
      _ln6 = _slicedToArray(_ln5, 2),
      re = _ln6[0],
      im = _ln6[1];

  return exp([n * re, n * im]);
}

/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

__webpack_require__(50);

__webpack_require__(77);

__webpack_require__(81);

__webpack_require__(82);

__webpack_require__(92);

__webpack_require__(103);

__webpack_require__(109);

__webpack_require__(118);

__webpack_require__(119);

__webpack_require__(120);

__webpack_require__(122);

exports.__esModule = true;
exports.StatisticalAggregationPlugin = void 0;

__webpack_require__(176);

__webpack_require__(1);

__webpack_require__(137);

var _Cell = __webpack_require__(143);

var _errorMessage = __webpack_require__(238);

var _InterpreterValue = __webpack_require__(255);

var _jstat = __webpack_require__(403);

var _FunctionPlugin2 = __webpack_require__(248);

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var StatisticalAggregationPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(StatisticalAggregationPlugin, _FunctionPlugin);

  var _super = _createSuper(StatisticalAggregationPlugin);

  function StatisticalAggregationPlugin() {
    _classCallCheck(this, StatisticalAggregationPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(StatisticalAggregationPlugin, [{
    key: "avedev",
    value: function avedev(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('AVEDEV'), function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var coerced = _this.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        if (coerced.length === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        var avg = (0, _jstat.mean)(coerced);
        return coerced.reduce(function (a, b) {
          return a + Math.abs(b - avg);
        }, 0) / coerced.length;
      });
    }
  }, {
    key: "devsq",
    value: function devsq(ast, state) {
      var _this2 = this;

      return this.runFunction(ast.args, state, this.metadata('DEVSQ'), function () {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        var coerced = _this2.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        if (coerced.length === 0) {
          return 0;
        }

        return (0, _jstat.sumsqerr)(coerced);
      });
    }
  }, {
    key: "geomean",
    value: function geomean(ast, state) {
      var _this3 = this;

      return this.runFunction(ast.args, state, this.metadata('GEOMEAN'), function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var coerced = _this3.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        if (coerced.length === 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.OneValue);
        }

        var _iterator = _createForOfIteratorHelper(coerced),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var val = _step.value;

            if (val <= 0) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return (0, _jstat.geomean)(coerced);
      });
    }
  }, {
    key: "harmean",
    value: function harmean(ast, state) {
      var _this4 = this;

      return this.runFunction(ast.args, state, this.metadata('HARMEAN'), function () {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }

        var coerced = _this4.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        if (coerced.length === 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.OneValue);
        }

        var _iterator2 = _createForOfIteratorHelper(coerced),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var val = _step2.value;

            if (val <= 0) {
              return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.ValueSmall);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return coerced.length / coerced.reduce(function (a, b) {
          return a + 1 / b;
        }, 0);
      });
    }
  }, {
    key: "correl",
    value: function correl(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CORREL'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
        }

        return (0, _jstat.corrcoeff)(ret[0], ret[1]);
      });
    }
  }, {
    key: "rsq",
    value: function rsq(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('RSQ'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
        }

        return Math.pow((0, _jstat.corrcoeff)(ret[0], ret[1]), 2);
      });
    }
  }, {
    key: "covariancep",
    value: function covariancep(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COVARIANCE.P'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n < 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.OneValue);
        }

        if (n === 1) {
          return 0;
        }

        return (0, _jstat.covariance)(ret[0], ret[1]) * (n - 1) / n;
      });
    }
  }, {
    key: "covariances",
    value: function covariances(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('COVARIANCE.S'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
        }

        return (0, _jstat.covariance)(ret[0], ret[1]);
      });
    }
  }, {
    key: "ztest",
    value: function ztest(ast, state) {
      var _this5 = this;

      return this.runFunction(ast.args, state, this.metadata('Z.TEST'), function (range, x, sigma) {
        var vals = _this5.arithmeticHelper.manyToExactNumbers(range.valuesFromTopLeftCorner());

        if (vals instanceof _Cell.CellError) {
          return vals;
        }

        var n = vals.length;

        if (sigma === undefined) {
          if (n < 2) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
          }

          sigma = (0, _jstat.stdev)(vals, true);
        }

        if (n < 1) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.OneValue);
        }

        if (sigma === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return 1 - _jstat.normal.cdf(((0, _jstat.mean)(vals) - x) / (sigma / Math.sqrt(n)), 0, 1);
      });
    }
  }, {
    key: "ftest",
    value: function ftest(ast, state) {
      var _this6 = this;

      return this.runFunction(ast.args, state, this.metadata('F.TEST'), function (dataX, dataY) {
        var arrX = _this6.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());

        var arrY = _this6.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());

        if (arrX instanceof _Cell.CellError) {
          return arrX;
        }

        if (arrY instanceof _Cell.CellError) {
          return arrY;
        }

        if (arrX.length <= 1 || arrY.length <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        var vx = (0, _jstat.variance)(arrX, true);
        var vy = (0, _jstat.variance)(arrY, true);

        if (vx === 0 || vy === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        var r = vx / vy;

        var v = _jstat.centralF.cdf(r, arrX.length - 1, arrY.length - 1);

        return 2 * Math.min(v, 1 - v);
      });
    }
  }, {
    key: "steyx",
    value: function steyx(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('STEYX'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n <= 2) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.ThreeValues);
        }

        return Math.sqrt(((0, _jstat.sumsqerr)(ret[0]) - Math.pow((0, _jstat.covariance)(ret[0], ret[1]) * (n - 1), 2) / (0, _jstat.sumsqerr)(ret[1])) / (n - 2));
      });
    }
  }, {
    key: "slope",
    value: function slope(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('SLOPE'), function (dataX, dataY) {
        if (dataX.numberOfElements() !== dataY.numberOfElements()) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        var n = ret[0].length;

        if (n <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
        }

        return (0, _jstat.covariance)(ret[0], ret[1]) * (n - 1) / (0, _jstat.sumsqerr)(ret[1]);
      });
    }
  }, {
    key: "chisqtest",
    value: function chisqtest(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('CHISQ.TEST'), function (dataX, dataY) {
        var r = dataX.height();
        var c = dataX.width();

        if (dataY.height() !== r || dataY.width() !== c) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
        }

        var ret = parseTwoArrays(dataX, dataY);

        if (ret instanceof _Cell.CellError) {
          return ret;
        }

        if (ret[0].length <= 1) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
        }

        var sum = 0;

        for (var i = 0; i < ret[0].length; i++) {
          if (ret[1][i] === 0) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }

          sum += Math.pow(ret[0][i] - ret[1][i], 2) / ret[1][i];
        }

        if (sum < 0) {
          return new _Cell.CellError(_Cell.ErrorType.NUM, _errorMessage.ErrorMessage.NaN);
        }

        return 1 - _jstat.chisquare.cdf(sum, r > 1 && c > 1 ? (r - 1) * (c - 1) : r * c - 1);
      });
    }
  }, {
    key: "ttest",
    value: function ttest(ast, state) {
      var _this7 = this;

      return this.runFunction(ast.args, state, this.metadata('T.TEST'), function (dataX, dataY, tails, type) {
        var arrX = _this7.arithmeticHelper.manyToExactNumbers(dataX.valuesFromTopLeftCorner());

        var arrY = _this7.arithmeticHelper.manyToExactNumbers(dataY.valuesFromTopLeftCorner());

        if (arrX instanceof _Cell.CellError) {
          return arrX;
        }

        if (arrY instanceof _Cell.CellError) {
          return arrY;
        }

        var n = arrX.length;
        var m = arrY.length;

        if (type === 1) {
          if (m !== n) {
            return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
          }

          if (n <= 1) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
          }

          var sub = Array(n);

          for (var i = 0; i < n; i++) {
            sub[i] = arrX[i] - arrY[i];
          }

          var s = (0, _jstat.stdev)(sub, true);

          if (s === 0) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }

          var t = Math.abs(Math.sqrt(n) * (0, _jstat.mean)(sub) / s);
          return tails * (1 - _jstat.studentt.cdf(t, n - 1));
        } else if (type === 2) {
          if (n <= 1 || m <= 1) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
          }

          var _s = ((0, _jstat.sumsqerr)(arrX) + (0, _jstat.sumsqerr)(arrY)) / (n + m - 2);

          if (_s === 0) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }

          var _t = Math.abs(((0, _jstat.mean)(arrX) - (0, _jstat.mean)(arrY)) / Math.sqrt(_s * (1 / n + 1 / m)));

          return tails * (1 - _jstat.studentt.cdf(_t, n + m - 2));
        } else {
          //type === 3
          if (n <= 1 || m <= 1) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.TwoValues);
          }

          var sx = (0, _jstat.variance)(arrX, true);
          var sy = (0, _jstat.variance)(arrY, true);

          if (sx === 0 && sy === 0) {
            return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
          }

          var _t2 = Math.abs(((0, _jstat.mean)(arrX) - (0, _jstat.mean)(arrY)) / Math.sqrt(sx / n + sy / m));

          var v = Math.pow(sx / n + sy / m, 2) / (Math.pow(sx / n, 2) / (n - 1) + Math.pow(sy / m, 2) / (m - 1));
          return tails * (1 - _jstat.studentt.cdf(_t2, v));
        }
      });
    }
  }, {
    key: "skew",
    value: function skew(ast, state) {
      var _this8 = this;

      return this.runFunction(ast.args, state, this.metadata('SKEW'), function () {
        for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
          args[_key5] = arguments[_key5];
        }

        var coerced = _this8.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        var n = coerced.length;

        if (n < 3) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.ThreeValues);
        }

        var avg = (0, _jstat.mean)(coerced);
        var s = (0, _jstat.stdev)(coerced, true);

        if (s === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return coerced.reduce(function (a, b) {
          return a + Math.pow((b - avg) / s, 3);
        }, 0) * n / (n - 1) / (n - 2);
      });
    }
  }, {
    key: "skewp",
    value: function skewp(ast, state) {
      var _this9 = this;

      return this.runFunction(ast.args, state, this.metadata('SKEW.P'), function () {
        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        var coerced = _this9.arithmeticHelper.coerceNumbersExactRanges(args);

        if (coerced instanceof _Cell.CellError) {
          return coerced;
        }

        var n = coerced.length;

        if (n < 3) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO, _errorMessage.ErrorMessage.ThreeValues);
        }

        var avg = (0, _jstat.mean)(coerced);
        var s = (0, _jstat.stdev)(coerced, false);

        if (s === 0) {
          return new _Cell.CellError(_Cell.ErrorType.DIV_BY_ZERO);
        }

        return coerced.reduce(function (a, b) {
          return a + Math.pow((b - avg) / s, 3);
        }, 0) / n;
      });
    }
  }]);

  return StatisticalAggregationPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.StatisticalAggregationPlugin = StatisticalAggregationPlugin;
StatisticalAggregationPlugin.implementedFunctions = {
  'AVEDEV': {
    method: 'avedev',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'DEVSQ': {
    method: 'devsq',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'GEOMEAN': {
    method: 'geomean',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'HARMEAN': {
    method: 'harmean',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'CORREL': {
    method: 'correl',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'RSQ': {
    method: 'rsq',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'COVARIANCE.P': {
    method: 'covariancep',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'COVARIANCE.S': {
    method: 'covariances',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'Z.TEST': {
    method: 'ztest',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.NUMBER,
      optionalArg: true
    }]
  },
  'F.TEST': {
    method: 'ftest',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'STEYX': {
    method: 'steyx',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'SLOPE': {
    method: 'slope',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'CHISQ.TEST': {
    method: 'chisqtest',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }]
  },
  'T.TEST': {
    method: 'ttest',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1,
      maxValue: 2
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1,
      maxValue: 3
    }]
  },
  'SKEW': {
    method: 'skew',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  },
  'SKEW.P': {
    method: 'skewp',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }],
    repeatLastArgs: 1
  }
};
StatisticalAggregationPlugin.aliases = {
  COVAR: 'COVARIANCE.P',
  FTEST: 'F.TEST',
  PEARSON: 'CORREL',
  ZTEST: 'Z.TEST',
  CHITEST: 'CHISQ.TEST',
  TTEST: 'T.TEST',
  COVARIANCEP: 'COVARIANCE.P',
  COVARIANCES: 'COVARIANCE.S',
  SKEWP: 'SKEW.P'
};

function parseTwoArrays(dataX, dataY) {
  var xit = dataX.iterateValuesFromTopLeftCorner();
  var yit = dataY.iterateValuesFromTopLeftCorner();
  var x, y;
  var arrX = [];
  var arrY = [];

  while (x = xit.next(), y = yit.next(), !x.done && !y.done) {
    var xval = x.value;
    var yval = y.value;

    if (xval instanceof _Cell.CellError) {
      return xval;
    } else if (yval instanceof _Cell.CellError) {
      return yval;
    } else if ((0, _InterpreterValue.isExtendedNumber)(xval) && (0, _InterpreterValue.isExtendedNumber)(yval)) {
      arrX.push((0, _InterpreterValue.getRawValue)(xval));
      arrY.push((0, _InterpreterValue.getRawValue)(yval));
    }
  }

  return [arrX, arrY];
}

/***/ })
/******/ ])["default"];
});