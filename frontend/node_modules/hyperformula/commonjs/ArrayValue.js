"use strict";

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.regexp.exec.js");

exports.__esModule = true;
exports.NotComputedArray = exports.ErroredArray = exports.ArrayValue = void 0;

require("core-js/modules/es.array.splice.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.fill.js");

var _ArraySize = require("./ArraySize");

var _InterpreterValue = require("./interpreter/InterpreterValue");

var _SimpleRangeValue = require("./interpreter/SimpleRangeValue");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var NotComputedArray = /*#__PURE__*/function () {
  function NotComputedArray(size) {
    _classCallCheck(this, NotComputedArray);

    this.size = size;
  }

  _createClass(NotComputedArray, [{
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    } // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "get",
    value: function get(col, row) {
      throw Error('Array not computed yet.');
    }
  }, {
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      throw Error('Array not computed yet.');
    }
  }]);

  return NotComputedArray;
}();

exports.NotComputedArray = NotComputedArray;

var ArrayValue = /*#__PURE__*/function () {
  function ArrayValue(array) {
    _classCallCheck(this, ArrayValue);

    this.size = new _ArraySize.ArraySize(array.length > 0 ? array[0].length : 0, array.length);
    this.array = array;
  }

  _createClass(ArrayValue, [{
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      return _SimpleRangeValue.SimpleRangeValue.onlyValues(this.array);
    }
  }, {
    key: "addRows",
    value: function addRows(aboveRow, numberOfRows) {
      var _this$array;

      (_this$array = this.array).splice.apply(_this$array, [aboveRow, 0].concat(_toConsumableArray(this.nullArrays(numberOfRows, this.width()))));

      this.size.height += numberOfRows;
    }
  }, {
    key: "addColumns",
    value: function addColumns(aboveColumn, numberOfColumns) {
      for (var i = 0; i < this.height(); i++) {
        var _this$array$i;

        (_this$array$i = this.array[i]).splice.apply(_this$array$i, [aboveColumn, 0].concat(_toConsumableArray(new Array(numberOfColumns).fill(_InterpreterValue.EmptyValue))));
      }

      this.size.width += numberOfColumns;
    }
  }, {
    key: "removeRows",
    value: function removeRows(startRow, endRow) {
      if (this.outOfBound(0, startRow) || this.outOfBound(0, endRow)) {
        throw Error('Array index out of bound');
      }

      var numberOfRows = endRow - startRow + 1;
      this.array.splice(startRow, numberOfRows);
      this.size.height -= numberOfRows;
    }
  }, {
    key: "removeColumns",
    value: function removeColumns(leftmostColumn, rightmostColumn) {
      if (this.outOfBound(leftmostColumn, 0) || this.outOfBound(rightmostColumn, 0)) {
        throw Error('Array index out of bound');
      }

      var numberOfColumns = rightmostColumn - leftmostColumn + 1;

      var _iterator = _createForOfIteratorHelper(this.array),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var row = _step.value;
          row.splice(leftmostColumn, numberOfColumns);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      this.size.width -= numberOfColumns;
    }
  }, {
    key: "nullArrays",
    value: function nullArrays(count, size) {
      var result = [];

      for (var i = 0; i < count; ++i) {
        result.push(new Array(size).fill(_InterpreterValue.EmptyValue));
      }

      return result;
    }
  }, {
    key: "get",
    value: function get(col, row) {
      if (this.outOfBound(col, row)) {
        throw Error('Array index out of bound');
      }

      return this.array[row][col];
    }
  }, {
    key: "set",
    value: function set(col, row, value) {
      if (this.outOfBound(col, row)) {
        throw Error('Array index out of bound');
      }

      this.array[row][col] = value;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    }
  }, {
    key: "raw",
    value: function raw() {
      return this.array;
    }
  }, {
    key: "resize",
    value: function resize(newSize) {
      if (this.height() < newSize.height && isFinite(newSize.height)) {
        this.addRows(this.height(), newSize.height - this.height());
      }

      if (this.height() > newSize.height) {
        throw 'Resizing to smaller array';
      }

      if (this.width() < newSize.width && isFinite(newSize.width)) {
        this.addColumns(this.width(), newSize.width - this.width());
      }

      if (this.width() > newSize.width) {
        throw 'Resizing to smaller array';
      }
    }
  }, {
    key: "outOfBound",
    value: function outOfBound(col, row) {
      return col < 0 || row < 0 || row > this.size.height - 1 || col > this.size.width - 1;
    }
  }], [{
    key: "fromInterpreterValue",
    value: function fromInterpreterValue(value) {
      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        return new ArrayValue(value.data);
      } else {
        return new ArrayValue([[value]]);
      }
    }
  }]);

  return ArrayValue;
}();

exports.ArrayValue = ArrayValue;

var ErroredArray = /*#__PURE__*/function () {
  function ErroredArray(error, size) {
    _classCallCheck(this, ErroredArray);

    this.error = error;
    this.size = size;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  _createClass(ErroredArray, [{
    key: "get",
    value: function get(col, row) {
      return this.error;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width;
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height;
    }
  }, {
    key: "simpleRangeValue",
    value: function simpleRangeValue() {
      return this.error;
    }
  }]);

  return ErroredArray;
}();

exports.ErroredArray = ErroredArray;