"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

exports.__esModule = true;
exports.SimpleRangeValue = void 0;

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("regenerator-runtime/runtime.js");

var _ArraySize = require("../ArraySize");

var _Cell = require("../Cell");

var _errorMessage = require("../error-message");

var _InterpreterValue = require("./InterpreterValue");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var SimpleRangeValue = /*#__PURE__*/function () {
  function SimpleRangeValue(_data, range, dependencyGraph, _hasOnlyNumbers) {
    _classCallCheck(this, SimpleRangeValue);

    this._data = _data;
    this.range = range;
    this.dependencyGraph = dependencyGraph;
    this._hasOnlyNumbers = _hasOnlyNumbers;

    if (_data === undefined) {
      this.size = new _ArraySize.ArraySize(range.effectiveWidth(dependencyGraph), range.effectiveHeight(dependencyGraph));
    } else {
      this.size = new _ArraySize.ArraySize(_data[0].length, _data.length);
    }
  }

  _createClass(SimpleRangeValue, [{
    key: "data",
    get: function get() {
      this.ensureThatComputed();
      return this._data;
    }
  }, {
    key: "isAdHoc",
    value: function isAdHoc() {
      return this.range === undefined;
    }
  }, {
    key: "width",
    value: function width() {
      return this.size.width; //should be equal to this.data[0].length
    }
  }, {
    key: "height",
    value: function height() {
      return this.size.height; //should be equal to this.data.length
    }
  }, {
    key: "valuesFromTopLeftCorner",
    value: function valuesFromTopLeftCorner() {
      this.ensureThatComputed();
      var ret = [];

      for (var i = 0; i < this._data.length; i++) {
        for (var j = 0; j < this._data[0].length; j++) {
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          ret.push(this._data[i][j]);
        }
      }

      return ret;
    }
  }, {
    key: "effectiveAddressesFromData",
    value: /*#__PURE__*/regeneratorRuntime.mark(function effectiveAddressesFromData(leftCorner) {
      var row, rowData, col;
      return regeneratorRuntime.wrap(function effectiveAddressesFromData$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              row = 0;

            case 1:
              if (!(row < this.data.length)) {
                _context.next = 13;
                break;
              }

              rowData = this.data[row];
              col = 0;

            case 4:
              if (!(col < rowData.length)) {
                _context.next = 10;
                break;
              }

              _context.next = 7;
              return (0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + col, leftCorner.row + row);

            case 7:
              ++col;
              _context.next = 4;
              break;

            case 10:
              ++row;
              _context.next = 1;
              break;

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, effectiveAddressesFromData, this);
    })
  }, {
    key: "entriesFromTopLeftCorner",
    value: /*#__PURE__*/regeneratorRuntime.mark(function entriesFromTopLeftCorner(leftCorner) {
      var row, col;
      return regeneratorRuntime.wrap(function entriesFromTopLeftCorner$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              this.ensureThatComputed();
              row = 0;

            case 2:
              if (!(row < this.size.height)) {
                _context2.next = 13;
                break;
              }

              col = 0;

            case 4:
              if (!(col < this.size.width)) {
                _context2.next = 10;
                break;
              }

              _context2.next = 7;
              return [this._data[row][col], (0, _Cell.simpleCellAddress)(leftCorner.sheet, leftCorner.col + col, leftCorner.row + row)];

            case 7:
              ++col;
              _context2.next = 4;
              break;

            case 10:
              ++row;
              _context2.next = 2;
              break;

            case 13:
            case "end":
              return _context2.stop();
          }
        }
      }, entriesFromTopLeftCorner, this);
    })
  }, {
    key: "iterateValuesFromTopLeftCorner",
    value: /*#__PURE__*/regeneratorRuntime.mark(function iterateValuesFromTopLeftCorner() {
      return regeneratorRuntime.wrap(function iterateValuesFromTopLeftCorner$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.delegateYield(this.valuesFromTopLeftCorner(), "t0", 1);

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, iterateValuesFromTopLeftCorner, this);
    })
  }, {
    key: "numberOfElements",
    value: function numberOfElements() {
      return this.size.width * this.size.height;
    }
  }, {
    key: "hasOnlyNumbers",
    value: function hasOnlyNumbers() {
      if (this._hasOnlyNumbers === undefined) {
        this._hasOnlyNumbers = true;

        var _iterator = _createForOfIteratorHelper(this.data),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var row = _step.value;

            var _iterator2 = _createForOfIteratorHelper(row),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var v = _step2.value;

                if (typeof v !== 'number') {
                  this._hasOnlyNumbers = false;
                  return false;
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return this._hasOnlyNumbers;
    }
  }, {
    key: "rawNumbers",
    value: function rawNumbers() {
      return this._data;
    }
  }, {
    key: "rawData",
    value: function rawData() {
      var _a;

      this.ensureThatComputed();
      return (_a = this._data) !== null && _a !== void 0 ? _a : [];
    }
  }, {
    key: "sameDimensionsAs",
    value: function sameDimensionsAs(other) {
      return this.width() === other.width() && this.height() === other.height();
    }
  }, {
    key: "ensureThatComputed",
    value: function ensureThatComputed() {
      var _this = this;

      if (this._data !== undefined) {
        return;
      }

      this._hasOnlyNumbers = true;
      this._data = this.range.addressesArrayMap(this.dependencyGraph, function (cellFromRange) {
        var value = _this.dependencyGraph.getCellValue(cellFromRange);

        if (value instanceof SimpleRangeValue) {
          _this._hasOnlyNumbers = false;
          return new _Cell.CellError(_Cell.ErrorType.VALUE, _errorMessage.ErrorMessage.ScalarExpected);
        } else if ((0, _InterpreterValue.isExtendedNumber)(value)) {
          return value;
        } else {
          _this._hasOnlyNumbers = false;
          return value;
        }
      });
    }
  }], [{
    key: "fromRange",
    value: function fromRange(data, range, dependencyGraph) {
      return new SimpleRangeValue(data, range, dependencyGraph, true);
    }
  }, {
    key: "onlyNumbers",
    value: function onlyNumbers(data) {
      return new SimpleRangeValue(data, undefined, undefined, true);
    }
  }, {
    key: "onlyValues",
    value: function onlyValues(data) {
      return new SimpleRangeValue(data, undefined, undefined, undefined);
    }
  }, {
    key: "onlyRange",
    value: function onlyRange(range, dependencyGraph) {
      return new SimpleRangeValue(undefined, range, dependencyGraph, undefined);
    }
  }, {
    key: "fromScalar",
    value: function fromScalar(scalar) {
      return new SimpleRangeValue([[scalar]], undefined, undefined, undefined);
    }
  }]);

  return SimpleRangeValue;
}();

exports.SimpleRangeValue = SimpleRangeValue;