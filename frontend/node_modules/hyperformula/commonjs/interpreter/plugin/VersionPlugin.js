"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

exports.__esModule = true;
exports.VersionPlugin = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.concat.js");

var _HyperFormula = require("../../HyperFormula");

var _FunctionPlugin2 = require("./FunctionPlugin");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var LICENSE_STATUS_MAP = new Map([['gpl-v3', 1], ["missing"
/* MISSING */
, 2], ["invalid"
/* INVALID */
, 3], ["expired"
/* EXPIRED */
, 4]]);

var VersionPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(VersionPlugin, _FunctionPlugin);

  var _super = _createSuper(VersionPlugin);

  function VersionPlugin() {
    _classCallCheck(this, VersionPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(VersionPlugin, [{
    key: "version",
    value: function version(ast, state) {
      var _this = this;

      return this.runFunction(ast.args, state, this.metadata('VERSION'), function () {
        var _this$config = _this.config,
            validityState = _this$config.licenseKeyValidityState,
            licenseKey = _this$config.licenseKey;
        var status;

        if (LICENSE_STATUS_MAP.has(licenseKey)) {
          status = LICENSE_STATUS_MAP.get(licenseKey);
        } else if (LICENSE_STATUS_MAP.has(validityState)) {
          status = LICENSE_STATUS_MAP.get(validityState);
        } else if (validityState === "valid"
        /* VALID */
        ) {
          status = licenseKey.slice(-5);
        }

        return "HyperFormula v".concat(_HyperFormula.HyperFormula.version, ", ").concat(status);
      });
    }
  }]);

  return VersionPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.VersionPlugin = VersionPlugin;
VersionPlugin.implementedFunctions = {
  'VERSION': {
    method: 'version',
    parameters: []
  }
};