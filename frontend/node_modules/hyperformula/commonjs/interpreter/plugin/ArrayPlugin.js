"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

exports.__esModule = true;
exports.ArrayPlugin = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.number.is-integer.js");

require("core-js/modules/es.number.constructor.js");

require("core-js/modules/es.object.get-prototype-of.js");

var _ArraySize = require("../../ArraySize");

var _Cell = require("../../Cell");

var _errorMessage = require("../../error-message");

var _parser = require("../../parser");

var _ArithmeticHelper = require("../ArithmeticHelper");

var _InterpreterState = require("../InterpreterState");

var _SimpleRangeValue = require("../SimpleRangeValue");

var _FunctionPlugin2 = require("./FunctionPlugin");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ArrayPlugin = /*#__PURE__*/function (_FunctionPlugin) {
  _inherits(ArrayPlugin, _FunctionPlugin);

  var _super = _createSuper(ArrayPlugin);

  function ArrayPlugin() {
    _classCallCheck(this, ArrayPlugin);

    return _super.apply(this, arguments);
  }

  _createClass(ArrayPlugin, [{
    key: "arrayformula",
    value: function arrayformula(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ARRAYFORMULA'), function (value) {
        return value;
      });
    }
  }, {
    key: "arrayformulaArraySize",
    value: function arrayformulaArraySize(ast, state) {
      var _this = this;

      if (ast.args.length !== 1) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('ARRAYFORMULA');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      return subChecks[0];
    }
  }, {
    key: "arrayconstrain",
    value: function arrayconstrain(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('ARRAY_CONSTRAIN'), function (range, numRows, numCols) {
        numRows = Math.min(numRows, range.height());
        numCols = Math.min(numCols, range.width());
        var data = range.data;
        var ret = [];

        for (var i = 0; i < numRows; i++) {
          ret.push(data[i].slice(0, numCols));
        }

        return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
      });
    }
  }, {
    key: "arrayconstrainArraySize",
    value: function arrayconstrainArraySize(ast, state) {
      var _this2 = this;

      if (ast.args.length !== 3) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('ARRAY_CONSTRAIN');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this2.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var _subChecks$ = subChecks[0],
          height = _subChecks$.height,
          width = _subChecks$.width;

      if (ast.args[1].type === _parser.AstNodeType.NUMBER) {
        height = Math.min(height, ast.args[1].value);
      }

      if (ast.args[2].type === _parser.AstNodeType.NUMBER) {
        width = Math.min(width, ast.args[2].value);
      }

      if (height < 1 || width < 1 || !Number.isInteger(height) || !Number.isInteger(width)) {
        return _ArraySize.ArraySize.error();
      }

      return new _ArraySize.ArraySize(width, height);
    }
  }, {
    key: "filter",
    value: function filter(ast, state) {
      return this.runFunction(ast.args, state, this.metadata('FILTER'), function (rangeVals) {
        for (var _len = arguments.length, rangeFilters = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rangeFilters[_key - 1] = arguments[_key];
        }

        for (var _i = 0, _rangeFilters = rangeFilters; _i < _rangeFilters.length; _i++) {
          var filter = _rangeFilters[_i];

          if (rangeVals.width() !== filter.width() || rangeVals.height() !== filter.height()) {
            return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EqualLength);
          }
        }

        if (rangeVals.width() > 1 && rangeVals.height() > 1) {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.WrongDimension);
        }

        var vals = rangeVals.data;
        var ret = [];

        for (var i = 0; i < rangeVals.height(); i++) {
          var row = [];

          for (var j = 0; j < rangeVals.width(); j++) {
            var ok = true;

            var _iterator = _createForOfIteratorHelper(rangeFilters),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _filter = _step.value;
                var val = (0, _ArithmeticHelper.coerceScalarToBoolean)(_filter.data[i][j]);

                if (val !== true) {
                  ok = false;
                  break;
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            if (ok) {
              row.push(vals[i][j]);
            }
          }

          if (row.length > 0) {
            ret.push(row);
          }
        }

        if (ret.length > 0) {
          return _SimpleRangeValue.SimpleRangeValue.onlyValues(ret);
        } else {
          return new _Cell.CellError(_Cell.ErrorType.NA, _errorMessage.ErrorMessage.EmptyRange);
        }
      });
    }
  }, {
    key: "filterArraySize",
    value: function filterArraySize(ast, state) {
      var _this3 = this;

      if (ast.args.length <= 1) {
        return _ArraySize.ArraySize.error();
      }

      var metadata = this.metadata('FILTER');
      var subChecks = ast.args.map(function (arg) {
        var _a;

        return _this3.arraySizeForAst(arg, new _InterpreterState.InterpreterState(state.formulaAddress, state.arraysFlag || ((_a = metadata === null || metadata === void 0 ? void 0 : metadata.arrayFunction) !== null && _a !== void 0 ? _a : false)));
      });
      var width = Math.max.apply(Math, _toConsumableArray(subChecks.map(function (val) {
        return val.width;
      })));
      var height = Math.max.apply(Math, _toConsumableArray(subChecks.map(function (val) {
        return val.height;
      })));
      return new _ArraySize.ArraySize(width, height);
    }
  }]);

  return ArrayPlugin;
}(_FunctionPlugin2.FunctionPlugin);

exports.ArrayPlugin = ArrayPlugin;
ArrayPlugin.implementedFunctions = {
  'ARRAYFORMULA': {
    method: 'arrayformula',
    arraySizeMethod: 'arrayformulaArraySize',
    arrayFunction: true,
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.ANY
    }]
  },
  'ARRAY_CONSTRAIN': {
    method: 'arrayconstrain',
    arraySizeMethod: 'arrayconstrainArraySize',
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.INTEGER,
      minValue: 1
    }],
    vectorizationForbidden: true
  },
  'FILTER': {
    method: 'filter',
    arraySizeMethod: 'filterArraySize',
    arrayFunction: true,
    parameters: [{
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }, {
      argumentType: _FunctionPlugin2.ArgumentTypes.RANGE
    }],
    repeatLastArgs: 1
  }
};