"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

exports.__esModule = true;
exports.ArrayMapping = void 0;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.dom-collections.for-each.js");

var _Cell = require("../Cell");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ArrayMapping = /*#__PURE__*/function () {
  function ArrayMapping() {
    _classCallCheck(this, ArrayMapping);

    this.arrayMapping = new Map();
  }

  _createClass(ArrayMapping, [{
    key: "getArray",
    value: function getArray(range) {
      var array = this.getArrayByCorner(range.start);

      if (array === null || array === void 0 ? void 0 : array.getRange().sameAs(range)) {
        return array;
      }

      return;
    }
  }, {
    key: "getArrayByCorner",
    value: function getArrayByCorner(address) {
      return this.arrayMapping.get((0, _Cell.addressKey)(address));
    }
  }, {
    key: "setArray",
    value: function setArray(range, vertex) {
      this.arrayMapping.set((0, _Cell.addressKey)(range.start), vertex);
    }
  }, {
    key: "removeArray",
    value: function removeArray(range) {
      if (typeof range === 'string') {
        this.arrayMapping.delete(range);
      } else {
        this.arrayMapping.delete((0, _Cell.addressKey)(range.start));
      }
    }
  }, {
    key: "count",
    value: function count() {
      return this.arrayMapping.size;
    }
  }, {
    key: "arraysInRows",
    value: /*#__PURE__*/regeneratorRuntime.mark(function arraysInRows(rowsSpan) {
      var _iterator, _step, _step$value, mtxKey, mtx;

      return regeneratorRuntime.wrap(function arraysInRows$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _iterator = _createForOfIteratorHelper(this.arrayMapping.entries());
              _context.prev = 1;

              _iterator.s();

            case 3:
              if ((_step = _iterator.n()).done) {
                _context.next = 10;
                break;
              }

              _step$value = _slicedToArray(_step.value, 2), mtxKey = _step$value[0], mtx = _step$value[1];

              if (!mtx.spansThroughSheetRows(rowsSpan.sheet, rowsSpan.rowStart, rowsSpan.rowEnd)) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [mtxKey, mtx];

            case 8:
              _context.next = 3;
              break;

            case 10:
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);

              _iterator.e(_context.t0);

            case 15:
              _context.prev = 15;

              _iterator.f();

              return _context.finish(15);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, arraysInRows, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "arraysInCols",
    value: /*#__PURE__*/regeneratorRuntime.mark(function arraysInCols(col) {
      var _iterator2, _step2, _step2$value, mtxKey, mtx;

      return regeneratorRuntime.wrap(function arraysInCols$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _iterator2 = _createForOfIteratorHelper(this.arrayMapping.entries());
              _context2.prev = 1;

              _iterator2.s();

            case 3:
              if ((_step2 = _iterator2.n()).done) {
                _context2.next = 10;
                break;
              }

              _step2$value = _slicedToArray(_step2.value, 2), mtxKey = _step2$value[0], mtx = _step2$value[1];

              if (!mtx.spansThroughSheetColumn(col.sheet, col.columnStart, col.columnEnd)) {
                _context2.next = 8;
                break;
              }

              _context2.next = 8;
              return [mtxKey, mtx];

            case 8:
              _context2.next = 3;
              break;

            case 10:
              _context2.next = 15;
              break;

            case 12:
              _context2.prev = 12;
              _context2.t0 = _context2["catch"](1);

              _iterator2.e(_context2.t0);

            case 15:
              _context2.prev = 15;

              _iterator2.f();

              return _context2.finish(15);

            case 18:
            case "end":
              return _context2.stop();
          }
        }
      }, arraysInCols, this, [[1, 12, 15, 18]]);
    })
  }, {
    key: "isFormulaArrayInRow",
    value: function isFormulaArrayInRow(sheet, row) {
      var _iterator3 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var mtx = _step3.value;

          if (mtx.spansThroughSheetRows(sheet, row)) {
            return true;
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayInAllRows",
    value: function isFormulaArrayInAllRows(span) {
      var result = true;

      var _iterator4 = _createForOfIteratorHelper(span.rows()),
          _step4;

      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var row = _step4.value;

          if (!this.isFormulaArrayInRow(span.sheet, row)) {
            result = false;
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }

      return result;
    }
  }, {
    key: "isFormulaArrayInColumn",
    value: function isFormulaArrayInColumn(sheet, column) {
      var _iterator5 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step5;

      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var mtx = _step5.value;

          if (mtx.spansThroughSheetColumn(sheet, column)) {
            return true;
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayInAllColumns",
    value: function isFormulaArrayInAllColumns(span) {
      var result = true;

      var _iterator6 = _createForOfIteratorHelper(span.columns()),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var col = _step6.value;

          if (!this.isFormulaArrayInColumn(span.sheet, col)) {
            result = false;
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      return result;
    }
  }, {
    key: "isFormulaArrayInRange",
    value: function isFormulaArrayInRange(range) {
      var _iterator7 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step7;

      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var mtx = _step7.value;

          if (mtx.getRange().doesOverlap(range)) {
            return true;
          }
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }

      return false;
    }
  }, {
    key: "isFormulaArrayAtAddress",
    value: function isFormulaArrayAtAddress(address) {
      var _iterator8 = _createForOfIteratorHelper(this.arrayMapping.values()),
          _step8;

      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var mtx = _step8.value;

          if (mtx.getRange().addressInRange(address)) {
            return true;
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }

      return false;
    }
  }, {
    key: "moveArrayVerticesAfterRowByRows",
    value: function moveArrayVerticesAfterRowByRows(sheet, row, numberOfRows) {
      this.updateArrayVerticesInSheet(sheet, function (key, vertex) {
        var range = vertex.getRange();
        return row <= range.start.row ? [range.shifted(0, numberOfRows), vertex] : undefined;
      });
    }
  }, {
    key: "moveArrayVerticesAfterColumnByColumns",
    value: function moveArrayVerticesAfterColumnByColumns(sheet, column, numberOfColumns) {
      this.updateArrayVerticesInSheet(sheet, function (key, vertex) {
        var range = vertex.getRange();
        return column <= range.start.col ? [range.shifted(numberOfColumns, 0), vertex] : undefined;
      });
    }
  }, {
    key: "updateArrayVerticesInSheet",
    value: function updateArrayVerticesInSheet(sheet, fn) {
      var _this = this;

      var updated = Array();

      var _iterator9 = _createForOfIteratorHelper(this.arrayMapping.entries()),
          _step9;

      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _step9$value = _slicedToArray(_step9.value, 2),
              key = _step9$value[0],
              vertex = _step9$value[1];

          if (vertex.sheet !== sheet) {
            continue;
          }

          var result = fn(key, vertex);

          if (result !== undefined) {
            this.removeArray(key);
            updated.push(result);
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }

      updated.forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            range = _ref2[0],
            array = _ref2[1];

        _this.setArray(range, array);
      });
    }
  }]);

  return ArrayMapping;
}();

exports.ArrayMapping = ArrayMapping;