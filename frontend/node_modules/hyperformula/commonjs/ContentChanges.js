"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

exports.__esModule = true;
exports.ContentChanges = void 0;

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.array.from.js");

var _Cell = require("./Cell");

var _SimpleRangeValue = require("./interpreter/SimpleRangeValue");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var ContentChanges = /*#__PURE__*/function () {
  function ContentChanges() {
    _classCallCheck(this, ContentChanges);

    this.changes = new Map();
  }

  _createClass(ContentChanges, [{
    key: "addAll",
    value: function addAll(other) {
      var _iterator = _createForOfIteratorHelper(other.changes.values()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var change = _step.value;
          this.add(change.address, change);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return this;
    }
  }, {
    key: "addChange",
    value: function addChange(newValue, address, oldValue) {
      this.addInterpreterValue(newValue, address, oldValue);
    }
  }, {
    key: "exportChanges",
    value: function exportChanges(exporter) {
      var ret = [];
      this.changes.forEach(function (e) {
        var change = exporter.exportChange(e);

        if (Array.isArray(change)) {
          ret = ret.concat(change);
        } else {
          ret.push(change);
        }
      });
      return ret;
    }
  }, {
    key: "getChanges",
    value: function getChanges() {
      return Array.from(this.changes.values());
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      return this.changes.size === 0;
    }
  }, {
    key: "add",
    value: function add(address, change) {
      var value = change.value;

      if (value instanceof _SimpleRangeValue.SimpleRangeValue) {
        var _iterator2 = _createForOfIteratorHelper(value.effectiveAddressesFromData(address)),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var cellAddress = _step2.value;
            this.changes.delete("".concat(cellAddress.sheet, ",").concat(cellAddress.col, ",").concat(cellAddress.row));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      this.changes.set((0, _Cell.addressKey)(address), change);
    }
  }, {
    key: "addInterpreterValue",
    value: function addInterpreterValue(value, address, oldValue) {
      this.add(address, {
        address: address,
        value: value,
        oldValue: oldValue
      });
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new ContentChanges();
    }
  }]);

  return ContentChanges;
}();

exports.ContentChanges = ContentChanges;