"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

exports.__esModule = true;
exports.Transformer = void 0;

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.array.map.js");

var _Cell = require("../Cell");

var _parser = require("../parser");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var Transformer = /*#__PURE__*/function () {
  function Transformer() {
    _classCallCheck(this, Transformer);
  }

  _createClass(Transformer, [{
    key: "performEagerTransformations",
    value: function performEagerTransformations(graph, parser) {
      var _iterator = _createForOfIteratorHelper(graph.arrayFormulaNodes()),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var node = _step.value;

          var _this$transformSingle = this.transformSingleAst(node.getFormula(graph.lazilyTransformingAstService), node.getAddress(graph.lazilyTransformingAstService)),
              _this$transformSingle2 = _slicedToArray(_this$transformSingle, 2),
              newAst = _this$transformSingle2[0],
              newAddress = _this$transformSingle2[1];

          var cachedAst = parser.rememberNewAst(newAst);
          node.setFormula(cachedAst);
          node.setAddress(newAddress);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "transformSingleAst",
    value: function transformSingleAst(ast, address) {
      var newAst = this.transformAst(ast, address);
      var newAddress = this.fixNodeAddress(address);
      return [newAst, newAddress];
    }
  }, {
    key: "transformAst",
    value: function transformAst(ast, address) {
      var _this = this;

      switch (ast.type) {
        case _parser.AstNodeType.CELL_REFERENCE:
          {
            return this.transformCellReferenceAst(ast, address);
          }

        case _parser.AstNodeType.CELL_RANGE:
          {
            return this.transformCellRangeAst(ast, address);
          }

        case _parser.AstNodeType.COLUMN_RANGE:
          {
            return this.transformColumnRangeAst(ast, address);
          }

        case _parser.AstNodeType.ROW_RANGE:
          {
            return this.transformRowRangeAst(ast, address);
          }

        case _parser.AstNodeType.EMPTY:
        case _parser.AstNodeType.ERROR:
        case _parser.AstNodeType.NUMBER:
        case _parser.AstNodeType.NAMED_EXPRESSION:
        case _parser.AstNodeType.ERROR_WITH_RAW_INPUT:
        case _parser.AstNodeType.STRING:
          {
            return ast;
          }

        case _parser.AstNodeType.PERCENT_OP:
        case _parser.AstNodeType.MINUS_UNARY_OP:
        case _parser.AstNodeType.PLUS_UNARY_OP:
          {
            return Object.assign(Object.assign({}, ast), {
              value: this.transformAst(ast.value, address)
            });
          }

        case _parser.AstNodeType.FUNCTION_CALL:
          {
            return Object.assign(Object.assign({}, ast), {
              procedureName: ast.procedureName,
              args: ast.args.map(function (arg) {
                return _this.transformAst(arg, address);
              })
            });
          }

        case _parser.AstNodeType.PARENTHESIS:
          {
            return Object.assign(Object.assign({}, ast), {
              expression: this.transformAst(ast.expression, address)
            });
          }

        case _parser.AstNodeType.ARRAY:
          {
            return Object.assign(Object.assign({}, ast), {
              args: ast.args.map(function (row) {
                return row.map(function (val) {
                  return _this.transformAst(val, address);
                });
              })
            });
          }

        default:
          {
            return Object.assign(Object.assign({}, ast), {
              left: this.transformAst(ast.left, address),
              right: this.transformAst(ast.right, address)
            });
          }
      }
    }
  }, {
    key: "transformCellReferenceAst",
    value: function transformCellReferenceAst(ast, formulaAddress) {
      var newCellAddress = this.transformCellAddress(ast.reference, formulaAddress);

      if (newCellAddress instanceof _parser.CellAddress) {
        return Object.assign(Object.assign({}, ast), {
          reference: newCellAddress
        });
      } else if (newCellAddress === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformCellRangeAst",
    value: function transformCellRangeAst(ast, formulaAddress) {
      var newRange = this.transformCellRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformColumnRangeAst",
    value: function transformColumnRangeAst(ast, formulaAddress) {
      var newRange = this.transformColumnRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }, {
    key: "transformRowRangeAst",
    value: function transformRowRangeAst(ast, formulaAddress) {
      var newRange = this.transformRowRange(ast.start, ast.end, formulaAddress);

      if (Array.isArray(newRange)) {
        return Object.assign(Object.assign({}, ast), {
          start: newRange[0],
          end: newRange[1]
        });
      } else if (newRange === _Cell.ErrorType.REF) {
        return (0, _parser.buildCellErrorAst)(new _Cell.CellError(_Cell.ErrorType.REF));
      } else {
        return ast;
      }
    }
  }]);

  return Transformer;
}();

exports.Transformer = Transformer;