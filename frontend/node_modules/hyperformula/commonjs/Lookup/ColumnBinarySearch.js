"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

exports.__esModule = true;
exports.ColumnBinarySearch = void 0;

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.find-index.js");

require("core-js/modules/es.object.get-prototype-of.js");

var _ArithmeticHelper = require("../interpreter/ArithmeticHelper");

var _binarySearch = require("../interpreter/binarySearch");

var _InterpreterValue = require("../interpreter/InterpreterValue");

var _AdvancedFind2 = require("./AdvancedFind");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var ColumnBinarySearch = /*#__PURE__*/function (_AdvancedFind) {
  _inherits(ColumnBinarySearch, _AdvancedFind);

  var _super = _createSuper(ColumnBinarySearch);

  function ColumnBinarySearch(dependencyGraph, config) {
    var _this;

    _classCallCheck(this, ColumnBinarySearch);

    _this = _super.call(this, dependencyGraph);
    _this.dependencyGraph = dependencyGraph;
    _this.config = config;
    return _this;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars 


  _createClass(ColumnBinarySearch, [{
    key: "add",
    value: function add(value, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "remove",
    value: function remove(value, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "change",
    value: function change(oldValue, newValue, address) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "applyChanges",
    value: function applyChanges(contentChanges) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "addColumns",
    value: function addColumns(columnsSpan) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeColumns",
    value: function removeColumns(columnsSpan) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeSheet",
    value: function removeSheet(sheetId) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "moveValues",
    value: function moveValues(sourceRange, toRight, toBottom, toSheet) {} // eslint-disable-next-line @typescript-eslint/no-unused-vars

  }, {
    key: "removeValues",
    value: function removeValues(range) {}
  }, {
    key: "find",
    value: function find(key, rangeValue, sorted) {
      if (typeof key === 'string') {
        key = (0, _ArithmeticHelper.forceNormalizeString)(key);
      }

      var range = rangeValue.range;

      if (range === undefined) {
        return rangeValue.valuesFromTopLeftCorner().map(_InterpreterValue.getRawValue).map(function (arg) {
          return typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
        }).indexOf(key);
      } else if (!sorted) {
        return this.dependencyGraph.computeListOfValuesInRange(range).findIndex(function (arg) {
          arg = (0, _InterpreterValue.getRawValue)(arg);
          arg = typeof arg === 'string' ? (0, _ArithmeticHelper.forceNormalizeString)(arg) : arg;
          return arg === key;
        });
      } else {
        return (0, _binarySearch.rangeLowerBound)(range, key, this.dependencyGraph, 'row');
      }
    }
  }]);

  return ColumnBinarySearch;
}(_AdvancedFind2.AdvancedFind);

exports.ColumnBinarySearch = ColumnBinarySearch;