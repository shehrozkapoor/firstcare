"use strict";

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.regexp.exec.js");

exports.__esModule = true;
exports.configCheckIfParametersNotInConflict = configCheckIfParametersNotInConflict;
exports.configValueFromParam = configValueFromParam;
exports.configValueFromParamCheck = configValueFromParamCheck;
exports.validateArgToType = validateArgToType;
exports.validateNumberToBeAtLeast = validateNumberToBeAtLeast;
exports.validateNumberToBeAtMost = validateNumberToBeAtMost;

require("core-js/modules/es.array.includes.js");

require("core-js/modules/es.string.includes.js");

require("core-js/modules/es.array.join.js");

require("core-js/modules/es.array.map.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/web.dom-collections.for-each.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.array.sort.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

var _Config = require("./Config");

var _errors = require("./errors");

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function configValueFromParam(inputValue, expectedType, paramName) {
  if (typeof inputValue === 'undefined') {
    return _Config.Config.defaultConfig[paramName];
  } else if (typeof expectedType === 'string') {
    if (_typeof(inputValue) === expectedType) {
      return inputValue;
    } else {
      throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
    }
  } else {
    if (expectedType.includes(inputValue)) {
      return inputValue;
    } else {
      throw new _errors.ExpectedOneOfValuesError(expectedType.map(function (val) {
        return "'".concat(val, "'");
      }).join(' '), paramName);
    }
  }
}

function validateNumberToBeAtLeast(value, paramName, minimum) {
  if (value < minimum) {
    throw new _errors.ConfigValueTooSmallError(paramName, minimum);
  }
}

function validateNumberToBeAtMost(value, paramName, maximum) {
  if (value > maximum) {
    throw new _errors.ConfigValueTooBigError(paramName, maximum);
  }
} // eslint-disable-next-line @typescript-eslint/no-explicit-any


function configValueFromParamCheck(inputValue, typeCheck, expectedType, paramName) {
  if (typeCheck(inputValue)) {
    return inputValue;
  } else if (typeof inputValue === 'undefined') {
    return _Config.Config.defaultConfig[paramName];
  } else {
    throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
  }
}

function configCheckIfParametersNotInConflict() {
  var valuesMap = new Map();

  for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
    params[_key] = arguments[_key];
  }

  params.forEach(function (param) {
    var names = valuesMap.get(param.value) || [];
    names.push(param.name);
    valuesMap.set(param.value, names);
  });
  var duplicates = [];

  var _iterator = _createForOfIteratorHelper(valuesMap.values()),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var entry = _step.value;

      if (entry.length > 1) {
        duplicates.push(entry);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  if (duplicates.length > 0) {
    duplicates.forEach(function (entry) {
      return entry.sort();
    });
    var paramNames = duplicates.map(function (entry) {
      return "[".concat(entry, "]");
    }).join('; ');
    throw new Error("Config initialization failed. Parameters in conflict: ".concat(paramNames));
  }
}

function validateArgToType(inputValue, expectedType, paramName) {
  if (_typeof(inputValue) !== expectedType) {
    throw new _errors.ExpectedValueOfTypeError(expectedType, paramName);
  }
}