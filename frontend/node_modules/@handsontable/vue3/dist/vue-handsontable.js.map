{"version":3,"file":"vue-handsontable.js","sources":["../src/helpers.ts","../src/HotTable.vue","../src/HotTable.vue?vue&type=template&id=54bcc3fa&lang.js","../src/HotColumn.vue"],"sourcesContent":["import Handsontable from 'handsontable/base';\nimport { HotTableProps, VueProps } from './types';\n\nconst unassignedPropSymbol = Symbol('unassigned');\n\n/**\n * Message for the warning thrown if the Handsontable instance has been destroyed.\n */\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n/**\n * Check if at specified `key` there is any value for `object`.\n *\n * @param {object} object Object to search value at specyfic key.\n * @param {string} key String key to check.\n * @returns {boolean}\n */\nexport function hasOwnProperty(object: unknown, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Generate an object containing all the available Handsontable properties and plugin hooks.\n *\n * @param {string} source Source for the factory (either 'HotTable' or 'HotColumn').\n * @returns {object}\n */\nexport function propFactory(source: 'HotTable' | 'HotColumn'): VueProps<HotTableProps> {\n  const registeredHooks = Handsontable.hooks.getRegistered();\n  const propSchema: VueProps<HotTableProps> = {};\n\n  Object.assign(propSchema, Handsontable.DefaultSettings);\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const prop in propSchema) {\n    propSchema[prop] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  for (let i = 0; i < registeredHooks.length; i++) {\n    propSchema[registeredHooks[i]] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  propSchema.settings = {\n    default: unassignedPropSymbol\n  };\n\n  if (source === 'HotTable') {\n    propSchema.id = {\n      type: String,\n      default: `hot-${Math.random().toString(36).substring(5)}`\n    };\n  }\n\n  return propSchema;\n}\n\n/**\n * Filter out all of the unassigned props, and return only the one passed to the component.\n *\n * @param {object} props Object containing all the possible props.\n * @returns {object} Object containing only used props.\n */\nexport function filterPassedProps(props) {\n  const filteredProps: VueProps<HotTableProps> = {};\n  const columnSettingsProp = props.settings;\n\n  if (columnSettingsProp !== unassignedPropSymbol) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const propName in columnSettingsProp) {\n      if (hasOwnProperty(columnSettingsProp, propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\n        filteredProps[propName] = columnSettingsProp[propName];\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const propName in props) {\n    if (hasOwnProperty(props, propName) && propName !== 'settings' && props[propName] !== unassignedPropSymbol) {\n      filteredProps[propName] = props[propName];\n    }\n  }\n\n  return filteredProps;\n}\n\n/**\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\n *\n * @param {HotTableProps} props The props passed to the component.\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\n */\nexport function prepareSettings(props: HotTableProps, currentSettings?: Handsontable.GridSettings): HotTableProps {\n  const assignedProps: VueProps<HotTableProps> = filterPassedProps(props);\n  const hotSettingsInProps: Handsontable.GridSettings = props.settings ? props.settings : assignedProps;\n  const additionalHotSettingsInProps: Handsontable.GridSettings = props.settings ? assignedProps : null;\n  const newSettings: Handsontable.GridSettings = {};\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in hotSettingsInProps) {\n    if (\n      hasOwnProperty(hotSettingsInProps, key) &&\n      hotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = hotSettingsInProps[key];\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in additionalHotSettingsInProps) {\n    if (\n      hasOwnProperty(additionalHotSettingsInProps, key) &&\n      key !== 'id' &&\n      key !== 'settings' &&\n      additionalHotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data')\n        ? !simpleEqual(currentSettings[key], additionalHotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = additionalHotSettingsInProps[key];\n    }\n  }\n\n  return newSettings;\n}\n\n/**\n * Compare two objects using `JSON.stringify`.\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\n * important. It will return `false` for the same objects, if they're defined in a different order.\n *\n * @param {object} objectA First object to compare.\n * @param {object} objectB Second object to compare.\n * @returns {boolean} `true` if they're the same, `false` otherwise.\n */\nfunction simpleEqual(objectA, objectB) {\n  return JSON.stringify(objectA) === JSON.stringify(objectB);\n}\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport {\n  propFactory,\n  filterPassedProps\n} from './helpers';\n\nconst HotColumn = defineComponent({\n  name: 'HotColumn',\n  props: propFactory('HotColumn'),\n  inject: ['columnsCache'],\n  methods: {\n    /**\n     * Create the column settings based on the data provided to the `hot-column`\n     * component and it's child components.\n     */\n    createColumnSettings(): void {\n      const assignedProps = filterPassedProps(this.$props);\n      const columnSettings = { ...assignedProps };\n\n      if (assignedProps.renderer) {\n        columnSettings.renderer = assignedProps.renderer;\n      }\n\n      if (assignedProps.editor) {\n        columnSettings.editor = assignedProps.editor;\n      }\n\n      this.columnsCache.set(this, columnSettings);\n    }\n  },\n  mounted() {\n    this.createColumnSettings();\n  },\n  unmounted() {\n    this.columnsCache.delete(this);\n  },\n  render() {\n    return null;\n  }\n});\n\nexport default HotColumn;\nexport { HotColumn };\n</script>\n"],"names":["unassignedPropSymbol","Symbol","HOT_DESTROYED_WARNING","hasOwnProperty","object","key","Object","prototype","call","propFactory","source","registeredHooks","Handsontable","hooks","getRegistered","propSchema","assign","DefaultSettings","prop","i","length","settings","id","type","String","Math","random","toString","substring","filterPassedProps","props","filteredProps","columnSettingsProp","propName","prepareSettings","currentSettings","assignedProps","hotSettingsInProps","additionalHotSettingsInProps","newSettings","simpleEqual","objectA","objectB","JSON","stringify","HotTable","defineComponent","name","provide","columnsCache","watch","$props","handler","hotInstance","getSettings","data","isColumnModificationAllowed","countSourceCols","miscCache","currentSourceColumns","matchHotMappersSize","keys","updateSettings","render","deep","immediate","__hotInstance","columnSettings","Map","isDestroyed","console","warn","methods","hotInit","columns","markRaw","Core","$el","init","getSourceData","rowsToRemove","columnsToRemove","indexMapperRowCount","rowIndexMapper","getNumberOfIndexes","indexMapperColumnCount","r","push","columnIndexMapper","c","batch","removeIndexes","insertIndexes","getColumnSettings","Array","from","values","mounted","beforeUnmount","destroy","version","packageJson","_createElementBlock","_ctx","_renderSlot","HotColumn","inject","createColumnSettings","renderer","editor","set","unmounted"],"mappings":"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"}