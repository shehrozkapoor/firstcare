{"version":3,"file":"vue-handsontable.min.js","sources":["../src/helpers.ts","../src/HotTable.vue","../src/HotTable.vue?vue&type=template&id=54bcc3fa&lang.js","../src/HotColumn.vue"],"sourcesContent":["import Handsontable from 'handsontable/base';\nimport { HotTableProps, VueProps } from './types';\n\nconst unassignedPropSymbol = Symbol('unassigned');\n\n/**\n * Message for the warning thrown if the Handsontable instance has been destroyed.\n */\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n/**\n * Check if at specified `key` there is any value for `object`.\n *\n * @param {object} object Object to search value at specyfic key.\n * @param {string} key String key to check.\n * @returns {boolean}\n */\nexport function hasOwnProperty(object: unknown, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Generate an object containing all the available Handsontable properties and plugin hooks.\n *\n * @param {string} source Source for the factory (either 'HotTable' or 'HotColumn').\n * @returns {object}\n */\nexport function propFactory(source: 'HotTable' | 'HotColumn'): VueProps<HotTableProps> {\n  const registeredHooks = Handsontable.hooks.getRegistered();\n  const propSchema: VueProps<HotTableProps> = {};\n\n  Object.assign(propSchema, Handsontable.DefaultSettings);\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const prop in propSchema) {\n    propSchema[prop] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  for (let i = 0; i < registeredHooks.length; i++) {\n    propSchema[registeredHooks[i]] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  propSchema.settings = {\n    default: unassignedPropSymbol\n  };\n\n  if (source === 'HotTable') {\n    propSchema.id = {\n      type: String,\n      default: `hot-${Math.random().toString(36).substring(5)}`\n    };\n  }\n\n  return propSchema;\n}\n\n/**\n * Filter out all of the unassigned props, and return only the one passed to the component.\n *\n * @param {object} props Object containing all the possible props.\n * @returns {object} Object containing only used props.\n */\nexport function filterPassedProps(props) {\n  const filteredProps: VueProps<HotTableProps> = {};\n  const columnSettingsProp = props.settings;\n\n  if (columnSettingsProp !== unassignedPropSymbol) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const propName in columnSettingsProp) {\n      if (hasOwnProperty(columnSettingsProp, propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\n        filteredProps[propName] = columnSettingsProp[propName];\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const propName in props) {\n    if (hasOwnProperty(props, propName) && propName !== 'settings' && props[propName] !== unassignedPropSymbol) {\n      filteredProps[propName] = props[propName];\n    }\n  }\n\n  return filteredProps;\n}\n\n/**\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\n *\n * @param {HotTableProps} props The props passed to the component.\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\n */\nexport function prepareSettings(props: HotTableProps, currentSettings?: Handsontable.GridSettings): HotTableProps {\n  const assignedProps: VueProps<HotTableProps> = filterPassedProps(props);\n  const hotSettingsInProps: Handsontable.GridSettings = props.settings ? props.settings : assignedProps;\n  const additionalHotSettingsInProps: Handsontable.GridSettings = props.settings ? assignedProps : null;\n  const newSettings: Handsontable.GridSettings = {};\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in hotSettingsInProps) {\n    if (\n      hasOwnProperty(hotSettingsInProps, key) &&\n      hotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = hotSettingsInProps[key];\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in additionalHotSettingsInProps) {\n    if (\n      hasOwnProperty(additionalHotSettingsInProps, key) &&\n      key !== 'id' &&\n      key !== 'settings' &&\n      additionalHotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data')\n        ? !simpleEqual(currentSettings[key], additionalHotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = additionalHotSettingsInProps[key];\n    }\n  }\n\n  return newSettings;\n}\n\n/**\n * Compare two objects using `JSON.stringify`.\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\n * important. It will return `false` for the same objects, if they're defined in a different order.\n *\n * @param {object} objectA First object to compare.\n * @param {object} objectB Second object to compare.\n * @returns {boolean} `true` if they're the same, `false` otherwise.\n */\nfunction simpleEqual(objectA, objectB) {\n  return JSON.stringify(objectA) === JSON.stringify(objectB);\n}\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport {\n  propFactory,\n  filterPassedProps\n} from './helpers';\n\nconst HotColumn = defineComponent({\n  name: 'HotColumn',\n  props: propFactory('HotColumn'),\n  inject: ['columnsCache'],\n  methods: {\n    /**\n     * Create the column settings based on the data provided to the `hot-column`\n     * component and it's child components.\n     */\n    createColumnSettings(): void {\n      const assignedProps = filterPassedProps(this.$props);\n      const columnSettings = { ...assignedProps };\n\n      if (assignedProps.renderer) {\n        columnSettings.renderer = assignedProps.renderer;\n      }\n\n      if (assignedProps.editor) {\n        columnSettings.editor = assignedProps.editor;\n      }\n\n      this.columnsCache.set(this, columnSettings);\n    }\n  },\n  mounted() {\n    this.createColumnSettings();\n  },\n  unmounted() {\n    this.columnsCache.delete(this);\n  },\n  render() {\n    return null;\n  }\n});\n\nexport default HotColumn;\nexport { HotColumn };\n</script>\n"],"names":["unassignedPropSymbol","Symbol","hasOwnProperty","object","key","Object","prototype","call","propFactory","source","registeredHooks","Handsontable","hooks","getRegistered","propSchema","prop","assign","DefaultSettings","i","length","settings","id","type","String","Math","random","toString","substring","filterPassedProps","props","filteredProps","columnSettingsProp","propName","prepareSettings","currentSettings","assignedProps","hotSettingsInProps","additionalHotSettingsInProps","newSettings","simpleEqual","objectA","objectB","JSON","stringify","HotTable","defineComponent","name","provide","columnsCache","this","watch","$props","handler","hotInstance","getSettings","data","isColumnModificationAllowed","countSourceCols","miscCache","currentSourceColumns","matchHotMappersSize","keys","updateSettings","render","deep","immediate","__hotInstance","columnSettings","Map","isDestroyed","console","warn","methods","hotInit","columns","markRaw","Core","$el","init","getSourceData","rowsToRemove","columnsToRemove","indexMapperRowCount","rowIndexMapper","getNumberOfIndexes","indexMapperColumnCount","r","push","columnIndexMapper","c","batch","_this","removeIndexes","insertIndexes","getColumnSettings","Array","from","values","mounted","beforeUnmount","destroy","version","_createElementBlock","_ctx","_renderSlot","HotColumn","inject","createColumnSettings","renderer","editor","set","unmounted"],"mappings":"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"}