import { IsValidDropCallback, TreeState, TreeViewItem } from "./types";
import { PropType } from "vue";
declare const _default: import("vue").DefineComponent<{
    items: {
        type: PropType<TreeViewItem[]>;
        required: true;
        default: () => never[];
    };
    selectedItem: {
        type: PropType<TreeViewItem>;
    };
    checkedItems: {
        type: PropType<TreeViewItem[]>;
    };
    isCheckable: {
        type: BooleanConstructor;
    };
    hideGuideLines: {
        type: BooleanConstructor;
        default: boolean;
    };
    onDropValidator: {
        type: PropType<IsValidDropCallback>;
        default: () => void;
    };
    treeState: {
        type: PropType<TreeState>;
    };
    expandedTypes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    expandedIds: {
        type: PropType<string[]>;
        default: () => never[];
    };
    expandAll: {
        type: PropType<boolean>;
        default: boolean;
    };
}, {
    parent: import("vue").ComputedRef<TreeViewItem>;
    treeState: import("vue").Ref<TreeState | undefined>;
    addHoverClass: (event: DragEvent) => void;
    removeHoverClass: (event: DragEvent) => void;
    onDragNode: (item: TreeViewItem, event: DragEvent) => void;
    onDropNode: (dropHost: TreeViewItem, event: DragEvent, isDropValid: (item1: TreeViewItem, item2: TreeViewItem) => boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:selectedItem" | "update:checkedItems" | "onContextMenu" | "onSelect" | "onCheck")[], "update:selectedItem" | "update:checkedItems" | "onContextMenu" | "onSelect" | "onCheck", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    items?: unknown;
    selectedItem?: unknown;
    checkedItems?: unknown;
    isCheckable?: unknown;
    hideGuideLines?: unknown;
    onDropValidator?: unknown;
    treeState?: unknown;
    expandedTypes?: unknown;
    expandedIds?: unknown;
    expandAll?: unknown;
} & {
    items: TreeViewItem[];
    isCheckable: boolean;
    hideGuideLines: boolean;
    onDropValidator: IsValidDropCallback;
    expandedTypes: string[];
    expandedIds: string[];
    expandAll: boolean;
} & {
    selectedItem?: TreeViewItem | undefined;
    checkedItems?: TreeViewItem[] | undefined;
    treeState?: TreeState | undefined;
}> & {
    "onUpdate:selectedItem"?: ((...args: any[]) => any) | undefined;
    "onUpdate:checkedItems"?: ((...args: any[]) => any) | undefined;
    onOnContextMenu?: ((...args: any[]) => any) | undefined;
    onOnSelect?: ((...args: any[]) => any) | undefined;
    onOnCheck?: ((...args: any[]) => any) | undefined;
}, {
    items: TreeViewItem[];
    isCheckable: boolean;
    hideGuideLines: boolean;
    onDropValidator: IsValidDropCallback;
    expandedTypes: string[];
    expandedIds: string[];
    expandAll: boolean;
}>;
export default _default;
