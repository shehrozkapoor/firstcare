import { PropType } from "vue";
import { TreeState, TreeViewItem } from "./types";
declare const _default: import("vue").DefineComponent<{
    item: {
        type: PropType<TreeViewItem>;
        required: true;
    };
    isCheckable: {
        type: BooleanConstructor;
    };
    canRename: {
        type: BooleanConstructor;
    };
    selectedItem: {
        type: PropType<TreeViewItem>;
    };
    treeState: {
        type: PropType<TreeState>;
    };
}, {
    toggleExpand: () => void;
    chevron: import("vue").Ref<HTMLSpanElement | undefined>;
    isSelected: import("vue").ComputedRef<boolean>;
    updateCheckState: () => void;
    isRenaming: import("vue").Ref<boolean>;
    beginRenaming: () => void;
    finishRenaming: () => void;
    parent: import("vue").ComputedRef<TreeViewItem>;
    checkbox: import("vue").Ref<HTMLInputElement | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("on-rename" | "onContextMenu")[], "on-rename" | "onContextMenu", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    item?: unknown;
    isCheckable?: unknown;
    canRename?: unknown;
    selectedItem?: unknown;
    treeState?: unknown;
} & {
    item: TreeViewItem;
    isCheckable: boolean;
    canRename: boolean;
} & {
    selectedItem?: TreeViewItem | undefined;
    treeState?: TreeState | undefined;
}> & {
    "onOn-rename"?: ((...args: any[]) => any) | undefined;
    onOnContextMenu?: ((...args: any[]) => any) | undefined;
}, {
    isCheckable: boolean;
    canRename: boolean;
}>;
export default _default;
